<?xml version="1.0"?>
<doc>
    <assembly>
        <name>netTiers.Petshop.Services</name>
    </assembly>
    <members>
        <member name="T:netTiers.Petshop.Services.ProcessorState">
            <summary>
            ProcessorState enumeration.
            </summary>
        </member>
        <member name="F:netTiers.Petshop.Services.ProcessorState.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:netTiers.Petshop.Services.ProcessorState.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:netTiers.Petshop.Services.ProcessorState.Stopped">
            <summary>
            Stopped
            </summary>
        </member>
        <member name="F:netTiers.Petshop.Services.ProcessorState.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.IProcessor">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.IProcessor.Process">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:netTiers.Petshop.Services.IProcessor.ChangeProcessorState(netTiers.Petshop.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Services.IProcessor.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:netTiers.Petshop.Services.IProcessor.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.ProductService">
            <summary>
             An component type implementation of the 'Product' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:netTiers.Petshop.Services.ProductServiceBase">
            <summary>
             An object representation of the 'Product' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Product.cs file instead.
             All custom implementations should be done in the <see cref="T:netTiers.Petshop.Entities.Product"/> class.
             </remarks>
        </member>
        <member name="T:netTiers.Petshop.Services.ServiceBase`2">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.ServiceBaseCore`2">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.IComponentService">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Services.IComponentService.ProcessorList">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:netTiers.Petshop.Services.IComponentService.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:netTiers.Petshop.Services.IComponentService.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="E:netTiers.Petshop.Services.IComponentService.ProcessStarting">
            <summary>
            Event to indicate that a processor is about to begin.
            </summary>
        </member>
        <member name="E:netTiers.Petshop.Services.IComponentService.ProcessEnded">
            <summary>
            Event to indicate that a processor has just ended.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceBaseCore`2.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceBaseCore`2.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceBaseCore`2.OnProcessStarting(netTiers.Petshop.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceBaseCore`2.OnProcessEnded(netTiers.Petshop.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceBaseCore`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceBaseCore`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceBaseCore`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceBaseCore`2.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceBaseCore`2.BulkInsert(netTiers.Petshop.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceBaseCore`2.DeepLoad(`0,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[],netTiers.Petshop.Data.Bases.ChildEntityTypesList)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceBaseCore`2.DeepLoad(netTiers.Petshop.Entities.TList{`0},System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceBaseCore`2.DeepSave(`0,netTiers.Petshop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceBaseCore`2.DeepSave(`0,netTiers.Petshop.Data.DeepSaveType,System.Type[],System.Collections.Hashtable)">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep save functionality.
            </remarks>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceBaseCore`2.DeepSave(netTiers.Petshop.Entities.TList{`0},netTiers.Petshop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="P:netTiers.Petshop.Services.ServiceBaseCore`2.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:netTiers.Petshop.Services.ServiceBaseCore`2.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:netTiers.Petshop.Services.ServiceBaseCore`2.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:netTiers.Petshop.Services.ServiceBaseCore`2.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Services.ServiceBaseCore`2.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Services.ServiceBaseCore`2.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Services.ServiceBaseCore`2.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:netTiers.Petshop.Services.ServiceBaseCore`2.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:netTiers.Petshop.Services.ServiceBaseCore`2.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:netTiers.Petshop.Entities.Product"/> instance .
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.CreateProduct(System.Guid,System.String,System.String,System.Guid)">
            <summary>
             A simple factory method to create a new <see cref="T:netTiers.Petshop.Entities.Product"/> instance.
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="categoryId"></param>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.GetByCategoryId(System.Guid)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the FK_Product_Category key.
            	FK_Product_Category Description: 
            </summary>
            <param name="categoryId"></param>
            <returns>Returns a generic collection of Product objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.GetByCategoryId(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the FK_Product_Category key.
            	FK_Product_Category Description: 
            </summary>
            <param name="categoryId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:netTiers.Petshop.Entities.TList`1"/> of <c>Product</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.Get(netTiers.Petshop.Entities.ProductKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.GetById(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key PK_Product index.
            </summary>
            <param name="id"></param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Product"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.GetById(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key PK_Product index.
            </summary>
            <param name="id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Product"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:netTiers.Petshop.Entities.Product"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:netTiers.Petshop.Entities.Product"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:netTiers.Petshop.Entities.TList`1"/> </returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:netTiers.Petshop.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Product</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:netTiers.Petshop.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Product</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Product</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Product} of <c>Product</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.Insert(netTiers.Petshop.Entities.Product)">
            <summary>
            	public virtualmethod that Inserts a Product object into the datasource using a transaction.
            </summary>
            <param name="entity">Product object to Insert.</param>
            <remarks>After Inserting into the datasource, the Product object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Product entity = new Product();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.Insert(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Product})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Product</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Product</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Product.
             <code><![CDATA[
             TList<Product> list = new TList<Product>();
             Product entity = new Product();
             entity.StringProperty = "foo";
             Product entity2 = new Product();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.Update(netTiers.Petshop.Entities.Product)">
            <summary>
            	public virtualmethod that Updates a Product object into the datasource using a transaction.
            </summary>
            <param name="entity">Product object to Update.</param>
            <remarks>After Updateing into the datasource, the Product object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Product entity = ProductService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.Update(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Product})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Product</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Product</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Product.
             <code><![CDATA[
             TList<Product> list = new TList<Product>();
             Product entity = new Product();
             entity.StringProperty = "foo";
             Product entity2 = new Product();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.Save(netTiers.Petshop.Entities.Product)">
            <summary>
            	public virtualmethod that Saves a Product object into the datasource using a transaction.
            </summary>
            <param name="entity">Product object to Save.</param>
            <remarks>After Saveing into the datasource, the Product object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Product entity = ProductService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.Save(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Product})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Product</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Product</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Product.
             <code><![CDATA[
             TList<Product> list = new TList<Product>();
             Product entity = new Product();
             entity.StringProperty = "foo";
             Product entity2 = new Product();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.Delete(netTiers.Petshop.Entities.Product)">
            <summary>
            	public virtualmethod that Deletes a Product object into the datasource using a transaction.
            </summary>
            <param name="entity">Product object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Product object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Product entity = ProductService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.Delete(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Product})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Product</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Product</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Product.
             <code><![CDATA[
             TList<Product> list = new TList<Product>();
             Product entity = new Product();
             entity.StringProperty = "foo";
             Product entity2 = new Product();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.Delete(netTiers.Petshop.Entities.ProductKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.Delete(System.Guid,System.Byte[])">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Guid id
            </summary>
            <param name="id">Product pk id.</param>
            <param name="timestamp">The timestamp field used for concurrency check.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.DeepLoadById(System.Guid,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:netTiers.Petshop.Entities.Product"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <param name="id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Product Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Product"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.DeepLoad(netTiers.Petshop.Entities.Product)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Product Object</param>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.ProductServiceBase.DeepLoad(netTiers.Petshop.Entities.Product)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.DeepLoad(netTiers.Petshop.Entities.Product,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.ProductServiceBase.DeepLoad(netTiers.Petshop.Entities.Product)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Product Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.DeepLoad(netTiers.Petshop.Entities.Product,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:netTiers.Petshop.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:netTiers.Petshop.Entities.Product"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Product Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Product})">
            <summary>
            Deep Loads the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.ProductServiceBase.DeepLoad(netTiers.Petshop.Entities.Product)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:netTiers.Petshop.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Product},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.ProductServiceBase.DeepLoad(netTiers.Petshop.Entities.Product)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:netTiers.Petshop.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Product},System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:netTiers.Petshop.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:netTiers.Petshop.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:netTiers.Petshop.Entities.Product"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.DeepSave(netTiers.Petshop.Entities.Product)">
            <summary>
            public virtualDeep Saves the <see cref="T:netTiers.Petshop.Entities.Product"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Product Object</param>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.DeepSave(netTiers.Petshop.Entities.Product,netTiers.Petshop.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Product object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Product Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Product</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.DeepSave(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Product})">
            <summary>
            Deep Save the entire <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Product} Object</param>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductServiceBase.DeepSave(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Product},netTiers.Petshop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:netTiers.Petshop.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Product Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:netTiers.Petshop.Services.ProductServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.ProductService.#ctor">
            <summary>
            Initializes a new instance of the ProductService class.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.OrdersServiceBase">
            <summary>
             An object representation of the 'Orders' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Orders.cs file instead.
             All custom implementations should be done in the <see cref="T:netTiers.Petshop.Entities.Orders"/> class.
             </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:netTiers.Petshop.Entities.Orders"/> instance .
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.CreateOrders(System.Guid,System.DateTime,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Guid,System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.Guid,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:netTiers.Petshop.Entities.Orders"/> instance.
            </summary>
            <param name="accountId"></param>
            <param name="orderDate"></param>
            <param name="shipAddr1"></param>
            <param name="shipAddr2"></param>
            <param name="shipCity"></param>
            <param name="shipState"></param>
            <param name="shipZip"></param>
            <param name="shipCountry"></param>
            <param name="billAddr1"></param>
            <param name="billAddr2"></param>
            <param name="billCity"></param>
            <param name="billState"></param>
            <param name="billZip"></param>
            <param name="billCountry"></param>
            <param name="courierId"></param>
            <param name="totalPrice"></param>
            <param name="billToFirstName"></param>
            <param name="billToLastName"></param>
            <param name="shipToFirstName"></param>
            <param name="shipToLastName"></param>
            <param name="creditCardId"></param>
            <param name="locale"></param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.GetByAccountId(System.Guid)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the FK_Orders_Account key.
            	FK_Orders_Account Description: 
            </summary>
            <param name="accountId"></param>
            <returns>Returns a generic collection of Orders objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.GetByAccountId(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the FK_Orders_Account key.
            	FK_Orders_Account Description: 
            </summary>
            <param name="accountId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:netTiers.Petshop.Entities.TList`1"/> of <c>Orders</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.GetByCourierId(System.Guid)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the FK_Orders_Courier key.
            	FK_Orders_Courier Description: 
            </summary>
            <param name="courierId"></param>
            <returns>Returns a generic collection of Orders objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.GetByCourierId(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the FK_Orders_Courier key.
            	FK_Orders_Courier Description: 
            </summary>
            <param name="courierId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:netTiers.Petshop.Entities.TList`1"/> of <c>Orders</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.GetByCreditCardId(System.Guid)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the FK_Orders_CreditCard key.
            	FK_Orders_CreditCard Description: 
            </summary>
            <param name="creditCardId"></param>
            <returns>Returns a generic collection of Orders objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.GetByCreditCardId(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the FK_Orders_CreditCard key.
            	FK_Orders_CreditCard Description: 
            </summary>
            <param name="creditCardId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:netTiers.Petshop.Entities.TList`1"/> of <c>Orders</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.Get(netTiers.Petshop.Entities.OrdersKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.GetByOrderId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key PK__Orders__0CBAE877 index.
            </summary>
            <param name="orderId"></param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Orders"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.GetByOrderId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key PK__Orders__0CBAE877 index.
            </summary>
            <param name="orderId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Orders"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:netTiers.Petshop.Entities.Orders"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:netTiers.Petshop.Entities.Orders"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:netTiers.Petshop.Entities.TList`1"/> </returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:netTiers.Petshop.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Orders</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:netTiers.Petshop.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Orders</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Orders</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Orders} of <c>Orders</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.Insert(netTiers.Petshop.Entities.Orders)">
            <summary>
            	public virtualmethod that Inserts a Orders object into the datasource using a transaction.
            </summary>
            <param name="entity">Orders object to Insert.</param>
            <remarks>After Inserting into the datasource, the Orders object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Orders entity = new Orders();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	OrdersService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.Insert(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Orders})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Orders</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Orders</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Orders.
             <code><![CDATA[
             TList<Orders> list = new TList<Orders>();
             Orders entity = new Orders();
             entity.StringProperty = "foo";
             Orders entity2 = new Orders();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrdersService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.Update(netTiers.Petshop.Entities.Orders)">
            <summary>
            	public virtualmethod that Updates a Orders object into the datasource using a transaction.
            </summary>
            <param name="entity">Orders object to Update.</param>
            <remarks>After Updateing into the datasource, the Orders object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Orders entity = OrdersService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	OrdersService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.Update(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Orders})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Orders</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Orders</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Orders.
             <code><![CDATA[
             TList<Orders> list = new TList<Orders>();
             Orders entity = new Orders();
             entity.StringProperty = "foo";
             Orders entity2 = new Orders();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrdersService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.Save(netTiers.Petshop.Entities.Orders)">
            <summary>
            	public virtualmethod that Saves a Orders object into the datasource using a transaction.
            </summary>
            <param name="entity">Orders object to Save.</param>
            <remarks>After Saveing into the datasource, the Orders object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Orders entity = OrdersService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	OrdersService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.Save(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Orders})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Orders</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Orders</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Orders.
             <code><![CDATA[
             TList<Orders> list = new TList<Orders>();
             Orders entity = new Orders();
             entity.StringProperty = "foo";
             Orders entity2 = new Orders();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrdersService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.Delete(netTiers.Petshop.Entities.Orders)">
            <summary>
            	public virtualmethod that Deletes a Orders object into the datasource using a transaction.
            </summary>
            <param name="entity">Orders object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Orders object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Orders entity = OrdersService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	OrdersService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.Delete(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Orders})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Orders</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Orders</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Orders.
             <code><![CDATA[
             TList<Orders> list = new TList<Orders>();
             Orders entity = new Orders();
             entity.StringProperty = "foo";
             Orders entity2 = new Orders();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrdersService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.Delete(netTiers.Petshop.Entities.OrdersKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.Delete(System.Int32,System.Byte[])">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 orderId
            </summary>
            <param name="orderId">Orders pk id.</param>
            <param name="timestamp">The timestamp field used for concurrency check.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.DeepLoadByOrderId(System.Int32,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:netTiers.Petshop.Entities.Orders"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <param name="orderId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Orders Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Orders"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.DeepLoad(netTiers.Petshop.Entities.Orders)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Orders Object</param>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.OrdersServiceBase.DeepLoad(netTiers.Petshop.Entities.Orders)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.DeepLoad(netTiers.Petshop.Entities.Orders,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.OrdersServiceBase.DeepLoad(netTiers.Petshop.Entities.Orders)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Orders Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.DeepLoad(netTiers.Petshop.Entities.Orders,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:netTiers.Petshop.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:netTiers.Petshop.Entities.Orders"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Orders Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Orders})">
            <summary>
            Deep Loads the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.OrdersServiceBase.DeepLoad(netTiers.Petshop.Entities.Orders)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:netTiers.Petshop.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Orders},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.OrdersServiceBase.DeepLoad(netTiers.Petshop.Entities.Orders)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:netTiers.Petshop.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Orders},System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:netTiers.Petshop.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:netTiers.Petshop.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:netTiers.Petshop.Entities.Orders"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.DeepSave(netTiers.Petshop.Entities.Orders)">
            <summary>
            public virtualDeep Saves the <see cref="T:netTiers.Petshop.Entities.Orders"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Orders Object</param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.DeepSave(netTiers.Petshop.Entities.Orders,netTiers.Petshop.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Orders object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Orders Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Orders</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.DeepSave(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Orders})">
            <summary>
            Deep Save the entire <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Orders} Object</param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersServiceBase.DeepSave(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Orders},netTiers.Petshop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:netTiers.Petshop.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Orders Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:netTiers.Petshop.Services.OrdersServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.InventoryService">
            <summary>
             An component type implementation of the 'Inventory' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:netTiers.Petshop.Services.InventoryServiceBase">
            <summary>
             An object representation of the 'Inventory' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Inventory.cs file instead.
             All custom implementations should be done in the <see cref="T:netTiers.Petshop.Entities.Inventory"/> class.
             </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:netTiers.Petshop.Entities.Inventory"/> instance .
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.CreateInventory(System.Guid,System.Guid,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:netTiers.Petshop.Entities.Inventory"/> instance.
            </summary>
            <param name="itemId"></param>
            <param name="suppId"></param>
            <param name="qty"></param>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.GetByItemId(System.Guid)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the FK_Inventory_Item key.
            	FK_Inventory_Item Description: 
            </summary>
            <param name="itemId"></param>
            <returns>Returns a generic collection of Inventory objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.GetByItemId(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the FK_Inventory_Item key.
            	FK_Inventory_Item Description: 
            </summary>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:netTiers.Petshop.Entities.TList`1"/> of <c>Inventory</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.GetBySuppId(System.Guid)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the FK_Inventory_Supplier key.
            	FK_Inventory_Supplier Description: 
            </summary>
            <param name="suppId"></param>
            <returns>Returns a generic collection of Inventory objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.GetBySuppId(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the FK_Inventory_Supplier key.
            	FK_Inventory_Supplier Description: 
            </summary>
            <param name="suppId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:netTiers.Petshop.Entities.TList`1"/> of <c>Inventory</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.Get(netTiers.Petshop.Entities.InventoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.GetByItemIdSuppId(System.Guid,System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key PK_Inventory index.
            </summary>
            <param name="itemId"></param>
            <param name="suppId"></param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Inventory"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.GetByItemIdSuppId(System.Guid,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key PK_Inventory index.
            </summary>
            <param name="itemId"></param>
            <param name="suppId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Inventory"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:netTiers.Petshop.Entities.Inventory"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:netTiers.Petshop.Entities.Inventory"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:netTiers.Petshop.Entities.TList`1"/> </returns>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:netTiers.Petshop.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Inventory</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:netTiers.Petshop.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Inventory</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Inventory</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Inventory} of <c>Inventory</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.Insert(netTiers.Petshop.Entities.Inventory)">
            <summary>
            	public virtualmethod that Inserts a Inventory object into the datasource using a transaction.
            </summary>
            <param name="entity">Inventory object to Insert.</param>
            <remarks>After Inserting into the datasource, the Inventory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Inventory entity = new Inventory();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	InventoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.Insert(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Inventory})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Inventory</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Inventory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Inventory.
             <code><![CDATA[
             TList<Inventory> list = new TList<Inventory>();
             Inventory entity = new Inventory();
             entity.StringProperty = "foo";
             Inventory entity2 = new Inventory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	InventoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.Update(netTiers.Petshop.Entities.Inventory)">
            <summary>
            	public virtualmethod that Updates a Inventory object into the datasource using a transaction.
            </summary>
            <param name="entity">Inventory object to Update.</param>
            <remarks>After Updateing into the datasource, the Inventory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Inventory entity = InventoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	InventoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.Update(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Inventory})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Inventory</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Inventory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Inventory.
             <code><![CDATA[
             TList<Inventory> list = new TList<Inventory>();
             Inventory entity = new Inventory();
             entity.StringProperty = "foo";
             Inventory entity2 = new Inventory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	InventoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.Save(netTiers.Petshop.Entities.Inventory)">
            <summary>
            	public virtualmethod that Saves a Inventory object into the datasource using a transaction.
            </summary>
            <param name="entity">Inventory object to Save.</param>
            <remarks>After Saveing into the datasource, the Inventory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Inventory entity = InventoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	InventoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.Save(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Inventory})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Inventory</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Inventory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Inventory.
             <code><![CDATA[
             TList<Inventory> list = new TList<Inventory>();
             Inventory entity = new Inventory();
             entity.StringProperty = "foo";
             Inventory entity2 = new Inventory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	InventoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.Delete(netTiers.Petshop.Entities.Inventory)">
            <summary>
            	public virtualmethod that Deletes a Inventory object into the datasource using a transaction.
            </summary>
            <param name="entity">Inventory object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Inventory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Inventory entity = InventoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	InventoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.Delete(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Inventory})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Inventory</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Inventory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Inventory.
             <code><![CDATA[
             TList<Inventory> list = new TList<Inventory>();
             Inventory entity = new Inventory();
             entity.StringProperty = "foo";
             Inventory entity2 = new Inventory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	InventoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.Delete(netTiers.Petshop.Entities.InventoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.Delete(System.Guid,System.Guid,System.Byte[])">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Guid itemId, System.Guid suppId
            </summary>
            <param name="itemId">Inventory pk id.</param>
            <param name="suppId">Inventory pk id.</param>
            <param name="timestamp">The timestamp field used for concurrency check.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.GetMaxSupplier(System.Nullable{System.Guid})">
            <summary>
            This method wrap the 'CSP_Inventory_GetMaxSupplier' stored procedure. 
            </summary>
            <param name="itemId"> A <c>System.Guid?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:netTiers.Petshop.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.GetMaxSupplier(System.Nullable{System.Guid},System.Int32,System.Int32)">
            <summary>
            This method wrap the 'CSP_Inventory_GetMaxSupplier' stored procedure. 
            </summary>
            <param name="itemId"> A <c>System.Guid?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:netTiers.Petshop.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.DeepLoadByItemIdSuppId(System.Guid,System.Guid,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:netTiers.Petshop.Entities.Inventory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <param name="itemId"></param>
            <param name="suppId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Inventory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Inventory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.DeepLoad(netTiers.Petshop.Entities.Inventory)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Inventory Object</param>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.InventoryServiceBase.DeepLoad(netTiers.Petshop.Entities.Inventory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.DeepLoad(netTiers.Petshop.Entities.Inventory,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.InventoryServiceBase.DeepLoad(netTiers.Petshop.Entities.Inventory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Inventory Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.DeepLoad(netTiers.Petshop.Entities.Inventory,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:netTiers.Petshop.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:netTiers.Petshop.Entities.Inventory"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Inventory Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Inventory})">
            <summary>
            Deep Loads the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.InventoryServiceBase.DeepLoad(netTiers.Petshop.Entities.Inventory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:netTiers.Petshop.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Inventory},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.InventoryServiceBase.DeepLoad(netTiers.Petshop.Entities.Inventory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:netTiers.Petshop.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Inventory},System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:netTiers.Petshop.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:netTiers.Petshop.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:netTiers.Petshop.Entities.Inventory"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.DeepSave(netTiers.Petshop.Entities.Inventory)">
            <summary>
            public virtualDeep Saves the <see cref="T:netTiers.Petshop.Entities.Inventory"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Inventory Object</param>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.DeepSave(netTiers.Petshop.Entities.Inventory,netTiers.Petshop.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Inventory object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Inventory Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Inventory</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.DeepSave(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Inventory})">
            <summary>
            Deep Save the entire <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Inventory} Object</param>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryServiceBase.DeepSave(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Inventory},netTiers.Petshop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:netTiers.Petshop.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Inventory Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:netTiers.Petshop.Services.InventoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.InventoryService.#ctor">
            <summary>
            Initializes a new instance of the InventoryService class.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.ConnectionScope">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.ConnectionScope.#ctor">
            <summary>
            Initializes a new instance of the ConnectionScope class.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.ConnectionScope.NewThread(System.Threading.ThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:netTiers.Petshop.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ConnectionScope.NewThread(System.Threading.ParameterizedThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:netTiers.Petshop.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ConnectionScope.Copy(netTiers.Petshop.Services.ConnectionScope)">
            <summary>
            Copies the values from the specified <paramref name="scope"/> object
            to the <see cref="T:netTiers.Petshop.Services.ConnectionScope"/> used by the current thread.
            </summary>
            <param name="scope">A <see cref="T:netTiers.Petshop.Services.ConnectionScope"/> object.</param>
        </member>
        <member name="M:netTiers.Petshop.Services.ConnectionScope.ValidateOrCreateTransaction">
            <summary>
            Validates an existing <c cref="P:netTiers.Petshop.Services.ConnectionScope.TransactionManager"/> if one exists,
            otherwise creates a new <c cref="P:netTiers.Petshop.Services.ConnectionScope.TransactionManager"/> to use.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.ConnectionScope.ValidateOrCreateTransaction(System.Boolean)">
            <summary>
            Validates an existing <c cref="P:netTiers.Petshop.Services.ConnectionScope.TransactionManager"/> if one exists,
            otherwise creates a new <c cref="P:netTiers.Petshop.Services.ConnectionScope.TransactionManager"/> to use.
            </summary>
            <param name="createTransaction">determines whether to create a new transaction</param>
        </member>
        <member name="M:netTiers.Petshop.Services.ConnectionScope.CreateTransaction">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.ConnectionScope.CreateTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>
            with the specified <c cref="T:System.Data.IsolationLevel"/>.
            </summary>
            <param name="level">Determines which <c cref="T:System.Data.IsolationLevel"/> to use for the transaction.</param>
        </member>
        <member name="F:netTiers.Petshop.Services.ConnectionScope.connectionStringKey">
            <summary>
            The ConnectionStringKey member variable.
            </summary>
        </member>
        <member name="F:netTiers.Petshop.Services.ConnectionScope.dynamicConnectionString">
            <summary>
            The DynamicConnectionString member variable.
            </summary>
        </member>
        <member name="F:netTiers.Petshop.Services.ConnectionScope.transactionManager">
            <summary>
            The TransactionManager member variable.
            </summary>
        </member>
        <member name="F:netTiers.Petshop.Services.ConnectionScope.dataProvider">
            <summary>
            The NetTiersProvider member variable.
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Services.ConnectionScope.Current">
            <summary>
            Gets a reference to the ConnectionScope object for the current thread.
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Services.ConnectionScope.ConnectionStringKey">
            <summary>
            Gets or sets the ConnectionStringKey property.
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Services.ConnectionScope.DynamicConnectionString">
            <summary>
            Gets or sets the DynamicConnectionString property.
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Services.ConnectionScope.TransactionManager">
            <summary>
            Gets or sets the TransactionManager property.
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Services.ConnectionScope.DataProvider">
             <summary>
             Gets or Sets the Current DataProvider property of the <c>ConnectionScope</c> Object.
             </summary>
             <remarks>
             To use a dynamic connection, you must set both the 
             DynamicConnectionString and a unique ConnectionStringKey properties;
            </remarks>
        </member>
        <member name="P:netTiers.Petshop.Services.ConnectionScope.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.IProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.IProcessorResult.AddBrokenRulesList(System.Type,netTiers.Petshop.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Services.IProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:netTiers.Petshop.Services.IProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:netTiers.Petshop.Services.IProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.ItemServiceBase">
            <summary>
             An object representation of the 'Item' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Item.cs file instead.
             All custom implementations should be done in the <see cref="T:netTiers.Petshop.Entities.Item"/> class.
             </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:netTiers.Petshop.Entities.Item"/> instance .
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.CreateItem(System.Guid,System.String,System.String,System.Nullable{System.Double},System.String,System.String,System.Guid)">
            <summary>
             A simple factory method to create a new <see cref="T:netTiers.Petshop.Entities.Item"/> instance.
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="price"></param>
            <param name="currency"></param>
            <param name="photo"></param>
            <param name="productId"></param>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.GetByProductId(System.Guid)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the FK_Item_Product key.
            	FK_Item_Product Description: 
            </summary>
            <param name="productId"></param>
            <returns>Returns a generic collection of Item objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.GetByProductId(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the FK_Item_Product key.
            	FK_Item_Product Description: 
            </summary>
            <param name="productId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:netTiers.Petshop.Entities.TList`1"/> of <c>Item</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.Get(netTiers.Petshop.Entities.ItemKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.GetById(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key PK_Item index.
            </summary>
            <param name="id"></param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Item"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.GetById(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key PK_Item index.
            </summary>
            <param name="id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Item"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:netTiers.Petshop.Entities.Item"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:netTiers.Petshop.Entities.Item"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:netTiers.Petshop.Entities.TList`1"/> </returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:netTiers.Petshop.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Item</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:netTiers.Petshop.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Item</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Item</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Item} of <c>Item</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.Insert(netTiers.Petshop.Entities.Item)">
            <summary>
            	public virtualmethod that Inserts a Item object into the datasource using a transaction.
            </summary>
            <param name="entity">Item object to Insert.</param>
            <remarks>After Inserting into the datasource, the Item object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Item entity = new Item();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ItemService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.Insert(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Item})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Item</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Item</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Item.
             <code><![CDATA[
             TList<Item> list = new TList<Item>();
             Item entity = new Item();
             entity.StringProperty = "foo";
             Item entity2 = new Item();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.Update(netTiers.Petshop.Entities.Item)">
            <summary>
            	public virtualmethod that Updates a Item object into the datasource using a transaction.
            </summary>
            <param name="entity">Item object to Update.</param>
            <remarks>After Updateing into the datasource, the Item object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Item entity = ItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ItemService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.Update(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Item})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Item</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Item</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Item.
             <code><![CDATA[
             TList<Item> list = new TList<Item>();
             Item entity = new Item();
             entity.StringProperty = "foo";
             Item entity2 = new Item();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.Save(netTiers.Petshop.Entities.Item)">
            <summary>
            	public virtualmethod that Saves a Item object into the datasource using a transaction.
            </summary>
            <param name="entity">Item object to Save.</param>
            <remarks>After Saveing into the datasource, the Item object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Item entity = ItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ItemService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.Save(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Item})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Item</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Item</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Item.
             <code><![CDATA[
             TList<Item> list = new TList<Item>();
             Item entity = new Item();
             entity.StringProperty = "foo";
             Item entity2 = new Item();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.Delete(netTiers.Petshop.Entities.Item)">
            <summary>
            	public virtualmethod that Deletes a Item object into the datasource using a transaction.
            </summary>
            <param name="entity">Item object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Item object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Item entity = ItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ItemService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.Delete(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Item})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Item</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Item</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Item.
             <code><![CDATA[
             TList<Item> list = new TList<Item>();
             Item entity = new Item();
             entity.StringProperty = "foo";
             Item entity2 = new Item();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.Delete(netTiers.Petshop.Entities.ItemKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.Delete(System.Guid,System.Byte[])">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Guid id
            </summary>
            <param name="id">Item pk id.</param>
            <param name="timestamp">The timestamp field used for concurrency check.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.GetBySuppIdFromInventory(System.Guid)">
            <summary>
            	Gets Item objects from the datasource by SuppId in the
            	Inventory table. Table Item is related to table Supplier
            	through the (M:N) relationship defined in the Inventory table.
            </summary>
            <param name="suppId"></param>
            <returns>Returns a typed collection of Item objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.GetBySuppIdFromInventory(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Item objects from the datasource by SuppId in the
            	Inventory table. Table Item is related to table Supplier
            	through the (M:N) relationship defined in the Inventory table.
            </summary>
            <param name="suppId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Item objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.DeepLoadById(System.Guid,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:netTiers.Petshop.Entities.Item"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <param name="id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Item Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Item"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.DeepLoad(netTiers.Petshop.Entities.Item)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Item Object</param>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.ItemServiceBase.DeepLoad(netTiers.Petshop.Entities.Item)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.DeepLoad(netTiers.Petshop.Entities.Item,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.ItemServiceBase.DeepLoad(netTiers.Petshop.Entities.Item)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Item Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.DeepLoad(netTiers.Petshop.Entities.Item,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:netTiers.Petshop.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:netTiers.Petshop.Entities.Item"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Item Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Item})">
            <summary>
            Deep Loads the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.ItemServiceBase.DeepLoad(netTiers.Petshop.Entities.Item)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:netTiers.Petshop.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Item},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.ItemServiceBase.DeepLoad(netTiers.Petshop.Entities.Item)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:netTiers.Petshop.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Item},System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:netTiers.Petshop.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:netTiers.Petshop.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:netTiers.Petshop.Entities.Item"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.DeepSave(netTiers.Petshop.Entities.Item)">
            <summary>
            public virtualDeep Saves the <see cref="T:netTiers.Petshop.Entities.Item"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Item Object</param>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.DeepSave(netTiers.Petshop.Entities.Item,netTiers.Petshop.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Item object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Item Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Item</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.DeepSave(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Item})">
            <summary>
            Deep Save the entire <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Item} Object</param>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemServiceBase.DeepSave(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Item},netTiers.Petshop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:netTiers.Petshop.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Item Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:netTiers.Petshop.Services.ItemServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.CreditCardServiceBase">
            <summary>
             An object representation of the 'CreditCard' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the CreditCard.cs file instead.
             All custom implementations should be done in the <see cref="T:netTiers.Petshop.Entities.CreditCard"/> class.
             </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:netTiers.Petshop.Entities.CreditCard"/> instance .
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.CreateCreditCard(System.Guid,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:netTiers.Petshop.Entities.CreditCard"/> instance.
            </summary>
            <param name="id"></param>
            <param name="number"></param>
            <param name="cardType"></param>
            <param name="expiryMonth"></param>
            <param name="expiryYear"></param>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.Get(netTiers.Petshop.Entities.CreditCardKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.GetById(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key PK_CreditCard index.
            </summary>
            <param name="id"></param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.CreditCard"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.GetById(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key PK_CreditCard index.
            </summary>
            <param name="id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.CreditCard"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:netTiers.Petshop.Entities.CreditCard"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:netTiers.Petshop.Entities.CreditCard"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:netTiers.Petshop.Entities.TList`1"/> </returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:netTiers.Petshop.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CreditCard</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:netTiers.Petshop.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CreditCard</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CreditCard</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{CreditCard} of <c>CreditCard</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.Insert(netTiers.Petshop.Entities.CreditCard)">
            <summary>
            	public virtualmethod that Inserts a CreditCard object into the datasource using a transaction.
            </summary>
            <param name="entity">CreditCard object to Insert.</param>
            <remarks>After Inserting into the datasource, the CreditCard object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            CreditCard entity = new CreditCard();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CreditCardService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.Insert(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.CreditCard})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CreditCard</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>CreditCard</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of CreditCard.
             <code><![CDATA[
             TList<CreditCard> list = new TList<CreditCard>();
             CreditCard entity = new CreditCard();
             entity.StringProperty = "foo";
             CreditCard entity2 = new CreditCard();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CreditCardService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.Update(netTiers.Petshop.Entities.CreditCard)">
            <summary>
            	public virtualmethod that Updates a CreditCard object into the datasource using a transaction.
            </summary>
            <param name="entity">CreditCard object to Update.</param>
            <remarks>After Updateing into the datasource, the CreditCard object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            CreditCard entity = CreditCardService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CreditCardService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.Update(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.CreditCard})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CreditCard</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>CreditCard</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of CreditCard.
             <code><![CDATA[
             TList<CreditCard> list = new TList<CreditCard>();
             CreditCard entity = new CreditCard();
             entity.StringProperty = "foo";
             CreditCard entity2 = new CreditCard();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CreditCardService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.Save(netTiers.Petshop.Entities.CreditCard)">
            <summary>
            	public virtualmethod that Saves a CreditCard object into the datasource using a transaction.
            </summary>
            <param name="entity">CreditCard object to Save.</param>
            <remarks>After Saveing into the datasource, the CreditCard object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            CreditCard entity = CreditCardService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CreditCardService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.Save(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.CreditCard})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CreditCard</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>CreditCard</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of CreditCard.
             <code><![CDATA[
             TList<CreditCard> list = new TList<CreditCard>();
             CreditCard entity = new CreditCard();
             entity.StringProperty = "foo";
             CreditCard entity2 = new CreditCard();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CreditCardService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.Delete(netTiers.Petshop.Entities.CreditCard)">
            <summary>
            	public virtualmethod that Deletes a CreditCard object into the datasource using a transaction.
            </summary>
            <param name="entity">CreditCard object to Delete.</param>
            <remarks>After Deleteing into the datasource, the CreditCard object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            CreditCard entity = CreditCardService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CreditCardService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.Delete(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.CreditCard})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CreditCard</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>CreditCard</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of CreditCard.
             <code><![CDATA[
             TList<CreditCard> list = new TList<CreditCard>();
             CreditCard entity = new CreditCard();
             entity.StringProperty = "foo";
             CreditCard entity2 = new CreditCard();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CreditCardService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.Delete(netTiers.Petshop.Entities.CreditCardKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.Delete(System.Guid,System.Byte[])">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Guid id
            </summary>
            <param name="id">CreditCard pk id.</param>
            <param name="timestamp">The timestamp field used for concurrency check.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.DeepLoadById(System.Guid,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:netTiers.Petshop.Entities.CreditCard"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <param name="id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CreditCard Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.CreditCard"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.DeepLoad(netTiers.Petshop.Entities.CreditCard)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">CreditCard Object</param>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.CreditCardServiceBase.DeepLoad(netTiers.Petshop.Entities.CreditCard)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.DeepLoad(netTiers.Petshop.Entities.CreditCard,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.CreditCardServiceBase.DeepLoad(netTiers.Petshop.Entities.CreditCard)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">CreditCard Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.DeepLoad(netTiers.Petshop.Entities.CreditCard,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:netTiers.Petshop.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:netTiers.Petshop.Entities.CreditCard"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CreditCard Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.CreditCard})">
            <summary>
            Deep Loads the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.CreditCardServiceBase.DeepLoad(netTiers.Petshop.Entities.CreditCard)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:netTiers.Petshop.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.CreditCard},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.CreditCardServiceBase.DeepLoad(netTiers.Petshop.Entities.CreditCard)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:netTiers.Petshop.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.CreditCard},System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:netTiers.Petshop.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:netTiers.Petshop.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:netTiers.Petshop.Entities.CreditCard"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.DeepSave(netTiers.Petshop.Entities.CreditCard)">
            <summary>
            public virtualDeep Saves the <see cref="T:netTiers.Petshop.Entities.CreditCard"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">CreditCard Object</param>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.DeepSave(netTiers.Petshop.Entities.CreditCard,netTiers.Petshop.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the CreditCard object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">CreditCard Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>CreditCard</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.DeepSave(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.CreditCard})">
            <summary>
            Deep Save the entire <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{CreditCard} Object</param>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardServiceBase.DeepSave(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.CreditCard},netTiers.Petshop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:netTiers.Petshop.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CreditCard Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:netTiers.Petshop.Services.CreditCardServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.AccountServiceBase">
            <summary>
             An object representation of the 'Account' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Account.cs file instead.
             All custom implementations should be done in the <see cref="T:netTiers.Petshop.Entities.Account"/> class.
             </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:netTiers.Petshop.Entities.Account"/> instance .
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.CreateAccount(System.Guid,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
             A simple factory method to create a new <see cref="T:netTiers.Petshop.Entities.Account"/> instance.
            </summary>
            <param name="id"></param>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <param name="streetAddress"></param>
            <param name="postalCode"></param>
            <param name="city"></param>
            <param name="stateOrProvince"></param>
            <param name="country"></param>
            <param name="telephoneNumber"></param>
            <param name="email"></param>
            <param name="login"></param>
            <param name="password"></param>
            <param name="iWantMyList"></param>
            <param name="iWantPetTips"></param>
            <param name="favoriteLanguage"></param>
            <param name="creditCardId"></param>
            <param name="favoriteCategoryId"></param>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.GetByFavoriteCategoryId(System.Nullable{System.Guid})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the FK_Account_Category key.
            	FK_Account_Category Description: 
            </summary>
            <param name="favoriteCategoryId"></param>
            <returns>Returns a generic collection of Account objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.GetByFavoriteCategoryId(System.Nullable{System.Guid},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the FK_Account_Category key.
            	FK_Account_Category Description: 
            </summary>
            <param name="favoriteCategoryId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:netTiers.Petshop.Entities.TList`1"/> of <c>Account</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.GetByCreditCardId(System.Nullable{System.Guid})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the FK_Account_CreditCard key.
            	FK_Account_CreditCard Description: 
            </summary>
            <param name="creditCardId"></param>
            <returns>Returns a generic collection of Account objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.GetByCreditCardId(System.Nullable{System.Guid},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the FK_Account_CreditCard key.
            	FK_Account_CreditCard Description: 
            </summary>
            <param name="creditCardId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:netTiers.Petshop.Entities.TList`1"/> of <c>Account</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.Get(netTiers.Petshop.Entities.AccountKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.GetById(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key PK_Account index.
            </summary>
            <param name="id"></param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Account"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.GetById(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key PK_Account index.
            </summary>
            <param name="id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Account"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.GetByLogin(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key IX_Account index.
            </summary>
            <param name="login"></param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Account"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.GetByLogin(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key IX_Account index.
            </summary>
            <param name="login"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Account"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.GetByLastName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key IX_Account_LastName index.
            </summary>
            <param name="lastName"></param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.GetByLastName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key IX_Account_LastName index.
            </summary>
            <param name="lastName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:netTiers.Petshop.Entities.Account"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:netTiers.Petshop.Entities.Account"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:netTiers.Petshop.Entities.TList`1"/> </returns>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:netTiers.Petshop.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Account</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:netTiers.Petshop.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Account</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Account</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Account} of <c>Account</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.Insert(netTiers.Petshop.Entities.Account)">
            <summary>
            	public virtualmethod that Inserts a Account object into the datasource using a transaction.
            </summary>
            <param name="entity">Account object to Insert.</param>
            <remarks>After Inserting into the datasource, the Account object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Account entity = new Account();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AccountService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.Insert(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Account})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Account</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Account</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Account.
             <code><![CDATA[
             TList<Account> list = new TList<Account>();
             Account entity = new Account();
             entity.StringProperty = "foo";
             Account entity2 = new Account();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccountService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.Update(netTiers.Petshop.Entities.Account)">
            <summary>
            	public virtualmethod that Updates a Account object into the datasource using a transaction.
            </summary>
            <param name="entity">Account object to Update.</param>
            <remarks>After Updateing into the datasource, the Account object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Account entity = AccountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AccountService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.Update(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Account})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Account</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Account</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Account.
             <code><![CDATA[
             TList<Account> list = new TList<Account>();
             Account entity = new Account();
             entity.StringProperty = "foo";
             Account entity2 = new Account();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccountService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.Save(netTiers.Petshop.Entities.Account)">
            <summary>
            	public virtualmethod that Saves a Account object into the datasource using a transaction.
            </summary>
            <param name="entity">Account object to Save.</param>
            <remarks>After Saveing into the datasource, the Account object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Account entity = AccountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AccountService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.Save(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Account})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Account</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Account</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Account.
             <code><![CDATA[
             TList<Account> list = new TList<Account>();
             Account entity = new Account();
             entity.StringProperty = "foo";
             Account entity2 = new Account();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccountService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.Delete(netTiers.Petshop.Entities.Account)">
            <summary>
            	public virtualmethod that Deletes a Account object into the datasource using a transaction.
            </summary>
            <param name="entity">Account object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Account object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Account entity = AccountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AccountService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.Delete(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Account})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Account</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Account</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Account.
             <code><![CDATA[
             TList<Account> list = new TList<Account>();
             Account entity = new Account();
             entity.StringProperty = "foo";
             Account entity2 = new Account();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccountService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.Delete(netTiers.Petshop.Entities.AccountKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.Delete(System.Guid,System.Byte[])">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Guid id
            </summary>
            <param name="id">Account pk id.</param>
            <param name="timestamp">The timestamp field used for concurrency check.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.DeepLoadById(System.Guid,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:netTiers.Petshop.Entities.Account"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <param name="id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Account Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Account"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.DeepLoadByLogin(System.String,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:netTiers.Petshop.Entities.Account"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <param name="login"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Account Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Account"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.DeepLoadByLastName(System.String,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:netTiers.Petshop.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <param name="lastName"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Account Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.DeepLoad(netTiers.Petshop.Entities.Account)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Account Object</param>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.AccountServiceBase.DeepLoad(netTiers.Petshop.Entities.Account)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.DeepLoad(netTiers.Petshop.Entities.Account,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.AccountServiceBase.DeepLoad(netTiers.Petshop.Entities.Account)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Account Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.DeepLoad(netTiers.Petshop.Entities.Account,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:netTiers.Petshop.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:netTiers.Petshop.Entities.Account"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Account Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Account})">
            <summary>
            Deep Loads the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.AccountServiceBase.DeepLoad(netTiers.Petshop.Entities.Account)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:netTiers.Petshop.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Account},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.AccountServiceBase.DeepLoad(netTiers.Petshop.Entities.Account)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:netTiers.Petshop.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Account},System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:netTiers.Petshop.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:netTiers.Petshop.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:netTiers.Petshop.Entities.Account"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.DeepSave(netTiers.Petshop.Entities.Account)">
            <summary>
            public virtualDeep Saves the <see cref="T:netTiers.Petshop.Entities.Account"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Account Object</param>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.DeepSave(netTiers.Petshop.Entities.Account,netTiers.Petshop.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Account object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Account Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Account</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.DeepSave(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Account})">
            <summary>
            Deep Save the entire <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Account} Object</param>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountServiceBase.DeepSave(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Account},netTiers.Petshop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:netTiers.Petshop.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Account Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:netTiers.Petshop.Services.AccountServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.CreditCardService">
            <summary>
             An component type implementation of the 'CreditCard' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.CreditCardService.#ctor">
            <summary>
            Initializes a new instance of the CreditCardService class.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.ProcessStartingHandler">
            <summary>
            ProcessStartingHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:netTiers.Petshop.Services.ProcessEndedHandler">
            <summary>
            ProcessEndedHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:netTiers.Petshop.Services.ProcessorEventArgs">
            <summary>
            ProcessorEventArgs
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.ProcessorEventArgs.#ctor(netTiers.Petshop.Services.ProcessorBase)">
            <summary>
            Initializes a new instance of the ProcessorEventArgs class.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="P:netTiers.Petshop.Services.ProcessorEventArgs.Processor">
            <summary>
            Gets or sets the processor.
            </summary>
            <value>The processor.</value>
        </member>
        <member name="T:netTiers.Petshop.Services.DomainUtil">
            <summary>
            DomainUtil class.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.DomainUtil.ValidateOrCreateTransaction(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Data.Bases.NetTiersProvider,System.Boolean)">
            <summary>
            Validates the or create transaction.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="dataProvider">The data provider.</param>
            <param name="isBorrowedTransaction">if set to <c>true</c> [is borrowed transaction].</param>
            <returns>a valid TransactionManager</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.DomainUtil.GetDataProvider(System.String,System.String,netTiers.Petshop.Data.Bases.NetTiersProvider)">
            <summary>
            Gets the data provider.
            </summary>
            <param name="connectionStringKey">The connection string key.</param>
            <param name="dynamicConnectionString">The dynamic connection string.</param>
            <param name="defaultDataProvider">returns the default instance of the date provider for caller.</param>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Services.DomainUtil.HandleException(System.Exception,System.String)">
            <summary>
            Wraps call to tohe <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/> class which handles all exceptions based on the security policy.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.OrderStatusServiceBase">
            <summary>
             An object representation of the 'OrderStatus' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the OrderStatus.cs file instead.
             All custom implementations should be done in the <see cref="T:netTiers.Petshop.Entities.OrderStatus"/> class.
             </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:netTiers.Petshop.Entities.OrderStatus"/> instance .
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.CreateOrderStatus(System.Int32,System.Int32,System.DateTime,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:netTiers.Petshop.Entities.OrderStatus"/> instance.
            </summary>
            <param name="orderId"></param>
            <param name="lineNum"></param>
            <param name="orderDate"></param>
            <param name="orderStatusId"></param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.GetByOrderId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the FK__OrderStat__Order__164452B1 key.
            	FK__OrderStat__Order__164452B1 Description: 
            </summary>
            <param name="orderId"></param>
            <returns>Returns a generic collection of OrderStatus objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.GetByOrderId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the FK__OrderStat__Order__164452B1 key.
            	FK__OrderStat__Order__164452B1 Description: 
            </summary>
            <param name="orderId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:netTiers.Petshop.Entities.TList`1"/> of <c>OrderStatus</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.GetByOrderStatusId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the FK_OrderStatus_OrderStatusType key.
            	FK_OrderStatus_OrderStatusType Description: 
            </summary>
            <param name="orderStatusId"></param>
            <returns>Returns a generic collection of OrderStatus objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.GetByOrderStatusId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the FK_OrderStatus_OrderStatusType key.
            	FK_OrderStatus_OrderStatusType Description: 
            </summary>
            <param name="orderStatusId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:netTiers.Petshop.Entities.TList`1"/> of <c>OrderStatus</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.Get(netTiers.Petshop.Entities.OrderStatusKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.GetByLineNumOrderId(System.Int32,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key PkOrderStatus index.
            </summary>
            <param name="orderId"></param>
            <param name="lineNum"></param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.OrderStatus"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.GetByLineNumOrderId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key PkOrderStatus index.
            </summary>
            <param name="orderId"></param>
            <param name="lineNum"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.OrderStatus"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:netTiers.Petshop.Entities.OrderStatus"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:netTiers.Petshop.Entities.OrderStatus"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:netTiers.Petshop.Entities.TList`1"/> </returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:netTiers.Petshop.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OrderStatus</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:netTiers.Petshop.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OrderStatus</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OrderStatus</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{OrderStatus} of <c>OrderStatus</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.Insert(netTiers.Petshop.Entities.OrderStatus)">
            <summary>
            	public virtualmethod that Inserts a OrderStatus object into the datasource using a transaction.
            </summary>
            <param name="entity">OrderStatus object to Insert.</param>
            <remarks>After Inserting into the datasource, the OrderStatus object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            OrderStatus entity = new OrderStatus();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	OrderStatusService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.Insert(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.OrderStatus})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OrderStatus</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>OrderStatus</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of OrderStatus.
             <code><![CDATA[
             TList<OrderStatus> list = new TList<OrderStatus>();
             OrderStatus entity = new OrderStatus();
             entity.StringProperty = "foo";
             OrderStatus entity2 = new OrderStatus();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderStatusService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.Update(netTiers.Petshop.Entities.OrderStatus)">
            <summary>
            	public virtualmethod that Updates a OrderStatus object into the datasource using a transaction.
            </summary>
            <param name="entity">OrderStatus object to Update.</param>
            <remarks>After Updateing into the datasource, the OrderStatus object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            OrderStatus entity = OrderStatusService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	OrderStatusService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.Update(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.OrderStatus})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OrderStatus</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>OrderStatus</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of OrderStatus.
             <code><![CDATA[
             TList<OrderStatus> list = new TList<OrderStatus>();
             OrderStatus entity = new OrderStatus();
             entity.StringProperty = "foo";
             OrderStatus entity2 = new OrderStatus();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderStatusService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.Save(netTiers.Petshop.Entities.OrderStatus)">
            <summary>
            	public virtualmethod that Saves a OrderStatus object into the datasource using a transaction.
            </summary>
            <param name="entity">OrderStatus object to Save.</param>
            <remarks>After Saveing into the datasource, the OrderStatus object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            OrderStatus entity = OrderStatusService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	OrderStatusService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.Save(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.OrderStatus})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OrderStatus</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>OrderStatus</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of OrderStatus.
             <code><![CDATA[
             TList<OrderStatus> list = new TList<OrderStatus>();
             OrderStatus entity = new OrderStatus();
             entity.StringProperty = "foo";
             OrderStatus entity2 = new OrderStatus();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderStatusService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.Delete(netTiers.Petshop.Entities.OrderStatus)">
            <summary>
            	public virtualmethod that Deletes a OrderStatus object into the datasource using a transaction.
            </summary>
            <param name="entity">OrderStatus object to Delete.</param>
            <remarks>After Deleteing into the datasource, the OrderStatus object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            OrderStatus entity = OrderStatusService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	OrderStatusService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.Delete(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.OrderStatus})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OrderStatus</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>OrderStatus</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of OrderStatus.
             <code><![CDATA[
             TList<OrderStatus> list = new TList<OrderStatus>();
             OrderStatus entity = new OrderStatus();
             entity.StringProperty = "foo";
             OrderStatus entity2 = new OrderStatus();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderStatusService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.Delete(netTiers.Petshop.Entities.OrderStatusKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.Delete(System.Int32,System.Int32,System.Byte[])">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 orderId, System.Int32 lineNum
            </summary>
            <param name="orderId">OrderStatus pk id.</param>
            <param name="lineNum">OrderStatus pk id.</param>
            <param name="timestamp">The timestamp field used for concurrency check.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.DeepLoadByLineNumOrderId(System.Int32,System.Int32,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:netTiers.Petshop.Entities.OrderStatus"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <param name="orderId"></param>
            <param name="lineNum"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">OrderStatus Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.OrderStatus"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.DeepLoad(netTiers.Petshop.Entities.OrderStatus)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">OrderStatus Object</param>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.OrderStatusServiceBase.DeepLoad(netTiers.Petshop.Entities.OrderStatus)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.DeepLoad(netTiers.Petshop.Entities.OrderStatus,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.OrderStatusServiceBase.DeepLoad(netTiers.Petshop.Entities.OrderStatus)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">OrderStatus Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.DeepLoad(netTiers.Petshop.Entities.OrderStatus,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:netTiers.Petshop.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:netTiers.Petshop.Entities.OrderStatus"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">OrderStatus Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.OrderStatus})">
            <summary>
            Deep Loads the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.OrderStatusServiceBase.DeepLoad(netTiers.Petshop.Entities.OrderStatus)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:netTiers.Petshop.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.OrderStatus},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.OrderStatusServiceBase.DeepLoad(netTiers.Petshop.Entities.OrderStatus)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:netTiers.Petshop.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.OrderStatus},System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:netTiers.Petshop.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:netTiers.Petshop.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:netTiers.Petshop.Entities.OrderStatus"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.DeepSave(netTiers.Petshop.Entities.OrderStatus)">
            <summary>
            public virtualDeep Saves the <see cref="T:netTiers.Petshop.Entities.OrderStatus"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">OrderStatus Object</param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.DeepSave(netTiers.Petshop.Entities.OrderStatus,netTiers.Petshop.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the OrderStatus object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">OrderStatus Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>OrderStatus</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.DeepSave(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.OrderStatus})">
            <summary>
            Deep Save the entire <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{OrderStatus} Object</param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusServiceBase.DeepSave(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.OrderStatus},netTiers.Petshop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:netTiers.Petshop.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">OrderStatus Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:netTiers.Petshop.Services.OrderStatusServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.LineItemServiceBase">
            <summary>
             An object representation of the 'LineItem' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the LineItem.cs file instead.
             All custom implementations should be done in the <see cref="T:netTiers.Petshop.Entities.LineItem"/> class.
             </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:netTiers.Petshop.Entities.LineItem"/> instance .
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.CreateLineItem(System.Int32,System.Int32,System.Guid,System.Int32,System.Decimal)">
            <summary>
             A simple factory method to create a new <see cref="T:netTiers.Petshop.Entities.LineItem"/> instance.
            </summary>
            <param name="orderId"></param>
            <param name="lineNum"></param>
            <param name="itemId"></param>
            <param name="quantity"></param>
            <param name="unitPrice"></param>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.GetByOrderId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the FK__LineItem__OrderI__1367E606 key.
            	FK__LineItem__OrderI__1367E606 Description: 
            </summary>
            <param name="orderId"></param>
            <returns>Returns a generic collection of LineItem objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.GetByOrderId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the FK__LineItem__OrderI__1367E606 key.
            	FK__LineItem__OrderI__1367E606 Description: 
            </summary>
            <param name="orderId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:netTiers.Petshop.Entities.TList`1"/> of <c>LineItem</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.GetByItemId(System.Guid)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the FK_LineItem_Item key.
            	FK_LineItem_Item Description: 
            </summary>
            <param name="itemId"></param>
            <returns>Returns a generic collection of LineItem objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.GetByItemId(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the FK_LineItem_Item key.
            	FK_LineItem_Item Description: 
            </summary>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:netTiers.Petshop.Entities.TList`1"/> of <c>LineItem</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.Get(netTiers.Petshop.Entities.LineItemKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.GetByLineNumOrderId(System.Int32,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key PkLineItem index.
            </summary>
            <param name="orderId"></param>
            <param name="lineNum"></param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.LineItem"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.GetByLineNumOrderId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key PkLineItem index.
            </summary>
            <param name="orderId"></param>
            <param name="lineNum"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.LineItem"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:netTiers.Petshop.Entities.LineItem"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:netTiers.Petshop.Entities.LineItem"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:netTiers.Petshop.Entities.TList`1"/> </returns>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:netTiers.Petshop.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LineItem</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:netTiers.Petshop.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LineItem</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LineItem</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{LineItem} of <c>LineItem</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.Insert(netTiers.Petshop.Entities.LineItem)">
            <summary>
            	public virtualmethod that Inserts a LineItem object into the datasource using a transaction.
            </summary>
            <param name="entity">LineItem object to Insert.</param>
            <remarks>After Inserting into the datasource, the LineItem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            LineItem entity = new LineItem();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	LineItemService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.Insert(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.LineItem})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LineItem</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>LineItem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of LineItem.
             <code><![CDATA[
             TList<LineItem> list = new TList<LineItem>();
             LineItem entity = new LineItem();
             entity.StringProperty = "foo";
             LineItem entity2 = new LineItem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LineItemService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.Update(netTiers.Petshop.Entities.LineItem)">
            <summary>
            	public virtualmethod that Updates a LineItem object into the datasource using a transaction.
            </summary>
            <param name="entity">LineItem object to Update.</param>
            <remarks>After Updateing into the datasource, the LineItem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            LineItem entity = LineItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	LineItemService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.Update(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.LineItem})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LineItem</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>LineItem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of LineItem.
             <code><![CDATA[
             TList<LineItem> list = new TList<LineItem>();
             LineItem entity = new LineItem();
             entity.StringProperty = "foo";
             LineItem entity2 = new LineItem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LineItemService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.Save(netTiers.Petshop.Entities.LineItem)">
            <summary>
            	public virtualmethod that Saves a LineItem object into the datasource using a transaction.
            </summary>
            <param name="entity">LineItem object to Save.</param>
            <remarks>After Saveing into the datasource, the LineItem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            LineItem entity = LineItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	LineItemService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.Save(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.LineItem})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LineItem</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>LineItem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of LineItem.
             <code><![CDATA[
             TList<LineItem> list = new TList<LineItem>();
             LineItem entity = new LineItem();
             entity.StringProperty = "foo";
             LineItem entity2 = new LineItem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LineItemService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.Delete(netTiers.Petshop.Entities.LineItem)">
            <summary>
            	public virtualmethod that Deletes a LineItem object into the datasource using a transaction.
            </summary>
            <param name="entity">LineItem object to Delete.</param>
            <remarks>After Deleteing into the datasource, the LineItem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            LineItem entity = LineItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	LineItemService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.Delete(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.LineItem})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LineItem</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>LineItem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of LineItem.
             <code><![CDATA[
             TList<LineItem> list = new TList<LineItem>();
             LineItem entity = new LineItem();
             entity.StringProperty = "foo";
             LineItem entity2 = new LineItem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LineItemService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.Delete(netTiers.Petshop.Entities.LineItemKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.Delete(System.Int32,System.Int32,System.Byte[])">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 orderId, System.Int32 lineNum
            </summary>
            <param name="orderId">LineItem pk id.</param>
            <param name="lineNum">LineItem pk id.</param>
            <param name="timestamp">The timestamp field used for concurrency check.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.DeepLoadByLineNumOrderId(System.Int32,System.Int32,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:netTiers.Petshop.Entities.LineItem"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <param name="orderId"></param>
            <param name="lineNum"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LineItem Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.LineItem"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.DeepLoad(netTiers.Petshop.Entities.LineItem)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">LineItem Object</param>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.LineItemServiceBase.DeepLoad(netTiers.Petshop.Entities.LineItem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.DeepLoad(netTiers.Petshop.Entities.LineItem,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.LineItemServiceBase.DeepLoad(netTiers.Petshop.Entities.LineItem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">LineItem Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.DeepLoad(netTiers.Petshop.Entities.LineItem,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:netTiers.Petshop.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:netTiers.Petshop.Entities.LineItem"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LineItem Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.LineItem})">
            <summary>
            Deep Loads the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.LineItemServiceBase.DeepLoad(netTiers.Petshop.Entities.LineItem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:netTiers.Petshop.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.LineItem},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.LineItemServiceBase.DeepLoad(netTiers.Petshop.Entities.LineItem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:netTiers.Petshop.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.LineItem},System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:netTiers.Petshop.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:netTiers.Petshop.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:netTiers.Petshop.Entities.LineItem"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.DeepSave(netTiers.Petshop.Entities.LineItem)">
            <summary>
            public virtualDeep Saves the <see cref="T:netTiers.Petshop.Entities.LineItem"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">LineItem Object</param>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.DeepSave(netTiers.Petshop.Entities.LineItem,netTiers.Petshop.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the LineItem object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">LineItem Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>LineItem</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.DeepSave(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.LineItem})">
            <summary>
            Deep Save the entire <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{LineItem} Object</param>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemServiceBase.DeepSave(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.LineItem},netTiers.Petshop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:netTiers.Petshop.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LineItem Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:netTiers.Petshop.Services.LineItemServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.AccountService">
            <summary>
             An component type implementation of the 'Account' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.AccountService.#ctor">
            <summary>
            Initializes a new instance of the AccountService class.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.ProcessorBase">
            <summary>
            The interface that each complex business unit of work processor will use.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.ProcessorBase.Process">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:netTiers.Petshop.Services.ProcessorBase.ChangeProcessorState(netTiers.Petshop.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.ProcessorBase.OnNotifyProcessorStateChanging(netTiers.Petshop.Services.ProcessorState)">
            <summary>
            Raises the ProcessorStateChanging event.
            </summary>
            <param name="newProcessorState"></param>
        </member>
        <member name="P:netTiers.Petshop.Services.ProcessorBase.ProcessResult">
            <summary>
            Provides the current process result of it's operation.
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Services.ProcessorBase.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>The name of the type of the processors to execute</value>
        </member>
        <member name="P:netTiers.Petshop.Services.ProcessorBase.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="E:netTiers.Petshop.Services.ProcessorBase.ProcessorStateChanging">
            <summary>
            The ProcessorStateChanging event.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.ProcessorBase.ProcessorStateChangingEventHandler">
            <summary>
            The ProcessorStateChangingEventHandler event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:netTiers.Petshop.Services.OrderStatusTypeServiceBase">
            <summary>
             An object representation of the 'OrderStatusType' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the OrderStatusType.cs file instead.
             All custom implementations should be done in the <see cref="T:netTiers.Petshop.Entities.OrderStatusType"/> class.
             </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:netTiers.Petshop.Entities.OrderStatusType"/> instance .
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.CreateOrderStatusType(System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:netTiers.Petshop.Entities.OrderStatusType"/> instance.
            </summary>
            <param name="orderStatus"></param>
            <param name="orderStatusDescription"></param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.Get(netTiers.Petshop.Entities.OrderStatusTypeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.GetByOrderStatusId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key PK__OrderStatusType__7C8480AE index.
            </summary>
            <param name="orderStatusId"></param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.OrderStatusType"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.GetByOrderStatusId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key PK__OrderStatusType__7C8480AE index.
            </summary>
            <param name="orderStatusId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.OrderStatusType"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.GetByOrderStatus(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key IX_OrderStatusType index.
            </summary>
            <param name="orderStatus"></param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.OrderStatusType"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.GetByOrderStatus(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key IX_OrderStatusType index.
            </summary>
            <param name="orderStatus"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.OrderStatusType"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:netTiers.Petshop.Entities.OrderStatusType"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:netTiers.Petshop.Entities.OrderStatusType"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:netTiers.Petshop.Entities.TList`1"/> </returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:netTiers.Petshop.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OrderStatusType</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:netTiers.Petshop.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OrderStatusType</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OrderStatusType</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{OrderStatusType} of <c>OrderStatusType</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.Insert(netTiers.Petshop.Entities.OrderStatusType)">
            <summary>
            	public virtualmethod that Inserts a OrderStatusType object into the datasource using a transaction.
            </summary>
            <param name="entity">OrderStatusType object to Insert.</param>
            <remarks>After Inserting into the datasource, the OrderStatusType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            OrderStatusType entity = new OrderStatusType();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	OrderStatusTypeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.Insert(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.OrderStatusType})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OrderStatusType</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>OrderStatusType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of OrderStatusType.
             <code><![CDATA[
             TList<OrderStatusType> list = new TList<OrderStatusType>();
             OrderStatusType entity = new OrderStatusType();
             entity.StringProperty = "foo";
             OrderStatusType entity2 = new OrderStatusType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderStatusTypeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.Update(netTiers.Petshop.Entities.OrderStatusType)">
            <summary>
            	public virtualmethod that Updates a OrderStatusType object into the datasource using a transaction.
            </summary>
            <param name="entity">OrderStatusType object to Update.</param>
            <remarks>After Updateing into the datasource, the OrderStatusType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            OrderStatusType entity = OrderStatusTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	OrderStatusTypeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.Update(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.OrderStatusType})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OrderStatusType</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>OrderStatusType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of OrderStatusType.
             <code><![CDATA[
             TList<OrderStatusType> list = new TList<OrderStatusType>();
             OrderStatusType entity = new OrderStatusType();
             entity.StringProperty = "foo";
             OrderStatusType entity2 = new OrderStatusType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderStatusTypeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.Save(netTiers.Petshop.Entities.OrderStatusType)">
            <summary>
            	public virtualmethod that Saves a OrderStatusType object into the datasource using a transaction.
            </summary>
            <param name="entity">OrderStatusType object to Save.</param>
            <remarks>After Saveing into the datasource, the OrderStatusType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            OrderStatusType entity = OrderStatusTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	OrderStatusTypeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.Save(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.OrderStatusType})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OrderStatusType</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>OrderStatusType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of OrderStatusType.
             <code><![CDATA[
             TList<OrderStatusType> list = new TList<OrderStatusType>();
             OrderStatusType entity = new OrderStatusType();
             entity.StringProperty = "foo";
             OrderStatusType entity2 = new OrderStatusType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderStatusTypeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.Delete(netTiers.Petshop.Entities.OrderStatusType)">
            <summary>
            	public virtualmethod that Deletes a OrderStatusType object into the datasource using a transaction.
            </summary>
            <param name="entity">OrderStatusType object to Delete.</param>
            <remarks>After Deleteing into the datasource, the OrderStatusType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            OrderStatusType entity = OrderStatusTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	OrderStatusTypeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.Delete(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.OrderStatusType})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OrderStatusType</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>OrderStatusType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of OrderStatusType.
             <code><![CDATA[
             TList<OrderStatusType> list = new TList<OrderStatusType>();
             OrderStatusType entity = new OrderStatusType();
             entity.StringProperty = "foo";
             OrderStatusType entity2 = new OrderStatusType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderStatusTypeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.Delete(netTiers.Petshop.Entities.OrderStatusTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 orderStatusId
            </summary>
            <param name="orderStatusId">OrderStatusType pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.DeepLoadByOrderStatusId(System.Int32,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:netTiers.Petshop.Entities.OrderStatusType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <param name="orderStatusId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">OrderStatusType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.OrderStatusType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.DeepLoadByOrderStatus(System.String,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:netTiers.Petshop.Entities.OrderStatusType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <param name="orderStatus"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">OrderStatusType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.OrderStatusType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.DeepLoad(netTiers.Petshop.Entities.OrderStatusType)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">OrderStatusType Object</param>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.DeepLoad(netTiers.Petshop.Entities.OrderStatusType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.DeepLoad(netTiers.Petshop.Entities.OrderStatusType,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.DeepLoad(netTiers.Petshop.Entities.OrderStatusType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">OrderStatusType Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.DeepLoad(netTiers.Petshop.Entities.OrderStatusType,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:netTiers.Petshop.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:netTiers.Petshop.Entities.OrderStatusType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">OrderStatusType Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.OrderStatusType})">
            <summary>
            Deep Loads the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.DeepLoad(netTiers.Petshop.Entities.OrderStatusType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:netTiers.Petshop.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.OrderStatusType},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.DeepLoad(netTiers.Petshop.Entities.OrderStatusType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:netTiers.Petshop.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.OrderStatusType},System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:netTiers.Petshop.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:netTiers.Petshop.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:netTiers.Petshop.Entities.OrderStatusType"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.DeepSave(netTiers.Petshop.Entities.OrderStatusType)">
            <summary>
            public virtualDeep Saves the <see cref="T:netTiers.Petshop.Entities.OrderStatusType"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">OrderStatusType Object</param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.DeepSave(netTiers.Petshop.Entities.OrderStatusType,netTiers.Petshop.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the OrderStatusType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">OrderStatusType Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>OrderStatusType</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.DeepSave(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.OrderStatusType})">
            <summary>
            Deep Save the entire <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{OrderStatusType} Object</param>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeServiceBase.DeepSave(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.OrderStatusType},netTiers.Petshop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:netTiers.Petshop.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">OrderStatusType Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:netTiers.Petshop.Services.OrderStatusTypeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.OrderStatusService">
            <summary>
             An component type implementation of the 'OrderStatus' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusService.#ctor">
            <summary>
            Initializes a new instance of the OrderStatusService class.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.CourierService">
            <summary>
             An component type implementation of the 'Courier' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:netTiers.Petshop.Services.CourierServiceBase">
            <summary>
             An object representation of the 'Courier' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Courier.cs file instead.
             All custom implementations should be done in the <see cref="T:netTiers.Petshop.Entities.Courier"/> class.
             </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:netTiers.Petshop.Entities.Courier"/> instance .
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.CreateCourier(System.Guid,System.String,System.String,System.Int32,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:netTiers.Petshop.Entities.Courier"/> instance.
            </summary>
            <param name="courierId"></param>
            <param name="courierName"></param>
            <param name="courierDescription"></param>
            <param name="minItems"></param>
            <param name="maxItems"></param>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.Get(netTiers.Petshop.Entities.CourierKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.GetByCourierId(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key PK_Courier index.
            </summary>
            <param name="courierId"></param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Courier"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.GetByCourierId(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key PK_Courier index.
            </summary>
            <param name="courierId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Courier"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:netTiers.Petshop.Entities.Courier"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:netTiers.Petshop.Entities.Courier"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:netTiers.Petshop.Entities.TList`1"/> </returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:netTiers.Petshop.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Courier</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:netTiers.Petshop.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Courier</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Courier</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Courier} of <c>Courier</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.Insert(netTiers.Petshop.Entities.Courier)">
            <summary>
            	public virtualmethod that Inserts a Courier object into the datasource using a transaction.
            </summary>
            <param name="entity">Courier object to Insert.</param>
            <remarks>After Inserting into the datasource, the Courier object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Courier entity = new Courier();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CourierService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.Insert(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Courier})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Courier</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Courier</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Courier.
             <code><![CDATA[
             TList<Courier> list = new TList<Courier>();
             Courier entity = new Courier();
             entity.StringProperty = "foo";
             Courier entity2 = new Courier();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CourierService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.Update(netTiers.Petshop.Entities.Courier)">
            <summary>
            	public virtualmethod that Updates a Courier object into the datasource using a transaction.
            </summary>
            <param name="entity">Courier object to Update.</param>
            <remarks>After Updateing into the datasource, the Courier object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Courier entity = CourierService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CourierService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.Update(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Courier})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Courier</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Courier</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Courier.
             <code><![CDATA[
             TList<Courier> list = new TList<Courier>();
             Courier entity = new Courier();
             entity.StringProperty = "foo";
             Courier entity2 = new Courier();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CourierService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.Save(netTiers.Petshop.Entities.Courier)">
            <summary>
            	public virtualmethod that Saves a Courier object into the datasource using a transaction.
            </summary>
            <param name="entity">Courier object to Save.</param>
            <remarks>After Saveing into the datasource, the Courier object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Courier entity = CourierService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CourierService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.Save(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Courier})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Courier</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Courier</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Courier.
             <code><![CDATA[
             TList<Courier> list = new TList<Courier>();
             Courier entity = new Courier();
             entity.StringProperty = "foo";
             Courier entity2 = new Courier();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CourierService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.Delete(netTiers.Petshop.Entities.Courier)">
            <summary>
            	public virtualmethod that Deletes a Courier object into the datasource using a transaction.
            </summary>
            <param name="entity">Courier object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Courier object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Courier entity = CourierService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CourierService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.Delete(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Courier})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Courier</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Courier</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Courier.
             <code><![CDATA[
             TList<Courier> list = new TList<Courier>();
             Courier entity = new Courier();
             entity.StringProperty = "foo";
             Courier entity2 = new Courier();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CourierService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.Delete(netTiers.Petshop.Entities.CourierKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.Delete(System.Guid,System.Byte[])">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Guid courierId
            </summary>
            <param name="courierId">Courier pk id.</param>
            <param name="timestamp">The timestamp field used for concurrency check.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.DeepLoadByCourierId(System.Guid,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:netTiers.Petshop.Entities.Courier"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <param name="courierId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Courier Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Courier"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.DeepLoad(netTiers.Petshop.Entities.Courier)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Courier Object</param>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.CourierServiceBase.DeepLoad(netTiers.Petshop.Entities.Courier)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.DeepLoad(netTiers.Petshop.Entities.Courier,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.CourierServiceBase.DeepLoad(netTiers.Petshop.Entities.Courier)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Courier Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.DeepLoad(netTiers.Petshop.Entities.Courier,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:netTiers.Petshop.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:netTiers.Petshop.Entities.Courier"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Courier Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Courier})">
            <summary>
            Deep Loads the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.CourierServiceBase.DeepLoad(netTiers.Petshop.Entities.Courier)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:netTiers.Petshop.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Courier},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.CourierServiceBase.DeepLoad(netTiers.Petshop.Entities.Courier)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:netTiers.Petshop.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Courier},System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:netTiers.Petshop.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:netTiers.Petshop.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:netTiers.Petshop.Entities.Courier"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.DeepSave(netTiers.Petshop.Entities.Courier)">
            <summary>
            public virtualDeep Saves the <see cref="T:netTiers.Petshop.Entities.Courier"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Courier Object</param>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.DeepSave(netTiers.Petshop.Entities.Courier,netTiers.Petshop.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Courier object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Courier Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Courier</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.DeepSave(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Courier})">
            <summary>
            Deep Save the entire <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Courier} Object</param>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierServiceBase.DeepSave(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Courier},netTiers.Petshop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:netTiers.Petshop.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Courier Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:netTiers.Petshop.Services.CourierServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.CourierService.#ctor">
            <summary>
            Initializes a new instance of the CourierService class.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.CategoryServiceBase">
            <summary>
             An object representation of the 'Category' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Category.cs file instead.
             All custom implementations should be done in the <see cref="T:netTiers.Petshop.Entities.Category"/> class.
             </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:netTiers.Petshop.Entities.Category"/> instance .
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.CreateCategory(System.Guid,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:netTiers.Petshop.Entities.Category"/> instance.
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="advicePhoto"></param>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.Get(netTiers.Petshop.Entities.CategoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.GetById(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key PK_Category index.
            </summary>
            <param name="id"></param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Category"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.GetById(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key PK_Category index.
            </summary>
            <param name="id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Category"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:netTiers.Petshop.Entities.Category"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:netTiers.Petshop.Entities.Category"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:netTiers.Petshop.Entities.TList`1"/> </returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:netTiers.Petshop.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Category</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:netTiers.Petshop.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Category</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Category</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Category} of <c>Category</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.Insert(netTiers.Petshop.Entities.Category)">
            <summary>
            	public virtualmethod that Inserts a Category object into the datasource using a transaction.
            </summary>
            <param name="entity">Category object to Insert.</param>
            <remarks>After Inserting into the datasource, the Category object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Category entity = new Category();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CategoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.Insert(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Category})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Category</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Category</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Category.
             <code><![CDATA[
             TList<Category> list = new TList<Category>();
             Category entity = new Category();
             entity.StringProperty = "foo";
             Category entity2 = new Category();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CategoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.Update(netTiers.Petshop.Entities.Category)">
            <summary>
            	public virtualmethod that Updates a Category object into the datasource using a transaction.
            </summary>
            <param name="entity">Category object to Update.</param>
            <remarks>After Updateing into the datasource, the Category object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Category entity = CategoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CategoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.Update(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Category})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Category</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Category</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Category.
             <code><![CDATA[
             TList<Category> list = new TList<Category>();
             Category entity = new Category();
             entity.StringProperty = "foo";
             Category entity2 = new Category();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CategoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.Save(netTiers.Petshop.Entities.Category)">
            <summary>
            	public virtualmethod that Saves a Category object into the datasource using a transaction.
            </summary>
            <param name="entity">Category object to Save.</param>
            <remarks>After Saveing into the datasource, the Category object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Category entity = CategoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CategoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.Save(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Category})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Category</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Category</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Category.
             <code><![CDATA[
             TList<Category> list = new TList<Category>();
             Category entity = new Category();
             entity.StringProperty = "foo";
             Category entity2 = new Category();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CategoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.Delete(netTiers.Petshop.Entities.Category)">
            <summary>
            	public virtualmethod that Deletes a Category object into the datasource using a transaction.
            </summary>
            <param name="entity">Category object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Category object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Category entity = CategoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CategoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.Delete(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Category})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Category</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Category</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Category.
             <code><![CDATA[
             TList<Category> list = new TList<Category>();
             Category entity = new Category();
             entity.StringProperty = "foo";
             Category entity2 = new Category();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CategoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.Delete(netTiers.Petshop.Entities.CategoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.Delete(System.Guid,System.Byte[])">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Guid id
            </summary>
            <param name="id">Category pk id.</param>
            <param name="timestamp">The timestamp field used for concurrency check.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.DeepLoadById(System.Guid,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:netTiers.Petshop.Entities.Category"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <param name="id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Category Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Category"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.DeepLoad(netTiers.Petshop.Entities.Category)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Category Object</param>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.CategoryServiceBase.DeepLoad(netTiers.Petshop.Entities.Category)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.DeepLoad(netTiers.Petshop.Entities.Category,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.CategoryServiceBase.DeepLoad(netTiers.Petshop.Entities.Category)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Category Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.DeepLoad(netTiers.Petshop.Entities.Category,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:netTiers.Petshop.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:netTiers.Petshop.Entities.Category"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Category Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Category})">
            <summary>
            Deep Loads the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.CategoryServiceBase.DeepLoad(netTiers.Petshop.Entities.Category)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:netTiers.Petshop.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Category},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.CategoryServiceBase.DeepLoad(netTiers.Petshop.Entities.Category)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:netTiers.Petshop.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Category},System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:netTiers.Petshop.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:netTiers.Petshop.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:netTiers.Petshop.Entities.Category"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.DeepSave(netTiers.Petshop.Entities.Category)">
            <summary>
            public virtualDeep Saves the <see cref="T:netTiers.Petshop.Entities.Category"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Category Object</param>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.DeepSave(netTiers.Petshop.Entities.Category,netTiers.Petshop.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Category object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Category Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Category</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.DeepSave(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Category})">
            <summary>
            Deep Save the entire <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Category} Object</param>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryServiceBase.DeepSave(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Category},netTiers.Petshop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:netTiers.Petshop.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Category Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:netTiers.Petshop.Services.CategoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.GenericProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary> 
        </member>
        <member name="M:netTiers.Petshop.Services.GenericProcessorResult.#ctor">
            <summary>
            Initializes a new instance of the GenericProcessorResult class.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.GenericProcessorResult.AddBrokenRulesList(System.Type,netTiers.Petshop.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Services.GenericProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:netTiers.Petshop.Services.GenericProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:netTiers.Petshop.Services.GenericProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation. 
            This is set by the processor.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.SupplierServiceBase">
            <summary>
             An object representation of the 'Supplier' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Supplier.cs file instead.
             All custom implementations should be done in the <see cref="T:netTiers.Petshop.Entities.Supplier"/> class.
             </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:netTiers.Petshop.Entities.Supplier"/> instance .
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.CreateSupplier(System.Guid,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:netTiers.Petshop.Entities.Supplier"/> instance.
            </summary>
            <param name="suppId"></param>
            <param name="name"></param>
            <param name="status"></param>
            <param name="addr1"></param>
            <param name="addr2"></param>
            <param name="city"></param>
            <param name="state"></param>
            <param name="zip"></param>
            <param name="phone"></param>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.Get(netTiers.Petshop.Entities.SupplierKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.GetBySuppId(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key PK__Supplier__0425A276 index.
            </summary>
            <param name="suppId"></param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Supplier"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.GetBySuppId(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the datasource based on the primary key PK__Supplier__0425A276 index.
            </summary>
            <param name="suppId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Supplier"/> class.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:netTiers.Petshop.Entities.Supplier"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:netTiers.Petshop.Entities.Supplier"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:netTiers.Petshop.Entities.TList`1"/> </returns>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:netTiers.Petshop.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Supplier</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:netTiers.Petshop.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Supplier</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Supplier</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Supplier} of <c>Supplier</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.Insert(netTiers.Petshop.Entities.Supplier)">
            <summary>
            	public virtualmethod that Inserts a Supplier object into the datasource using a transaction.
            </summary>
            <param name="entity">Supplier object to Insert.</param>
            <remarks>After Inserting into the datasource, the Supplier object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Supplier entity = new Supplier();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SupplierService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.Insert(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Supplier})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Supplier</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Supplier</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Supplier.
             <code><![CDATA[
             TList<Supplier> list = new TList<Supplier>();
             Supplier entity = new Supplier();
             entity.StringProperty = "foo";
             Supplier entity2 = new Supplier();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SupplierService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.Update(netTiers.Petshop.Entities.Supplier)">
            <summary>
            	public virtualmethod that Updates a Supplier object into the datasource using a transaction.
            </summary>
            <param name="entity">Supplier object to Update.</param>
            <remarks>After Updateing into the datasource, the Supplier object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Supplier entity = SupplierService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SupplierService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.Update(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Supplier})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Supplier</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Supplier</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Supplier.
             <code><![CDATA[
             TList<Supplier> list = new TList<Supplier>();
             Supplier entity = new Supplier();
             entity.StringProperty = "foo";
             Supplier entity2 = new Supplier();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SupplierService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.Save(netTiers.Petshop.Entities.Supplier)">
            <summary>
            	public virtualmethod that Saves a Supplier object into the datasource using a transaction.
            </summary>
            <param name="entity">Supplier object to Save.</param>
            <remarks>After Saveing into the datasource, the Supplier object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Supplier entity = SupplierService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SupplierService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.Save(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Supplier})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Supplier</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Supplier</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Supplier.
             <code><![CDATA[
             TList<Supplier> list = new TList<Supplier>();
             Supplier entity = new Supplier();
             entity.StringProperty = "foo";
             Supplier entity2 = new Supplier();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SupplierService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.Delete(netTiers.Petshop.Entities.Supplier)">
            <summary>
            	public virtualmethod that Deletes a Supplier object into the datasource using a transaction.
            </summary>
            <param name="entity">Supplier object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Supplier object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Supplier entity = SupplierService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SupplierService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.Delete(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Supplier})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:netTiers.Petshop.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Supplier</c> objects in a <see cref="T:netTiers.Petshop.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Supplier</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Supplier.
             <code><![CDATA[
             TList<Supplier> list = new TList<Supplier>();
             Supplier entity = new Supplier();
             entity.StringProperty = "foo";
             Supplier entity2 = new Supplier();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SupplierService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.Delete(netTiers.Petshop.Entities.SupplierKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.Delete(System.Guid,System.Byte[])">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Guid suppId
            </summary>
            <param name="suppId">Supplier pk id.</param>
            <param name="timestamp">The timestamp field used for concurrency check.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.GetByItemIdFromInventory(System.Guid)">
            <summary>
            	Gets Supplier objects from the datasource by ItemId in the
            	Inventory table. Table Supplier is related to table Item
            	through the (M:N) relationship defined in the Inventory table.
            </summary>
            <param name="itemId"></param>
            <returns>Returns a typed collection of Supplier objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.GetByItemIdFromInventory(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Supplier objects from the datasource by ItemId in the
            	Inventory table. Table Supplier is related to table Item
            	through the (M:N) relationship defined in the Inventory table.
            </summary>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Supplier objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.DeepLoadBySuppId(System.Guid,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:netTiers.Petshop.Entities.Supplier"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <param name="suppId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Supplier Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Supplier"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.DeepLoad(netTiers.Petshop.Entities.Supplier)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Supplier Object</param>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.SupplierServiceBase.DeepLoad(netTiers.Petshop.Entities.Supplier)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.DeepLoad(netTiers.Petshop.Entities.Supplier,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.SupplierServiceBase.DeepLoad(netTiers.Petshop.Entities.Supplier)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Supplier Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.DeepLoad(netTiers.Petshop.Entities.Supplier,System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:netTiers.Petshop.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:netTiers.Petshop.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:netTiers.Petshop.Entities.Supplier"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Supplier Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Supplier})">
            <summary>
            Deep Loads the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.SupplierServiceBase.DeepLoad(netTiers.Petshop.Entities.Supplier)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:netTiers.Petshop.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Supplier},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:netTiers.Petshop.Services.SupplierServiceBase.DeepLoad(netTiers.Petshop.Entities.Supplier)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:netTiers.Petshop.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.DeepLoad(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Supplier},System.Boolean,netTiers.Petshop.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:netTiers.Petshop.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:netTiers.Petshop.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:netTiers.Petshop.Entities.Supplier"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.DeepSave(netTiers.Petshop.Entities.Supplier)">
            <summary>
            public virtualDeep Saves the <see cref="T:netTiers.Petshop.Entities.Supplier"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Supplier Object</param>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.DeepSave(netTiers.Petshop.Entities.Supplier,netTiers.Petshop.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Supplier object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Supplier Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Supplier</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.DeepSave(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Supplier})">
            <summary>
            Deep Save the entire <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Supplier} Object</param>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierServiceBase.DeepSave(netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Supplier},netTiers.Petshop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:netTiers.Petshop.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:netTiers.Petshop.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Supplier Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:netTiers.Petshop.Services.SupplierServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.ExtendedItemServiceBase">
            <summary>
             An object representation of the 'ExtendedItem' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ExtendedItem.cs file instead.
             All custom implementations should be done in the <see cref="T:netTiers.Petshop.Entities.ExtendedItem"/> class.
             </remarks>
        </member>
        <member name="T:netTiers.Petshop.Services.ServiceViewBase`1">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.ServiceViewBaseCore`1">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceViewBaseCore`1.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceViewBaseCore`1.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceViewBaseCore`1.OnProcessStarting(netTiers.Petshop.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceViewBaseCore`1.OnProcessEnded(netTiers.Petshop.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceViewBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceViewBaseCore`1.Get(netTiers.Petshop.Data.TransactionManager)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceViewBaseCore`1.Get(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceViewBaseCore`1.Get(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceViewBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceViewBaseCore`1.Get(netTiers.Petshop.Data.TransactionManager,System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceViewBaseCore`1.Get(netTiers.Petshop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceViewBaseCore`1.Get(netTiers.Petshop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceViewBaseCore`1.GetAll(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ServiceViewBaseCore`1.GetPaged(netTiers.Petshop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:netTiers.Petshop.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="P:netTiers.Petshop.Services.ServiceViewBaseCore`1.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:netTiers.Petshop.Services.ServiceViewBaseCore`1.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:netTiers.Petshop.Services.ServiceViewBaseCore`1.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:netTiers.Petshop.Services.ServiceViewBaseCore`1.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Services.ServiceViewBaseCore`1.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Services.ServiceViewBaseCore`1.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Services.ServiceViewBaseCore`1.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:netTiers.Petshop.Services.ServiceViewBaseCore`1.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:netTiers.Petshop.Services.ServiceViewBaseCore`1.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.ExtendedItemServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:netTiers.Petshop.Entities.ExtendedItem"/> instance .
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.ExtendedItemServiceBase.CreateExtendedItem(System.Guid,System.String,System.String,System.Nullable{System.Double},System.String,System.Guid,System.String,System.String,System.Guid,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:netTiers.Petshop.Entities.ExtendedItem"/> instance.
            </summary>
            <param name="itemId"></param>
            <param name="itemName"></param>
            <param name="itemDescription"></param>
            <param name="itemPrice"></param>
            <param name="itemPhoto"></param>
            <param name="productId"></param>
            <param name="productName"></param>
            <param name="productDescription"></param>
            <param name="categoryId"></param>
            <param name="categoryName"></param>
        </member>
        <member name="M:netTiers.Petshop.Services.ExtendedItemServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ExtendedItemServiceBase.Get(netTiers.Petshop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:netTiers.Petshop.Data.TransactionManager"/> object.</param>		
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ExtendedItem} of <c>ExtendedItem</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ExtendedItemServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:netTiers.Petshop.Entities.ExtendedItem"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ExtendedItemServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:netTiers.Petshop.Entities.ExtendedItem"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:netTiers.Petshop.Entities.TList`1"/> </returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ExtendedItemServiceBase.GetAll(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:netTiers.Petshop.Entities.ExtendedItem"/> entities
            </summary>
            <param name="transactionManager">A <see cref="T:netTiers.Petshop.Data.TransactionManager"/> object.</param>		
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:netTiers.Petshop.Entities.TList`1"/> </returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ExtendedItemServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:netTiers.Petshop.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ExtendedItem</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ExtendedItemServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:netTiers.Petshop.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ExtendedItem</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ExtendedItemServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ExtendedItem</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ExtendedItemServiceBase.GetPaged(netTiers.Petshop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:netTiers.Petshop.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="transactionManager">A <see cref="T:netTiers.Petshop.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ExtendedItem</c> objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Services.ExtendedItemServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="T:netTiers.Petshop.Services.SupplierService">
            <summary>
             An component type implementation of the 'Supplier' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.SupplierService.#ctor">
            <summary>
            Initializes a new instance of the SupplierService class.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.LineItemService">
            <summary>
             An component type implementation of the 'LineItem' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.LineItemService.#ctor">
            <summary>
            Initializes a new instance of the LineItemService class.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.ServiceResult">
            <summary>
            The class provides a notification pattern for the processor execution.
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Services.ServiceResult.HasErrors">
            <summary>
               Determines whethere the containing service, has errors.
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Services.ServiceResult.Error">
            <summary>
               Provides a string of errors accumulated with a new line of delimeted errors.
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Services.ServiceResult.ProcessBrokenRuleLists">
            <summary>
               Provides an aggregated group of BrokenRuleList for each of the executed processes.
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Services.ServiceResult.ProcessorResultList">
            <summary>
               Determines whethere the containing processs results that were enlisted in the service.
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Services.ServiceResult.ExceptionList">
             <summary>
            	Provides the List of UnHandled Exceptions that occured during processing.
             </summary>
            <value>A list of rules that were broken in the process</value>		
        </member>
        <member name="T:netTiers.Petshop.Services.ExtendedItemService">
            <summary>
             An component type implementation of the 'ExtendedItem' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.ExtendedItemService.#ctor">
            <summary>
            Initializes a new instance of the ExtendedItemService class.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.OrderStatusTypeService">
            <summary>
             An component type implementation of the 'OrderStatusType' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.OrderStatusTypeService.#ctor">
            <summary>
            Initializes a new instance of the OrderStatusTypeService class.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.OrdersService">
            <summary>
             An component type implementation of the 'Orders' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.OrdersService.#ctor">
            <summary>
            Initializes a new instance of the OrdersService class.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.ItemService">
            <summary>
             An component type implementation of the 'Item' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.ItemService.#ctor">
            <summary>
            Initializes a new instance of the ItemService class.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.SecurityContext`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.SecurityContext`1.#ctor">
            <summary>
            Initializes a new instance of the SecurityContext class.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.SecurityContext`1.IsAuthorized(System.String)">
            <summary>
            Determine whether user is authorized for the rule based on the rule provider
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Services.SecurityContext`1.Identity">
            <summary>
            The Current IIdentity .
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Services.SecurityContext`1.Profile">
            <summary>
            The Current Profile .
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Services.SecurityContext`1.Principal">
            <summary>
             The Current IPrincipal .
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Services.SecurityContext`1.RuleProvider">
            <summary>
             The Current Authorization Rule Provider
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Services.ContextView`2">
            <summary>
            Used to create a general view of the current context.  
            Useful for firing events and giving the UI a picture of 
            current State of Operation.
            </summary>
            <typeparam name="Entity">The Entity object</typeparam>
            <typeparam name="Domain">Type that holds </typeparam>
        </member>
        <member name="M:netTiers.Petshop.Services.ContextView`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:netTiers.Petshop.Services.ContextView`2"/> class.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Services.ContextView`2.#ctor(`0,netTiers.Petshop.Services.SecurityContext{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:netTiers.Petshop.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
        </member>
        <member name="M:netTiers.Petshop.Services.ContextView`2.#ctor(`0,netTiers.Petshop.Services.SecurityContext{`0},netTiers.Petshop.Data.TransactionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:netTiers.Petshop.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
            <param name="transactionManager">The transaction manager.</param>
        </member>
        <member name="P:netTiers.Petshop.Services.ContextView`2.PersistingObject">
            <summary>
            Gets or sets the persisting object.
            </summary>
            <value>The persisting object.</value>
        </member>
        <member name="P:netTiers.Petshop.Services.ContextView`2.SecurityContext">
            <summary>
            Gets or sets the security context.
            </summary>
            <value>The security context.</value>
        </member>
        <member name="P:netTiers.Petshop.Services.ContextView`2.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="T:netTiers.Petshop.Services.CategoryService">
            <summary>
             An component type implementation of the 'Category' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:netTiers.Petshop.Services.CategoryService.#ctor">
            <summary>
            Initializes a new instance of the CategoryService class.
            </summary>
        </member>
    </members>
</doc>
