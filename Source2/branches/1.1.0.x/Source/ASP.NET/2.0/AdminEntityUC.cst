<%--
 * $Id: AdminEntityUC.cst,v 1.1 2005/11/04 07:09:39 jroland Exp $
 * Last modified by $Author$
 * Last modified at $Date$
 * $Revision$

	Originally written By Ryan Hurdon
	Description:
		This script will create data access layer classes. It requires stored procedures
		created from the procedure script. So for this code to work properly you need to run
		the procedure template, the rowobject template, and the BOCollection template on
		the same table. You can also optionally use the main script which will run them all
		for you.		
--%>
<%@ CodeTemplate Src="../../CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="Text" Description="Domain model generator." Debug="True"%>
<%-- General Category --%>
<%@ Property Name="NameSpace" Optional="False" Type="System.String" Category="General" Description="Root namespace for generated c# classes." %>

<%@ Property Name="EntireDatabase" Type="System.Boolean" Category="DataSource" Description="Should the entire database have CRUD procedures scripted?" %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Optional="True" Category="DataSource" 	Description="Database that the stored procedures should be based on." %>

<%-- Property Name="GenerateBusinessLogicLayer" Type="System.Boolean" Default="true" Category="General" Description="Indicates if the Business Logic Layer should be generated" --%>
<%@ Property Name="BusinessLogicLayerNameSpace" Type="System.String" Category="General" Description="The full namespace to use for the BLL.  If left empty, the NameSpace variable will be used." Default="" Optional="true" %>
<%@ Property Name="DALNameSpace" Type="System.String" Category="Data" Description="DAL Namespace." %>


<%-- ASP.Net 2.0 Admin --%>
<%@ Property Name="GenerateWebAdmin" Type="System.Boolean" Default="false" Category="WebAdmin2.0" Description="Indicates if the web admin user controls should be generated." %>
<%@ Property Name="WebAdminOutputPath" Type="System.String" Category="WebAdmin2.0" Description="The full path for the the WebAdmin files"%>


<%@ Property Name="ViewReport" Type="System.Boolean" Default="True" Category="General" Description="Indicates if the html report should launched at the end of the generation." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Assembly Name="System.Web" %>
<%@ Assembly Name="System.Xml" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import NameSpace="System.Text" %>
<%@ Import NameSpace="System.Text.RegularExpressions" %>
<%@ Import NameSpace="System.Diagnostics" %>
<%@ Import NameSpace="System.Xml" %>
<%@ Import NameSpace="System.Xml.Xsl" %>
<%@ Import NameSpace="System.Xml.XPath" %>

<script runat="template">
	private TableSchemaCollection _sourceTables;

   [Category("DataSource")]
	[Description("The tables to generate.")]
	[CodeTemplateProperty(CodeTemplatePropertyOption.Optional)]
	public TableSchemaCollection SourceTables
	{
		get
		{
			if (this._sourceTables != null && this._sourceTables.Count > 0 )
				return this._sourceTables;
			else
				return null;
		}
		set
		{
			this._sourceTables = value;
		}
	}
	
	
</script>


<script runat="template">
	private string sdkInstallRoot;
    
    // for the xml report
    public XmlDocument docOutput = new XmlDocument();
    public DateTime startTime = DateTime.Now;
	public DateTime lastTime = DateTime.Now;
    // end xml report
    
   
  
														
	private string[] _templatesFileNames = new string[] {
														"AdminEntityUC_Designer.cst",
														"AdminEntityUC_CodeBehind.cst"
														};
	
	// Compile and load all them in a collection
	private System.Collections.Hashtable _CodeTemplates = new System.Collections.Hashtable();
	
	
	public enum AccessibilityEnum
	{
	    Public,
	    Protected,
	    Internal,
	    ProtectedInternal,
	    Private
	}

public CodeTemplate CompileTemplate(string templateName)
{
	CodeTemplateCompiler compiler = new CodeTemplateCompiler(templateName);
	compiler.Compile();
	
	if (compiler.Errors.Count == 0)
	{
		return compiler.CreateInstance();
	}
	else
	{
		for (int i = 0; i < compiler.Errors.Count; i++)
		{
			Response.WriteLine(compiler.Errors[i].ToString());
		}
		return null;
	}
}

// load all the templates	
public void LoadTemplates()
{	
	foreach(string _templatesFileName in _templatesFileNames)
	{
		string key = System.IO.Path.GetFileName(_templatesFileName);
		
		_CodeTemplates.Add(key, this.CompileTemplate(this.CodeTemplateInfo.DirectoryName + _templatesFileName));
	
		// Set the properties that all the commonsqlcode inherited templates should set
		// TODO : use reflection to check that the templates inherits from commonsql
		try
		{
			((CodeSmith.Engine.CodeTemplate)_CodeTemplates[key]).SetProperty("EntityFormat", EntityFormat);
			((CodeSmith.Engine.CodeTemplate)_CodeTemplates[key]).SetProperty("CollectionFormat", CollectionFormat);
			((CodeSmith.Engine.CodeTemplate)_CodeTemplates[key]).SetProperty("ProviderFormat", ProviderFormat);
			((CodeSmith.Engine.CodeTemplate)_CodeTemplates[key]).SetProperty("InterfaceFormat", InterfaceFormat);
			((CodeSmith.Engine.CodeTemplate)_CodeTemplates[key]).SetProperty("BaseClassFormat", BaseClassFormat);
			((CodeSmith.Engine.CodeTemplate)_CodeTemplates[key]).SetProperty("EnumFormat", EnumFormat);
			((CodeSmith.Engine.CodeTemplate)_CodeTemplates[key]).SetProperty("ManyToManyFormat", ManyToManyFormat);
			((CodeSmith.Engine.CodeTemplate)_CodeTemplates[key]).SetProperty("AliasFilePath", AliasFilePath);
			((CodeSmith.Engine.CodeTemplate)_CodeTemplates[key]).SetProperty("StrippedTablePrefixes", StrippedTablePrefixes);
		}
		catch(Exception) {}
	}
}

public CodeTemplate GetTemplate(string templateType)
{
	return (CodeSmith.Engine.CodeTemplate)_CodeTemplates[templateType];
}

public void SafeCreateDirectory(string path)
{
	if (!Directory.Exists(path))
		Directory.CreateDirectory(path);
}

// TODO allow overwrite
public void SafeCopyFile(string path, string destination)
{
	FileInfo file1 = new FileInfo(path);
	//try
	//{
		file1.CopyTo(destination, true);
	//}
	//catch(System.IO.IOException){}
}

/*
public void CleanOutputDirectory()
{
	string[] csharpFiles = Directory.GetFiles(OutputDirectory, "*.cs");
	
	
	for (int i = 0; i < csharpFiles.Length; i++)
	{
		try
		{
			File.Delete(csharpFiles[i]);
		}
		catch (Exception ex)
		{
			Response.WriteLine("Error while attempting to delete file (" + csharpFiles[i] + ") Error:" + ex.Message);
		}
	}
}
*/


public void Go()
{

	string BLLNameSpace = NameSpace;

	if (BusinessLogicLayerNameSpace != null)
	{
		BLLNameSpace = BusinessLogicLayerNameSpace;	
	}

	
	
	docOutput.AppendChild(docOutput.CreateElement("NetTiersReport"));
	
	XmlAttribute att = docOutput.CreateAttribute("startTime");
	att.Value = DateTime.Now.ToFileTime().ToString();
	docOutput.DocumentElement.Attributes.Append(att);
	
	XmlElement initNode = docOutput.CreateElement("initialization");
	initNode.Attributes.Append(att);
	docOutput.DocumentElement.AppendChild(initNode);
	 
	// load all the sub templates
	XmlElement templatesNode = AddFileNode(initNode, "Loading templates.");
	LoadTemplates();
	AddExecutionTime(templatesNode);

	
	string rootPathWebAdmin = WebAdminOutputPath;

	// Build the correct list of used tables (filtering tables without primary key)
	if (EntireDatabase)
	{
		_sourceTables = new TableSchemaCollection();
		
		for (int i=0; i < SourceDatabase.Tables.Count; i++)
		{
			_sourceTables.Add(SourceDatabase.Tables[i]);
		}
	}
	else 
	{
		if (SourceTables == null) _sourceTables = new TableSchemaCollection();
	}
	
	
	// Remove tables with no primary key
	
	TableSchemaCollection _tmp = (TableSchemaCollection)_sourceTables.Clone();	 
	for (int i=0; i < _tmp.Count; i++)
	{
		try
		{
			if (_tmp[i].PrimaryKey == null || _tmp[i].PrimaryKey.MemberColumns.Count == 0)
			{
				AddMessageNode(initNode, 1, "Table " + _tmp[i].Name + " does not have a primary key, it will not be generated.");
				_sourceTables.Remove(_tmp[i]);
			}
		}
		catch(ApplicationException)
		{
			AddMessageNode(initNode, 1, "Table " + _tmp[i].Name + " does not have a primary key, it will not be generated.");
			_sourceTables.Remove(_tmp[i]);
		}
	}
	
	
	// if no tables, exit;		
	if (_sourceTables.Count == 0)
	{
		AddMessageNode(initNode, 2, "No valid tables in the selection.");
		return;
	}
	
	if (GenerateWebAdmin)
	{
		SafeCreateDirectory(rootPathWebAdmin);
	}
	
	//------------------------
	// start code generation
	XmlElement commonNode = docOutput.CreateElement("common");
	XmlAttribute att2 = docOutput.CreateAttribute("startTime");
	att2.Value = DateTime.Now.ToFileTime().ToString();
	commonNode.Attributes.Append(att2);	
	docOutput.DocumentElement.AppendChild(commonNode);
	
	
	//----------------------------------------------------------------------------------------------------------------------------------------------
	// -- Now process the By DataTable templates
	// -----------------------------------
	for (int x=0; x < _sourceTables.Count; x++)
	{
		TableSchema SourceTable = _sourceTables[x];
	
		XmlElement tableNode = AddTableNode(SourceTable);

		//----------------------------------------------------------------------------------------------------------------------------------------------
		//-- Web Admin ASCX pages
		//----------------------------------------------------------------------------------------------------------------------------------------------
		if (!File.Exists(rootPathWebAdmin + "\\" + GetClassName(SourceTable.Name) + "UC.ascx"))
		{
			XmlElement waNode = AddFileNode(tableNode, GetClassName(SourceTable.Name) + "UC.ascx");
							
			this.GetTemplate("AdminEntityUC_Designer.cst").SetProperty("SourceTable", SourceTable);
			this.GetTemplate("AdminEntityUC_Designer.cst").SetProperty("SourceTables", _sourceTables);
			this.GetTemplate("AdminEntityUC_Designer.cst").SetProperty("NameSpace", BLLNameSpace);
			this.GetTemplate("AdminEntityUC_Designer.cst").SetProperty("DALNameSpace", DALNameSpace);
			
			this.GetTemplate("AdminEntityUC_Designer.cst").RenderToFile(rootPathWebAdmin + "\\" + GetClassName(SourceTable.Name) + "UC.ascx", false);
			
			AddExecutionTime(waNode);
		}	
		
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//-- Web Admin ASCX pages
		//----------------------------------------------------------------------------------------------------------------------------------------------
		if (!File.Exists(rootPathWebAdmin + "\\" + GetClassName(SourceTable.Name) + "UC.ascx.cs"))
		{
			XmlElement wacNode = AddFileNode(tableNode, GetClassName(SourceTable.Name) + "UC.ascx.cs");
							
			this.GetTemplate("AdminEntityUC_CodeBehind.cst").SetProperty("SourceTable", SourceTable);
			this.GetTemplate("AdminEntityUC_CodeBehind.cst").SetProperty("SourceTables", _sourceTables);
			this.GetTemplate("AdminEntityUC_CodeBehind.cst").SetProperty("NameSpace", BLLNameSpace);
			this.GetTemplate("AdminEntityUC_CodeBehind.cst").SetProperty("DALNameSpace", DALNameSpace);
			
			this.GetTemplate("AdminEntityUC_CodeBehind.cst").RenderToFile(rootPathWebAdmin + "\\" + GetClassName(SourceTable.Name) + "UC.ascx.cs", false);
			
			AddExecutionTime(wacNode);
		}	

		
		AddExecutionTime(tableNode);
	}
	
	
	_CodeTemplates.Clear();
	_CodeTemplates = null;
	
	AddExecutionTime(docOutput.DocumentElement);
	docOutput.Save(rootPathWebAdmin + "\\report.xml");
	
	try 
	{
		//XPathDocument doc = new XPathDocument(OutputDirectory + "\\report.xml");
		XslTransform xslt = new XslTransform();
		xslt.Load(this.CodeTemplateInfo.DirectoryName + "\\reportHTML.xsl");               
		XmlTextWriter xmlWriter = new XmlTextWriter(rootPathWebAdmin + "\\report.html", Encoding.UTF8);
		xmlWriter.Formatting = Formatting.Indented;               
		xslt.Transform(docOutput, null, xmlWriter);
		xmlWriter.Close();
		
		if (ViewReport)
		{
			// replace all invalid Url characters with URL Encoded version
			string[] invalidUrlCharacters = { "#" };
			string outputDirectory = rootPathWebAdmin;
			for (int i = 0; i < invalidUrlCharacters.Length; i++)
				outputDirectory = outputDirectory.Replace(invalidUrlCharacters[i], System.Web.HttpUtility.UrlEncode(invalidUrlCharacters[i]));

			string file = @"file:\\\" + outputDirectory + "\\report.html";
			Process.Start(file);
		}
	} 
	catch (Exception e) 
	{
		Response.WriteLine("Transformation failed, an error has occured:");
		Response.WriteLine(e);
	}
	
	
	
	Response.WriteLine("Generation complete. Execution time: " + (DateTime.Now - startTime).ToString());
	
}


private XmlElement AddMessageNode(XmlElement rootNode, int level, string message)
{
	XmlElement node = docOutput.CreateElement("Message");
	
	XmlAttribute attLevel = docOutput.CreateAttribute("level");
	attLevel.Value = string.Format("{0}", level);
	node.Attributes.Append(attLevel);
	
	XmlAttribute attTime = docOutput.CreateAttribute("startTime");
	attTime.Value = DateTime.Now.ToFileTime().ToString();
	node.Attributes.Append(attTime);
	
	XmlAttribute attMsg = docOutput.CreateAttribute("message");
	attMsg.Value = message;
	node.Attributes.Append(attMsg);
			
	rootNode.AppendChild(node);
	return node;
}

private XmlElement AddFileNode(XmlElement rootNode, string filename)
{
	XmlElement node = docOutput.CreateElement("File");
		
	XmlAttribute attName = docOutput.CreateAttribute("name");
	attName.Value = filename;
	node.Attributes.Append(attName);
	
	XmlAttribute attTime = docOutput.CreateAttribute("startTime");
	attTime.Value = DateTime.Now.ToFileTime().ToString();
	node.Attributes.Append(attTime);
		
	rootNode.AppendChild(node);
	return node;
}

// append the execution time as attribute to the selected node
private XmlElement AddExecutionTime(XmlElement node)
{

	XmlAttribute attr = (XmlAttribute)node.Attributes.GetNamedItem("startTime");
    
    if (attr != null)
    {
		DateTime startTime = DateTime.FromFileTime(Convert.ToInt64(attr.Value));
		
		XmlAttribute att2 = docOutput.CreateAttribute("executionTime");
		att2.Value = DateTime.Now.Subtract(startTime).ToString();
		node.Attributes.Append(att2);	
	}
	
	return node;
}

private XmlElement AddTableNode(TableSchema table)
{
	return AddTableNode(table.Name);
}

private XmlElement AddTableNode(string tableName)
{
	XmlElement node = docOutput.CreateElement("Table");
	
	XmlAttribute attName = docOutput.CreateAttribute("name");
	attName.Value = tableName;
	node.Attributes.Append(attName);
	
	XmlAttribute attTime = docOutput.CreateAttribute("startTime");
	attTime.Value = DateTime.Now.ToFileTime().ToString();
	node.Attributes.Append(attTime);	
	
	docOutput.DocumentElement.AppendChild(node);
	
	return node;
}

private string IncrementBuildVersion(string assemblyInfoFilename)
{
	using (StreamReader reader = File.OpenText(assemblyInfoFilename))
	{
		Regex expression = new Regex(@"^\[assembly: AssemblyVersion\(\""([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)");
		string line = reader.ReadLine();
		while (line != null)
		{
			Match match = expression.Match(line);
			if (match.Success)
			{
				string major = match.Result("$1");
				string minor= match.Result("$2");
				string build = match.Result("$3");
				string revision = match.Result("$4");
				
				return string.Format("{0}.{1}.{2}.{3}", major, minor, Convert.ToInt32(build) + 1, revision);
				break;
			}
			line = reader.ReadLine();
		}
	}
	return "1.0.0.0";
}

</script>
<%
	this.Go();
%>
