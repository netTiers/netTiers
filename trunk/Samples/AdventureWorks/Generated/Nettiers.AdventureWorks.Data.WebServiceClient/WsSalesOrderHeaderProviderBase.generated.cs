
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Nettiers.AdventureWorks.Entities.SalesOrderHeader.cs instead.
*/

#region Using directives

using System;
using System.Data;
using System.Collections;
using System.Diagnostics;
using System.Web.Services.Protocols;
using Nettiers.AdventureWorks.Entities;
using Nettiers.AdventureWorks.Data.Bases;

#endregion

namespace Nettiers.AdventureWorks.Data.WebServiceClient
{

	///<summary>
	/// This class is the webservice client implementation that exposes CRUD methods for Nettiers.AdventureWorks.Entities.SalesOrderHeader objects.
	///</summary>
	public abstract partial class WsSalesOrderHeaderProviderBase : SalesOrderHeaderProviderBase
	{
		#region Declarations	
	
		/// <summary>
		/// the Url of the webservice.
		/// </summary>
		private string url;
			
		#endregion Declarations
		
		#region Constructors
	
		/// <summary>
		/// Creates a new <see cref="WsSalesOrderHeaderProviderBase"/> instance.
		/// Uses connection string to connect to datasource.
		/// </summary>
		public WsSalesOrderHeaderProviderBase()
		{		
		}
		
		/// <summary>
		/// Creates a new <see cref="WsSalesOrderHeaderProviderBase"/> instance.
		/// Uses connection string to connect to datasource.
		/// </summary>
		/// <param name="url">The url to the nettiers webservice.</param>
		public WsSalesOrderHeaderProviderBase(string url)
		{
			this.Url = url;
		}
			
		#endregion Constructors
		
		#region Url
		///<summary>
		/// Current URL for webservice endpoint. 
		///</summary>
		public string Url
        {
        	get {return url;}
        	set {url = value;}
        }
		#endregion 
		
		#region Convertion utility
		
		/// <summary>
		/// Convert a collection from the ws proxy to a nettiers collection.
		/// </summary>
		public static Nettiers.AdventureWorks.Entities.TList<SalesOrderHeader> Convert(WsProxy.SalesOrderHeader[] items)
		{
			Nettiers.AdventureWorks.Entities.TList<SalesOrderHeader> outItems = new Nettiers.AdventureWorks.Entities.TList<SalesOrderHeader>();
			foreach(WsProxy.SalesOrderHeader item in items)
			{
				outItems.Add(Convert(item));
			}
			return outItems;
		}
		
		/// <summary>
		/// Convert a nettiers collection to the ws proxy collection.
		/// </summary>
		public static Nettiers.AdventureWorks.Entities.SalesOrderHeader Convert(WsProxy.SalesOrderHeader item)
		{	
			Nettiers.AdventureWorks.Entities.SalesOrderHeader outItem = item == null ? null : new Nettiers.AdventureWorks.Entities.SalesOrderHeader();
			Convert(outItem, item);					
			return outItem;
		}
		
		/// <summary>
		/// Convert a nettiers collection to the ws proxy collection.
		/// </summary>
		public static Nettiers.AdventureWorks.Entities.SalesOrderHeader Convert(Nettiers.AdventureWorks.Entities.SalesOrderHeader outItem , WsProxy.SalesOrderHeader item)
		{	
			if (item != null && outItem != null)
			{
				outItem.SalesOrderId = item.SalesOrderId;
				outItem.RevisionNumber = item.RevisionNumber;
				outItem.OrderDate = item.OrderDate;
				outItem.DueDate = item.DueDate;
				outItem.ShipDate = item.ShipDate;
				outItem.Status = item.Status;
				outItem.OnlineOrderFlag = item.OnlineOrderFlag;
				outItem.SalesOrderNumber = item.SalesOrderNumber;
				outItem.PurchaseOrderNumber = item.PurchaseOrderNumber;
				outItem.AccountNumber = item.AccountNumber;
				outItem.CustomerId = item.CustomerId;
				outItem.ContactId = item.ContactId;
				outItem.SalesPersonId = item.SalesPersonId;
				outItem.TerritoryId = item.TerritoryId;
				outItem.BillToAddressId = item.BillToAddressId;
				outItem.ShipToAddressId = item.ShipToAddressId;
				outItem.ShipMethodId = item.ShipMethodId;
				outItem.CreditCardId = item.CreditCardId;
				outItem.CreditCardApprovalCode = item.CreditCardApprovalCode;
				outItem.CurrencyRateId = item.CurrencyRateId;
				outItem.SubTotal = item.SubTotal;
				outItem.TaxAmt = item.TaxAmt;
				outItem.Freight = item.Freight;
				outItem.TotalDue = item.TotalDue;
				outItem.Comment = item.Comment;
				outItem.Rowguid = item.Rowguid;
				outItem.ModifiedDate = item.ModifiedDate;
				
				outItem.AcceptChanges();			
			}
							
			return outItem;
		}
		
		/// <summary>
		/// Convert a nettiers entity to the ws proxy entity.
		/// </summary>
		public static WsProxy.SalesOrderHeader Convert(Nettiers.AdventureWorks.Entities.SalesOrderHeader item)
		{			
			WsProxy.SalesOrderHeader outItem = new WsProxy.SalesOrderHeader();			
			outItem.SalesOrderId = item.SalesOrderId;
			outItem.RevisionNumber = item.RevisionNumber;
			outItem.OrderDate = item.OrderDate;
			outItem.DueDate = item.DueDate;
			outItem.ShipDate = item.ShipDate;
			outItem.Status = item.Status;
			outItem.OnlineOrderFlag = item.OnlineOrderFlag;
			outItem.SalesOrderNumber = item.SalesOrderNumber;
			outItem.PurchaseOrderNumber = item.PurchaseOrderNumber;
			outItem.AccountNumber = item.AccountNumber;
			outItem.CustomerId = item.CustomerId;
			outItem.ContactId = item.ContactId;
			outItem.SalesPersonId = item.SalesPersonId;
			outItem.TerritoryId = item.TerritoryId;
			outItem.BillToAddressId = item.BillToAddressId;
			outItem.ShipToAddressId = item.ShipToAddressId;
			outItem.ShipMethodId = item.ShipMethodId;
			outItem.CreditCardId = item.CreditCardId;
			outItem.CreditCardApprovalCode = item.CreditCardApprovalCode;
			outItem.CurrencyRateId = item.CurrencyRateId;
			outItem.SubTotal = item.SubTotal;
			outItem.TaxAmt = item.TaxAmt;
			outItem.Freight = item.Freight;
			outItem.TotalDue = item.TotalDue;
			outItem.Comment = item.Comment;
			outItem.Rowguid = item.Rowguid;
			outItem.ModifiedDate = item.ModifiedDate;

							
			return outItem;
		}
		
		/// <summary>
		/// Convert a collection from  to a nettiers collection to a the ws proxy collection.
		/// </summary>
		public static WsProxy.SalesOrderHeader[] Convert(Nettiers.AdventureWorks.Entities.TList<SalesOrderHeader> items)
		{
			WsProxy.SalesOrderHeader[] outItems = new WsProxy.SalesOrderHeader[items.Count];
			int count = 0;
		
			foreach (Nettiers.AdventureWorks.Entities.SalesOrderHeader item in items)
			{
				outItems[count++] = Convert(item);
			}
			return outItems;
		}

		
		#endregion
		
		#region Get from  Many To Many Relationship Functions
		#region GetBySalesReasonIdFromSalesOrderHeaderSalesReason
		
		/// <summary>
		///		Gets SalesOrderHeader objects from the datasource by SalesReasonID in the
		///		SalesOrderHeaderSalesReason table. Table SalesOrderHeader is related to table SalesReason
		///		through the (M:N) relationship defined in the SalesOrderHeaderSalesReason table.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pagelen">Number of rows to return.</param>
		/// <param name="_salesReasonId">Primary key. Foreign key to SalesReason.SalesReasonID.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of SalesOrderHeader objects.</returns>
		public override TList<SalesOrderHeader> GetBySalesReasonIdFromSalesOrderHeaderSalesReason(TransactionManager transactionManager, System.Int32 _salesReasonId, int start, int pagelen, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
				
			WsProxy.SalesOrderHeader[] items = proxy.SalesOrderHeaderProvider_GetBySalesReasonIdFromSalesOrderHeaderSalesReason(_salesReasonId, start, pagelen, out count);
	
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
		#endregion GetBySalesReasonIdFromSalesOrderHeaderSalesReason
		
		#endregion	
		
		
		#region Delete Methods
			
			/// <summary>
			/// 	Deletes a row from the DataSource.
			/// </summary>
			/// <param name="_salesOrderId">Primary key.. Primary Key.</param>	
            
			/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
			/// <remarks>Deletes based on primary key(s).</remarks>
			/// <returns>Returns true if operation suceeded.</returns>
			public override bool Delete(TransactionManager transactionManager, System.Int32 _salesOrderId)
			{
				try
				{
				// call the proxy
				WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
				proxy.Url = Url;
				
				bool result = proxy.SalesOrderHeaderProvider_Delete(_salesOrderId);				
				return result;
				}
				catch(SoapException soex)
				{
					System.Diagnostics.Debug.WriteLine(soex);
					throw soex;
				}
				catch(Exception ex)
				{
					System.Diagnostics.Debug.WriteLine(ex);
					throw ex;
				}
			}
			
			#endregion Delete Methods
	
		
		#region Find Methods
		
		
		/// <summary>
		/// 	Returns rows meeting the whereclause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pagelen">Number of rows to return.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <remarks>Operators must be capitalized (OR, AND)</remarks>
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeader objects.</returns>
		public override Nettiers.AdventureWorks.Entities.TList<SalesOrderHeader> Find(TransactionManager transactionManager, string whereClause, int start, int pagelen, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			
			WsProxy.SalesOrderHeader[] items = proxy.SalesOrderHeaderProvider_Find(whereClause, start, pagelen, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
		#endregion Find Methods
		
		
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>			
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeader objects.</returns>
		public override Nettiers.AdventureWorks.Entities.TList<SalesOrderHeader> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
				
			WsProxy.SalesOrderHeader[] items = proxy.SalesOrderHeaderProvider_GetAll(start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
		#endregion GetAll Methods
		
		#region GetPaged Methods
						
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeader objects.</returns>
		public override Nettiers.AdventureWorks.Entities.TList<SalesOrderHeader> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			try
			{
			whereClause = whereClause ?? string.Empty;
			orderBy = orderBy ?? string.Empty;
			
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			
			WsProxy.SalesOrderHeader[] items = proxy.SalesOrderHeaderProvider_GetPaged(whereClause, orderBy, start, pageLength, out count);
			
			// Create a collection and fill it with the dataset
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
		#endregion GetPaged Methods
	
		
		#region Get By Foreign Key Functions
		
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SalesOrderHeader_Address_BillToAddressID key.
		///		FK_SalesOrderHeader_Address_BillToAddressID Description: Foreign key constraint referencing Address.AddressID.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_billToAddressId">Customer billing address. Foreign key to Address.AddressID.</param>
		/// <param name="count">out parameter to get total records for query</param>	
		/// <remarks></remarks>		
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeader objects.</returns>
		public override Nettiers.AdventureWorks.Entities.TList<SalesOrderHeader> GetByBillToAddressId(TransactionManager transactionManager, System.Int32 _billToAddressId, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			WsProxy.SalesOrderHeader[] items = proxy.SalesOrderHeaderProvider_GetByBillToAddressId(_billToAddressId, start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
			
		
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SalesOrderHeader_Address_ShipToAddressID key.
		///		FK_SalesOrderHeader_Address_ShipToAddressID Description: Foreign key constraint referencing Address.AddressID.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_shipToAddressId">Customer shipping address. Foreign key to Address.AddressID.</param>
		/// <param name="count">out parameter to get total records for query</param>	
		/// <remarks></remarks>		
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeader objects.</returns>
		public override Nettiers.AdventureWorks.Entities.TList<SalesOrderHeader> GetByShipToAddressId(TransactionManager transactionManager, System.Int32 _shipToAddressId, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			WsProxy.SalesOrderHeader[] items = proxy.SalesOrderHeaderProvider_GetByShipToAddressId(_shipToAddressId, start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
			
		
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SalesOrderHeader_Contact_ContactID key.
		///		FK_SalesOrderHeader_Contact_ContactID Description: Foreign key constraint referencing Contact.ContactID.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_contactId">Customer contact identification number. Foreign key to Contact.ContactID.</param>
		/// <param name="count">out parameter to get total records for query</param>	
		/// <remarks></remarks>		
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeader objects.</returns>
		public override Nettiers.AdventureWorks.Entities.TList<SalesOrderHeader> GetByContactId(TransactionManager transactionManager, System.Int32 _contactId, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			WsProxy.SalesOrderHeader[] items = proxy.SalesOrderHeaderProvider_GetByContactId(_contactId, start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
			
		
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SalesOrderHeader_CreditCard_CreditCardID key.
		///		FK_SalesOrderHeader_CreditCard_CreditCardID Description: Foreign key constraint referencing CreditCard.CreditCardID.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_creditCardId">Credit card identification number. Foreign key to CreditCard.CreditCardID.</param>
		/// <param name="count">out parameter to get total records for query</param>	
		/// <remarks></remarks>		
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeader objects.</returns>
		public override Nettiers.AdventureWorks.Entities.TList<SalesOrderHeader> GetByCreditCardId(TransactionManager transactionManager, System.Int32? _creditCardId, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			WsProxy.SalesOrderHeader[] items = proxy.SalesOrderHeaderProvider_GetByCreditCardId(_creditCardId, start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
			
		
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SalesOrderHeader_CurrencyRate_CurrencyRateID key.
		///		FK_SalesOrderHeader_CurrencyRate_CurrencyRateID Description: Foreign key constraint referencing CurrencyRate.CurrencyRateID.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_currencyRateId">Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.</param>
		/// <param name="count">out parameter to get total records for query</param>	
		/// <remarks></remarks>		
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeader objects.</returns>
		public override Nettiers.AdventureWorks.Entities.TList<SalesOrderHeader> GetByCurrencyRateId(TransactionManager transactionManager, System.Int32? _currencyRateId, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			WsProxy.SalesOrderHeader[] items = proxy.SalesOrderHeaderProvider_GetByCurrencyRateId(_currencyRateId, start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
			
		
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SalesOrderHeader_SalesTerritory_TerritoryID key.
		///		FK_SalesOrderHeader_SalesTerritory_TerritoryID Description: Foreign key constraint referencing SalesTerritory.TerritoryID.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_territoryId">Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.</param>
		/// <param name="count">out parameter to get total records for query</param>	
		/// <remarks></remarks>		
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeader objects.</returns>
		public override Nettiers.AdventureWorks.Entities.TList<SalesOrderHeader> GetByTerritoryId(TransactionManager transactionManager, System.Int32? _territoryId, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			WsProxy.SalesOrderHeader[] items = proxy.SalesOrderHeaderProvider_GetByTerritoryId(_territoryId, start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
			
		
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SalesOrderHeader_ShipMethod_ShipMethodID key.
		///		FK_SalesOrderHeader_ShipMethod_ShipMethodID Description: Foreign key constraint referencing ShipMethod.ShipMethodID.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_shipMethodId">Shipping method. Foreign key to ShipMethod.ShipMethodID.</param>
		/// <param name="count">out parameter to get total records for query</param>	
		/// <remarks></remarks>		
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeader objects.</returns>
		public override Nettiers.AdventureWorks.Entities.TList<SalesOrderHeader> GetByShipMethodId(TransactionManager transactionManager, System.Int32 _shipMethodId, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			WsProxy.SalesOrderHeader[] items = proxy.SalesOrderHeaderProvider_GetByShipMethodId(_shipMethodId, start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
			
		#endregion
		
		
		#region Get By Index Functions
					
		/// <summary>
		/// 	Gets rows from the datasource based on the AK_SalesOrderHeader_rowguid index.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="count">out parameter to get total records for query</param>	
		/// <remarks></remarks>
		/// <returns>Returns an instance of the <see cref="Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> class.</returns>
		public override Nettiers.AdventureWorks.Entities.SalesOrderHeader GetByRowguid(TransactionManager transactionManager, System.Guid _rowguid, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			WsProxy.SalesOrderHeader items = proxy.SalesOrderHeaderProvider_GetByRowguid(_rowguid, start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
					
		/// <summary>
		/// 	Gets rows from the datasource based on the AK_SalesOrderHeader_SalesOrderNumber index.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="_salesOrderNumber">Unique sales order identification number.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="count">out parameter to get total records for query</param>	
		/// <remarks></remarks>
		/// <returns>Returns an instance of the <see cref="Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> class.</returns>
		public override Nettiers.AdventureWorks.Entities.SalesOrderHeader GetBySalesOrderNumber(TransactionManager transactionManager, System.String _salesOrderNumber, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			WsProxy.SalesOrderHeader items = proxy.SalesOrderHeaderProvider_GetBySalesOrderNumber(_salesOrderNumber, start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_SalesOrderHeader_CustomerID index.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="_customerId">Customer identification number. Foreign key to Customer.CustomerID.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="count">out parameter to get total records for query</param>	
		/// <remarks></remarks>
		/// <returns>Returns an instance of the <see cref="Nettiers.AdventureWorks.Entities.TList&lt;SalesOrderHeader&gt;"/> class.</returns>
		public override Nettiers.AdventureWorks.Entities.TList<SalesOrderHeader> GetByCustomerId(TransactionManager transactionManager, System.Int32 _customerId, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			WsProxy.SalesOrderHeader[] items = proxy.SalesOrderHeaderProvider_GetByCustomerId(_customerId, start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_SalesOrderHeader_SalesPersonID index.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="_salesPersonId">Sales person who created the sales order. Foreign key to SalesPerson.SalePersonID.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="count">out parameter to get total records for query</param>	
		/// <remarks></remarks>
		/// <returns>Returns an instance of the <see cref="Nettiers.AdventureWorks.Entities.TList&lt;SalesOrderHeader&gt;"/> class.</returns>
		public override Nettiers.AdventureWorks.Entities.TList<SalesOrderHeader> GetBySalesPersonId(TransactionManager transactionManager, System.Int32? _salesPersonId, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			WsProxy.SalesOrderHeader[] items = proxy.SalesOrderHeaderProvider_GetBySalesPersonId(_salesPersonId, start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_SalesOrderHeader_SalesOrderID index.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="_salesOrderId">Primary key.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="count">out parameter to get total records for query</param>	
		/// <remarks></remarks>
		/// <returns>Returns an instance of the <see cref="Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> class.</returns>
		public override Nettiers.AdventureWorks.Entities.SalesOrderHeader GetBySalesOrderId(TransactionManager transactionManager, System.Int32 _salesOrderId, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			WsProxy.SalesOrderHeader items = proxy.SalesOrderHeaderProvider_GetBySalesOrderId(_salesOrderId, start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
		#endregion Get By Index Functions
	
	
		#region Insert Methods
		/// <summary>
		/// 	Inserts a Nettiers.AdventureWorks.Entities.SalesOrderHeader object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">Nettiers.AdventureWorks.Entities.SalesOrderHeader object to insert.</param>		
		/// <remarks></remarks>		
		/// <returns>Returns true if operation is successful.</returns>
		public override bool Insert(TransactionManager transactionManager, Nettiers.AdventureWorks.Entities.SalesOrderHeader entity)
		{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			
			try
			{
				WsProxy.SalesOrderHeader result = proxy.SalesOrderHeaderProvider_Insert(Convert(entity));
				Convert(entity, result);
				return true;
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
	
		/// <summary>
		/// Lets you efficiently bulk many entity to the database.
		/// </summary>
		/// <param name="transactionManager">NOTE: The transaction manager should be null for the web service client implementation.</param>
		/// <param name="entityList">The entities.</param>
		/// <remarks>
		/// After inserting into the datasource, the Nettiers.AdventureWorks.Entities.SalesOrderHeader object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		public override void BulkInsert(TransactionManager transactionManager, Nettiers.AdventureWorks.Entities.TList<SalesOrderHeader> entityList)
		{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			try
			{
				proxy.SalesOrderHeaderProvider_BulkInsert(Convert(entityList));
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch (Exception ex)
			{	
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}

		#endregion Insert Methods
	
	
		#region Update Methods
						
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">Nettiers.AdventureWorks.Entities.SalesOrderHeader object to update.</param>		
		/// <remarks></remarks>
		/// <returns>Returns true if operation is successful.</returns>
		public override bool Update(TransactionManager transactionManager, Nettiers.AdventureWorks.Entities.SalesOrderHeader entity)
		{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			
			try
			{
				WsProxy.SalesOrderHeader result = proxy.SalesOrderHeaderProvider_Update(Convert(entity));
				Convert(entity, result);
				entity.AcceptChanges();
				return true;
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
		#endregion Update Methods
			
		#region Custom Methods
		
		
		#endregion
					
	}//end class
} // end namespace
