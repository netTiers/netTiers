
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Employee.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Nettiers.AdventureWorks.Entities.Validation;
#endregion

namespace Nettiers.AdventureWorks.Entities
{
	///<summary>
	/// Employee information such as salary, department, and title.	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EmployeeBase : EntityBase, IEmployee, IEntityId<EmployeeKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EmployeeEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EmployeeEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EmployeeEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Employee> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EmployeeEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EmployeeEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EmployeeBase"/> instance.
		///</summary>
		public EmployeeBase()
		{
			this.entityData = new EmployeeEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EmployeeBase"/> instance.
		///</summary>
		///<param name="_nationalIdNumber">Unique national identification number such as a social security number.</param>
		///<param name="_contactId">Identifies the employee in the Contact table. Foreign key to Contact.ContactID.</param>
		///<param name="_loginId">Network login.</param>
		///<param name="_managerId">Manager to whom the employee is assigned. Foreign Key to Employee.M</param>
		///<param name="_title">Work title such as Buyer or Sales Representative.</param>
		///<param name="_birthDate">Date of birth.</param>
		///<param name="_maritalStatus">M = Married, S = Single</param>
		///<param name="_gender">M = Male, F = Female</param>
		///<param name="_hireDate">Employee hired on this date.</param>
		///<param name="_salariedFlag">Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.</param>
		///<param name="_vacationHours">Number of available vacation hours.</param>
		///<param name="_sickLeaveHours">Number of available sick leave hours.</param>
		///<param name="_currentFlag">0 = Inactive, 1 = Active</param>
		///<param name="_modifiedDate">Date and time the record was last updated.</param>
		public EmployeeBase(System.String _nationalIdNumber, System.Int32 _contactId, System.String _loginId, 
			System.Int32? _managerId, System.String _title, System.DateTime _birthDate, System.String _maritalStatus, 
			System.String _gender, System.DateTime _hireDate, System.Boolean _salariedFlag, System.Int16 _vacationHours, 
			System.Int16 _sickLeaveHours, System.Boolean _currentFlag, System.DateTime _modifiedDate)
		{
			this.entityData = new EmployeeEntityData();
			this.backupData = null;

			this.NationalIdNumber = _nationalIdNumber;
			this.ContactId = _contactId;
			this.LoginId = _loginId;
			this.ManagerId = _managerId;
			this.Title = _title;
			this.BirthDate = _birthDate;
			this.MaritalStatus = _maritalStatus;
			this.Gender = _gender;
			this.HireDate = _hireDate;
			this.SalariedFlag = _salariedFlag;
			this.VacationHours = _vacationHours;
			this.SickLeaveHours = _sickLeaveHours;
			this.CurrentFlag = _currentFlag;
			this.ModifiedDate = _modifiedDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Employee"/> instance.
		///</summary>
		///<param name="_nationalIdNumber">Unique national identification number such as a social security number.</param>
		///<param name="_contactId">Identifies the employee in the Contact table. Foreign key to Contact.ContactID.</param>
		///<param name="_loginId">Network login.</param>
		///<param name="_managerId">Manager to whom the employee is assigned. Foreign Key to Employee.M</param>
		///<param name="_title">Work title such as Buyer or Sales Representative.</param>
		///<param name="_birthDate">Date of birth.</param>
		///<param name="_maritalStatus">M = Married, S = Single</param>
		///<param name="_gender">M = Male, F = Female</param>
		///<param name="_hireDate">Employee hired on this date.</param>
		///<param name="_salariedFlag">Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.</param>
		///<param name="_vacationHours">Number of available vacation hours.</param>
		///<param name="_sickLeaveHours">Number of available sick leave hours.</param>
		///<param name="_currentFlag">0 = Inactive, 1 = Active</param>
		///<param name="_modifiedDate">Date and time the record was last updated.</param>
		public static Employee CreateEmployee(System.String _nationalIdNumber, System.Int32 _contactId, System.String _loginId, 
			System.Int32? _managerId, System.String _title, System.DateTime _birthDate, System.String _maritalStatus, 
			System.String _gender, System.DateTime _hireDate, System.Boolean _salariedFlag, System.Int16 _vacationHours, 
			System.Int16 _sickLeaveHours, System.Boolean _currentFlag, System.DateTime _modifiedDate)
		{
			Employee newEmployee = new Employee();
			newEmployee.NationalIdNumber = _nationalIdNumber;
			newEmployee.ContactId = _contactId;
			newEmployee.LoginId = _loginId;
			newEmployee.ManagerId = _managerId;
			newEmployee.Title = _title;
			newEmployee.BirthDate = _birthDate;
			newEmployee.MaritalStatus = _maritalStatus;
			newEmployee.Gender = _gender;
			newEmployee.HireDate = _hireDate;
			newEmployee.SalariedFlag = _salariedFlag;
			newEmployee.VacationHours = _vacationHours;
			newEmployee.SickLeaveHours = _sickLeaveHours;
			newEmployee.CurrentFlag = _currentFlag;
			newEmployee.ModifiedDate = _modifiedDate;
			return newEmployee;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EmployeeId property. 
		///		Primary key for Employee records.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@"Primary key for Employee records."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 EmployeeId
		{
			get
			{
				return this.entityData.EmployeeId; 
			}
			
			set
			{
				if (this.entityData.EmployeeId == value)
					return;
				
                OnPropertyChanging("EmployeeId");                    
				OnColumnChanging(EmployeeColumn.EmployeeId, this.entityData.EmployeeId);
				this.entityData.EmployeeId = value;
				this.EntityId.EmployeeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeeColumn.EmployeeId, this.entityData.EmployeeId);
				OnPropertyChanged("EmployeeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NationalIdNumber property. 
		///		Unique national identification number such as a social security number.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Unique national identification number such as a social security number."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 15)]
		public virtual System.String NationalIdNumber
		{
			get
			{
				return this.entityData.NationalIdNumber; 
			}
			
			set
			{
				if (this.entityData.NationalIdNumber == value)
					return;
				
                OnPropertyChanging("NationalIdNumber");                    
				OnColumnChanging(EmployeeColumn.NationalIdNumber, this.entityData.NationalIdNumber);
				this.entityData.NationalIdNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeeColumn.NationalIdNumber, this.entityData.NationalIdNumber);
				OnPropertyChanged("NationalIdNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContactId property. 
		///		Identifies the employee in the Contact table. Foreign key to Contact.ContactID.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Identifies the employee in the Contact table. Foreign key to Contact.ContactID."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ContactId
		{
			get
			{
				return this.entityData.ContactId; 
			}
			
			set
			{
				if (this.entityData.ContactId == value)
					return;
				
                OnPropertyChanging("ContactId");                    
				OnColumnChanging(EmployeeColumn.ContactId, this.entityData.ContactId);
				this.entityData.ContactId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeeColumn.ContactId, this.entityData.ContactId);
				OnPropertyChanged("ContactId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LoginId property. 
		///		Network login.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Network login."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 256)]
		public virtual System.String LoginId
		{
			get
			{
				return this.entityData.LoginId; 
			}
			
			set
			{
				if (this.entityData.LoginId == value)
					return;
				
                OnPropertyChanging("LoginId");                    
				OnColumnChanging(EmployeeColumn.LoginId, this.entityData.LoginId);
				this.entityData.LoginId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeeColumn.LoginId, this.entityData.LoginId);
				OnPropertyChanged("LoginId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ManagerId property. 
		///		Manager to whom the employee is assigned. Foreign Key to Employee.M
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsManagerIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Manager to whom the employee is assigned. Foreign Key to Employee.M"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ManagerId
		{
			get
			{
				return this.entityData.ManagerId; 
			}
			
			set
			{
				if (this.entityData.ManagerId == value)
					return;
				
                OnPropertyChanging("ManagerId");                    
				OnColumnChanging(EmployeeColumn.ManagerId, this.entityData.ManagerId);
				this.entityData.ManagerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeeColumn.ManagerId, this.entityData.ManagerId);
				OnPropertyChanged("ManagerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Title property. 
		///		Work title such as Buyer or Sales Representative.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Work title such as Buyer or Sales Representative."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String Title
		{
			get
			{
				return this.entityData.Title; 
			}
			
			set
			{
				if (this.entityData.Title == value)
					return;
				
                OnPropertyChanging("Title");                    
				OnColumnChanging(EmployeeColumn.Title, this.entityData.Title);
				this.entityData.Title = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeeColumn.Title, this.entityData.Title);
				OnPropertyChanged("Title");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BirthDate property. 
		///		Date of birth.
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Date of birth."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime BirthDate
		{
			get
			{
				return this.entityData.BirthDate; 
			}
			
			set
			{
				if (this.entityData.BirthDate == value)
					return;
				
                OnPropertyChanging("BirthDate");                    
				OnColumnChanging(EmployeeColumn.BirthDate, this.entityData.BirthDate);
				this.entityData.BirthDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeeColumn.BirthDate, this.entityData.BirthDate);
				OnPropertyChanged("BirthDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaritalStatus property. 
		///		M = Married, S = Single
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"M = Married, S = Single"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 1)]
		public virtual System.String MaritalStatus
		{
			get
			{
				return this.entityData.MaritalStatus; 
			}
			
			set
			{
				if (this.entityData.MaritalStatus == value)
					return;
				
                OnPropertyChanging("MaritalStatus");                    
				OnColumnChanging(EmployeeColumn.MaritalStatus, this.entityData.MaritalStatus);
				this.entityData.MaritalStatus = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeeColumn.MaritalStatus, this.entityData.MaritalStatus);
				OnPropertyChanged("MaritalStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Gender property. 
		///		M = Male, F = Female
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"M = Male, F = Female"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 1)]
		public virtual System.String Gender
		{
			get
			{
				return this.entityData.Gender; 
			}
			
			set
			{
				if (this.entityData.Gender == value)
					return;
				
                OnPropertyChanging("Gender");                    
				OnColumnChanging(EmployeeColumn.Gender, this.entityData.Gender);
				this.entityData.Gender = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeeColumn.Gender, this.entityData.Gender);
				OnPropertyChanged("Gender");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HireDate property. 
		///		Employee hired on this date.
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Employee hired on this date."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime HireDate
		{
			get
			{
				return this.entityData.HireDate; 
			}
			
			set
			{
				if (this.entityData.HireDate == value)
					return;
				
                OnPropertyChanging("HireDate");                    
				OnColumnChanging(EmployeeColumn.HireDate, this.entityData.HireDate);
				this.entityData.HireDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeeColumn.HireDate, this.entityData.HireDate);
				OnPropertyChanged("HireDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SalariedFlag property. 
		///		Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean SalariedFlag
		{
			get
			{
				return this.entityData.SalariedFlag; 
			}
			
			set
			{
				if (this.entityData.SalariedFlag == value)
					return;
				
                OnPropertyChanging("SalariedFlag");                    
				OnColumnChanging(EmployeeColumn.SalariedFlag, this.entityData.SalariedFlag);
				this.entityData.SalariedFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeeColumn.SalariedFlag, this.entityData.SalariedFlag);
				OnPropertyChanged("SalariedFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the VacationHours property. 
		///		Number of available vacation hours.
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Number of available vacation hours."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int16 VacationHours
		{
			get
			{
				return this.entityData.VacationHours; 
			}
			
			set
			{
				if (this.entityData.VacationHours == value)
					return;
				
                OnPropertyChanging("VacationHours");                    
				OnColumnChanging(EmployeeColumn.VacationHours, this.entityData.VacationHours);
				this.entityData.VacationHours = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeeColumn.VacationHours, this.entityData.VacationHours);
				OnPropertyChanged("VacationHours");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SickLeaveHours property. 
		///		Number of available sick leave hours.
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Number of available sick leave hours."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int16 SickLeaveHours
		{
			get
			{
				return this.entityData.SickLeaveHours; 
			}
			
			set
			{
				if (this.entityData.SickLeaveHours == value)
					return;
				
                OnPropertyChanging("SickLeaveHours");                    
				OnColumnChanging(EmployeeColumn.SickLeaveHours, this.entityData.SickLeaveHours);
				this.entityData.SickLeaveHours = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeeColumn.SickLeaveHours, this.entityData.SickLeaveHours);
				OnPropertyChanged("SickLeaveHours");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CurrentFlag property. 
		///		0 = Inactive, 1 = Active
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"0 = Inactive, 1 = Active"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean CurrentFlag
		{
			get
			{
				return this.entityData.CurrentFlag; 
			}
			
			set
			{
				if (this.entityData.CurrentFlag == value)
					return;
				
                OnPropertyChanging("CurrentFlag");                    
				OnColumnChanging(EmployeeColumn.CurrentFlag, this.entityData.CurrentFlag);
				this.entityData.CurrentFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeeColumn.CurrentFlag, this.entityData.CurrentFlag);
				OnPropertyChanged("CurrentFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Rowguid property. 
		///		ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, true, false)]
		public virtual System.Guid Rowguid
		{
			get
			{
				return this.entityData.Rowguid; 
			}
			
			set
			{
				if (this.entityData.Rowguid == value)
					return;
				
                OnPropertyChanging("Rowguid");                    
				OnColumnChanging(EmployeeColumn.Rowguid, this.entityData.Rowguid);
				this.entityData.Rowguid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeeColumn.Rowguid, this.entityData.Rowguid);
				OnPropertyChanged("Rowguid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModifiedDate property. 
		///		Date and time the record was last updated.
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Date and time the record was last updated."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ModifiedDate
		{
			get
			{
				return this.entityData.ModifiedDate; 
			}
			
			set
			{
				if (this.entityData.ModifiedDate == value)
					return;
				
                OnPropertyChanging("ModifiedDate");                    
				OnColumnChanging(EmployeeColumn.ModifiedDate, this.entityData.ModifiedDate);
				this.entityData.ModifiedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeeColumn.ModifiedDate, this.entityData.ModifiedDate);
				OnPropertyChanged("ModifiedDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Contact"/>.
		/// </summary>
		/// <value>The source Contact for ContactId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Contact ContactIdSource
      	{
            get { return entityData.ContactIdSource; }
            set { entityData.ContactIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Employee"/>.
		/// </summary>
		/// <value>The source Employee for ManagerId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Employee ManagerIdSource
      	{
            get { return entityData.ManagerIdSource; }
            set { entityData.ManagerIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of Employee objects
		///	which are related to this object through the relation FK_Employee_Employee_ManagerID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Employee> EmployeeCollection
		{
			get { return entityData.EmployeeCollection; }
			set { entityData.EmployeeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of JobCandidate objects
		///	which are related to this object through the relation FK_JobCandidate_Employee_EmployeeID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<JobCandidate> JobCandidateCollection
		{
			get { return entityData.JobCandidateCollection; }
			set { entityData.JobCandidateCollection = value; }	
		}

		/// <summary>
		///	Holds a SalesPerson object
		///	which is related to this object through the relation SalesPerson
		/// </summary>
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SalesPerson SalesPerson
		{
			get { return entityData.SalesPerson; }
			set { entityData.SalesPerson = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EmployeeAddress objects
		///	which are related to this object through the relation FK_EmployeeAddress_Employee_EmployeeID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EmployeeAddress> EmployeeAddressCollection
		{
			get { return entityData.EmployeeAddressCollection; }
			set { entityData.EmployeeAddressCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EmployeePayHistory objects
		///	which are related to this object through the relation FK_EmployeePayHistory_Employee_EmployeeID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EmployeePayHistory> EmployeePayHistoryCollection
		{
			get { return entityData.EmployeePayHistoryCollection; }
			set { entityData.EmployeePayHistoryCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of PurchaseOrderHeader objects
		///	which are related to this object through the relation FK_PurchaseOrderHeader_Employee_EmployeeID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PurchaseOrderHeader> PurchaseOrderHeaderCollection
		{
			get { return entityData.PurchaseOrderHeaderCollection; }
			set { entityData.PurchaseOrderHeaderCollection = value; }	
		}

		/// <summary>
		///	Holds a collection of AddressFromEmployeeAddress objects
		///	which are related to this object through the junction table EmployeeAddress
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Address> AddressIdAddressCollection_From_EmployeeAddress
		{
			get { return entityData.AddressIdAddressCollection_From_EmployeeAddress; }
			set { entityData.AddressIdAddressCollection_From_EmployeeAddress = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EmployeeDepartmentHistory objects
		///	which are related to this object through the relation FK_EmployeeDepartmentHistory_Employee_EmployeeID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EmployeeDepartmentHistory> EmployeeDepartmentHistoryCollection
		{
			get { return entityData.EmployeeDepartmentHistoryCollection; }
			set { entityData.EmployeeDepartmentHistoryCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("NationalIdNumber", "National Id Number"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NationalIdNumber", "National Id Number", 15));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("LoginId", "Login Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LoginId", "Login Id", 256));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Title", "Title"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Title", "Title", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MaritalStatus", "Marital Status"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaritalStatus", "Marital Status", 1));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Gender", "Gender"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Gender", "Gender", 1));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Employee"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"EmployeeID", "NationalIDNumber", "ContactID", "LoginID", "ManagerID", "Title", "BirthDate", "MaritalStatus", "Gender", "HireDate", "SalariedFlag", "VacationHours", "SickLeaveHours", "CurrentFlag", "rowguid", "ModifiedDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EmployeeEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Employee) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Employee>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Employee);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Employee Entity 
		///</summary>
		protected virtual Employee Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Employee copy = new Employee();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EmployeeId = this.EmployeeId;
				copy.NationalIdNumber = this.NationalIdNumber;
				copy.ContactId = this.ContactId;
				copy.LoginId = this.LoginId;
				copy.ManagerId = this.ManagerId;
				copy.Title = this.Title;
				copy.BirthDate = this.BirthDate;
				copy.MaritalStatus = this.MaritalStatus;
				copy.Gender = this.Gender;
				copy.HireDate = this.HireDate;
				copy.SalariedFlag = this.SalariedFlag;
				copy.VacationHours = this.VacationHours;
				copy.SickLeaveHours = this.SickLeaveHours;
				copy.CurrentFlag = this.CurrentFlag;
				copy.Rowguid = this.Rowguid;
				copy.ModifiedDate = this.ModifiedDate;
			
			if (this.ContactIdSource != null && existingCopies.Contains(this.ContactIdSource))
				copy.ContactIdSource = existingCopies[this.ContactIdSource] as Contact;
			else
				copy.ContactIdSource = MakeCopyOf(this.ContactIdSource, existingCopies) as Contact;
			if (this.ManagerIdSource != null && existingCopies.Contains(this.ManagerIdSource))
				copy.ManagerIdSource = existingCopies[this.ManagerIdSource] as Employee;
			else
				copy.ManagerIdSource = MakeCopyOf(this.ManagerIdSource, existingCopies) as Employee;
		
			//deep copy nested objects
			copy.EmployeeCollection = (TList<Employee>) MakeCopyOf(this.EmployeeCollection, existingCopies); 
			copy.JobCandidateCollection = (TList<JobCandidate>) MakeCopyOf(this.JobCandidateCollection, existingCopies); 
			copy.SalesPerson = (SalesPerson) MakeCopyOf(this.SalesPerson, existingCopies); 
			copy.EmployeeAddressCollection = (TList<EmployeeAddress>) MakeCopyOf(this.EmployeeAddressCollection, existingCopies); 
			copy.EmployeePayHistoryCollection = (TList<EmployeePayHistory>) MakeCopyOf(this.EmployeePayHistoryCollection, existingCopies); 
			copy.PurchaseOrderHeaderCollection = (TList<PurchaseOrderHeader>) MakeCopyOf(this.PurchaseOrderHeaderCollection, existingCopies); 
			copy.AddressIdAddressCollection_From_EmployeeAddress = (TList<Address>) MakeCopyOf(this.AddressIdAddressCollection_From_EmployeeAddress, existingCopies); 
			copy.EmployeeDepartmentHistoryCollection = (TList<EmployeeDepartmentHistory>) MakeCopyOf(this.EmployeeDepartmentHistoryCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Employee Entity 
		///</summary>
		public virtual Employee Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Employee Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Employee DeepCopy()
		{
			return EntityHelper.Clone<Employee>(this as Employee);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EmployeeEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EmployeeEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EmployeeEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EmployeeColumn column)
		{
			switch(column)
			{
					case EmployeeColumn.EmployeeId:
					return entityData.EmployeeId != _originalData.EmployeeId;
					case EmployeeColumn.NationalIdNumber:
					return entityData.NationalIdNumber != _originalData.NationalIdNumber;
					case EmployeeColumn.ContactId:
					return entityData.ContactId != _originalData.ContactId;
					case EmployeeColumn.LoginId:
					return entityData.LoginId != _originalData.LoginId;
					case EmployeeColumn.ManagerId:
					return entityData.ManagerId != _originalData.ManagerId;
					case EmployeeColumn.Title:
					return entityData.Title != _originalData.Title;
					case EmployeeColumn.BirthDate:
					return entityData.BirthDate != _originalData.BirthDate;
					case EmployeeColumn.MaritalStatus:
					return entityData.MaritalStatus != _originalData.MaritalStatus;
					case EmployeeColumn.Gender:
					return entityData.Gender != _originalData.Gender;
					case EmployeeColumn.HireDate:
					return entityData.HireDate != _originalData.HireDate;
					case EmployeeColumn.SalariedFlag:
					return entityData.SalariedFlag != _originalData.SalariedFlag;
					case EmployeeColumn.VacationHours:
					return entityData.VacationHours != _originalData.VacationHours;
					case EmployeeColumn.SickLeaveHours:
					return entityData.SickLeaveHours != _originalData.SickLeaveHours;
					case EmployeeColumn.CurrentFlag:
					return entityData.CurrentFlag != _originalData.CurrentFlag;
					case EmployeeColumn.Rowguid:
					return entityData.Rowguid != _originalData.Rowguid;
					case EmployeeColumn.ModifiedDate:
					return entityData.ModifiedDate != _originalData.ModifiedDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EmployeeColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EmployeeId != _originalData.EmployeeId;
			result = result || entityData.NationalIdNumber != _originalData.NationalIdNumber;
			result = result || entityData.ContactId != _originalData.ContactId;
			result = result || entityData.LoginId != _originalData.LoginId;
			result = result || entityData.ManagerId != _originalData.ManagerId;
			result = result || entityData.Title != _originalData.Title;
			result = result || entityData.BirthDate != _originalData.BirthDate;
			result = result || entityData.MaritalStatus != _originalData.MaritalStatus;
			result = result || entityData.Gender != _originalData.Gender;
			result = result || entityData.HireDate != _originalData.HireDate;
			result = result || entityData.SalariedFlag != _originalData.SalariedFlag;
			result = result || entityData.VacationHours != _originalData.VacationHours;
			result = result || entityData.SickLeaveHours != _originalData.SickLeaveHours;
			result = result || entityData.CurrentFlag != _originalData.CurrentFlag;
			result = result || entityData.Rowguid != _originalData.Rowguid;
			result = result || entityData.ModifiedDate != _originalData.ModifiedDate;
			return result;
		}	
		
		///<summary>
		///  Returns a Employee Entity with the original data.
		///</summary>
		public Employee GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEmployee(
				_originalData.NationalIdNumber,
				_originalData.ContactId,
				_originalData.LoginId,
				_originalData.ManagerId,
				_originalData.Title,
				_originalData.BirthDate,
				_originalData.MaritalStatus,
				_originalData.Gender,
				_originalData.HireDate,
				_originalData.SalariedFlag,
				_originalData.VacationHours,
				_originalData.SickLeaveHours,
				_originalData.CurrentFlag,
				_originalData.ModifiedDate
				);
				
			return (Employee)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EmployeeBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EmployeeBase)
				return ValueEquals(this, (EmployeeBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EmployeeBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EmployeeId.GetHashCode() ^ 
					this.NationalIdNumber.GetHashCode() ^ 
					this.ContactId.GetHashCode() ^ 
					this.LoginId.GetHashCode() ^ 
					((this.ManagerId == null) ? string.Empty : this.ManagerId.ToString()).GetHashCode() ^ 
					this.Title.GetHashCode() ^ 
					this.BirthDate.GetHashCode() ^ 
					this.MaritalStatus.GetHashCode() ^ 
					this.Gender.GetHashCode() ^ 
					this.HireDate.GetHashCode() ^ 
					this.SalariedFlag.GetHashCode() ^ 
					this.VacationHours.GetHashCode() ^ 
					this.SickLeaveHours.GetHashCode() ^ 
					this.CurrentFlag.GetHashCode() ^ 
					this.Rowguid.GetHashCode() ^ 
					this.ModifiedDate.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EmployeeBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EmployeeBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EmployeeBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EmployeeBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EmployeeBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EmployeeBase Object1, EmployeeBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EmployeeId != Object2.EmployeeId)
				equal = false;
			if (Object1.NationalIdNumber != Object2.NationalIdNumber)
				equal = false;
			if (Object1.ContactId != Object2.ContactId)
				equal = false;
			if (Object1.LoginId != Object2.LoginId)
				equal = false;
			if ( Object1.ManagerId != null && Object2.ManagerId != null )
			{
				if (Object1.ManagerId != Object2.ManagerId)
					equal = false;
			}
			else if (Object1.ManagerId == null ^ Object2.ManagerId == null )
			{
				equal = false;
			}
			if (Object1.Title != Object2.Title)
				equal = false;
			if (Object1.BirthDate != Object2.BirthDate)
				equal = false;
			if (Object1.MaritalStatus != Object2.MaritalStatus)
				equal = false;
			if (Object1.Gender != Object2.Gender)
				equal = false;
			if (Object1.HireDate != Object2.HireDate)
				equal = false;
			if (Object1.SalariedFlag != Object2.SalariedFlag)
				equal = false;
			if (Object1.VacationHours != Object2.VacationHours)
				equal = false;
			if (Object1.SickLeaveHours != Object2.SickLeaveHours)
				equal = false;
			if (Object1.CurrentFlag != Object2.CurrentFlag)
				equal = false;
			if (Object1.Rowguid != Object2.Rowguid)
				equal = false;
			if (Object1.ModifiedDate != Object2.ModifiedDate)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EmployeeBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EmployeeComparer GetComparer()
        {
            return new EmployeeComparer();
        }
        */

        // Comparer delegates back to Employee
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Employee rhs, EmployeeColumn which)
        {
            switch (which)
            {
            	
            	
            	case EmployeeColumn.EmployeeId:
            		return this.EmployeeId.CompareTo(rhs.EmployeeId);
            		
            		                 
            	
            	
            	case EmployeeColumn.NationalIdNumber:
            		return this.NationalIdNumber.CompareTo(rhs.NationalIdNumber);
            		
            		                 
            	
            	
            	case EmployeeColumn.ContactId:
            		return this.ContactId.CompareTo(rhs.ContactId);
            		
            		                 
            	
            	
            	case EmployeeColumn.LoginId:
            		return this.LoginId.CompareTo(rhs.LoginId);
            		
            		                 
            	
            	
            	case EmployeeColumn.ManagerId:
            		return this.ManagerId.Value.CompareTo(rhs.ManagerId.Value);
            		
            		                 
            	
            	
            	case EmployeeColumn.Title:
            		return this.Title.CompareTo(rhs.Title);
            		
            		                 
            	
            	
            	case EmployeeColumn.BirthDate:
            		return this.BirthDate.CompareTo(rhs.BirthDate);
            		
            		                 
            	
            	
            	case EmployeeColumn.MaritalStatus:
            		return this.MaritalStatus.CompareTo(rhs.MaritalStatus);
            		
            		                 
            	
            	
            	case EmployeeColumn.Gender:
            		return this.Gender.CompareTo(rhs.Gender);
            		
            		                 
            	
            	
            	case EmployeeColumn.HireDate:
            		return this.HireDate.CompareTo(rhs.HireDate);
            		
            		                 
            	
            	
            	case EmployeeColumn.SalariedFlag:
            		return this.SalariedFlag.CompareTo(rhs.SalariedFlag);
            		
            		                 
            	
            	
            	case EmployeeColumn.VacationHours:
            		return this.VacationHours.CompareTo(rhs.VacationHours);
            		
            		                 
            	
            	
            	case EmployeeColumn.SickLeaveHours:
            		return this.SickLeaveHours.CompareTo(rhs.SickLeaveHours);
            		
            		                 
            	
            	
            	case EmployeeColumn.CurrentFlag:
            		return this.CurrentFlag.CompareTo(rhs.CurrentFlag);
            		
            		                 
            	
            	
            	case EmployeeColumn.Rowguid:
            		return this.Rowguid.CompareTo(rhs.Rowguid);
            		
            		                 
            	
            	
            	case EmployeeColumn.ModifiedDate:
            		return this.ModifiedDate.CompareTo(rhs.ModifiedDate);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EmployeeKey> Members
		
		// member variable for the EntityId property
		private EmployeeKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EmployeeKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EmployeeKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Employee")
					.Append("|").Append( this.EmployeeId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{17}{16}- EmployeeId: {0}{16}- NationalIdNumber: {1}{16}- ContactId: {2}{16}- LoginId: {3}{16}- ManagerId: {4}{16}- Title: {5}{16}- BirthDate: {6}{16}- MaritalStatus: {7}{16}- Gender: {8}{16}- HireDate: {9}{16}- SalariedFlag: {10}{16}- VacationHours: {11}{16}- SickLeaveHours: {12}{16}- CurrentFlag: {13}{16}- Rowguid: {14}{16}- ModifiedDate: {15}{16}{18}", 
				this.EmployeeId,
				this.NationalIdNumber,
				this.ContactId,
				this.LoginId,
				(this.ManagerId == null) ? string.Empty : this.ManagerId.ToString(),
				this.Title,
				this.BirthDate,
				this.MaritalStatus,
				this.Gender,
				this.HireDate,
				this.SalariedFlag,
				this.VacationHours,
				this.SickLeaveHours,
				this.CurrentFlag,
				this.Rowguid,
				this.ModifiedDate,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Employee' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EmployeeEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// EmployeeID : Primary key for Employee records.
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Employee"</remarks>
		public System.Int32 EmployeeId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// NationalIDNumber : Unique national identification number such as a social security number.
		/// </summary>
		public System.String NationalIdNumber = string.Empty;
		
		/// <summary>
		/// ContactID : Identifies the employee in the Contact table. Foreign key to Contact.ContactID.
		/// </summary>
		public System.Int32 ContactId = (int)0;
		
		/// <summary>
		/// LoginID : Network login.
		/// </summary>
		public System.String LoginId = string.Empty;
		
		/// <summary>
		/// ManagerID : Manager to whom the employee is assigned. Foreign Key to Employee.M
		/// </summary>
		public System.Int32? ManagerId = null;
		
		/// <summary>
		/// Title : Work title such as Buyer or Sales Representative.
		/// </summary>
		public System.String Title = string.Empty;
		
		/// <summary>
		/// BirthDate : Date of birth.
		/// </summary>
		public System.DateTime BirthDate = DateTime.MinValue;
		
		/// <summary>
		/// MaritalStatus : M = Married, S = Single
		/// </summary>
		public System.String MaritalStatus = string.Empty;
		
		/// <summary>
		/// Gender : M = Male, F = Female
		/// </summary>
		public System.String Gender = string.Empty;
		
		/// <summary>
		/// HireDate : Employee hired on this date.
		/// </summary>
		public System.DateTime HireDate = DateTime.MinValue;
		
		/// <summary>
		/// SalariedFlag : Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.
		/// </summary>
		public System.Boolean SalariedFlag = false;
		
		/// <summary>
		/// VacationHours : Number of available vacation hours.
		/// </summary>
		public System.Int16 VacationHours = (short)0;
		
		/// <summary>
		/// SickLeaveHours : Number of available sick leave hours.
		/// </summary>
		public System.Int16 SickLeaveHours = (short)0;
		
		/// <summary>
		/// CurrentFlag : 0 = Inactive, 1 = Active
		/// </summary>
		public System.Boolean CurrentFlag = false;
		
		/// <summary>
		/// rowguid : ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		public System.Guid Rowguid = Guid.Empty;
		
		/// <summary>
		/// ModifiedDate : Date and time the record was last updated.
		/// </summary>
		public System.DateTime ModifiedDate = DateTime.MinValue;
		#endregion
			
		#region Source Foreign Key Property
				
		private Contact _contactIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Contact"/>.
		/// </summary>
		/// <value>The source Contact for ContactId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Contact ContactIdSource
      	{
            get { return this._contactIdSource; }
            set { this._contactIdSource = value; }
      	}
		private Employee _managerIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Employee"/>.
		/// </summary>
		/// <value>The source Employee for ManagerId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Employee ManagerIdSource
      	{
            get { return this._managerIdSource; }
            set { this._managerIdSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region EmployeeCollection
		
		private TList<Employee> _employeeManagerId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _employeeManagerId
		/// </summary>
		
		public TList<Employee> EmployeeCollection
		{
			get
			{
				if (_employeeManagerId == null)
				{
				_employeeManagerId = new TList<Employee>();
				}
	
				return _employeeManagerId;
			}
			set { _employeeManagerId = value; }
		}
		
		#endregion

		#region JobCandidateCollection
		
		private TList<JobCandidate> _jobCandidateEmployeeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _jobCandidateEmployeeId
		/// </summary>
		
		public TList<JobCandidate> JobCandidateCollection
		{
			get
			{
				if (_jobCandidateEmployeeId == null)
				{
				_jobCandidateEmployeeId = new TList<JobCandidate>();
				}
	
				return _jobCandidateEmployeeId;
			}
			set { _jobCandidateEmployeeId = value; }
		}
		
		#endregion

		#region SalesPerson
		
		private SalesPerson _salesPersonSalesPersonId;
		
		/// <summary>
		///	Holds a  SalesPerson entity object
		///	which is related to this object through the relation _salesPersonSalesPersonId
		/// </summary>
		
		public SalesPerson SalesPerson
		{
			get {		return _salesPersonSalesPersonId;		}
			set { 	_salesPersonSalesPersonId = value; 	}
		}
		
		#endregion 

		#region EmployeeAddressCollection
		
		private TList<EmployeeAddress> _employeeAddressEmployeeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _employeeAddressEmployeeId
		/// </summary>
		
		public TList<EmployeeAddress> EmployeeAddressCollection
		{
			get
			{
				if (_employeeAddressEmployeeId == null)
				{
				_employeeAddressEmployeeId = new TList<EmployeeAddress>();
				}
	
				return _employeeAddressEmployeeId;
			}
			set { _employeeAddressEmployeeId = value; }
		}
		
		#endregion

		#region EmployeePayHistoryCollection
		
		private TList<EmployeePayHistory> _employeePayHistoryEmployeeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _employeePayHistoryEmployeeId
		/// </summary>
		
		public TList<EmployeePayHistory> EmployeePayHistoryCollection
		{
			get
			{
				if (_employeePayHistoryEmployeeId == null)
				{
				_employeePayHistoryEmployeeId = new TList<EmployeePayHistory>();
				}
	
				return _employeePayHistoryEmployeeId;
			}
			set { _employeePayHistoryEmployeeId = value; }
		}
		
		#endregion

		#region PurchaseOrderHeaderCollection
		
		private TList<PurchaseOrderHeader> _purchaseOrderHeaderEmployeeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _purchaseOrderHeaderEmployeeId
		/// </summary>
		
		public TList<PurchaseOrderHeader> PurchaseOrderHeaderCollection
		{
			get
			{
				if (_purchaseOrderHeaderEmployeeId == null)
				{
				_purchaseOrderHeaderEmployeeId = new TList<PurchaseOrderHeader>();
				}
	
				return _purchaseOrderHeaderEmployeeId;
			}
			set { _purchaseOrderHeaderEmployeeId = value; }
		}
		
		#endregion

		#region AddressIdAddressCollection_From_EmployeeAddress
		
		private TList<Address> addressIdAddressCollectionFromEmployeeAddress;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table addressIdAddressCollectionFromEmployeeAddress
		/// </summary>
		
		public TList<Address> AddressIdAddressCollection_From_EmployeeAddress
		{
			get
			{
				if (addressIdAddressCollectionFromEmployeeAddress == null)
				{
				addressIdAddressCollectionFromEmployeeAddress = new TList<Address>();
				}
	
				return addressIdAddressCollectionFromEmployeeAddress;
			}
			set { addressIdAddressCollectionFromEmployeeAddress = value; }
		}
		
		#endregion 

		#region EmployeeDepartmentHistoryCollection
		
		private TList<EmployeeDepartmentHistory> _employeeDepartmentHistoryEmployeeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _employeeDepartmentHistoryEmployeeId
		/// </summary>
		
		public TList<EmployeeDepartmentHistory> EmployeeDepartmentHistoryCollection
		{
			get
			{
				if (_employeeDepartmentHistoryEmployeeId == null)
				{
				_employeeDepartmentHistoryEmployeeId = new TList<EmployeeDepartmentHistory>();
				}
	
				return _employeeDepartmentHistoryEmployeeId;
			}
			set { _employeeDepartmentHistoryEmployeeId = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EmployeeEntityData _tmp = new EmployeeEntityData();
						
			_tmp.EmployeeId = this.EmployeeId;
			
			_tmp.NationalIdNumber = this.NationalIdNumber;
			_tmp.ContactId = this.ContactId;
			_tmp.LoginId = this.LoginId;
			_tmp.ManagerId = this.ManagerId;
			_tmp.Title = this.Title;
			_tmp.BirthDate = this.BirthDate;
			_tmp.MaritalStatus = this.MaritalStatus;
			_tmp.Gender = this.Gender;
			_tmp.HireDate = this.HireDate;
			_tmp.SalariedFlag = this.SalariedFlag;
			_tmp.VacationHours = this.VacationHours;
			_tmp.SickLeaveHours = this.SickLeaveHours;
			_tmp.CurrentFlag = this.CurrentFlag;
			_tmp.Rowguid = this.Rowguid;
			_tmp.ModifiedDate = this.ModifiedDate;
			
			#region Source Parent Composite Entities
			if (this.ContactIdSource != null)
				_tmp.ContactIdSource = MakeCopyOf(this.ContactIdSource) as Contact;
			if (this.ManagerIdSource != null)
				_tmp.ManagerIdSource = MakeCopyOf(this.ManagerIdSource) as Employee;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._employeeManagerId != null)
				_tmp.EmployeeCollection = (TList<Employee>) MakeCopyOf(this.EmployeeCollection); 
			if (this._jobCandidateEmployeeId != null)
				_tmp.JobCandidateCollection = (TList<JobCandidate>) MakeCopyOf(this.JobCandidateCollection); 
			if (this._salesPersonSalesPersonId != null)
				_tmp.SalesPerson = (SalesPerson) MakeCopyOf(this.SalesPerson); 
			if (this._employeeAddressEmployeeId != null)
				_tmp.EmployeeAddressCollection = (TList<EmployeeAddress>) MakeCopyOf(this.EmployeeAddressCollection); 
			if (this._employeePayHistoryEmployeeId != null)
				_tmp.EmployeePayHistoryCollection = (TList<EmployeePayHistory>) MakeCopyOf(this.EmployeePayHistoryCollection); 
			if (this._purchaseOrderHeaderEmployeeId != null)
				_tmp.PurchaseOrderHeaderCollection = (TList<PurchaseOrderHeader>) MakeCopyOf(this.PurchaseOrderHeaderCollection); 
			if (this.addressIdAddressCollectionFromEmployeeAddress != null)
				_tmp.AddressIdAddressCollection_From_EmployeeAddress = (TList<Address>) MakeCopyOf(this.AddressIdAddressCollection_From_EmployeeAddress); 
			if (this._employeeDepartmentHistoryEmployeeId != null)
				_tmp.EmployeeDepartmentHistoryCollection = (TList<EmployeeDepartmentHistory>) MakeCopyOf(this.EmployeeDepartmentHistoryCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EmployeeEntityData _tmp = new EmployeeEntityData();
						
			_tmp.EmployeeId = this.EmployeeId;
			
			_tmp.NationalIdNumber = this.NationalIdNumber;
			_tmp.ContactId = this.ContactId;
			_tmp.LoginId = this.LoginId;
			_tmp.ManagerId = this.ManagerId;
			_tmp.Title = this.Title;
			_tmp.BirthDate = this.BirthDate;
			_tmp.MaritalStatus = this.MaritalStatus;
			_tmp.Gender = this.Gender;
			_tmp.HireDate = this.HireDate;
			_tmp.SalariedFlag = this.SalariedFlag;
			_tmp.VacationHours = this.VacationHours;
			_tmp.SickLeaveHours = this.SickLeaveHours;
			_tmp.CurrentFlag = this.CurrentFlag;
			_tmp.Rowguid = this.Rowguid;
			_tmp.ModifiedDate = this.ModifiedDate;
			
			#region Source Parent Composite Entities
			if (this.ContactIdSource != null && existingCopies.Contains(this.ContactIdSource))
				_tmp.ContactIdSource = existingCopies[this.ContactIdSource] as Contact;
			else
				_tmp.ContactIdSource = MakeCopyOf(this.ContactIdSource, existingCopies) as Contact;
			if (this.ManagerIdSource != null && existingCopies.Contains(this.ManagerIdSource))
				_tmp.ManagerIdSource = existingCopies[this.ManagerIdSource] as Employee;
			else
				_tmp.ManagerIdSource = MakeCopyOf(this.ManagerIdSource, existingCopies) as Employee;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EmployeeCollection = (TList<Employee>) MakeCopyOf(this.EmployeeCollection, existingCopies); 
			_tmp.JobCandidateCollection = (TList<JobCandidate>) MakeCopyOf(this.JobCandidateCollection, existingCopies); 
			_tmp.SalesPerson = (SalesPerson) MakeCopyOf(this.SalesPerson, existingCopies); 
			_tmp.EmployeeAddressCollection = (TList<EmployeeAddress>) MakeCopyOf(this.EmployeeAddressCollection, existingCopies); 
			_tmp.EmployeePayHistoryCollection = (TList<EmployeePayHistory>) MakeCopyOf(this.EmployeePayHistoryCollection, existingCopies); 
			_tmp.PurchaseOrderHeaderCollection = (TList<PurchaseOrderHeader>) MakeCopyOf(this.PurchaseOrderHeaderCollection, existingCopies); 
			_tmp.AddressIdAddressCollection_From_EmployeeAddress = (TList<Address>) MakeCopyOf(this.AddressIdAddressCollection_From_EmployeeAddress, existingCopies); 
			_tmp.EmployeeDepartmentHistoryCollection = (TList<EmployeeDepartmentHistory>) MakeCopyOf(this.EmployeeDepartmentHistoryCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EmployeeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EmployeeColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EmployeeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EmployeeColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EmployeeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EmployeeColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EmployeeEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EmployeeEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EmployeeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EmployeeColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EmployeeEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EmployeeEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EmployeeEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Employee"/> object.
	/// </remarks>
	public class EmployeeEventArgs : System.EventArgs
	{
		private EmployeeColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EmployeeEventArgs class.
		///</summary>
		public EmployeeEventArgs(EmployeeColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EmployeeEventArgs class.
		///</summary>
		public EmployeeEventArgs(EmployeeColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EmployeeColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EmployeeColumn" />
		public EmployeeColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Employee related events.
	///</summary>
	public delegate void EmployeeEventHandler(object sender, EmployeeEventArgs e);
	
	#region EmployeeComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EmployeeComparer : System.Collections.Generic.IComparer<Employee>
	{
		EmployeeColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EmployeeComparer"/> class.
        /// </summary>
		public EmployeeComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EmployeeComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EmployeeComparer(EmployeeColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Employee"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Employee"/> to compare.</param>
        /// <param name="b">The second <c>Employee</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Employee a, Employee b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Employee entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Employee a, Employee b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EmployeeColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EmployeeKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Employee"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EmployeeKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EmployeeKey class.
		/// </summary>
		public EmployeeKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EmployeeKey class.
		/// </summary>
		public EmployeeKey(EmployeeBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EmployeeId = entity.EmployeeId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EmployeeKey class.
		/// </summary>
		public EmployeeKey(System.Int32 _employeeId)
		{
			#region Init Properties

			this.EmployeeId = _employeeId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EmployeeBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EmployeeBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EmployeeId property
		private System.Int32 _employeeId;
		
		/// <summary>
		/// Gets or sets the EmployeeId property.
		/// </summary>
		public System.Int32 EmployeeId
		{
			get { return _employeeId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EmployeeId = value;
				
				_employeeId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EmployeeId = ( values["EmployeeId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["EmployeeId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EmployeeId", EmployeeId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EmployeeId: {0}{1}",
								EmployeeId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EmployeeColumn Enum
	
	/// <summary>
	/// Enumerate the Employee columns.
	/// </summary>
	[Serializable]
	public enum EmployeeColumn : int
	{
		/// <summary>
		/// EmployeeId : Primary key for Employee records.
		/// </summary>
		[EnumTextValue("EmployeeID")]
		[ColumnEnum("EmployeeID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		EmployeeId = 1,
		/// <summary>
		/// NationalIdNumber : Unique national identification number such as a social security number.
		/// </summary>
		[EnumTextValue("NationalIDNumber")]
		[ColumnEnum("NationalIDNumber", typeof(System.String), System.Data.DbType.String, false, false, false, 15)]
		NationalIdNumber = 2,
		/// <summary>
		/// ContactId : Identifies the employee in the Contact table. Foreign key to Contact.ContactID.
		/// </summary>
		[EnumTextValue("ContactID")]
		[ColumnEnum("ContactID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ContactId = 3,
		/// <summary>
		/// LoginId : Network login.
		/// </summary>
		[EnumTextValue("LoginID")]
		[ColumnEnum("LoginID", typeof(System.String), System.Data.DbType.String, false, false, false, 256)]
		LoginId = 4,
		/// <summary>
		/// ManagerId : Manager to whom the employee is assigned. Foreign Key to Employee.M
		/// </summary>
		[EnumTextValue("ManagerID")]
		[ColumnEnum("ManagerID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ManagerId = 5,
		/// <summary>
		/// Title : Work title such as Buyer or Sales Representative.
		/// </summary>
		[EnumTextValue("Title")]
		[ColumnEnum("Title", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Title = 6,
		/// <summary>
		/// BirthDate : Date of birth.
		/// </summary>
		[EnumTextValue("BirthDate")]
		[ColumnEnum("BirthDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		BirthDate = 7,
		/// <summary>
		/// MaritalStatus : M = Married, S = Single
		/// </summary>
		[EnumTextValue("MaritalStatus")]
		[ColumnEnum("MaritalStatus", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, false, 1)]
		MaritalStatus = 8,
		/// <summary>
		/// Gender : M = Male, F = Female
		/// </summary>
		[EnumTextValue("Gender")]
		[ColumnEnum("Gender", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, false, 1)]
		Gender = 9,
		/// <summary>
		/// HireDate : Employee hired on this date.
		/// </summary>
		[EnumTextValue("HireDate")]
		[ColumnEnum("HireDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		HireDate = 10,
		/// <summary>
		/// SalariedFlag : Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.
		/// </summary>
		[EnumTextValue("SalariedFlag")]
		[ColumnEnum("SalariedFlag", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		SalariedFlag = 11,
		/// <summary>
		/// VacationHours : Number of available vacation hours.
		/// </summary>
		[EnumTextValue("VacationHours")]
		[ColumnEnum("VacationHours", typeof(System.Int16), System.Data.DbType.Int16, false, false, false)]
		VacationHours = 12,
		/// <summary>
		/// SickLeaveHours : Number of available sick leave hours.
		/// </summary>
		[EnumTextValue("SickLeaveHours")]
		[ColumnEnum("SickLeaveHours", typeof(System.Int16), System.Data.DbType.Int16, false, false, false)]
		SickLeaveHours = 13,
		/// <summary>
		/// CurrentFlag : 0 = Inactive, 1 = Active
		/// </summary>
		[EnumTextValue("CurrentFlag")]
		[ColumnEnum("CurrentFlag", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		CurrentFlag = 14,
		/// <summary>
		/// Rowguid : ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[EnumTextValue("rowguid")]
		[ColumnEnum("rowguid", typeof(System.Guid), System.Data.DbType.Guid, false, true, false)]
		Rowguid = 15,
		/// <summary>
		/// ModifiedDate : Date and time the record was last updated.
		/// </summary>
		[EnumTextValue("ModifiedDate")]
		[ColumnEnum("ModifiedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ModifiedDate = 16
	}//End enum

	#endregion EmployeeColumn Enum

} // end namespace
