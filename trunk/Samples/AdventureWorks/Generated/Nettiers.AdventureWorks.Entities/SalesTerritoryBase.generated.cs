
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SalesTerritory.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Nettiers.AdventureWorks.Entities.Validation;
#endregion

namespace Nettiers.AdventureWorks.Entities
{
	///<summary>
	/// Sales territory lookup table.	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SalesTerritoryBase : EntityBase, ISalesTerritory, IEntityId<SalesTerritoryKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SalesTerritoryEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SalesTerritoryEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SalesTerritoryEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SalesTerritory> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SalesTerritoryEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SalesTerritoryEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SalesTerritoryBase"/> instance.
		///</summary>
		public SalesTerritoryBase()
		{
			this.entityData = new SalesTerritoryEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SalesTerritoryBase"/> instance.
		///</summary>
		///<param name="_name">Sales territory description</param>
		///<param name="_countryRegionCode">ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode. </param>
		///<param name="_group">Geographic area to which the sales territory belong.</param>
		///<param name="_salesYtd">Sales in the territory year to date.</param>
		///<param name="_salesLastYear">Sales in the territory the previous year.</param>
		///<param name="_costYtd">Business costs in the territory year to date.</param>
		///<param name="_costLastYear">Business costs in the territory the previous year.</param>
		///<param name="_modifiedDate">Date and time the record was last updated.</param>
		public SalesTerritoryBase(System.String _name, System.String _countryRegionCode, 
			System.String _group, System.Decimal _salesYtd, System.Decimal _salesLastYear, 
			System.Decimal _costYtd, System.Decimal _costLastYear, System.DateTime _modifiedDate)
		{
			this.entityData = new SalesTerritoryEntityData();
			this.backupData = null;

			this.Name = _name;
			this.CountryRegionCode = _countryRegionCode;
			this.Group = _group;
			this.SalesYtd = _salesYtd;
			this.SalesLastYear = _salesLastYear;
			this.CostYtd = _costYtd;
			this.CostLastYear = _costLastYear;
			this.ModifiedDate = _modifiedDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SalesTerritory"/> instance.
		///</summary>
		///<param name="_name">Sales territory description</param>
		///<param name="_countryRegionCode">ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode. </param>
		///<param name="_group">Geographic area to which the sales territory belong.</param>
		///<param name="_salesYtd">Sales in the territory year to date.</param>
		///<param name="_salesLastYear">Sales in the territory the previous year.</param>
		///<param name="_costYtd">Business costs in the territory year to date.</param>
		///<param name="_costLastYear">Business costs in the territory the previous year.</param>
		///<param name="_modifiedDate">Date and time the record was last updated.</param>
		public static SalesTerritory CreateSalesTerritory(System.String _name, System.String _countryRegionCode, 
			System.String _group, System.Decimal _salesYtd, System.Decimal _salesLastYear, 
			System.Decimal _costYtd, System.Decimal _costLastYear, System.DateTime _modifiedDate)
		{
			SalesTerritory newSalesTerritory = new SalesTerritory();
			newSalesTerritory.Name = _name;
			newSalesTerritory.CountryRegionCode = _countryRegionCode;
			newSalesTerritory.Group = _group;
			newSalesTerritory.SalesYtd = _salesYtd;
			newSalesTerritory.SalesLastYear = _salesLastYear;
			newSalesTerritory.CostYtd = _costYtd;
			newSalesTerritory.CostLastYear = _costLastYear;
			newSalesTerritory.ModifiedDate = _modifiedDate;
			return newSalesTerritory;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the TerritoryId property. 
		///		Primary key for SalesTerritory records.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@"Primary key for SalesTerritory records."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 TerritoryId
		{
			get
			{
				return this.entityData.TerritoryId; 
			}
			
			set
			{
				if (this.entityData.TerritoryId == value)
					return;
				
                OnPropertyChanging("TerritoryId");                    
				OnColumnChanging(SalesTerritoryColumn.TerritoryId, this.entityData.TerritoryId);
				this.entityData.TerritoryId = value;
				this.EntityId.TerritoryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesTerritoryColumn.TerritoryId, this.entityData.TerritoryId);
				OnPropertyChanged("TerritoryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		Sales territory description
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Sales territory description"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
				
                OnPropertyChanging("Name");                    
				OnColumnChanging(SalesTerritoryColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesTerritoryColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CountryRegionCode property. 
		///		ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode. 
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode. "), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 3)]
		public virtual System.String CountryRegionCode
		{
			get
			{
				return this.entityData.CountryRegionCode; 
			}
			
			set
			{
				if (this.entityData.CountryRegionCode == value)
					return;
				
                OnPropertyChanging("CountryRegionCode");                    
				OnColumnChanging(SalesTerritoryColumn.CountryRegionCode, this.entityData.CountryRegionCode);
				this.entityData.CountryRegionCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesTerritoryColumn.CountryRegionCode, this.entityData.CountryRegionCode);
				OnPropertyChanged("CountryRegionCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Group property. 
		///		Geographic area to which the sales territory belong.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Geographic area to which the sales territory belong."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String Group
		{
			get
			{
				return this.entityData.Group; 
			}
			
			set
			{
				if (this.entityData.Group == value)
					return;
				
                OnPropertyChanging("Group");                    
				OnColumnChanging(SalesTerritoryColumn.Group, this.entityData.Group);
				this.entityData.Group = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesTerritoryColumn.Group, this.entityData.Group);
				OnPropertyChanged("Group");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SalesYtd property. 
		///		Sales in the territory year to date.
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Sales in the territory year to date."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SalesYtd
		{
			get
			{
				return this.entityData.SalesYtd; 
			}
			
			set
			{
				if (this.entityData.SalesYtd == value)
					return;
				
                OnPropertyChanging("SalesYtd");                    
				OnColumnChanging(SalesTerritoryColumn.SalesYtd, this.entityData.SalesYtd);
				this.entityData.SalesYtd = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesTerritoryColumn.SalesYtd, this.entityData.SalesYtd);
				OnPropertyChanged("SalesYtd");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SalesLastYear property. 
		///		Sales in the territory the previous year.
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Sales in the territory the previous year."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SalesLastYear
		{
			get
			{
				return this.entityData.SalesLastYear; 
			}
			
			set
			{
				if (this.entityData.SalesLastYear == value)
					return;
				
                OnPropertyChanging("SalesLastYear");                    
				OnColumnChanging(SalesTerritoryColumn.SalesLastYear, this.entityData.SalesLastYear);
				this.entityData.SalesLastYear = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesTerritoryColumn.SalesLastYear, this.entityData.SalesLastYear);
				OnPropertyChanged("SalesLastYear");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CostYtd property. 
		///		Business costs in the territory year to date.
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Business costs in the territory year to date."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal CostYtd
		{
			get
			{
				return this.entityData.CostYtd; 
			}
			
			set
			{
				if (this.entityData.CostYtd == value)
					return;
				
                OnPropertyChanging("CostYtd");                    
				OnColumnChanging(SalesTerritoryColumn.CostYtd, this.entityData.CostYtd);
				this.entityData.CostYtd = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesTerritoryColumn.CostYtd, this.entityData.CostYtd);
				OnPropertyChanged("CostYtd");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CostLastYear property. 
		///		Business costs in the territory the previous year.
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Business costs in the territory the previous year."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal CostLastYear
		{
			get
			{
				return this.entityData.CostLastYear; 
			}
			
			set
			{
				if (this.entityData.CostLastYear == value)
					return;
				
                OnPropertyChanging("CostLastYear");                    
				OnColumnChanging(SalesTerritoryColumn.CostLastYear, this.entityData.CostLastYear);
				this.entityData.CostLastYear = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesTerritoryColumn.CostLastYear, this.entityData.CostLastYear);
				OnPropertyChanged("CostLastYear");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Rowguid property. 
		///		ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, true, false)]
		public virtual System.Guid Rowguid
		{
			get
			{
				return this.entityData.Rowguid; 
			}
			
			set
			{
				if (this.entityData.Rowguid == value)
					return;
				
                OnPropertyChanging("Rowguid");                    
				OnColumnChanging(SalesTerritoryColumn.Rowguid, this.entityData.Rowguid);
				this.entityData.Rowguid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesTerritoryColumn.Rowguid, this.entityData.Rowguid);
				OnPropertyChanged("Rowguid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModifiedDate property. 
		///		Date and time the record was last updated.
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Date and time the record was last updated."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ModifiedDate
		{
			get
			{
				return this.entityData.ModifiedDate; 
			}
			
			set
			{
				if (this.entityData.ModifiedDate == value)
					return;
				
                OnPropertyChanging("ModifiedDate");                    
				OnColumnChanging(SalesTerritoryColumn.ModifiedDate, this.entityData.ModifiedDate);
				this.entityData.ModifiedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesTerritoryColumn.ModifiedDate, this.entityData.ModifiedDate);
				OnPropertyChanged("ModifiedDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of StateProvince objects
		///	which are related to this object through the relation FK_StateProvince_SalesTerritory_TerritoryID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<StateProvince> StateProvinceCollection
		{
			get { return entityData.StateProvinceCollection; }
			set { entityData.StateProvinceCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SalesOrderHeader objects
		///	which are related to this object through the relation FK_SalesOrderHeader_SalesTerritory_TerritoryID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SalesOrderHeader> SalesOrderHeaderCollection
		{
			get { return entityData.SalesOrderHeaderCollection; }
			set { entityData.SalesOrderHeaderCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SalesPerson objects
		///	which are related to this object through the relation FK_SalesPerson_SalesTerritory_TerritoryID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SalesPerson> SalesPersonCollection
		{
			get { return entityData.SalesPersonCollection; }
			set { entityData.SalesPersonCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SalesTerritoryHistory objects
		///	which are related to this object through the relation FK_SalesTerritoryHistory_SalesTerritory_TerritoryID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SalesTerritoryHistory> SalesTerritoryHistoryCollection
		{
			get { return entityData.SalesTerritoryHistoryCollection; }
			set { entityData.SalesTerritoryHistoryCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Customer objects
		///	which are related to this object through the relation FK_Customer_SalesTerritory_TerritoryID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Customer> CustomerCollection
		{
			get { return entityData.CustomerCollection; }
			set { entityData.CustomerCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Name", "Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Name", "Name", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("CountryRegionCode", "Country Region Code"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CountryRegionCode", "Country Region Code", 3));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Group", "Group"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Group", "Group", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SalesTerritory"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"TerritoryID", "Name", "CountryRegionCode", "Group", "SalesYTD", "SalesLastYear", "CostYTD", "CostLastYear", "rowguid", "ModifiedDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SalesTerritoryEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SalesTerritory) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SalesTerritory>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SalesTerritory);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SalesTerritory Entity 
		///</summary>
		protected virtual SalesTerritory Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SalesTerritory copy = new SalesTerritory();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.TerritoryId = this.TerritoryId;
				copy.Name = this.Name;
				copy.CountryRegionCode = this.CountryRegionCode;
				copy.Group = this.Group;
				copy.SalesYtd = this.SalesYtd;
				copy.SalesLastYear = this.SalesLastYear;
				copy.CostYtd = this.CostYtd;
				copy.CostLastYear = this.CostLastYear;
				copy.Rowguid = this.Rowguid;
				copy.ModifiedDate = this.ModifiedDate;
			
		
			//deep copy nested objects
			copy.StateProvinceCollection = (TList<StateProvince>) MakeCopyOf(this.StateProvinceCollection, existingCopies); 
			copy.SalesOrderHeaderCollection = (TList<SalesOrderHeader>) MakeCopyOf(this.SalesOrderHeaderCollection, existingCopies); 
			copy.SalesPersonCollection = (TList<SalesPerson>) MakeCopyOf(this.SalesPersonCollection, existingCopies); 
			copy.SalesTerritoryHistoryCollection = (TList<SalesTerritoryHistory>) MakeCopyOf(this.SalesTerritoryHistoryCollection, existingCopies); 
			copy.CustomerCollection = (TList<Customer>) MakeCopyOf(this.CustomerCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SalesTerritory Entity 
		///</summary>
		public virtual SalesTerritory Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SalesTerritory Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SalesTerritory DeepCopy()
		{
			return EntityHelper.Clone<SalesTerritory>(this as SalesTerritory);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SalesTerritoryEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SalesTerritoryEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SalesTerritoryEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SalesTerritoryColumn column)
		{
			switch(column)
			{
					case SalesTerritoryColumn.TerritoryId:
					return entityData.TerritoryId != _originalData.TerritoryId;
					case SalesTerritoryColumn.Name:
					return entityData.Name != _originalData.Name;
					case SalesTerritoryColumn.CountryRegionCode:
					return entityData.CountryRegionCode != _originalData.CountryRegionCode;
					case SalesTerritoryColumn.Group:
					return entityData.Group != _originalData.Group;
					case SalesTerritoryColumn.SalesYtd:
					return entityData.SalesYtd != _originalData.SalesYtd;
					case SalesTerritoryColumn.SalesLastYear:
					return entityData.SalesLastYear != _originalData.SalesLastYear;
					case SalesTerritoryColumn.CostYtd:
					return entityData.CostYtd != _originalData.CostYtd;
					case SalesTerritoryColumn.CostLastYear:
					return entityData.CostLastYear != _originalData.CostLastYear;
					case SalesTerritoryColumn.Rowguid:
					return entityData.Rowguid != _originalData.Rowguid;
					case SalesTerritoryColumn.ModifiedDate:
					return entityData.ModifiedDate != _originalData.ModifiedDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SalesTerritoryColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.TerritoryId != _originalData.TerritoryId;
			result = result || entityData.Name != _originalData.Name;
			result = result || entityData.CountryRegionCode != _originalData.CountryRegionCode;
			result = result || entityData.Group != _originalData.Group;
			result = result || entityData.SalesYtd != _originalData.SalesYtd;
			result = result || entityData.SalesLastYear != _originalData.SalesLastYear;
			result = result || entityData.CostYtd != _originalData.CostYtd;
			result = result || entityData.CostLastYear != _originalData.CostLastYear;
			result = result || entityData.Rowguid != _originalData.Rowguid;
			result = result || entityData.ModifiedDate != _originalData.ModifiedDate;
			return result;
		}	
		
		///<summary>
		///  Returns a SalesTerritory Entity with the original data.
		///</summary>
		public SalesTerritory GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSalesTerritory(
				_originalData.Name,
				_originalData.CountryRegionCode,
				_originalData.Group,
				_originalData.SalesYtd,
				_originalData.SalesLastYear,
				_originalData.CostYtd,
				_originalData.CostLastYear,
				_originalData.ModifiedDate
				);
				
			return (SalesTerritory)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SalesTerritoryBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SalesTerritoryBase)
				return ValueEquals(this, (SalesTerritoryBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SalesTerritoryBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.TerritoryId.GetHashCode() ^ 
					this.Name.GetHashCode() ^ 
					this.CountryRegionCode.GetHashCode() ^ 
					this.Group.GetHashCode() ^ 
					this.SalesYtd.GetHashCode() ^ 
					this.SalesLastYear.GetHashCode() ^ 
					this.CostYtd.GetHashCode() ^ 
					this.CostLastYear.GetHashCode() ^ 
					this.Rowguid.GetHashCode() ^ 
					this.ModifiedDate.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SalesTerritoryBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SalesTerritoryBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SalesTerritoryBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SalesTerritoryBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SalesTerritoryBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SalesTerritoryBase Object1, SalesTerritoryBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.TerritoryId != Object2.TerritoryId)
				equal = false;
			if (Object1.Name != Object2.Name)
				equal = false;
			if (Object1.CountryRegionCode != Object2.CountryRegionCode)
				equal = false;
			if (Object1.Group != Object2.Group)
				equal = false;
			if (Object1.SalesYtd != Object2.SalesYtd)
				equal = false;
			if (Object1.SalesLastYear != Object2.SalesLastYear)
				equal = false;
			if (Object1.CostYtd != Object2.CostYtd)
				equal = false;
			if (Object1.CostLastYear != Object2.CostLastYear)
				equal = false;
			if (Object1.Rowguid != Object2.Rowguid)
				equal = false;
			if (Object1.ModifiedDate != Object2.ModifiedDate)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SalesTerritoryBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SalesTerritoryComparer GetComparer()
        {
            return new SalesTerritoryComparer();
        }
        */

        // Comparer delegates back to SalesTerritory
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SalesTerritory rhs, SalesTerritoryColumn which)
        {
            switch (which)
            {
            	
            	
            	case SalesTerritoryColumn.TerritoryId:
            		return this.TerritoryId.CompareTo(rhs.TerritoryId);
            		
            		                 
            	
            	
            	case SalesTerritoryColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case SalesTerritoryColumn.CountryRegionCode:
            		return this.CountryRegionCode.CompareTo(rhs.CountryRegionCode);
            		
            		                 
            	
            	
            	case SalesTerritoryColumn.Group:
            		return this.Group.CompareTo(rhs.Group);
            		
            		                 
            	
            	
            	case SalesTerritoryColumn.SalesYtd:
            		return this.SalesYtd.CompareTo(rhs.SalesYtd);
            		
            		                 
            	
            	
            	case SalesTerritoryColumn.SalesLastYear:
            		return this.SalesLastYear.CompareTo(rhs.SalesLastYear);
            		
            		                 
            	
            	
            	case SalesTerritoryColumn.CostYtd:
            		return this.CostYtd.CompareTo(rhs.CostYtd);
            		
            		                 
            	
            	
            	case SalesTerritoryColumn.CostLastYear:
            		return this.CostLastYear.CompareTo(rhs.CostLastYear);
            		
            		                 
            	
            	
            	case SalesTerritoryColumn.Rowguid:
            		return this.Rowguid.CompareTo(rhs.Rowguid);
            		
            		                 
            	
            	
            	case SalesTerritoryColumn.ModifiedDate:
            		return this.ModifiedDate.CompareTo(rhs.ModifiedDate);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SalesTerritoryKey> Members
		
		// member variable for the EntityId property
		private SalesTerritoryKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SalesTerritoryKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SalesTerritoryKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SalesTerritory")
					.Append("|").Append( this.TerritoryId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{11}{10}- TerritoryId: {0}{10}- Name: {1}{10}- CountryRegionCode: {2}{10}- Group: {3}{10}- SalesYtd: {4}{10}- SalesLastYear: {5}{10}- CostYtd: {6}{10}- CostLastYear: {7}{10}- Rowguid: {8}{10}- ModifiedDate: {9}{10}{12}", 
				this.TerritoryId,
				this.Name,
				this.CountryRegionCode,
				this.Group,
				this.SalesYtd,
				this.SalesLastYear,
				this.CostYtd,
				this.CostLastYear,
				this.Rowguid,
				this.ModifiedDate,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SalesTerritory' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SalesTerritoryEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// TerritoryID : Primary key for SalesTerritory records.
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SalesTerritory"</remarks>
		public System.Int32 TerritoryId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// Name : Sales territory description
		/// </summary>
		public System.String Name = string.Empty;
		
		/// <summary>
		/// CountryRegionCode : ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode. 
		/// </summary>
		public System.String CountryRegionCode = string.Empty;
		
		/// <summary>
		/// Group : Geographic area to which the sales territory belong.
		/// </summary>
		public System.String Group = string.Empty;
		
		/// <summary>
		/// SalesYTD : Sales in the territory year to date.
		/// </summary>
		public System.Decimal SalesYtd = 0;
		
		/// <summary>
		/// SalesLastYear : Sales in the territory the previous year.
		/// </summary>
		public System.Decimal SalesLastYear = 0;
		
		/// <summary>
		/// CostYTD : Business costs in the territory year to date.
		/// </summary>
		public System.Decimal CostYtd = 0;
		
		/// <summary>
		/// CostLastYear : Business costs in the territory the previous year.
		/// </summary>
		public System.Decimal CostLastYear = 0;
		
		/// <summary>
		/// rowguid : ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		public System.Guid Rowguid = Guid.Empty;
		
		/// <summary>
		/// ModifiedDate : Date and time the record was last updated.
		/// </summary>
		public System.DateTime ModifiedDate = DateTime.MinValue;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region StateProvinceCollection
		
		private TList<StateProvince> _stateProvinceTerritoryId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _stateProvinceTerritoryId
		/// </summary>
		
		public TList<StateProvince> StateProvinceCollection
		{
			get
			{
				if (_stateProvinceTerritoryId == null)
				{
				_stateProvinceTerritoryId = new TList<StateProvince>();
				}
	
				return _stateProvinceTerritoryId;
			}
			set { _stateProvinceTerritoryId = value; }
		}
		
		#endregion

		#region SalesOrderHeaderCollection
		
		private TList<SalesOrderHeader> _salesOrderHeaderTerritoryId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _salesOrderHeaderTerritoryId
		/// </summary>
		
		public TList<SalesOrderHeader> SalesOrderHeaderCollection
		{
			get
			{
				if (_salesOrderHeaderTerritoryId == null)
				{
				_salesOrderHeaderTerritoryId = new TList<SalesOrderHeader>();
				}
	
				return _salesOrderHeaderTerritoryId;
			}
			set { _salesOrderHeaderTerritoryId = value; }
		}
		
		#endregion

		#region SalesPersonCollection
		
		private TList<SalesPerson> _salesPersonTerritoryId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _salesPersonTerritoryId
		/// </summary>
		
		public TList<SalesPerson> SalesPersonCollection
		{
			get
			{
				if (_salesPersonTerritoryId == null)
				{
				_salesPersonTerritoryId = new TList<SalesPerson>();
				}
	
				return _salesPersonTerritoryId;
			}
			set { _salesPersonTerritoryId = value; }
		}
		
		#endregion

		#region SalesTerritoryHistoryCollection
		
		private TList<SalesTerritoryHistory> _salesTerritoryHistoryTerritoryId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _salesTerritoryHistoryTerritoryId
		/// </summary>
		
		public TList<SalesTerritoryHistory> SalesTerritoryHistoryCollection
		{
			get
			{
				if (_salesTerritoryHistoryTerritoryId == null)
				{
				_salesTerritoryHistoryTerritoryId = new TList<SalesTerritoryHistory>();
				}
	
				return _salesTerritoryHistoryTerritoryId;
			}
			set { _salesTerritoryHistoryTerritoryId = value; }
		}
		
		#endregion

		#region CustomerCollection
		
		private TList<Customer> _customerTerritoryId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _customerTerritoryId
		/// </summary>
		
		public TList<Customer> CustomerCollection
		{
			get
			{
				if (_customerTerritoryId == null)
				{
				_customerTerritoryId = new TList<Customer>();
				}
	
				return _customerTerritoryId;
			}
			set { _customerTerritoryId = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SalesTerritoryEntityData _tmp = new SalesTerritoryEntityData();
						
			_tmp.TerritoryId = this.TerritoryId;
			
			_tmp.Name = this.Name;
			_tmp.CountryRegionCode = this.CountryRegionCode;
			_tmp.Group = this.Group;
			_tmp.SalesYtd = this.SalesYtd;
			_tmp.SalesLastYear = this.SalesLastYear;
			_tmp.CostYtd = this.CostYtd;
			_tmp.CostLastYear = this.CostLastYear;
			_tmp.Rowguid = this.Rowguid;
			_tmp.ModifiedDate = this.ModifiedDate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._stateProvinceTerritoryId != null)
				_tmp.StateProvinceCollection = (TList<StateProvince>) MakeCopyOf(this.StateProvinceCollection); 
			if (this._salesOrderHeaderTerritoryId != null)
				_tmp.SalesOrderHeaderCollection = (TList<SalesOrderHeader>) MakeCopyOf(this.SalesOrderHeaderCollection); 
			if (this._salesPersonTerritoryId != null)
				_tmp.SalesPersonCollection = (TList<SalesPerson>) MakeCopyOf(this.SalesPersonCollection); 
			if (this._salesTerritoryHistoryTerritoryId != null)
				_tmp.SalesTerritoryHistoryCollection = (TList<SalesTerritoryHistory>) MakeCopyOf(this.SalesTerritoryHistoryCollection); 
			if (this._customerTerritoryId != null)
				_tmp.CustomerCollection = (TList<Customer>) MakeCopyOf(this.CustomerCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SalesTerritoryEntityData _tmp = new SalesTerritoryEntityData();
						
			_tmp.TerritoryId = this.TerritoryId;
			
			_tmp.Name = this.Name;
			_tmp.CountryRegionCode = this.CountryRegionCode;
			_tmp.Group = this.Group;
			_tmp.SalesYtd = this.SalesYtd;
			_tmp.SalesLastYear = this.SalesLastYear;
			_tmp.CostYtd = this.CostYtd;
			_tmp.CostLastYear = this.CostLastYear;
			_tmp.Rowguid = this.Rowguid;
			_tmp.ModifiedDate = this.ModifiedDate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.StateProvinceCollection = (TList<StateProvince>) MakeCopyOf(this.StateProvinceCollection, existingCopies); 
			_tmp.SalesOrderHeaderCollection = (TList<SalesOrderHeader>) MakeCopyOf(this.SalesOrderHeaderCollection, existingCopies); 
			_tmp.SalesPersonCollection = (TList<SalesPerson>) MakeCopyOf(this.SalesPersonCollection, existingCopies); 
			_tmp.SalesTerritoryHistoryCollection = (TList<SalesTerritoryHistory>) MakeCopyOf(this.SalesTerritoryHistoryCollection, existingCopies); 
			_tmp.CustomerCollection = (TList<Customer>) MakeCopyOf(this.CustomerCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SalesTerritoryColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SalesTerritoryColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SalesTerritoryColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SalesTerritoryColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SalesTerritoryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SalesTerritoryColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SalesTerritoryEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SalesTerritoryEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SalesTerritoryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SalesTerritoryColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SalesTerritoryEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SalesTerritoryEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SalesTerritoryEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SalesTerritory"/> object.
	/// </remarks>
	public class SalesTerritoryEventArgs : System.EventArgs
	{
		private SalesTerritoryColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SalesTerritoryEventArgs class.
		///</summary>
		public SalesTerritoryEventArgs(SalesTerritoryColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SalesTerritoryEventArgs class.
		///</summary>
		public SalesTerritoryEventArgs(SalesTerritoryColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SalesTerritoryColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SalesTerritoryColumn" />
		public SalesTerritoryColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SalesTerritory related events.
	///</summary>
	public delegate void SalesTerritoryEventHandler(object sender, SalesTerritoryEventArgs e);
	
	#region SalesTerritoryComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SalesTerritoryComparer : System.Collections.Generic.IComparer<SalesTerritory>
	{
		SalesTerritoryColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SalesTerritoryComparer"/> class.
        /// </summary>
		public SalesTerritoryComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SalesTerritoryComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SalesTerritoryComparer(SalesTerritoryColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="SalesTerritory"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="SalesTerritory"/> to compare.</param>
        /// <param name="b">The second <c>SalesTerritory</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SalesTerritory a, SalesTerritory b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SalesTerritory entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SalesTerritory a, SalesTerritory b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SalesTerritoryColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SalesTerritoryKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SalesTerritory"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SalesTerritoryKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SalesTerritoryKey class.
		/// </summary>
		public SalesTerritoryKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SalesTerritoryKey class.
		/// </summary>
		public SalesTerritoryKey(SalesTerritoryBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.TerritoryId = entity.TerritoryId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SalesTerritoryKey class.
		/// </summary>
		public SalesTerritoryKey(System.Int32 _territoryId)
		{
			#region Init Properties

			this.TerritoryId = _territoryId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SalesTerritoryBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SalesTerritoryBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the TerritoryId property
		private System.Int32 _territoryId;
		
		/// <summary>
		/// Gets or sets the TerritoryId property.
		/// </summary>
		public System.Int32 TerritoryId
		{
			get { return _territoryId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.TerritoryId = value;
				
				_territoryId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				TerritoryId = ( values["TerritoryId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["TerritoryId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("TerritoryId", TerritoryId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("TerritoryId: {0}{1}",
								TerritoryId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SalesTerritoryColumn Enum
	
	/// <summary>
	/// Enumerate the SalesTerritory columns.
	/// </summary>
	[Serializable]
	public enum SalesTerritoryColumn : int
	{
		/// <summary>
		/// TerritoryId : Primary key for SalesTerritory records.
		/// </summary>
		[EnumTextValue("TerritoryID")]
		[ColumnEnum("TerritoryID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		TerritoryId = 1,
		/// <summary>
		/// Name : Sales territory description
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Name = 2,
		/// <summary>
		/// CountryRegionCode : ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode. 
		/// </summary>
		[EnumTextValue("CountryRegionCode")]
		[ColumnEnum("CountryRegionCode", typeof(System.String), System.Data.DbType.String, false, false, false, 3)]
		CountryRegionCode = 3,
		/// <summary>
		/// Group : Geographic area to which the sales territory belong.
		/// </summary>
		[EnumTextValue("Group")]
		[ColumnEnum("Group", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Group = 4,
		/// <summary>
		/// SalesYtd : Sales in the territory year to date.
		/// </summary>
		[EnumTextValue("SalesYTD")]
		[ColumnEnum("SalesYTD", typeof(System.Decimal), System.Data.DbType.Currency, false, false, false)]
		SalesYtd = 5,
		/// <summary>
		/// SalesLastYear : Sales in the territory the previous year.
		/// </summary>
		[EnumTextValue("SalesLastYear")]
		[ColumnEnum("SalesLastYear", typeof(System.Decimal), System.Data.DbType.Currency, false, false, false)]
		SalesLastYear = 6,
		/// <summary>
		/// CostYtd : Business costs in the territory year to date.
		/// </summary>
		[EnumTextValue("CostYTD")]
		[ColumnEnum("CostYTD", typeof(System.Decimal), System.Data.DbType.Currency, false, false, false)]
		CostYtd = 7,
		/// <summary>
		/// CostLastYear : Business costs in the territory the previous year.
		/// </summary>
		[EnumTextValue("CostLastYear")]
		[ColumnEnum("CostLastYear", typeof(System.Decimal), System.Data.DbType.Currency, false, false, false)]
		CostLastYear = 8,
		/// <summary>
		/// Rowguid : ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[EnumTextValue("rowguid")]
		[ColumnEnum("rowguid", typeof(System.Guid), System.Data.DbType.Guid, false, true, false)]
		Rowguid = 9,
		/// <summary>
		/// ModifiedDate : Date and time the record was last updated.
		/// </summary>
		[EnumTextValue("ModifiedDate")]
		[ColumnEnum("ModifiedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ModifiedDate = 10
	}//End enum

	#endregion SalesTerritoryColumn Enum

} // end namespace
