
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Vendor.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Nettiers.AdventureWorks.Entities.Validation;
#endregion

namespace Nettiers.AdventureWorks.Entities
{
	///<summary>
	/// Companies from whom Adventure Works Cycles purchases parts or other goods.	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class VendorBase : EntityBase, IVendor, IEntityId<VendorKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private VendorEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private VendorEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private VendorEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Vendor> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event VendorEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event VendorEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VendorBase"/> instance.
		///</summary>
		public VendorBase()
		{
			this.entityData = new VendorEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="VendorBase"/> instance.
		///</summary>
		///<param name="_accountNumber">Vendor account (identification) number.</param>
		///<param name="_name">Company name.</param>
		///<param name="_creditRating">1 = Superior, 2 = Excellent, 3 = Above average, 4 = Average, 5 = Below average</param>
		///<param name="_preferredVendorStatus">0 = Do not use if another vendor is available. 1 = Preferred over other vendors supplying the same product.</param>
		///<param name="_activeFlag">0 = Vendor no longer used. 1 = Vendor is actively used.</param>
		///<param name="_purchasingWebServiceUrl">Vendor URL.</param>
		///<param name="_modifiedDate">Date and time the record was last updated.</param>
		public VendorBase(System.String _accountNumber, System.String _name, System.Byte _creditRating, 
			System.Boolean _preferredVendorStatus, System.Boolean _activeFlag, System.String _purchasingWebServiceUrl, 
			System.DateTime _modifiedDate)
		{
			this.entityData = new VendorEntityData();
			this.backupData = null;

			this.AccountNumber = _accountNumber;
			this.Name = _name;
			this.CreditRating = _creditRating;
			this.PreferredVendorStatus = _preferredVendorStatus;
			this.ActiveFlag = _activeFlag;
			this.PurchasingWebServiceUrl = _purchasingWebServiceUrl;
			this.ModifiedDate = _modifiedDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Vendor"/> instance.
		///</summary>
		///<param name="_accountNumber">Vendor account (identification) number.</param>
		///<param name="_name">Company name.</param>
		///<param name="_creditRating">1 = Superior, 2 = Excellent, 3 = Above average, 4 = Average, 5 = Below average</param>
		///<param name="_preferredVendorStatus">0 = Do not use if another vendor is available. 1 = Preferred over other vendors supplying the same product.</param>
		///<param name="_activeFlag">0 = Vendor no longer used. 1 = Vendor is actively used.</param>
		///<param name="_purchasingWebServiceUrl">Vendor URL.</param>
		///<param name="_modifiedDate">Date and time the record was last updated.</param>
		public static Vendor CreateVendor(System.String _accountNumber, System.String _name, System.Byte _creditRating, 
			System.Boolean _preferredVendorStatus, System.Boolean _activeFlag, System.String _purchasingWebServiceUrl, 
			System.DateTime _modifiedDate)
		{
			Vendor newVendor = new Vendor();
			newVendor.AccountNumber = _accountNumber;
			newVendor.Name = _name;
			newVendor.CreditRating = _creditRating;
			newVendor.PreferredVendorStatus = _preferredVendorStatus;
			newVendor.ActiveFlag = _activeFlag;
			newVendor.PurchasingWebServiceUrl = _purchasingWebServiceUrl;
			newVendor.ModifiedDate = _modifiedDate;
			return newVendor;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the VendorId property. 
		///		Primary key for Vendor records.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@"Primary key for Vendor records."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 VendorId
		{
			get
			{
				return this.entityData.VendorId; 
			}
			
			set
			{
				if (this.entityData.VendorId == value)
					return;
				
                OnPropertyChanging("VendorId");                    
				OnColumnChanging(VendorColumn.VendorId, this.entityData.VendorId);
				this.entityData.VendorId = value;
				this.EntityId.VendorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VendorColumn.VendorId, this.entityData.VendorId);
				OnPropertyChanged("VendorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccountNumber property. 
		///		Vendor account (identification) number.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Vendor account (identification) number."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 15)]
		public virtual System.String AccountNumber
		{
			get
			{
				return this.entityData.AccountNumber; 
			}
			
			set
			{
				if (this.entityData.AccountNumber == value)
					return;
				
                OnPropertyChanging("AccountNumber");                    
				OnColumnChanging(VendorColumn.AccountNumber, this.entityData.AccountNumber);
				this.entityData.AccountNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VendorColumn.AccountNumber, this.entityData.AccountNumber);
				OnPropertyChanged("AccountNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		Company name.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Company name."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
				
                OnPropertyChanging("Name");                    
				OnColumnChanging(VendorColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VendorColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreditRating property. 
		///		1 = Superior, 2 = Excellent, 3 = Above average, 4 = Average, 5 = Below average
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"1 = Superior, 2 = Excellent, 3 = Above average, 4 = Average, 5 = Below average"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Byte CreditRating
		{
			get
			{
				return this.entityData.CreditRating; 
			}
			
			set
			{
				if (this.entityData.CreditRating == value)
					return;
				
                OnPropertyChanging("CreditRating");                    
				OnColumnChanging(VendorColumn.CreditRating, this.entityData.CreditRating);
				this.entityData.CreditRating = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VendorColumn.CreditRating, this.entityData.CreditRating);
				OnPropertyChanged("CreditRating");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PreferredVendorStatus property. 
		///		0 = Do not use if another vendor is available. 1 = Preferred over other vendors supplying the same product.
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"0 = Do not use if another vendor is available. 1 = Preferred over other vendors supplying the same product."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean PreferredVendorStatus
		{
			get
			{
				return this.entityData.PreferredVendorStatus; 
			}
			
			set
			{
				if (this.entityData.PreferredVendorStatus == value)
					return;
				
                OnPropertyChanging("PreferredVendorStatus");                    
				OnColumnChanging(VendorColumn.PreferredVendorStatus, this.entityData.PreferredVendorStatus);
				this.entityData.PreferredVendorStatus = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VendorColumn.PreferredVendorStatus, this.entityData.PreferredVendorStatus);
				OnPropertyChanged("PreferredVendorStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ActiveFlag property. 
		///		0 = Vendor no longer used. 1 = Vendor is actively used.
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"0 = Vendor no longer used. 1 = Vendor is actively used."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean ActiveFlag
		{
			get
			{
				return this.entityData.ActiveFlag; 
			}
			
			set
			{
				if (this.entityData.ActiveFlag == value)
					return;
				
                OnPropertyChanging("ActiveFlag");                    
				OnColumnChanging(VendorColumn.ActiveFlag, this.entityData.ActiveFlag);
				this.entityData.ActiveFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VendorColumn.ActiveFlag, this.entityData.ActiveFlag);
				OnPropertyChanged("ActiveFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PurchasingWebServiceUrl property. 
		///		Vendor URL.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Vendor URL."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1024)]
		public virtual System.String PurchasingWebServiceUrl
		{
			get
			{
				return this.entityData.PurchasingWebServiceUrl; 
			}
			
			set
			{
				if (this.entityData.PurchasingWebServiceUrl == value)
					return;
				
                OnPropertyChanging("PurchasingWebServiceUrl");                    
				OnColumnChanging(VendorColumn.PurchasingWebServiceUrl, this.entityData.PurchasingWebServiceUrl);
				this.entityData.PurchasingWebServiceUrl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VendorColumn.PurchasingWebServiceUrl, this.entityData.PurchasingWebServiceUrl);
				OnPropertyChanged("PurchasingWebServiceUrl");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModifiedDate property. 
		///		Date and time the record was last updated.
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Date and time the record was last updated."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ModifiedDate
		{
			get
			{
				return this.entityData.ModifiedDate; 
			}
			
			set
			{
				if (this.entityData.ModifiedDate == value)
					return;
				
                OnPropertyChanging("ModifiedDate");                    
				OnColumnChanging(VendorColumn.ModifiedDate, this.entityData.ModifiedDate);
				this.entityData.ModifiedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VendorColumn.ModifiedDate, this.entityData.ModifiedDate);
				OnPropertyChanged("ModifiedDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of VendorAddress objects
		///	which are related to this object through the relation FK_VendorAddress_Vendor_VendorID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<VendorAddress> VendorAddressCollection
		{
			get { return entityData.VendorAddressCollection; }
			set { entityData.VendorAddressCollection = value; }	
		}

		/// <summary>
		///	Holds a collection of ProductFromProductVendor objects
		///	which are related to this object through the junction table ProductVendor
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Product> ProductIdProductCollection_From_ProductVendor
		{
			get { return entityData.ProductIdProductCollection_From_ProductVendor; }
			set { entityData.ProductIdProductCollection_From_ProductVendor = value; }	
		}

		/// <summary>
		///	Holds a collection of AddressFromVendorAddress objects
		///	which are related to this object through the junction table VendorAddress
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Address> AddressIdAddressCollection_From_VendorAddress
		{
			get { return entityData.AddressIdAddressCollection_From_VendorAddress; }
			set { entityData.AddressIdAddressCollection_From_VendorAddress = value; }	
		}

		/// <summary>
		///	Holds a collection of ContactFromVendorContact objects
		///	which are related to this object through the junction table VendorContact
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Contact> ContactIdContactCollection_From_VendorContact
		{
			get { return entityData.ContactIdContactCollection_From_VendorContact; }
			set { entityData.ContactIdContactCollection_From_VendorContact = value; }	
		}
	
		/// <summary>
		///	Holds a collection of VendorContact objects
		///	which are related to this object through the relation FK_VendorContact_Vendor_VendorID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<VendorContact> VendorContactCollection
		{
			get { return entityData.VendorContactCollection; }
			set { entityData.VendorContactCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of PurchaseOrderHeader objects
		///	which are related to this object through the relation FK_PurchaseOrderHeader_Vendor_VendorID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PurchaseOrderHeader> PurchaseOrderHeaderCollection
		{
			get { return entityData.PurchaseOrderHeaderCollection; }
			set { entityData.PurchaseOrderHeaderCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ProductVendor objects
		///	which are related to this object through the relation FK_ProductVendor_Vendor_VendorID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ProductVendor> ProductVendorCollection
		{
			get { return entityData.ProductVendorCollection; }
			set { entityData.ProductVendorCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("AccountNumber", "Account Number"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AccountNumber", "Account Number", 15));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Name", "Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Name", "Name", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PurchasingWebServiceUrl", "Purchasing Web Service Url", 1024));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Vendor"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"VendorID", "AccountNumber", "Name", "CreditRating", "PreferredVendorStatus", "ActiveFlag", "PurchasingWebServiceURL", "ModifiedDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as VendorEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Vendor) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Vendor>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Vendor);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Vendor Entity 
		///</summary>
		protected virtual Vendor Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Vendor copy = new Vendor();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.VendorId = this.VendorId;
				copy.AccountNumber = this.AccountNumber;
				copy.Name = this.Name;
				copy.CreditRating = this.CreditRating;
				copy.PreferredVendorStatus = this.PreferredVendorStatus;
				copy.ActiveFlag = this.ActiveFlag;
				copy.PurchasingWebServiceUrl = this.PurchasingWebServiceUrl;
				copy.ModifiedDate = this.ModifiedDate;
			
		
			//deep copy nested objects
			copy.VendorAddressCollection = (TList<VendorAddress>) MakeCopyOf(this.VendorAddressCollection, existingCopies); 
			copy.ProductIdProductCollection_From_ProductVendor = (TList<Product>) MakeCopyOf(this.ProductIdProductCollection_From_ProductVendor, existingCopies); 
			copy.AddressIdAddressCollection_From_VendorAddress = (TList<Address>) MakeCopyOf(this.AddressIdAddressCollection_From_VendorAddress, existingCopies); 
			copy.ContactIdContactCollection_From_VendorContact = (TList<Contact>) MakeCopyOf(this.ContactIdContactCollection_From_VendorContact, existingCopies); 
			copy.VendorContactCollection = (TList<VendorContact>) MakeCopyOf(this.VendorContactCollection, existingCopies); 
			copy.PurchaseOrderHeaderCollection = (TList<PurchaseOrderHeader>) MakeCopyOf(this.PurchaseOrderHeaderCollection, existingCopies); 
			copy.ProductVendorCollection = (TList<ProductVendor>) MakeCopyOf(this.ProductVendorCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Vendor Entity 
		///</summary>
		public virtual Vendor Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Vendor Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Vendor DeepCopy()
		{
			return EntityHelper.Clone<Vendor>(this as Vendor);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as VendorEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new VendorEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as VendorEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(VendorColumn column)
		{
			switch(column)
			{
					case VendorColumn.VendorId:
					return entityData.VendorId != _originalData.VendorId;
					case VendorColumn.AccountNumber:
					return entityData.AccountNumber != _originalData.AccountNumber;
					case VendorColumn.Name:
					return entityData.Name != _originalData.Name;
					case VendorColumn.CreditRating:
					return entityData.CreditRating != _originalData.CreditRating;
					case VendorColumn.PreferredVendorStatus:
					return entityData.PreferredVendorStatus != _originalData.PreferredVendorStatus;
					case VendorColumn.ActiveFlag:
					return entityData.ActiveFlag != _originalData.ActiveFlag;
					case VendorColumn.PurchasingWebServiceUrl:
					return entityData.PurchasingWebServiceUrl != _originalData.PurchasingWebServiceUrl;
					case VendorColumn.ModifiedDate:
					return entityData.ModifiedDate != _originalData.ModifiedDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< VendorColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.VendorId != _originalData.VendorId;
			result = result || entityData.AccountNumber != _originalData.AccountNumber;
			result = result || entityData.Name != _originalData.Name;
			result = result || entityData.CreditRating != _originalData.CreditRating;
			result = result || entityData.PreferredVendorStatus != _originalData.PreferredVendorStatus;
			result = result || entityData.ActiveFlag != _originalData.ActiveFlag;
			result = result || entityData.PurchasingWebServiceUrl != _originalData.PurchasingWebServiceUrl;
			result = result || entityData.ModifiedDate != _originalData.ModifiedDate;
			return result;
		}	
		
		///<summary>
		///  Returns a Vendor Entity with the original data.
		///</summary>
		public Vendor GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateVendor(
				_originalData.AccountNumber,
				_originalData.Name,
				_originalData.CreditRating,
				_originalData.PreferredVendorStatus,
				_originalData.ActiveFlag,
				_originalData.PurchasingWebServiceUrl,
				_originalData.ModifiedDate
				);
				
			return (Vendor)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="VendorBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is VendorBase)
				return ValueEquals(this, (VendorBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="VendorBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.VendorId.GetHashCode() ^ 
					this.AccountNumber.GetHashCode() ^ 
					this.Name.GetHashCode() ^ 
					this.CreditRating.GetHashCode() ^ 
					this.PreferredVendorStatus.GetHashCode() ^ 
					this.ActiveFlag.GetHashCode() ^ 
					((this.PurchasingWebServiceUrl == null) ? string.Empty : this.PurchasingWebServiceUrl.ToString()).GetHashCode() ^ 
					this.ModifiedDate.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VendorBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VendorBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="VendorBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="VendorBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VendorBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(VendorBase Object1, VendorBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.VendorId != Object2.VendorId)
				equal = false;
			if (Object1.AccountNumber != Object2.AccountNumber)
				equal = false;
			if (Object1.Name != Object2.Name)
				equal = false;
			if (Object1.CreditRating != Object2.CreditRating)
				equal = false;
			if (Object1.PreferredVendorStatus != Object2.PreferredVendorStatus)
				equal = false;
			if (Object1.ActiveFlag != Object2.ActiveFlag)
				equal = false;
			if ( Object1.PurchasingWebServiceUrl != null && Object2.PurchasingWebServiceUrl != null )
			{
				if (Object1.PurchasingWebServiceUrl != Object2.PurchasingWebServiceUrl)
					equal = false;
			}
			else if (Object1.PurchasingWebServiceUrl == null ^ Object2.PurchasingWebServiceUrl == null )
			{
				equal = false;
			}
			if (Object1.ModifiedDate != Object2.ModifiedDate)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((VendorBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static VendorComparer GetComparer()
        {
            return new VendorComparer();
        }
        */

        // Comparer delegates back to Vendor
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Vendor rhs, VendorColumn which)
        {
            switch (which)
            {
            	
            	
            	case VendorColumn.VendorId:
            		return this.VendorId.CompareTo(rhs.VendorId);
            		
            		                 
            	
            	
            	case VendorColumn.AccountNumber:
            		return this.AccountNumber.CompareTo(rhs.AccountNumber);
            		
            		                 
            	
            	
            	case VendorColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case VendorColumn.CreditRating:
            		return this.CreditRating.CompareTo(rhs.CreditRating);
            		
            		                 
            	
            	
            	case VendorColumn.PreferredVendorStatus:
            		return this.PreferredVendorStatus.CompareTo(rhs.PreferredVendorStatus);
            		
            		                 
            	
            	
            	case VendorColumn.ActiveFlag:
            		return this.ActiveFlag.CompareTo(rhs.ActiveFlag);
            		
            		                 
            	
            	
            	case VendorColumn.PurchasingWebServiceUrl:
            		return this.PurchasingWebServiceUrl.CompareTo(rhs.PurchasingWebServiceUrl);
            		
            		                 
            	
            	
            	case VendorColumn.ModifiedDate:
            		return this.ModifiedDate.CompareTo(rhs.ModifiedDate);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<VendorKey> Members
		
		// member variable for the EntityId property
		private VendorKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual VendorKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new VendorKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Vendor")
					.Append("|").Append( this.VendorId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{9}{8}- VendorId: {0}{8}- AccountNumber: {1}{8}- Name: {2}{8}- CreditRating: {3}{8}- PreferredVendorStatus: {4}{8}- ActiveFlag: {5}{8}- PurchasingWebServiceUrl: {6}{8}- ModifiedDate: {7}{8}{10}", 
				this.VendorId,
				this.AccountNumber,
				this.Name,
				this.CreditRating,
				this.PreferredVendorStatus,
				this.ActiveFlag,
				(this.PurchasingWebServiceUrl == null) ? string.Empty : this.PurchasingWebServiceUrl.ToString(),
				this.ModifiedDate,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Vendor' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class VendorEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// VendorID : Primary key for Vendor records.
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Vendor"</remarks>
		public System.Int32 VendorId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// AccountNumber : Vendor account (identification) number.
		/// </summary>
		public System.String AccountNumber = string.Empty;
		
		/// <summary>
		/// Name : Company name.
		/// </summary>
		public System.String Name = string.Empty;
		
		/// <summary>
		/// CreditRating : 1 = Superior, 2 = Excellent, 3 = Above average, 4 = Average, 5 = Below average
		/// </summary>
		public System.Byte CreditRating = (byte)0;
		
		/// <summary>
		/// PreferredVendorStatus : 0 = Do not use if another vendor is available. 1 = Preferred over other vendors supplying the same product.
		/// </summary>
		public System.Boolean PreferredVendorStatus = false;
		
		/// <summary>
		/// ActiveFlag : 0 = Vendor no longer used. 1 = Vendor is actively used.
		/// </summary>
		public System.Boolean ActiveFlag = false;
		
		/// <summary>
		/// PurchasingWebServiceURL : Vendor URL.
		/// </summary>
		public System.String PurchasingWebServiceUrl = null;
		
		/// <summary>
		/// ModifiedDate : Date and time the record was last updated.
		/// </summary>
		public System.DateTime ModifiedDate = DateTime.MinValue;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region VendorAddressCollection
		
		private TList<VendorAddress> _vendorAddressVendorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _vendorAddressVendorId
		/// </summary>
		
		public TList<VendorAddress> VendorAddressCollection
		{
			get
			{
				if (_vendorAddressVendorId == null)
				{
				_vendorAddressVendorId = new TList<VendorAddress>();
				}
	
				return _vendorAddressVendorId;
			}
			set { _vendorAddressVendorId = value; }
		}
		
		#endregion

		#region ProductIdProductCollection_From_ProductVendor
		
		private TList<Product> productIdProductCollectionFromProductVendor;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table productIdProductCollectionFromProductVendor
		/// </summary>
		
		public TList<Product> ProductIdProductCollection_From_ProductVendor
		{
			get
			{
				if (productIdProductCollectionFromProductVendor == null)
				{
				productIdProductCollectionFromProductVendor = new TList<Product>();
				}
	
				return productIdProductCollectionFromProductVendor;
			}
			set { productIdProductCollectionFromProductVendor = value; }
		}
		
		#endregion 

		#region AddressIdAddressCollection_From_VendorAddress
		
		private TList<Address> addressIdAddressCollectionFromVendorAddress;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table addressIdAddressCollectionFromVendorAddress
		/// </summary>
		
		public TList<Address> AddressIdAddressCollection_From_VendorAddress
		{
			get
			{
				if (addressIdAddressCollectionFromVendorAddress == null)
				{
				addressIdAddressCollectionFromVendorAddress = new TList<Address>();
				}
	
				return addressIdAddressCollectionFromVendorAddress;
			}
			set { addressIdAddressCollectionFromVendorAddress = value; }
		}
		
		#endregion 

		#region ContactIdContactCollection_From_VendorContact
		
		private TList<Contact> contactIdContactCollectionFromVendorContact;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table contactIdContactCollectionFromVendorContact
		/// </summary>
		
		public TList<Contact> ContactIdContactCollection_From_VendorContact
		{
			get
			{
				if (contactIdContactCollectionFromVendorContact == null)
				{
				contactIdContactCollectionFromVendorContact = new TList<Contact>();
				}
	
				return contactIdContactCollectionFromVendorContact;
			}
			set { contactIdContactCollectionFromVendorContact = value; }
		}
		
		#endregion 

		#region VendorContactCollection
		
		private TList<VendorContact> _vendorContactVendorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _vendorContactVendorId
		/// </summary>
		
		public TList<VendorContact> VendorContactCollection
		{
			get
			{
				if (_vendorContactVendorId == null)
				{
				_vendorContactVendorId = new TList<VendorContact>();
				}
	
				return _vendorContactVendorId;
			}
			set { _vendorContactVendorId = value; }
		}
		
		#endregion

		#region PurchaseOrderHeaderCollection
		
		private TList<PurchaseOrderHeader> _purchaseOrderHeaderVendorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _purchaseOrderHeaderVendorId
		/// </summary>
		
		public TList<PurchaseOrderHeader> PurchaseOrderHeaderCollection
		{
			get
			{
				if (_purchaseOrderHeaderVendorId == null)
				{
				_purchaseOrderHeaderVendorId = new TList<PurchaseOrderHeader>();
				}
	
				return _purchaseOrderHeaderVendorId;
			}
			set { _purchaseOrderHeaderVendorId = value; }
		}
		
		#endregion

		#region ProductVendorCollection
		
		private TList<ProductVendor> _productVendorVendorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _productVendorVendorId
		/// </summary>
		
		public TList<ProductVendor> ProductVendorCollection
		{
			get
			{
				if (_productVendorVendorId == null)
				{
				_productVendorVendorId = new TList<ProductVendor>();
				}
	
				return _productVendorVendorId;
			}
			set { _productVendorVendorId = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			VendorEntityData _tmp = new VendorEntityData();
						
			_tmp.VendorId = this.VendorId;
			
			_tmp.AccountNumber = this.AccountNumber;
			_tmp.Name = this.Name;
			_tmp.CreditRating = this.CreditRating;
			_tmp.PreferredVendorStatus = this.PreferredVendorStatus;
			_tmp.ActiveFlag = this.ActiveFlag;
			_tmp.PurchasingWebServiceUrl = this.PurchasingWebServiceUrl;
			_tmp.ModifiedDate = this.ModifiedDate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._vendorAddressVendorId != null)
				_tmp.VendorAddressCollection = (TList<VendorAddress>) MakeCopyOf(this.VendorAddressCollection); 
			if (this.productIdProductCollectionFromProductVendor != null)
				_tmp.ProductIdProductCollection_From_ProductVendor = (TList<Product>) MakeCopyOf(this.ProductIdProductCollection_From_ProductVendor); 
			if (this.addressIdAddressCollectionFromVendorAddress != null)
				_tmp.AddressIdAddressCollection_From_VendorAddress = (TList<Address>) MakeCopyOf(this.AddressIdAddressCollection_From_VendorAddress); 
			if (this.contactIdContactCollectionFromVendorContact != null)
				_tmp.ContactIdContactCollection_From_VendorContact = (TList<Contact>) MakeCopyOf(this.ContactIdContactCollection_From_VendorContact); 
			if (this._vendorContactVendorId != null)
				_tmp.VendorContactCollection = (TList<VendorContact>) MakeCopyOf(this.VendorContactCollection); 
			if (this._purchaseOrderHeaderVendorId != null)
				_tmp.PurchaseOrderHeaderCollection = (TList<PurchaseOrderHeader>) MakeCopyOf(this.PurchaseOrderHeaderCollection); 
			if (this._productVendorVendorId != null)
				_tmp.ProductVendorCollection = (TList<ProductVendor>) MakeCopyOf(this.ProductVendorCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			VendorEntityData _tmp = new VendorEntityData();
						
			_tmp.VendorId = this.VendorId;
			
			_tmp.AccountNumber = this.AccountNumber;
			_tmp.Name = this.Name;
			_tmp.CreditRating = this.CreditRating;
			_tmp.PreferredVendorStatus = this.PreferredVendorStatus;
			_tmp.ActiveFlag = this.ActiveFlag;
			_tmp.PurchasingWebServiceUrl = this.PurchasingWebServiceUrl;
			_tmp.ModifiedDate = this.ModifiedDate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.VendorAddressCollection = (TList<VendorAddress>) MakeCopyOf(this.VendorAddressCollection, existingCopies); 
			_tmp.ProductIdProductCollection_From_ProductVendor = (TList<Product>) MakeCopyOf(this.ProductIdProductCollection_From_ProductVendor, existingCopies); 
			_tmp.AddressIdAddressCollection_From_VendorAddress = (TList<Address>) MakeCopyOf(this.AddressIdAddressCollection_From_VendorAddress, existingCopies); 
			_tmp.ContactIdContactCollection_From_VendorContact = (TList<Contact>) MakeCopyOf(this.ContactIdContactCollection_From_VendorContact, existingCopies); 
			_tmp.VendorContactCollection = (TList<VendorContact>) MakeCopyOf(this.VendorContactCollection, existingCopies); 
			_tmp.PurchaseOrderHeaderCollection = (TList<PurchaseOrderHeader>) MakeCopyOf(this.PurchaseOrderHeaderCollection, existingCopies); 
			_tmp.ProductVendorCollection = (TList<ProductVendor>) MakeCopyOf(this.ProductVendorCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="VendorColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(VendorColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="VendorColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(VendorColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="VendorColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(VendorColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				VendorEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new VendorEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="VendorColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(VendorColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				VendorEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new VendorEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region VendorEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Vendor"/> object.
	/// </remarks>
	public class VendorEventArgs : System.EventArgs
	{
		private VendorColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the VendorEventArgs class.
		///</summary>
		public VendorEventArgs(VendorColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the VendorEventArgs class.
		///</summary>
		public VendorEventArgs(VendorColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The VendorColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="VendorColumn" />
		public VendorColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Vendor related events.
	///</summary>
	public delegate void VendorEventHandler(object sender, VendorEventArgs e);
	
	#region VendorComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class VendorComparer : System.Collections.Generic.IComparer<Vendor>
	{
		VendorColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:VendorComparer"/> class.
        /// </summary>
		public VendorComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:VendorComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public VendorComparer(VendorColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Vendor"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Vendor"/> to compare.</param>
        /// <param name="b">The second <c>Vendor</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Vendor a, Vendor b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Vendor entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Vendor a, Vendor b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public VendorColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region VendorKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Vendor"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class VendorKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the VendorKey class.
		/// </summary>
		public VendorKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the VendorKey class.
		/// </summary>
		public VendorKey(VendorBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.VendorId = entity.VendorId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the VendorKey class.
		/// </summary>
		public VendorKey(System.Int32 _vendorId)
		{
			#region Init Properties

			this.VendorId = _vendorId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private VendorBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public VendorBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the VendorId property
		private System.Int32 _vendorId;
		
		/// <summary>
		/// Gets or sets the VendorId property.
		/// </summary>
		public System.Int32 VendorId
		{
			get { return _vendorId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.VendorId = value;
				
				_vendorId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				VendorId = ( values["VendorId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["VendorId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("VendorId", VendorId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("VendorId: {0}{1}",
								VendorId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region VendorColumn Enum
	
	/// <summary>
	/// Enumerate the Vendor columns.
	/// </summary>
	[Serializable]
	public enum VendorColumn : int
	{
		/// <summary>
		/// VendorId : Primary key for Vendor records.
		/// </summary>
		[EnumTextValue("VendorID")]
		[ColumnEnum("VendorID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		VendorId = 1,
		/// <summary>
		/// AccountNumber : Vendor account (identification) number.
		/// </summary>
		[EnumTextValue("AccountNumber")]
		[ColumnEnum("AccountNumber", typeof(System.String), System.Data.DbType.String, false, false, false, 15)]
		AccountNumber = 2,
		/// <summary>
		/// Name : Company name.
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Name = 3,
		/// <summary>
		/// CreditRating : 1 = Superior, 2 = Excellent, 3 = Above average, 4 = Average, 5 = Below average
		/// </summary>
		[EnumTextValue("CreditRating")]
		[ColumnEnum("CreditRating", typeof(System.Byte), System.Data.DbType.Byte, false, false, false)]
		CreditRating = 4,
		/// <summary>
		/// PreferredVendorStatus : 0 = Do not use if another vendor is available. 1 = Preferred over other vendors supplying the same product.
		/// </summary>
		[EnumTextValue("PreferredVendorStatus")]
		[ColumnEnum("PreferredVendorStatus", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		PreferredVendorStatus = 5,
		/// <summary>
		/// ActiveFlag : 0 = Vendor no longer used. 1 = Vendor is actively used.
		/// </summary>
		[EnumTextValue("ActiveFlag")]
		[ColumnEnum("ActiveFlag", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		ActiveFlag = 6,
		/// <summary>
		/// PurchasingWebServiceUrl : Vendor URL.
		/// </summary>
		[EnumTextValue("PurchasingWebServiceURL")]
		[ColumnEnum("PurchasingWebServiceURL", typeof(System.String), System.Data.DbType.String, false, false, true, 1024)]
		PurchasingWebServiceUrl = 7,
		/// <summary>
		/// ModifiedDate : Date and time the record was last updated.
		/// </summary>
		[EnumTextValue("ModifiedDate")]
		[ColumnEnum("ModifiedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ModifiedDate = 8
	}//End enum

	#endregion VendorColumn Enum

} // end namespace
