
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ErrorLog.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Nettiers.AdventureWorks.Entities.Validation;
#endregion

namespace Nettiers.AdventureWorks.Entities
{
	///<summary>
	/// Audit table tracking errors in the the AdventureWorks database that are caught by the CATCH block of a TRY...CATCH construct. Data is inserted by stored procedure dbo.uspLogError when it is executed from inside the CATCH block of a TRY...CATCH construct.	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ErrorLogBase : EntityBase, IErrorLog, IEntityId<ErrorLogKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ErrorLogEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ErrorLogEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ErrorLogEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ErrorLog> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ErrorLogEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ErrorLogEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ErrorLogBase"/> instance.
		///</summary>
		public ErrorLogBase()
		{
			this.entityData = new ErrorLogEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ErrorLogBase"/> instance.
		///</summary>
		///<param name="_errorTime">The date and time at which the error occurred.</param>
		///<param name="_userName">The user who executed the batch in which the error occurred.</param>
		///<param name="_errorNumber">The error number of the error that occurred.</param>
		///<param name="_errorSeverity">The severity of the error that occurred.</param>
		///<param name="_errorState">The state number of the error that occurred.</param>
		///<param name="_errorProcedure">The name of the stored procedure or trigger where the error occurred.</param>
		///<param name="_errorLine">The line number at which the error occurred.</param>
		///<param name="_errorMessage">The message text of the error that occurred.</param>
		public ErrorLogBase(System.DateTime _errorTime, System.String _userName, System.Int32 _errorNumber, 
			System.Int32? _errorSeverity, System.Int32? _errorState, System.String _errorProcedure, System.Int32? _errorLine, 
			System.String _errorMessage)
		{
			this.entityData = new ErrorLogEntityData();
			this.backupData = null;

			this.ErrorTime = _errorTime;
			this.UserName = _userName;
			this.ErrorNumber = _errorNumber;
			this.ErrorSeverity = _errorSeverity;
			this.ErrorState = _errorState;
			this.ErrorProcedure = _errorProcedure;
			this.ErrorLine = _errorLine;
			this.ErrorMessage = _errorMessage;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ErrorLog"/> instance.
		///</summary>
		///<param name="_errorTime">The date and time at which the error occurred.</param>
		///<param name="_userName">The user who executed the batch in which the error occurred.</param>
		///<param name="_errorNumber">The error number of the error that occurred.</param>
		///<param name="_errorSeverity">The severity of the error that occurred.</param>
		///<param name="_errorState">The state number of the error that occurred.</param>
		///<param name="_errorProcedure">The name of the stored procedure or trigger where the error occurred.</param>
		///<param name="_errorLine">The line number at which the error occurred.</param>
		///<param name="_errorMessage">The message text of the error that occurred.</param>
		public static ErrorLog CreateErrorLog(System.DateTime _errorTime, System.String _userName, System.Int32 _errorNumber, 
			System.Int32? _errorSeverity, System.Int32? _errorState, System.String _errorProcedure, System.Int32? _errorLine, 
			System.String _errorMessage)
		{
			ErrorLog newErrorLog = new ErrorLog();
			newErrorLog.ErrorTime = _errorTime;
			newErrorLog.UserName = _userName;
			newErrorLog.ErrorNumber = _errorNumber;
			newErrorLog.ErrorSeverity = _errorSeverity;
			newErrorLog.ErrorState = _errorState;
			newErrorLog.ErrorProcedure = _errorProcedure;
			newErrorLog.ErrorLine = _errorLine;
			newErrorLog.ErrorMessage = _errorMessage;
			return newErrorLog;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ErrorLogId property. 
		///		Primary key for ErrorLog records.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@"Primary key for ErrorLog records."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 ErrorLogId
		{
			get
			{
				return this.entityData.ErrorLogId; 
			}
			
			set
			{
				if (this.entityData.ErrorLogId == value)
					return;
				
                OnPropertyChanging("ErrorLogId");                    
				OnColumnChanging(ErrorLogColumn.ErrorLogId, this.entityData.ErrorLogId);
				this.entityData.ErrorLogId = value;
				this.EntityId.ErrorLogId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ErrorLogColumn.ErrorLogId, this.entityData.ErrorLogId);
				OnPropertyChanged("ErrorLogId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ErrorTime property. 
		///		The date and time at which the error occurred.
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"The date and time at which the error occurred."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ErrorTime
		{
			get
			{
				return this.entityData.ErrorTime; 
			}
			
			set
			{
				if (this.entityData.ErrorTime == value)
					return;
				
                OnPropertyChanging("ErrorTime");                    
				OnColumnChanging(ErrorLogColumn.ErrorTime, this.entityData.ErrorTime);
				this.entityData.ErrorTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ErrorLogColumn.ErrorTime, this.entityData.ErrorTime);
				OnPropertyChanged("ErrorTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserName property. 
		///		The user who executed the batch in which the error occurred.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"The user who executed the batch in which the error occurred."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 128)]
		public virtual System.String UserName
		{
			get
			{
				return this.entityData.UserName; 
			}
			
			set
			{
				if (this.entityData.UserName == value)
					return;
				
                OnPropertyChanging("UserName");                    
				OnColumnChanging(ErrorLogColumn.UserName, this.entityData.UserName);
				this.entityData.UserName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ErrorLogColumn.UserName, this.entityData.UserName);
				OnPropertyChanged("UserName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ErrorNumber property. 
		///		The error number of the error that occurred.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"The error number of the error that occurred."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ErrorNumber
		{
			get
			{
				return this.entityData.ErrorNumber; 
			}
			
			set
			{
				if (this.entityData.ErrorNumber == value)
					return;
				
                OnPropertyChanging("ErrorNumber");                    
				OnColumnChanging(ErrorLogColumn.ErrorNumber, this.entityData.ErrorNumber);
				this.entityData.ErrorNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ErrorLogColumn.ErrorNumber, this.entityData.ErrorNumber);
				OnPropertyChanged("ErrorNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ErrorSeverity property. 
		///		The severity of the error that occurred.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsErrorSeverityNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"The severity of the error that occurred."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ErrorSeverity
		{
			get
			{
				return this.entityData.ErrorSeverity; 
			}
			
			set
			{
				if (this.entityData.ErrorSeverity == value)
					return;
				
                OnPropertyChanging("ErrorSeverity");                    
				OnColumnChanging(ErrorLogColumn.ErrorSeverity, this.entityData.ErrorSeverity);
				this.entityData.ErrorSeverity = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ErrorLogColumn.ErrorSeverity, this.entityData.ErrorSeverity);
				OnPropertyChanged("ErrorSeverity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ErrorState property. 
		///		The state number of the error that occurred.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsErrorStateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"The state number of the error that occurred."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ErrorState
		{
			get
			{
				return this.entityData.ErrorState; 
			}
			
			set
			{
				if (this.entityData.ErrorState == value)
					return;
				
                OnPropertyChanging("ErrorState");                    
				OnColumnChanging(ErrorLogColumn.ErrorState, this.entityData.ErrorState);
				this.entityData.ErrorState = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ErrorLogColumn.ErrorState, this.entityData.ErrorState);
				OnPropertyChanged("ErrorState");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ErrorProcedure property. 
		///		The name of the stored procedure or trigger where the error occurred.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"The name of the stored procedure or trigger where the error occurred."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 126)]
		public virtual System.String ErrorProcedure
		{
			get
			{
				return this.entityData.ErrorProcedure; 
			}
			
			set
			{
				if (this.entityData.ErrorProcedure == value)
					return;
				
                OnPropertyChanging("ErrorProcedure");                    
				OnColumnChanging(ErrorLogColumn.ErrorProcedure, this.entityData.ErrorProcedure);
				this.entityData.ErrorProcedure = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ErrorLogColumn.ErrorProcedure, this.entityData.ErrorProcedure);
				OnPropertyChanged("ErrorProcedure");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ErrorLine property. 
		///		The line number at which the error occurred.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsErrorLineNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"The line number at which the error occurred."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ErrorLine
		{
			get
			{
				return this.entityData.ErrorLine; 
			}
			
			set
			{
				if (this.entityData.ErrorLine == value)
					return;
				
                OnPropertyChanging("ErrorLine");                    
				OnColumnChanging(ErrorLogColumn.ErrorLine, this.entityData.ErrorLine);
				this.entityData.ErrorLine = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ErrorLogColumn.ErrorLine, this.entityData.ErrorLine);
				OnPropertyChanged("ErrorLine");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ErrorMessage property. 
		///		The message text of the error that occurred.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"The message text of the error that occurred."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 4000)]
		public virtual System.String ErrorMessage
		{
			get
			{
				return this.entityData.ErrorMessage; 
			}
			
			set
			{
				if (this.entityData.ErrorMessage == value)
					return;
				
                OnPropertyChanging("ErrorMessage");                    
				OnColumnChanging(ErrorLogColumn.ErrorMessage, this.entityData.ErrorMessage);
				this.entityData.ErrorMessage = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ErrorLogColumn.ErrorMessage, this.entityData.ErrorMessage);
				OnPropertyChanged("ErrorMessage");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("UserName", "User Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UserName", "User Name", 128));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ErrorProcedure", "Error Procedure", 126));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ErrorMessage", "Error Message"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ErrorMessage", "Error Message", 4000));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ErrorLog"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ErrorLogID", "ErrorTime", "UserName", "ErrorNumber", "ErrorSeverity", "ErrorState", "ErrorProcedure", "ErrorLine", "ErrorMessage"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ErrorLogEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ErrorLog) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ErrorLog>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ErrorLog);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ErrorLog Entity 
		///</summary>
		protected virtual ErrorLog Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ErrorLog copy = new ErrorLog();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.ErrorLogId = this.ErrorLogId;
				copy.ErrorTime = this.ErrorTime;
				copy.UserName = this.UserName;
				copy.ErrorNumber = this.ErrorNumber;
				copy.ErrorSeverity = this.ErrorSeverity;
				copy.ErrorState = this.ErrorState;
				copy.ErrorProcedure = this.ErrorProcedure;
				copy.ErrorLine = this.ErrorLine;
				copy.ErrorMessage = this.ErrorMessage;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ErrorLog Entity 
		///</summary>
		public virtual ErrorLog Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ErrorLog Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ErrorLog DeepCopy()
		{
			return EntityHelper.Clone<ErrorLog>(this as ErrorLog);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ErrorLogEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ErrorLogEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ErrorLogEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ErrorLogColumn column)
		{
			switch(column)
			{
					case ErrorLogColumn.ErrorLogId:
					return entityData.ErrorLogId != _originalData.ErrorLogId;
					case ErrorLogColumn.ErrorTime:
					return entityData.ErrorTime != _originalData.ErrorTime;
					case ErrorLogColumn.UserName:
					return entityData.UserName != _originalData.UserName;
					case ErrorLogColumn.ErrorNumber:
					return entityData.ErrorNumber != _originalData.ErrorNumber;
					case ErrorLogColumn.ErrorSeverity:
					return entityData.ErrorSeverity != _originalData.ErrorSeverity;
					case ErrorLogColumn.ErrorState:
					return entityData.ErrorState != _originalData.ErrorState;
					case ErrorLogColumn.ErrorProcedure:
					return entityData.ErrorProcedure != _originalData.ErrorProcedure;
					case ErrorLogColumn.ErrorLine:
					return entityData.ErrorLine != _originalData.ErrorLine;
					case ErrorLogColumn.ErrorMessage:
					return entityData.ErrorMessage != _originalData.ErrorMessage;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ErrorLogColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ErrorLogId != _originalData.ErrorLogId;
			result = result || entityData.ErrorTime != _originalData.ErrorTime;
			result = result || entityData.UserName != _originalData.UserName;
			result = result || entityData.ErrorNumber != _originalData.ErrorNumber;
			result = result || entityData.ErrorSeverity != _originalData.ErrorSeverity;
			result = result || entityData.ErrorState != _originalData.ErrorState;
			result = result || entityData.ErrorProcedure != _originalData.ErrorProcedure;
			result = result || entityData.ErrorLine != _originalData.ErrorLine;
			result = result || entityData.ErrorMessage != _originalData.ErrorMessage;
			return result;
		}	
		
		///<summary>
		///  Returns a ErrorLog Entity with the original data.
		///</summary>
		public ErrorLog GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateErrorLog(
				_originalData.ErrorTime,
				_originalData.UserName,
				_originalData.ErrorNumber,
				_originalData.ErrorSeverity,
				_originalData.ErrorState,
				_originalData.ErrorProcedure,
				_originalData.ErrorLine,
				_originalData.ErrorMessage
				);
				
			return (ErrorLog)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ErrorLogBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ErrorLogBase)
				return ValueEquals(this, (ErrorLogBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ErrorLogBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ErrorLogId.GetHashCode() ^ 
					this.ErrorTime.GetHashCode() ^ 
					this.UserName.GetHashCode() ^ 
					this.ErrorNumber.GetHashCode() ^ 
					((this.ErrorSeverity == null) ? string.Empty : this.ErrorSeverity.ToString()).GetHashCode() ^ 
					((this.ErrorState == null) ? string.Empty : this.ErrorState.ToString()).GetHashCode() ^ 
					((this.ErrorProcedure == null) ? string.Empty : this.ErrorProcedure.ToString()).GetHashCode() ^ 
					((this.ErrorLine == null) ? string.Empty : this.ErrorLine.ToString()).GetHashCode() ^ 
					this.ErrorMessage.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ErrorLogBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ErrorLogBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ErrorLogBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ErrorLogBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ErrorLogBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ErrorLogBase Object1, ErrorLogBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ErrorLogId != Object2.ErrorLogId)
				equal = false;
			if (Object1.ErrorTime != Object2.ErrorTime)
				equal = false;
			if (Object1.UserName != Object2.UserName)
				equal = false;
			if (Object1.ErrorNumber != Object2.ErrorNumber)
				equal = false;
			if ( Object1.ErrorSeverity != null && Object2.ErrorSeverity != null )
			{
				if (Object1.ErrorSeverity != Object2.ErrorSeverity)
					equal = false;
			}
			else if (Object1.ErrorSeverity == null ^ Object2.ErrorSeverity == null )
			{
				equal = false;
			}
			if ( Object1.ErrorState != null && Object2.ErrorState != null )
			{
				if (Object1.ErrorState != Object2.ErrorState)
					equal = false;
			}
			else if (Object1.ErrorState == null ^ Object2.ErrorState == null )
			{
				equal = false;
			}
			if ( Object1.ErrorProcedure != null && Object2.ErrorProcedure != null )
			{
				if (Object1.ErrorProcedure != Object2.ErrorProcedure)
					equal = false;
			}
			else if (Object1.ErrorProcedure == null ^ Object2.ErrorProcedure == null )
			{
				equal = false;
			}
			if ( Object1.ErrorLine != null && Object2.ErrorLine != null )
			{
				if (Object1.ErrorLine != Object2.ErrorLine)
					equal = false;
			}
			else if (Object1.ErrorLine == null ^ Object2.ErrorLine == null )
			{
				equal = false;
			}
			if (Object1.ErrorMessage != Object2.ErrorMessage)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ErrorLogBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ErrorLogComparer GetComparer()
        {
            return new ErrorLogComparer();
        }
        */

        // Comparer delegates back to ErrorLog
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ErrorLog rhs, ErrorLogColumn which)
        {
            switch (which)
            {
            	
            	
            	case ErrorLogColumn.ErrorLogId:
            		return this.ErrorLogId.CompareTo(rhs.ErrorLogId);
            		
            		                 
            	
            	
            	case ErrorLogColumn.ErrorTime:
            		return this.ErrorTime.CompareTo(rhs.ErrorTime);
            		
            		                 
            	
            	
            	case ErrorLogColumn.UserName:
            		return this.UserName.CompareTo(rhs.UserName);
            		
            		                 
            	
            	
            	case ErrorLogColumn.ErrorNumber:
            		return this.ErrorNumber.CompareTo(rhs.ErrorNumber);
            		
            		                 
            	
            	
            	case ErrorLogColumn.ErrorSeverity:
            		return this.ErrorSeverity.Value.CompareTo(rhs.ErrorSeverity.Value);
            		
            		                 
            	
            	
            	case ErrorLogColumn.ErrorState:
            		return this.ErrorState.Value.CompareTo(rhs.ErrorState.Value);
            		
            		                 
            	
            	
            	case ErrorLogColumn.ErrorProcedure:
            		return this.ErrorProcedure.CompareTo(rhs.ErrorProcedure);
            		
            		                 
            	
            	
            	case ErrorLogColumn.ErrorLine:
            		return this.ErrorLine.Value.CompareTo(rhs.ErrorLine.Value);
            		
            		                 
            	
            	
            	case ErrorLogColumn.ErrorMessage:
            		return this.ErrorMessage.CompareTo(rhs.ErrorMessage);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ErrorLogKey> Members
		
		// member variable for the EntityId property
		private ErrorLogKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ErrorLogKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ErrorLogKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ErrorLog")
					.Append("|").Append( this.ErrorLogId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- ErrorLogId: {0}{9}- ErrorTime: {1}{9}- UserName: {2}{9}- ErrorNumber: {3}{9}- ErrorSeverity: {4}{9}- ErrorState: {5}{9}- ErrorProcedure: {6}{9}- ErrorLine: {7}{9}- ErrorMessage: {8}{9}{11}", 
				this.ErrorLogId,
				this.ErrorTime,
				this.UserName,
				this.ErrorNumber,
				(this.ErrorSeverity == null) ? string.Empty : this.ErrorSeverity.ToString(),
				(this.ErrorState == null) ? string.Empty : this.ErrorState.ToString(),
				(this.ErrorProcedure == null) ? string.Empty : this.ErrorProcedure.ToString(),
				(this.ErrorLine == null) ? string.Empty : this.ErrorLine.ToString(),
				this.ErrorMessage,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ErrorLog' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ErrorLogEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ErrorLogID : Primary key for ErrorLog records.
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ErrorLog"</remarks>
		public System.Int32 ErrorLogId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// ErrorTime : The date and time at which the error occurred.
		/// </summary>
		public System.DateTime ErrorTime = DateTime.MinValue;
		
		/// <summary>
		/// UserName : The user who executed the batch in which the error occurred.
		/// </summary>
		public System.String UserName = string.Empty;
		
		/// <summary>
		/// ErrorNumber : The error number of the error that occurred.
		/// </summary>
		public System.Int32 ErrorNumber = (int)0;
		
		/// <summary>
		/// ErrorSeverity : The severity of the error that occurred.
		/// </summary>
		public System.Int32? ErrorSeverity = null;
		
		/// <summary>
		/// ErrorState : The state number of the error that occurred.
		/// </summary>
		public System.Int32? ErrorState = null;
		
		/// <summary>
		/// ErrorProcedure : The name of the stored procedure or trigger where the error occurred.
		/// </summary>
		public System.String ErrorProcedure = null;
		
		/// <summary>
		/// ErrorLine : The line number at which the error occurred.
		/// </summary>
		public System.Int32? ErrorLine = null;
		
		/// <summary>
		/// ErrorMessage : The message text of the error that occurred.
		/// </summary>
		public System.String ErrorMessage = string.Empty;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ErrorLogEntityData _tmp = new ErrorLogEntityData();
						
			_tmp.ErrorLogId = this.ErrorLogId;
			
			_tmp.ErrorTime = this.ErrorTime;
			_tmp.UserName = this.UserName;
			_tmp.ErrorNumber = this.ErrorNumber;
			_tmp.ErrorSeverity = this.ErrorSeverity;
			_tmp.ErrorState = this.ErrorState;
			_tmp.ErrorProcedure = this.ErrorProcedure;
			_tmp.ErrorLine = this.ErrorLine;
			_tmp.ErrorMessage = this.ErrorMessage;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ErrorLogEntityData _tmp = new ErrorLogEntityData();
						
			_tmp.ErrorLogId = this.ErrorLogId;
			
			_tmp.ErrorTime = this.ErrorTime;
			_tmp.UserName = this.UserName;
			_tmp.ErrorNumber = this.ErrorNumber;
			_tmp.ErrorSeverity = this.ErrorSeverity;
			_tmp.ErrorState = this.ErrorState;
			_tmp.ErrorProcedure = this.ErrorProcedure;
			_tmp.ErrorLine = this.ErrorLine;
			_tmp.ErrorMessage = this.ErrorMessage;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ErrorLogColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ErrorLogColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ErrorLogColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ErrorLogColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ErrorLogColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ErrorLogColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ErrorLogEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ErrorLogEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ErrorLogColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ErrorLogColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ErrorLogEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ErrorLogEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ErrorLogEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ErrorLog"/> object.
	/// </remarks>
	public class ErrorLogEventArgs : System.EventArgs
	{
		private ErrorLogColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ErrorLogEventArgs class.
		///</summary>
		public ErrorLogEventArgs(ErrorLogColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ErrorLogEventArgs class.
		///</summary>
		public ErrorLogEventArgs(ErrorLogColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ErrorLogColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ErrorLogColumn" />
		public ErrorLogColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ErrorLog related events.
	///</summary>
	public delegate void ErrorLogEventHandler(object sender, ErrorLogEventArgs e);
	
	#region ErrorLogComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ErrorLogComparer : System.Collections.Generic.IComparer<ErrorLog>
	{
		ErrorLogColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ErrorLogComparer"/> class.
        /// </summary>
		public ErrorLogComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ErrorLogComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ErrorLogComparer(ErrorLogColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="ErrorLog"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="ErrorLog"/> to compare.</param>
        /// <param name="b">The second <c>ErrorLog</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ErrorLog a, ErrorLog b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ErrorLog entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ErrorLog a, ErrorLog b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ErrorLogColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ErrorLogKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ErrorLog"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ErrorLogKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ErrorLogKey class.
		/// </summary>
		public ErrorLogKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ErrorLogKey class.
		/// </summary>
		public ErrorLogKey(ErrorLogBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.ErrorLogId = entity.ErrorLogId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ErrorLogKey class.
		/// </summary>
		public ErrorLogKey(System.Int32 _errorLogId)
		{
			#region Init Properties

			this.ErrorLogId = _errorLogId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ErrorLogBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ErrorLogBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ErrorLogId property
		private System.Int32 _errorLogId;
		
		/// <summary>
		/// Gets or sets the ErrorLogId property.
		/// </summary>
		public System.Int32 ErrorLogId
		{
			get { return _errorLogId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ErrorLogId = value;
				
				_errorLogId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ErrorLogId = ( values["ErrorLogId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ErrorLogId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ErrorLogId", ErrorLogId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ErrorLogId: {0}{1}",
								ErrorLogId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ErrorLogColumn Enum
	
	/// <summary>
	/// Enumerate the ErrorLog columns.
	/// </summary>
	[Serializable]
	public enum ErrorLogColumn : int
	{
		/// <summary>
		/// ErrorLogId : Primary key for ErrorLog records.
		/// </summary>
		[EnumTextValue("ErrorLogID")]
		[ColumnEnum("ErrorLogID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		ErrorLogId = 1,
		/// <summary>
		/// ErrorTime : The date and time at which the error occurred.
		/// </summary>
		[EnumTextValue("ErrorTime")]
		[ColumnEnum("ErrorTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ErrorTime = 2,
		/// <summary>
		/// UserName : The user who executed the batch in which the error occurred.
		/// </summary>
		[EnumTextValue("UserName")]
		[ColumnEnum("UserName", typeof(System.String), System.Data.DbType.String, false, false, false, 128)]
		UserName = 3,
		/// <summary>
		/// ErrorNumber : The error number of the error that occurred.
		/// </summary>
		[EnumTextValue("ErrorNumber")]
		[ColumnEnum("ErrorNumber", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ErrorNumber = 4,
		/// <summary>
		/// ErrorSeverity : The severity of the error that occurred.
		/// </summary>
		[EnumTextValue("ErrorSeverity")]
		[ColumnEnum("ErrorSeverity", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ErrorSeverity = 5,
		/// <summary>
		/// ErrorState : The state number of the error that occurred.
		/// </summary>
		[EnumTextValue("ErrorState")]
		[ColumnEnum("ErrorState", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ErrorState = 6,
		/// <summary>
		/// ErrorProcedure : The name of the stored procedure or trigger where the error occurred.
		/// </summary>
		[EnumTextValue("ErrorProcedure")]
		[ColumnEnum("ErrorProcedure", typeof(System.String), System.Data.DbType.String, false, false, true, 126)]
		ErrorProcedure = 7,
		/// <summary>
		/// ErrorLine : The line number at which the error occurred.
		/// </summary>
		[EnumTextValue("ErrorLine")]
		[ColumnEnum("ErrorLine", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ErrorLine = 8,
		/// <summary>
		/// ErrorMessage : The message text of the error that occurred.
		/// </summary>
		[EnumTextValue("ErrorMessage")]
		[ColumnEnum("ErrorMessage", typeof(System.String), System.Data.DbType.String, false, false, false, 4000)]
		ErrorMessage = 9
	}//End enum

	#endregion ErrorLogColumn Enum

} // end namespace
