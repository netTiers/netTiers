using System;
using System.ComponentModel;

namespace Nettiers.AdventureWorks.Entities
{
	/// <summary>
	///		The data structure representation of the 'Contact' table via interface.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	public interface IContact 
	{
		/// <summary>			
		/// ContactID : Primary key for Contact records.
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Contact"</remarks>
		System.Int32 ContactId { get; set; }
				
		
		
		/// <summary>
		/// NameStyle : 0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.
		/// </summary>
		System.Boolean  NameStyle  { get; set; }
		
		/// <summary>
		/// Title : A courtesy title. For example, Mr. or Ms.
		/// </summary>
		System.String  Title  { get; set; }
		
		/// <summary>
		/// FirstName : First name of the person.
		/// </summary>
		System.String  FirstName  { get; set; }
		
		/// <summary>
		/// MiddleName : Middle name or middle initial of the person.
		/// </summary>
		System.String  MiddleName  { get; set; }
		
		/// <summary>
		/// LastName : Last name of the person.
		/// </summary>
		System.String  LastName  { get; set; }
		
		/// <summary>
		/// Suffix : Surname suffix. For example, Sr. or Jr.
		/// </summary>
		System.String  Suffix  { get; set; }
		
		/// <summary>
		/// EmailAddress : E-mail address for the person.
		/// </summary>
		System.String  EmailAddress  { get; set; }
		
		/// <summary>
		/// EmailPromotion : 0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners. 
		/// </summary>
		System.Int32  EmailPromotion  { get; set; }
		
		/// <summary>
		/// Phone : Phone number associated with the person.
		/// </summary>
		System.String  Phone  { get; set; }
		
		/// <summary>
		/// PasswordHash : Password for the e-mail account.
		/// </summary>
		System.String  PasswordHash  { get; set; }
		
		/// <summary>
		/// PasswordSalt : Random value concatenated with the password string before the password is hashed.
		/// </summary>
		System.String  PasswordSalt  { get; set; }
		
		/// <summary>
		/// AdditionalContactInfo : Additional contact information about the person stored in xml format. 
		/// </summary>
		string  AdditionalContactInfo  { get; set; }
		
		/// <summary>
		/// rowguid : ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		System.Guid  Rowguid  { get; set; }
		
		/// <summary>
		/// ModifiedDate : Date and time the record was last updated.
		/// </summary>
		System.DateTime  ModifiedDate  { get; set; }
			
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		System.Object Clone();
		
		#region Data Properties


		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _employeeContactId
		/// </summary>	
		TList<Employee> EmployeeCollection {  get;  set;}	


		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _salesOrderHeaderContactId
		/// </summary>	
		TList<SalesOrderHeader> SalesOrderHeaderCollection {  get;  set;}	


		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _individualContactId
		/// </summary>	
		TList<Individual> IndividualCollection {  get;  set;}	


		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _storeContactContactId
		/// </summary>	
		TList<StoreContact> StoreContactCollection {  get;  set;}	


		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _contactCreditCardContactId
		/// </summary>	
		TList<ContactCreditCard> ContactCreditCardCollection {  get;  set;}	


		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _vendorContactContactId
		/// </summary>	
		TList<VendorContact> VendorContactCollection {  get;  set;}	

		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table creditCardIdCreditCardCollectionFromContactCreditCard
		/// </summary>	
		TList<CreditCard> CreditCardIdCreditCardCollection_From_ContactCreditCard { get; set; }	

		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table customerIdStoreCollectionFromStoreContact
		/// </summary>	
		TList<Store> CustomerIdStoreCollection_From_StoreContact { get; set; }	

		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table vendorIdVendorCollectionFromVendorContact
		/// </summary>	
		TList<Vendor> VendorIdVendorCollection_From_VendorContact { get; set; }	

		#endregion Data Properties

	}
}


