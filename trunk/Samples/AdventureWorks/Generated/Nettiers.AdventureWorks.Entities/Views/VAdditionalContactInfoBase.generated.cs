/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VAdditionalContactInfo.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace Nettiers.AdventureWorks.Entities
{
	///<summary>
	/// Displays the contact name and content from each element in the xml column AdditionalContactInfo for that person.	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("VAdditionalContactInfoBase")]
	public abstract partial class VAdditionalContactInfoBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// ContactID : 
		/// </summary>
		private System.Int32		  _contactId = (int)0;
		
		/// <summary>
		/// FirstName : 
		/// </summary>
		private System.String		  _firstName = string.Empty;
		
		/// <summary>
		/// MiddleName : 
		/// </summary>
		private System.String		  _middleName = null;
		
		/// <summary>
		/// LastName : 
		/// </summary>
		private System.String		  _lastName = string.Empty;
		
		/// <summary>
		/// TelephoneNumber : 
		/// </summary>
		private System.String		  _telephoneNumber = null;
		
		/// <summary>
		/// TelephoneSpecialInstructions : 
		/// </summary>
		private System.String		  _telephoneSpecialInstructions = null;
		
		/// <summary>
		/// Street : 
		/// </summary>
		private System.String		  _street = null;
		
		/// <summary>
		/// City : 
		/// </summary>
		private System.String		  _city = null;
		
		/// <summary>
		/// StateProvince : 
		/// </summary>
		private System.String		  _stateProvince = null;
		
		/// <summary>
		/// PostalCode : 
		/// </summary>
		private System.String		  _postalCode = null;
		
		/// <summary>
		/// CountryRegion : 
		/// </summary>
		private System.String		  _countryRegion = null;
		
		/// <summary>
		/// HomeAddressSpecialInstructions : 
		/// </summary>
		private System.String		  _homeAddressSpecialInstructions = null;
		
		/// <summary>
		/// EMailAddress : 
		/// </summary>
		private System.String		  _emailAddress = null;
		
		/// <summary>
		/// EMailSpecialInstructions : 
		/// </summary>
		private System.String		  _emailSpecialInstructions = null;
		
		/// <summary>
		/// EMailTelephoneNumber : 
		/// </summary>
		private System.String		  _emailTelephoneNumber = null;
		
		/// <summary>
		/// rowguid : 
		/// </summary>
		private System.Guid		  _rowguid = Guid.Empty;
		
		/// <summary>
		/// ModifiedDate : 
		/// </summary>
		private System.DateTime		  _modifiedDate = DateTime.MinValue;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VAdditionalContactInfoBase"/> instance.
		///</summary>
		public VAdditionalContactInfoBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="VAdditionalContactInfoBase"/> instance.
		///</summary>
		///<param name="_contactId"></param>
		///<param name="_firstName"></param>
		///<param name="_middleName"></param>
		///<param name="_lastName"></param>
		///<param name="_telephoneNumber"></param>
		///<param name="_telephoneSpecialInstructions"></param>
		///<param name="_street"></param>
		///<param name="_city"></param>
		///<param name="_stateProvince"></param>
		///<param name="_postalCode"></param>
		///<param name="_countryRegion"></param>
		///<param name="_homeAddressSpecialInstructions"></param>
		///<param name="_emailAddress"></param>
		///<param name="_emailSpecialInstructions"></param>
		///<param name="_emailTelephoneNumber"></param>
		///<param name="_rowguid"></param>
		///<param name="_modifiedDate"></param>
		public VAdditionalContactInfoBase(System.Int32 _contactId, System.String _firstName, System.String _middleName, System.String _lastName, System.String _telephoneNumber, System.String _telephoneSpecialInstructions, System.String _street, System.String _city, System.String _stateProvince, System.String _postalCode, System.String _countryRegion, System.String _homeAddressSpecialInstructions, System.String _emailAddress, System.String _emailSpecialInstructions, System.String _emailTelephoneNumber, System.Guid _rowguid, System.DateTime _modifiedDate)
		{
			this._contactId = _contactId;
			this._firstName = _firstName;
			this._middleName = _middleName;
			this._lastName = _lastName;
			this._telephoneNumber = _telephoneNumber;
			this._telephoneSpecialInstructions = _telephoneSpecialInstructions;
			this._street = _street;
			this._city = _city;
			this._stateProvince = _stateProvince;
			this._postalCode = _postalCode;
			this._countryRegion = _countryRegion;
			this._homeAddressSpecialInstructions = _homeAddressSpecialInstructions;
			this._emailAddress = _emailAddress;
			this._emailSpecialInstructions = _emailSpecialInstructions;
			this._emailTelephoneNumber = _emailTelephoneNumber;
			this._rowguid = _rowguid;
			this._modifiedDate = _modifiedDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VAdditionalContactInfo"/> instance.
		///</summary>
		///<param name="_contactId"></param>
		///<param name="_firstName"></param>
		///<param name="_middleName"></param>
		///<param name="_lastName"></param>
		///<param name="_telephoneNumber"></param>
		///<param name="_telephoneSpecialInstructions"></param>
		///<param name="_street"></param>
		///<param name="_city"></param>
		///<param name="_stateProvince"></param>
		///<param name="_postalCode"></param>
		///<param name="_countryRegion"></param>
		///<param name="_homeAddressSpecialInstructions"></param>
		///<param name="_emailAddress"></param>
		///<param name="_emailSpecialInstructions"></param>
		///<param name="_emailTelephoneNumber"></param>
		///<param name="_rowguid"></param>
		///<param name="_modifiedDate"></param>
		public static VAdditionalContactInfo CreateVAdditionalContactInfo(System.Int32 _contactId, System.String _firstName, System.String _middleName, System.String _lastName, System.String _telephoneNumber, System.String _telephoneSpecialInstructions, System.String _street, System.String _city, System.String _stateProvince, System.String _postalCode, System.String _countryRegion, System.String _homeAddressSpecialInstructions, System.String _emailAddress, System.String _emailSpecialInstructions, System.String _emailTelephoneNumber, System.Guid _rowguid, System.DateTime _modifiedDate)
		{
			VAdditionalContactInfo newVAdditionalContactInfo = new VAdditionalContactInfo();
			newVAdditionalContactInfo.ContactId = _contactId;
			newVAdditionalContactInfo.FirstName = _firstName;
			newVAdditionalContactInfo.MiddleName = _middleName;
			newVAdditionalContactInfo.LastName = _lastName;
			newVAdditionalContactInfo.TelephoneNumber = _telephoneNumber;
			newVAdditionalContactInfo.TelephoneSpecialInstructions = _telephoneSpecialInstructions;
			newVAdditionalContactInfo.Street = _street;
			newVAdditionalContactInfo.City = _city;
			newVAdditionalContactInfo.StateProvince = _stateProvince;
			newVAdditionalContactInfo.PostalCode = _postalCode;
			newVAdditionalContactInfo.CountryRegion = _countryRegion;
			newVAdditionalContactInfo.HomeAddressSpecialInstructions = _homeAddressSpecialInstructions;
			newVAdditionalContactInfo.EmailAddress = _emailAddress;
			newVAdditionalContactInfo.EmailSpecialInstructions = _emailSpecialInstructions;
			newVAdditionalContactInfo.EmailTelephoneNumber = _emailTelephoneNumber;
			newVAdditionalContactInfo.Rowguid = _rowguid;
			newVAdditionalContactInfo.ModifiedDate = _modifiedDate;
			return newVAdditionalContactInfo;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the ContactID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 ContactId
		{
			get
			{
				return this._contactId; 
			}
			set
			{
				if (_contactId == value)
					return;
					
				this._contactId = value;
				this._isDirty = true;
				
				OnPropertyChanged("ContactId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FirstName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String FirstName
		{
			get
			{
				return this._firstName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "FirstName does not allow null values.");
				if (_firstName == value)
					return;
					
				this._firstName = value;
				this._isDirty = true;
				
				OnPropertyChanged("FirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MiddleName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MiddleName
		{
			get
			{
				return this._middleName; 
			}
			set
			{
				if (_middleName == value)
					return;
					
				this._middleName = value;
				this._isDirty = true;
				
				OnPropertyChanged("MiddleName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LastName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String LastName
		{
			get
			{
				return this._lastName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "LastName does not allow null values.");
				if (_lastName == value)
					return;
					
				this._lastName = value;
				this._isDirty = true;
				
				OnPropertyChanged("LastName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TelephoneNumber property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TelephoneNumber
		{
			get
			{
				return this._telephoneNumber; 
			}
			set
			{
				if (_telephoneNumber == value)
					return;
					
				this._telephoneNumber = value;
				this._isDirty = true;
				
				OnPropertyChanged("TelephoneNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TelephoneSpecialInstructions property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TelephoneSpecialInstructions
		{
			get
			{
				return this._telephoneSpecialInstructions; 
			}
			set
			{
				if (_telephoneSpecialInstructions == value)
					return;
					
				this._telephoneSpecialInstructions = value;
				this._isDirty = true;
				
				OnPropertyChanged("TelephoneSpecialInstructions");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Street property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Street
		{
			get
			{
				return this._street; 
			}
			set
			{
				if (_street == value)
					return;
					
				this._street = value;
				this._isDirty = true;
				
				OnPropertyChanged("Street");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the City property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String City
		{
			get
			{
				return this._city; 
			}
			set
			{
				if (_city == value)
					return;
					
				this._city = value;
				this._isDirty = true;
				
				OnPropertyChanged("City");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the StateProvince property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String StateProvince
		{
			get
			{
				return this._stateProvince; 
			}
			set
			{
				if (_stateProvince == value)
					return;
					
				this._stateProvince = value;
				this._isDirty = true;
				
				OnPropertyChanged("StateProvince");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the PostalCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String PostalCode
		{
			get
			{
				return this._postalCode; 
			}
			set
			{
				if (_postalCode == value)
					return;
					
				this._postalCode = value;
				this._isDirty = true;
				
				OnPropertyChanged("PostalCode");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CountryRegion property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CountryRegion
		{
			get
			{
				return this._countryRegion; 
			}
			set
			{
				if (_countryRegion == value)
					return;
					
				this._countryRegion = value;
				this._isDirty = true;
				
				OnPropertyChanged("CountryRegion");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HomeAddressSpecialInstructions property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HomeAddressSpecialInstructions
		{
			get
			{
				return this._homeAddressSpecialInstructions; 
			}
			set
			{
				if (_homeAddressSpecialInstructions == value)
					return;
					
				this._homeAddressSpecialInstructions = value;
				this._isDirty = true;
				
				OnPropertyChanged("HomeAddressSpecialInstructions");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the EMailAddress property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String EmailAddress
		{
			get
			{
				return this._emailAddress; 
			}
			set
			{
				if (_emailAddress == value)
					return;
					
				this._emailAddress = value;
				this._isDirty = true;
				
				OnPropertyChanged("EmailAddress");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the EMailSpecialInstructions property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String EmailSpecialInstructions
		{
			get
			{
				return this._emailSpecialInstructions; 
			}
			set
			{
				if (_emailSpecialInstructions == value)
					return;
					
				this._emailSpecialInstructions = value;
				this._isDirty = true;
				
				OnPropertyChanged("EmailSpecialInstructions");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the EMailTelephoneNumber property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String EmailTelephoneNumber
		{
			get
			{
				return this._emailTelephoneNumber; 
			}
			set
			{
				if (_emailTelephoneNumber == value)
					return;
					
				this._emailTelephoneNumber = value;
				this._isDirty = true;
				
				OnPropertyChanged("EmailTelephoneNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the rowguid property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Guid Rowguid
		{
			get
			{
				return this._rowguid; 
			}
			set
			{
				if (_rowguid == value)
					return;
					
				this._rowguid = value;
				this._isDirty = true;
				
				OnPropertyChanged("Rowguid");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ModifiedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime ModifiedDate
		{
			get
			{
				return this._modifiedDate; 
			}
			set
			{
				if (_modifiedDate == value)
					return;
					
				this._modifiedDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("ModifiedDate");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "vAdditionalContactInfo"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VAdditionalContactInfoBase Entity 
		///</summary>
		public virtual VAdditionalContactInfoBase Copy()
		{
			//shallow copy entity
			VAdditionalContactInfo copy = new VAdditionalContactInfo();
				copy.ContactId = this.ContactId;
				copy.FirstName = this.FirstName;
				copy.MiddleName = this.MiddleName;
				copy.LastName = this.LastName;
				copy.TelephoneNumber = this.TelephoneNumber;
				copy.TelephoneSpecialInstructions = this.TelephoneSpecialInstructions;
				copy.Street = this.Street;
				copy.City = this.City;
				copy.StateProvince = this.StateProvince;
				copy.PostalCode = this.PostalCode;
				copy.CountryRegion = this.CountryRegion;
				copy.HomeAddressSpecialInstructions = this.HomeAddressSpecialInstructions;
				copy.EmailAddress = this.EmailAddress;
				copy.EmailSpecialInstructions = this.EmailSpecialInstructions;
				copy.EmailTelephoneNumber = this.EmailTelephoneNumber;
				copy.Rowguid = this.Rowguid;
				copy.ModifiedDate = this.ModifiedDate;
			copy.AcceptChanges();
			return (VAdditionalContactInfo)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VAdditionalContactInfoBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VAdditionalContactInfoBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="VAdditionalContactInfoBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="VAdditionalContactInfoBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VAdditionalContactInfoBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(VAdditionalContactInfoBase Object1, VAdditionalContactInfoBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.ContactId != Object2.ContactId)
				equal = false;
			if (Object1.FirstName != Object2.FirstName)
				equal = false;
			if (Object1.MiddleName != null && Object2.MiddleName != null )
			{
				if (Object1.MiddleName != Object2.MiddleName)
					equal = false;
			}
			else if (Object1.MiddleName == null ^ Object1.MiddleName == null )
			{
				equal = false;
			}
			if (Object1.LastName != Object2.LastName)
				equal = false;
			if (Object1.TelephoneNumber != null && Object2.TelephoneNumber != null )
			{
				if (Object1.TelephoneNumber != Object2.TelephoneNumber)
					equal = false;
			}
			else if (Object1.TelephoneNumber == null ^ Object1.TelephoneNumber == null )
			{
				equal = false;
			}
			if (Object1.TelephoneSpecialInstructions != null && Object2.TelephoneSpecialInstructions != null )
			{
				if (Object1.TelephoneSpecialInstructions != Object2.TelephoneSpecialInstructions)
					equal = false;
			}
			else if (Object1.TelephoneSpecialInstructions == null ^ Object1.TelephoneSpecialInstructions == null )
			{
				equal = false;
			}
			if (Object1.Street != null && Object2.Street != null )
			{
				if (Object1.Street != Object2.Street)
					equal = false;
			}
			else if (Object1.Street == null ^ Object1.Street == null )
			{
				equal = false;
			}
			if (Object1.City != null && Object2.City != null )
			{
				if (Object1.City != Object2.City)
					equal = false;
			}
			else if (Object1.City == null ^ Object1.City == null )
			{
				equal = false;
			}
			if (Object1.StateProvince != null && Object2.StateProvince != null )
			{
				if (Object1.StateProvince != Object2.StateProvince)
					equal = false;
			}
			else if (Object1.StateProvince == null ^ Object1.StateProvince == null )
			{
				equal = false;
			}
			if (Object1.PostalCode != null && Object2.PostalCode != null )
			{
				if (Object1.PostalCode != Object2.PostalCode)
					equal = false;
			}
			else if (Object1.PostalCode == null ^ Object1.PostalCode == null )
			{
				equal = false;
			}
			if (Object1.CountryRegion != null && Object2.CountryRegion != null )
			{
				if (Object1.CountryRegion != Object2.CountryRegion)
					equal = false;
			}
			else if (Object1.CountryRegion == null ^ Object1.CountryRegion == null )
			{
				equal = false;
			}
			if (Object1.HomeAddressSpecialInstructions != null && Object2.HomeAddressSpecialInstructions != null )
			{
				if (Object1.HomeAddressSpecialInstructions != Object2.HomeAddressSpecialInstructions)
					equal = false;
			}
			else if (Object1.HomeAddressSpecialInstructions == null ^ Object1.HomeAddressSpecialInstructions == null )
			{
				equal = false;
			}
			if (Object1.EmailAddress != null && Object2.EmailAddress != null )
			{
				if (Object1.EmailAddress != Object2.EmailAddress)
					equal = false;
			}
			else if (Object1.EmailAddress == null ^ Object1.EmailAddress == null )
			{
				equal = false;
			}
			if (Object1.EmailSpecialInstructions != null && Object2.EmailSpecialInstructions != null )
			{
				if (Object1.EmailSpecialInstructions != Object2.EmailSpecialInstructions)
					equal = false;
			}
			else if (Object1.EmailSpecialInstructions == null ^ Object1.EmailSpecialInstructions == null )
			{
				equal = false;
			}
			if (Object1.EmailTelephoneNumber != null && Object2.EmailTelephoneNumber != null )
			{
				if (Object1.EmailTelephoneNumber != Object2.EmailTelephoneNumber)
					equal = false;
			}
			else if (Object1.EmailTelephoneNumber == null ^ Object1.EmailTelephoneNumber == null )
			{
				equal = false;
			}
			if (Object1.Rowguid != Object2.Rowguid)
				equal = false;
			if (Object1.ModifiedDate != Object2.ModifiedDate)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(VAdditionalContactInfo entity, string propertyName)
		{
			switch (propertyName)
			{
				case "ContactId":
					return entity.ContactId;
				case "FirstName":
					return entity.FirstName;
				case "MiddleName":
					return entity.MiddleName;
				case "LastName":
					return entity.LastName;
				case "TelephoneNumber":
					return entity.TelephoneNumber;
				case "TelephoneSpecialInstructions":
					return entity.TelephoneSpecialInstructions;
				case "Street":
					return entity.Street;
				case "City":
					return entity.City;
				case "StateProvince":
					return entity.StateProvince;
				case "PostalCode":
					return entity.PostalCode;
				case "CountryRegion":
					return entity.CountryRegion;
				case "HomeAddressSpecialInstructions":
					return entity.HomeAddressSpecialInstructions;
				case "EmailAddress":
					return entity.EmailAddress;
				case "EmailSpecialInstructions":
					return entity.EmailSpecialInstructions;
				case "EmailTelephoneNumber":
					return entity.EmailTelephoneNumber;
				case "Rowguid":
					return entity.Rowguid;
				case "ModifiedDate":
					return entity.ModifiedDate;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as VAdditionalContactInfo, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{18}{17}- ContactId: {0}{17}- FirstName: {1}{17}- MiddleName: {2}{17}- LastName: {3}{17}- TelephoneNumber: {4}{17}- TelephoneSpecialInstructions: {5}{17}- Street: {6}{17}- City: {7}{17}- StateProvince: {8}{17}- PostalCode: {9}{17}- CountryRegion: {10}{17}- HomeAddressSpecialInstructions: {11}{17}- EmailAddress: {12}{17}- EmailSpecialInstructions: {13}{17}- EmailTelephoneNumber: {14}{17}- Rowguid: {15}{17}- ModifiedDate: {16}{17}", 
				this.ContactId,
				this.FirstName,
				(this.MiddleName == null) ? string.Empty : this.MiddleName.ToString(),
			     
				this.LastName,
				(this.TelephoneNumber == null) ? string.Empty : this.TelephoneNumber.ToString(),
			     
				(this.TelephoneSpecialInstructions == null) ? string.Empty : this.TelephoneSpecialInstructions.ToString(),
			     
				(this.Street == null) ? string.Empty : this.Street.ToString(),
			     
				(this.City == null) ? string.Empty : this.City.ToString(),
			     
				(this.StateProvince == null) ? string.Empty : this.StateProvince.ToString(),
			     
				(this.PostalCode == null) ? string.Empty : this.PostalCode.ToString(),
			     
				(this.CountryRegion == null) ? string.Empty : this.CountryRegion.ToString(),
			     
				(this.HomeAddressSpecialInstructions == null) ? string.Empty : this.HomeAddressSpecialInstructions.ToString(),
			     
				(this.EmailAddress == null) ? string.Empty : this.EmailAddress.ToString(),
			     
				(this.EmailSpecialInstructions == null) ? string.Empty : this.EmailSpecialInstructions.ToString(),
			     
				(this.EmailTelephoneNumber == null) ? string.Empty : this.EmailTelephoneNumber.ToString(),
			     
				this.Rowguid,
				this.ModifiedDate,
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the VAdditionalContactInfo columns.
	/// </summary>
	[Serializable]
	public enum VAdditionalContactInfoColumn
	{
		/// <summary>
		/// ContactID : 
		/// </summary>
		[EnumTextValue("ContactID")]
		[ColumnEnum("ContactID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ContactId,
		/// <summary>
		/// FirstName : 
		/// </summary>
		[EnumTextValue("FirstName")]
		[ColumnEnum("FirstName", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		FirstName,
		/// <summary>
		/// MiddleName : 
		/// </summary>
		[EnumTextValue("MiddleName")]
		[ColumnEnum("MiddleName", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		MiddleName,
		/// <summary>
		/// LastName : 
		/// </summary>
		[EnumTextValue("LastName")]
		[ColumnEnum("LastName", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		LastName,
		/// <summary>
		/// TelephoneNumber : 
		/// </summary>
		[EnumTextValue("TelephoneNumber")]
		[ColumnEnum("TelephoneNumber", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		TelephoneNumber,
		/// <summary>
		/// TelephoneSpecialInstructions : 
		/// </summary>
		[EnumTextValue("TelephoneSpecialInstructions")]
		[ColumnEnum("TelephoneSpecialInstructions", typeof(System.String), System.Data.DbType.String, false, false, true)]
		TelephoneSpecialInstructions,
		/// <summary>
		/// Street : 
		/// </summary>
		[EnumTextValue("Street")]
		[ColumnEnum("Street", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Street,
		/// <summary>
		/// City : 
		/// </summary>
		[EnumTextValue("City")]
		[ColumnEnum("City", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		City,
		/// <summary>
		/// StateProvince : 
		/// </summary>
		[EnumTextValue("StateProvince")]
		[ColumnEnum("StateProvince", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		StateProvince,
		/// <summary>
		/// PostalCode : 
		/// </summary>
		[EnumTextValue("PostalCode")]
		[ColumnEnum("PostalCode", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		PostalCode,
		/// <summary>
		/// CountryRegion : 
		/// </summary>
		[EnumTextValue("CountryRegion")]
		[ColumnEnum("CountryRegion", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		CountryRegion,
		/// <summary>
		/// HomeAddressSpecialInstructions : 
		/// </summary>
		[EnumTextValue("HomeAddressSpecialInstructions")]
		[ColumnEnum("HomeAddressSpecialInstructions", typeof(System.String), System.Data.DbType.String, false, false, true)]
		HomeAddressSpecialInstructions,
		/// <summary>
		/// EMailAddress : 
		/// </summary>
		[EnumTextValue("EMailAddress")]
		[ColumnEnum("EMailAddress", typeof(System.String), System.Data.DbType.String, false, false, true, 128)]
		EmailAddress,
		/// <summary>
		/// EMailSpecialInstructions : 
		/// </summary>
		[EnumTextValue("EMailSpecialInstructions")]
		[ColumnEnum("EMailSpecialInstructions", typeof(System.String), System.Data.DbType.String, false, false, true)]
		EmailSpecialInstructions,
		/// <summary>
		/// EMailTelephoneNumber : 
		/// </summary>
		[EnumTextValue("EMailTelephoneNumber")]
		[ColumnEnum("EMailTelephoneNumber", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		EmailTelephoneNumber,
		/// <summary>
		/// rowguid : 
		/// </summary>
		[EnumTextValue("rowguid")]
		[ColumnEnum("rowguid", typeof(System.Guid), System.Data.DbType.Guid, false, false, false)]
		Rowguid,
		/// <summary>
		/// ModifiedDate : 
		/// </summary>
		[EnumTextValue("ModifiedDate")]
		[ColumnEnum("ModifiedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ModifiedDate
	}//End enum

} // end namespace
