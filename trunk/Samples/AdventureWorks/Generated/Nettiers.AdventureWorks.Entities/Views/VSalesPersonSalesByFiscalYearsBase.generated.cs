/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VSalesPersonSalesByFiscalYears.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace Nettiers.AdventureWorks.Entities
{
	///<summary>
	/// Uses PIVOT to return aggregated sales information for each sales representative.	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("VSalesPersonSalesByFiscalYearsBase")]
	public abstract partial class VSalesPersonSalesByFiscalYearsBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// SalesPersonID : 
		/// </summary>
		private System.Int32?		  _salesPersonId = null;
		
		/// <summary>
		/// FullName : 
		/// </summary>
		private System.String		  _fullName = null;
		
		/// <summary>
		/// Title : 
		/// </summary>
		private System.String		  _title = string.Empty;
		
		/// <summary>
		/// SalesTerritory : 
		/// </summary>
		private System.String		  _salesTerritory = string.Empty;
		
		/// <summary>
		/// 2002 : 
		/// </summary>
		private System.Decimal?		  _safeName2002 = null;
		
		/// <summary>
		/// 2003 : 
		/// </summary>
		private System.Decimal?		  _safeName2003 = null;
		
		/// <summary>
		/// 2004 : 
		/// </summary>
		private System.Decimal?		  _safeName2004 = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VSalesPersonSalesByFiscalYearsBase"/> instance.
		///</summary>
		public VSalesPersonSalesByFiscalYearsBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="VSalesPersonSalesByFiscalYearsBase"/> instance.
		///</summary>
		///<param name="_salesPersonId"></param>
		///<param name="_fullName"></param>
		///<param name="_title"></param>
		///<param name="_salesTerritory"></param>
		///<param name="_safeName2002"></param>
		///<param name="_safeName2003"></param>
		///<param name="_safeName2004"></param>
		public VSalesPersonSalesByFiscalYearsBase(System.Int32? _salesPersonId, System.String _fullName, System.String _title, System.String _salesTerritory, System.Decimal? _safeName2002, System.Decimal? _safeName2003, System.Decimal? _safeName2004)
		{
			this._salesPersonId = _salesPersonId;
			this._fullName = _fullName;
			this._title = _title;
			this._salesTerritory = _salesTerritory;
			this._safeName2002 = _safeName2002;
			this._safeName2003 = _safeName2003;
			this._safeName2004 = _safeName2004;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VSalesPersonSalesByFiscalYears"/> instance.
		///</summary>
		///<param name="_salesPersonId"></param>
		///<param name="_fullName"></param>
		///<param name="_title"></param>
		///<param name="_salesTerritory"></param>
		///<param name="_safeName2002"></param>
		///<param name="_safeName2003"></param>
		///<param name="_safeName2004"></param>
		public static VSalesPersonSalesByFiscalYears CreateVSalesPersonSalesByFiscalYears(System.Int32? _salesPersonId, System.String _fullName, System.String _title, System.String _salesTerritory, System.Decimal? _safeName2002, System.Decimal? _safeName2003, System.Decimal? _safeName2004)
		{
			VSalesPersonSalesByFiscalYears newVSalesPersonSalesByFiscalYears = new VSalesPersonSalesByFiscalYears();
			newVSalesPersonSalesByFiscalYears.SalesPersonId = _salesPersonId;
			newVSalesPersonSalesByFiscalYears.FullName = _fullName;
			newVSalesPersonSalesByFiscalYears.Title = _title;
			newVSalesPersonSalesByFiscalYears.SalesTerritory = _salesTerritory;
			newVSalesPersonSalesByFiscalYears.SafeName2002 = _safeName2002;
			newVSalesPersonSalesByFiscalYears.SafeName2003 = _safeName2003;
			newVSalesPersonSalesByFiscalYears.SafeName2004 = _safeName2004;
			return newVSalesPersonSalesByFiscalYears;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the SalesPersonID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSalesPersonIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? SalesPersonId
		{
			get
			{
				return this._salesPersonId; 
			}
			set
			{
				if (_salesPersonId == value && SalesPersonId != null )
					return;
					
				this._salesPersonId = value;
				this._isDirty = true;
				
				OnPropertyChanged("SalesPersonId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FullName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String FullName
		{
			get
			{
				return this._fullName; 
			}
			set
			{
				if (_fullName == value)
					return;
					
				this._fullName = value;
				this._isDirty = true;
				
				OnPropertyChanged("FullName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Title property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Title
		{
			get
			{
				return this._title; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "Title does not allow null values.");
				if (_title == value)
					return;
					
				this._title = value;
				this._isDirty = true;
				
				OnPropertyChanged("Title");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SalesTerritory property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SalesTerritory
		{
			get
			{
				return this._salesTerritory; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "SalesTerritory does not allow null values.");
				if (_salesTerritory == value)
					return;
					
				this._salesTerritory = value;
				this._isDirty = true;
				
				OnPropertyChanged("SalesTerritory");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the 2002 property. 
		///		
		/// </summary>
		/// <value>This type is money</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsSafeName2002Null() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? SafeName2002
		{
			get
			{
				return this._safeName2002; 
			}
			set
			{
				if (_safeName2002 == value && SafeName2002 != null )
					return;
					
				this._safeName2002 = value;
				this._isDirty = true;
				
				OnPropertyChanged("SafeName2002");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the 2003 property. 
		///		
		/// </summary>
		/// <value>This type is money</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsSafeName2003Null() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? SafeName2003
		{
			get
			{
				return this._safeName2003; 
			}
			set
			{
				if (_safeName2003 == value && SafeName2003 != null )
					return;
					
				this._safeName2003 = value;
				this._isDirty = true;
				
				OnPropertyChanged("SafeName2003");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the 2004 property. 
		///		
		/// </summary>
		/// <value>This type is money</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsSafeName2004Null() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? SafeName2004
		{
			get
			{
				return this._safeName2004; 
			}
			set
			{
				if (_safeName2004 == value && SafeName2004 != null )
					return;
					
				this._safeName2004 = value;
				this._isDirty = true;
				
				OnPropertyChanged("SafeName2004");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "vSalesPersonSalesByFiscalYears"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VSalesPersonSalesByFiscalYearsBase Entity 
		///</summary>
		public virtual VSalesPersonSalesByFiscalYearsBase Copy()
		{
			//shallow copy entity
			VSalesPersonSalesByFiscalYears copy = new VSalesPersonSalesByFiscalYears();
				copy.SalesPersonId = this.SalesPersonId;
				copy.FullName = this.FullName;
				copy.Title = this.Title;
				copy.SalesTerritory = this.SalesTerritory;
				copy.SafeName2002 = this.SafeName2002;
				copy.SafeName2003 = this.SafeName2003;
				copy.SafeName2004 = this.SafeName2004;
			copy.AcceptChanges();
			return (VSalesPersonSalesByFiscalYears)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VSalesPersonSalesByFiscalYearsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VSalesPersonSalesByFiscalYearsBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="VSalesPersonSalesByFiscalYearsBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="VSalesPersonSalesByFiscalYearsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VSalesPersonSalesByFiscalYearsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(VSalesPersonSalesByFiscalYearsBase Object1, VSalesPersonSalesByFiscalYearsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.SalesPersonId != null && Object2.SalesPersonId != null )
			{
				if (Object1.SalesPersonId != Object2.SalesPersonId)
					equal = false;
			}
			else if (Object1.SalesPersonId == null ^ Object1.SalesPersonId == null )
			{
				equal = false;
			}
			if (Object1.FullName != null && Object2.FullName != null )
			{
				if (Object1.FullName != Object2.FullName)
					equal = false;
			}
			else if (Object1.FullName == null ^ Object1.FullName == null )
			{
				equal = false;
			}
			if (Object1.Title != Object2.Title)
				equal = false;
			if (Object1.SalesTerritory != Object2.SalesTerritory)
				equal = false;
			if (Object1.SafeName2002 != null && Object2.SafeName2002 != null )
			{
				if (Object1.SafeName2002 != Object2.SafeName2002)
					equal = false;
			}
			else if (Object1.SafeName2002 == null ^ Object1.SafeName2002 == null )
			{
				equal = false;
			}
			if (Object1.SafeName2003 != null && Object2.SafeName2003 != null )
			{
				if (Object1.SafeName2003 != Object2.SafeName2003)
					equal = false;
			}
			else if (Object1.SafeName2003 == null ^ Object1.SafeName2003 == null )
			{
				equal = false;
			}
			if (Object1.SafeName2004 != null && Object2.SafeName2004 != null )
			{
				if (Object1.SafeName2004 != Object2.SafeName2004)
					equal = false;
			}
			else if (Object1.SafeName2004 == null ^ Object1.SafeName2004 == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(VSalesPersonSalesByFiscalYears entity, string propertyName)
		{
			switch (propertyName)
			{
				case "SalesPersonId":
					return entity.SalesPersonId;
				case "FullName":
					return entity.FullName;
				case "Title":
					return entity.Title;
				case "SalesTerritory":
					return entity.SalesTerritory;
				case "SafeName2002":
					return entity.SafeName2002;
				case "SafeName2003":
					return entity.SafeName2003;
				case "SafeName2004":
					return entity.SafeName2004;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as VSalesPersonSalesByFiscalYears, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{8}{7}- SalesPersonId: {0}{7}- FullName: {1}{7}- Title: {2}{7}- SalesTerritory: {3}{7}- SafeName2002: {4}{7}- SafeName2003: {5}{7}- SafeName2004: {6}{7}", 
				(this.SalesPersonId == null) ? string.Empty : this.SalesPersonId.ToString(),
			     
				(this.FullName == null) ? string.Empty : this.FullName.ToString(),
			     
				this.Title,
				this.SalesTerritory,
				(this.SafeName2002 == null) ? string.Empty : this.SafeName2002.ToString(),
			     
				(this.SafeName2003 == null) ? string.Empty : this.SafeName2003.ToString(),
			     
				(this.SafeName2004 == null) ? string.Empty : this.SafeName2004.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the VSalesPersonSalesByFiscalYears columns.
	/// </summary>
	[Serializable]
	public enum VSalesPersonSalesByFiscalYearsColumn
	{
		/// <summary>
		/// SalesPersonID : 
		/// </summary>
		[EnumTextValue("SalesPersonID")]
		[ColumnEnum("SalesPersonID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SalesPersonId,
		/// <summary>
		/// FullName : 
		/// </summary>
		[EnumTextValue("FullName")]
		[ColumnEnum("FullName", typeof(System.String), System.Data.DbType.String, false, false, true, 152)]
		FullName,
		/// <summary>
		/// Title : 
		/// </summary>
		[EnumTextValue("Title")]
		[ColumnEnum("Title", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Title,
		/// <summary>
		/// SalesTerritory : 
		/// </summary>
		[EnumTextValue("SalesTerritory")]
		[ColumnEnum("SalesTerritory", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		SalesTerritory,
		/// <summary>
		/// 2002 : 
		/// </summary>
		[EnumTextValue("2002")]
		[ColumnEnum("2002", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		SafeName2002,
		/// <summary>
		/// 2003 : 
		/// </summary>
		[EnumTextValue("2003")]
		[ColumnEnum("2003", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		SafeName2003,
		/// <summary>
		/// 2004 : 
		/// </summary>
		[EnumTextValue("2004")]
		[ColumnEnum("2004", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		SafeName2004
	}//End enum

} // end namespace
