/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VProductModelCatalogDescription.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace Nettiers.AdventureWorks.Entities
{
	///<summary>
	/// Displays the content from each element in the xml column CatalogDescription for each product in the Production.ProductModel table that has catalog data.	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("VProductModelCatalogDescriptionBase")]
	public abstract partial class VProductModelCatalogDescriptionBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// ProductModelID : 
		/// </summary>
		private System.Int32		  _productModelId = (int)0;
		
		/// <summary>
		/// Name : 
		/// </summary>
		private System.String		  _name = string.Empty;
		
		/// <summary>
		/// Summary : 
		/// </summary>
		private System.String		  _summary = null;
		
		/// <summary>
		/// Manufacturer : 
		/// </summary>
		private System.String		  _manufacturer = null;
		
		/// <summary>
		/// Copyright : 
		/// </summary>
		private System.String		  _copyright = null;
		
		/// <summary>
		/// ProductURL : 
		/// </summary>
		private System.String		  _productUrl = null;
		
		/// <summary>
		/// WarrantyPeriod : 
		/// </summary>
		private System.String		  _warrantyPeriod = null;
		
		/// <summary>
		/// WarrantyDescription : 
		/// </summary>
		private System.String		  _warrantyDescription = null;
		
		/// <summary>
		/// NoOfYears : 
		/// </summary>
		private System.String		  _noOfYears = null;
		
		/// <summary>
		/// MaintenanceDescription : 
		/// </summary>
		private System.String		  _maintenanceDescription = null;
		
		/// <summary>
		/// Wheel : 
		/// </summary>
		private System.String		  _wheel = null;
		
		/// <summary>
		/// Saddle : 
		/// </summary>
		private System.String		  _saddle = null;
		
		/// <summary>
		/// Pedal : 
		/// </summary>
		private System.String		  _pedal = null;
		
		/// <summary>
		/// BikeFrame : 
		/// </summary>
		private System.String		  _bikeFrame = null;
		
		/// <summary>
		/// Crankset : 
		/// </summary>
		private System.String		  _crankset = null;
		
		/// <summary>
		/// PictureAngle : 
		/// </summary>
		private System.String		  _pictureAngle = null;
		
		/// <summary>
		/// PictureSize : 
		/// </summary>
		private System.String		  _pictureSize = null;
		
		/// <summary>
		/// ProductPhotoID : 
		/// </summary>
		private System.String		  _productPhotoId = null;
		
		/// <summary>
		/// Material : 
		/// </summary>
		private System.String		  _material = null;
		
		/// <summary>
		/// Color : 
		/// </summary>
		private System.String		  _color = null;
		
		/// <summary>
		/// ProductLine : 
		/// </summary>
		private System.String		  _productLine = null;
		
		/// <summary>
		/// Style : 
		/// </summary>
		private System.String		  _style = null;
		
		/// <summary>
		/// RiderExperience : 
		/// </summary>
		private System.String		  _riderExperience = null;
		
		/// <summary>
		/// rowguid : 
		/// </summary>
		private System.Guid		  _rowguid = Guid.Empty;
		
		/// <summary>
		/// ModifiedDate : 
		/// </summary>
		private System.DateTime		  _modifiedDate = DateTime.MinValue;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VProductModelCatalogDescriptionBase"/> instance.
		///</summary>
		public VProductModelCatalogDescriptionBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="VProductModelCatalogDescriptionBase"/> instance.
		///</summary>
		///<param name="_productModelId"></param>
		///<param name="_name"></param>
		///<param name="_summary"></param>
		///<param name="_manufacturer"></param>
		///<param name="_copyright"></param>
		///<param name="_productUrl"></param>
		///<param name="_warrantyPeriod"></param>
		///<param name="_warrantyDescription"></param>
		///<param name="_noOfYears"></param>
		///<param name="_maintenanceDescription"></param>
		///<param name="_wheel"></param>
		///<param name="_saddle"></param>
		///<param name="_pedal"></param>
		///<param name="_bikeFrame"></param>
		///<param name="_crankset"></param>
		///<param name="_pictureAngle"></param>
		///<param name="_pictureSize"></param>
		///<param name="_productPhotoId"></param>
		///<param name="_material"></param>
		///<param name="_color"></param>
		///<param name="_productLine"></param>
		///<param name="_style"></param>
		///<param name="_riderExperience"></param>
		///<param name="_rowguid"></param>
		///<param name="_modifiedDate"></param>
		public VProductModelCatalogDescriptionBase(System.Int32 _productModelId, System.String _name, System.String _summary, System.String _manufacturer, System.String _copyright, System.String _productUrl, System.String _warrantyPeriod, System.String _warrantyDescription, System.String _noOfYears, System.String _maintenanceDescription, System.String _wheel, System.String _saddle, System.String _pedal, System.String _bikeFrame, System.String _crankset, System.String _pictureAngle, System.String _pictureSize, System.String _productPhotoId, System.String _material, System.String _color, System.String _productLine, System.String _style, System.String _riderExperience, System.Guid _rowguid, System.DateTime _modifiedDate)
		{
			this._productModelId = _productModelId;
			this._name = _name;
			this._summary = _summary;
			this._manufacturer = _manufacturer;
			this._copyright = _copyright;
			this._productUrl = _productUrl;
			this._warrantyPeriod = _warrantyPeriod;
			this._warrantyDescription = _warrantyDescription;
			this._noOfYears = _noOfYears;
			this._maintenanceDescription = _maintenanceDescription;
			this._wheel = _wheel;
			this._saddle = _saddle;
			this._pedal = _pedal;
			this._bikeFrame = _bikeFrame;
			this._crankset = _crankset;
			this._pictureAngle = _pictureAngle;
			this._pictureSize = _pictureSize;
			this._productPhotoId = _productPhotoId;
			this._material = _material;
			this._color = _color;
			this._productLine = _productLine;
			this._style = _style;
			this._riderExperience = _riderExperience;
			this._rowguid = _rowguid;
			this._modifiedDate = _modifiedDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VProductModelCatalogDescription"/> instance.
		///</summary>
		///<param name="_productModelId"></param>
		///<param name="_name"></param>
		///<param name="_summary"></param>
		///<param name="_manufacturer"></param>
		///<param name="_copyright"></param>
		///<param name="_productUrl"></param>
		///<param name="_warrantyPeriod"></param>
		///<param name="_warrantyDescription"></param>
		///<param name="_noOfYears"></param>
		///<param name="_maintenanceDescription"></param>
		///<param name="_wheel"></param>
		///<param name="_saddle"></param>
		///<param name="_pedal"></param>
		///<param name="_bikeFrame"></param>
		///<param name="_crankset"></param>
		///<param name="_pictureAngle"></param>
		///<param name="_pictureSize"></param>
		///<param name="_productPhotoId"></param>
		///<param name="_material"></param>
		///<param name="_color"></param>
		///<param name="_productLine"></param>
		///<param name="_style"></param>
		///<param name="_riderExperience"></param>
		///<param name="_rowguid"></param>
		///<param name="_modifiedDate"></param>
		public static VProductModelCatalogDescription CreateVProductModelCatalogDescription(System.Int32 _productModelId, System.String _name, System.String _summary, System.String _manufacturer, System.String _copyright, System.String _productUrl, System.String _warrantyPeriod, System.String _warrantyDescription, System.String _noOfYears, System.String _maintenanceDescription, System.String _wheel, System.String _saddle, System.String _pedal, System.String _bikeFrame, System.String _crankset, System.String _pictureAngle, System.String _pictureSize, System.String _productPhotoId, System.String _material, System.String _color, System.String _productLine, System.String _style, System.String _riderExperience, System.Guid _rowguid, System.DateTime _modifiedDate)
		{
			VProductModelCatalogDescription newVProductModelCatalogDescription = new VProductModelCatalogDescription();
			newVProductModelCatalogDescription.ProductModelId = _productModelId;
			newVProductModelCatalogDescription.Name = _name;
			newVProductModelCatalogDescription.Summary = _summary;
			newVProductModelCatalogDescription.Manufacturer = _manufacturer;
			newVProductModelCatalogDescription.Copyright = _copyright;
			newVProductModelCatalogDescription.ProductUrl = _productUrl;
			newVProductModelCatalogDescription.WarrantyPeriod = _warrantyPeriod;
			newVProductModelCatalogDescription.WarrantyDescription = _warrantyDescription;
			newVProductModelCatalogDescription.NoOfYears = _noOfYears;
			newVProductModelCatalogDescription.MaintenanceDescription = _maintenanceDescription;
			newVProductModelCatalogDescription.Wheel = _wheel;
			newVProductModelCatalogDescription.Saddle = _saddle;
			newVProductModelCatalogDescription.Pedal = _pedal;
			newVProductModelCatalogDescription.BikeFrame = _bikeFrame;
			newVProductModelCatalogDescription.Crankset = _crankset;
			newVProductModelCatalogDescription.PictureAngle = _pictureAngle;
			newVProductModelCatalogDescription.PictureSize = _pictureSize;
			newVProductModelCatalogDescription.ProductPhotoId = _productPhotoId;
			newVProductModelCatalogDescription.Material = _material;
			newVProductModelCatalogDescription.Color = _color;
			newVProductModelCatalogDescription.ProductLine = _productLine;
			newVProductModelCatalogDescription.Style = _style;
			newVProductModelCatalogDescription.RiderExperience = _riderExperience;
			newVProductModelCatalogDescription.Rowguid = _rowguid;
			newVProductModelCatalogDescription.ModifiedDate = _modifiedDate;
			return newVProductModelCatalogDescription;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the ProductModelID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 ProductModelId
		{
			get
			{
				return this._productModelId; 
			}
			set
			{
				if (_productModelId == value)
					return;
					
				this._productModelId = value;
				this._isDirty = true;
				
				OnPropertyChanged("ProductModelId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Name
		{
			get
			{
				return this._name; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "Name does not allow null values.");
				if (_name == value)
					return;
					
				this._name = value;
				this._isDirty = true;
				
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Summary property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Summary
		{
			get
			{
				return this._summary; 
			}
			set
			{
				if (_summary == value)
					return;
					
				this._summary = value;
				this._isDirty = true;
				
				OnPropertyChanged("Summary");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Manufacturer property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Manufacturer
		{
			get
			{
				return this._manufacturer; 
			}
			set
			{
				if (_manufacturer == value)
					return;
					
				this._manufacturer = value;
				this._isDirty = true;
				
				OnPropertyChanged("Manufacturer");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Copyright property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Copyright
		{
			get
			{
				return this._copyright; 
			}
			set
			{
				if (_copyright == value)
					return;
					
				this._copyright = value;
				this._isDirty = true;
				
				OnPropertyChanged("Copyright");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ProductURL property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ProductUrl
		{
			get
			{
				return this._productUrl; 
			}
			set
			{
				if (_productUrl == value)
					return;
					
				this._productUrl = value;
				this._isDirty = true;
				
				OnPropertyChanged("ProductUrl");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the WarrantyPeriod property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String WarrantyPeriod
		{
			get
			{
				return this._warrantyPeriod; 
			}
			set
			{
				if (_warrantyPeriod == value)
					return;
					
				this._warrantyPeriod = value;
				this._isDirty = true;
				
				OnPropertyChanged("WarrantyPeriod");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the WarrantyDescription property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String WarrantyDescription
		{
			get
			{
				return this._warrantyDescription; 
			}
			set
			{
				if (_warrantyDescription == value)
					return;
					
				this._warrantyDescription = value;
				this._isDirty = true;
				
				OnPropertyChanged("WarrantyDescription");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NoOfYears property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NoOfYears
		{
			get
			{
				return this._noOfYears; 
			}
			set
			{
				if (_noOfYears == value)
					return;
					
				this._noOfYears = value;
				this._isDirty = true;
				
				OnPropertyChanged("NoOfYears");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaintenanceDescription property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaintenanceDescription
		{
			get
			{
				return this._maintenanceDescription; 
			}
			set
			{
				if (_maintenanceDescription == value)
					return;
					
				this._maintenanceDescription = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaintenanceDescription");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Wheel property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Wheel
		{
			get
			{
				return this._wheel; 
			}
			set
			{
				if (_wheel == value)
					return;
					
				this._wheel = value;
				this._isDirty = true;
				
				OnPropertyChanged("Wheel");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Saddle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Saddle
		{
			get
			{
				return this._saddle; 
			}
			set
			{
				if (_saddle == value)
					return;
					
				this._saddle = value;
				this._isDirty = true;
				
				OnPropertyChanged("Saddle");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Pedal property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Pedal
		{
			get
			{
				return this._pedal; 
			}
			set
			{
				if (_pedal == value)
					return;
					
				this._pedal = value;
				this._isDirty = true;
				
				OnPropertyChanged("Pedal");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the BikeFrame property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String BikeFrame
		{
			get
			{
				return this._bikeFrame; 
			}
			set
			{
				if (_bikeFrame == value)
					return;
					
				this._bikeFrame = value;
				this._isDirty = true;
				
				OnPropertyChanged("BikeFrame");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Crankset property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Crankset
		{
			get
			{
				return this._crankset; 
			}
			set
			{
				if (_crankset == value)
					return;
					
				this._crankset = value;
				this._isDirty = true;
				
				OnPropertyChanged("Crankset");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the PictureAngle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String PictureAngle
		{
			get
			{
				return this._pictureAngle; 
			}
			set
			{
				if (_pictureAngle == value)
					return;
					
				this._pictureAngle = value;
				this._isDirty = true;
				
				OnPropertyChanged("PictureAngle");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the PictureSize property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String PictureSize
		{
			get
			{
				return this._pictureSize; 
			}
			set
			{
				if (_pictureSize == value)
					return;
					
				this._pictureSize = value;
				this._isDirty = true;
				
				OnPropertyChanged("PictureSize");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ProductPhotoID property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ProductPhotoId
		{
			get
			{
				return this._productPhotoId; 
			}
			set
			{
				if (_productPhotoId == value)
					return;
					
				this._productPhotoId = value;
				this._isDirty = true;
				
				OnPropertyChanged("ProductPhotoId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Material property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Material
		{
			get
			{
				return this._material; 
			}
			set
			{
				if (_material == value)
					return;
					
				this._material = value;
				this._isDirty = true;
				
				OnPropertyChanged("Material");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Color property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Color
		{
			get
			{
				return this._color; 
			}
			set
			{
				if (_color == value)
					return;
					
				this._color = value;
				this._isDirty = true;
				
				OnPropertyChanged("Color");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ProductLine property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ProductLine
		{
			get
			{
				return this._productLine; 
			}
			set
			{
				if (_productLine == value)
					return;
					
				this._productLine = value;
				this._isDirty = true;
				
				OnPropertyChanged("ProductLine");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Style property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Style
		{
			get
			{
				return this._style; 
			}
			set
			{
				if (_style == value)
					return;
					
				this._style = value;
				this._isDirty = true;
				
				OnPropertyChanged("Style");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the RiderExperience property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String RiderExperience
		{
			get
			{
				return this._riderExperience; 
			}
			set
			{
				if (_riderExperience == value)
					return;
					
				this._riderExperience = value;
				this._isDirty = true;
				
				OnPropertyChanged("RiderExperience");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the rowguid property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Guid Rowguid
		{
			get
			{
				return this._rowguid; 
			}
			set
			{
				if (_rowguid == value)
					return;
					
				this._rowguid = value;
				this._isDirty = true;
				
				OnPropertyChanged("Rowguid");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ModifiedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime ModifiedDate
		{
			get
			{
				return this._modifiedDate; 
			}
			set
			{
				if (_modifiedDate == value)
					return;
					
				this._modifiedDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("ModifiedDate");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "vProductModelCatalogDescription"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VProductModelCatalogDescriptionBase Entity 
		///</summary>
		public virtual VProductModelCatalogDescriptionBase Copy()
		{
			//shallow copy entity
			VProductModelCatalogDescription copy = new VProductModelCatalogDescription();
				copy.ProductModelId = this.ProductModelId;
				copy.Name = this.Name;
				copy.Summary = this.Summary;
				copy.Manufacturer = this.Manufacturer;
				copy.Copyright = this.Copyright;
				copy.ProductUrl = this.ProductUrl;
				copy.WarrantyPeriod = this.WarrantyPeriod;
				copy.WarrantyDescription = this.WarrantyDescription;
				copy.NoOfYears = this.NoOfYears;
				copy.MaintenanceDescription = this.MaintenanceDescription;
				copy.Wheel = this.Wheel;
				copy.Saddle = this.Saddle;
				copy.Pedal = this.Pedal;
				copy.BikeFrame = this.BikeFrame;
				copy.Crankset = this.Crankset;
				copy.PictureAngle = this.PictureAngle;
				copy.PictureSize = this.PictureSize;
				copy.ProductPhotoId = this.ProductPhotoId;
				copy.Material = this.Material;
				copy.Color = this.Color;
				copy.ProductLine = this.ProductLine;
				copy.Style = this.Style;
				copy.RiderExperience = this.RiderExperience;
				copy.Rowguid = this.Rowguid;
				copy.ModifiedDate = this.ModifiedDate;
			copy.AcceptChanges();
			return (VProductModelCatalogDescription)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VProductModelCatalogDescriptionBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VProductModelCatalogDescriptionBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="VProductModelCatalogDescriptionBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="VProductModelCatalogDescriptionBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VProductModelCatalogDescriptionBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(VProductModelCatalogDescriptionBase Object1, VProductModelCatalogDescriptionBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.ProductModelId != Object2.ProductModelId)
				equal = false;
			if (Object1.Name != Object2.Name)
				equal = false;
			if (Object1.Summary != null && Object2.Summary != null )
			{
				if (Object1.Summary != Object2.Summary)
					equal = false;
			}
			else if (Object1.Summary == null ^ Object1.Summary == null )
			{
				equal = false;
			}
			if (Object1.Manufacturer != null && Object2.Manufacturer != null )
			{
				if (Object1.Manufacturer != Object2.Manufacturer)
					equal = false;
			}
			else if (Object1.Manufacturer == null ^ Object1.Manufacturer == null )
			{
				equal = false;
			}
			if (Object1.Copyright != null && Object2.Copyright != null )
			{
				if (Object1.Copyright != Object2.Copyright)
					equal = false;
			}
			else if (Object1.Copyright == null ^ Object1.Copyright == null )
			{
				equal = false;
			}
			if (Object1.ProductUrl != null && Object2.ProductUrl != null )
			{
				if (Object1.ProductUrl != Object2.ProductUrl)
					equal = false;
			}
			else if (Object1.ProductUrl == null ^ Object1.ProductUrl == null )
			{
				equal = false;
			}
			if (Object1.WarrantyPeriod != null && Object2.WarrantyPeriod != null )
			{
				if (Object1.WarrantyPeriod != Object2.WarrantyPeriod)
					equal = false;
			}
			else if (Object1.WarrantyPeriod == null ^ Object1.WarrantyPeriod == null )
			{
				equal = false;
			}
			if (Object1.WarrantyDescription != null && Object2.WarrantyDescription != null )
			{
				if (Object1.WarrantyDescription != Object2.WarrantyDescription)
					equal = false;
			}
			else if (Object1.WarrantyDescription == null ^ Object1.WarrantyDescription == null )
			{
				equal = false;
			}
			if (Object1.NoOfYears != null && Object2.NoOfYears != null )
			{
				if (Object1.NoOfYears != Object2.NoOfYears)
					equal = false;
			}
			else if (Object1.NoOfYears == null ^ Object1.NoOfYears == null )
			{
				equal = false;
			}
			if (Object1.MaintenanceDescription != null && Object2.MaintenanceDescription != null )
			{
				if (Object1.MaintenanceDescription != Object2.MaintenanceDescription)
					equal = false;
			}
			else if (Object1.MaintenanceDescription == null ^ Object1.MaintenanceDescription == null )
			{
				equal = false;
			}
			if (Object1.Wheel != null && Object2.Wheel != null )
			{
				if (Object1.Wheel != Object2.Wheel)
					equal = false;
			}
			else if (Object1.Wheel == null ^ Object1.Wheel == null )
			{
				equal = false;
			}
			if (Object1.Saddle != null && Object2.Saddle != null )
			{
				if (Object1.Saddle != Object2.Saddle)
					equal = false;
			}
			else if (Object1.Saddle == null ^ Object1.Saddle == null )
			{
				equal = false;
			}
			if (Object1.Pedal != null && Object2.Pedal != null )
			{
				if (Object1.Pedal != Object2.Pedal)
					equal = false;
			}
			else if (Object1.Pedal == null ^ Object1.Pedal == null )
			{
				equal = false;
			}
			if (Object1.BikeFrame != null && Object2.BikeFrame != null )
			{
				if (Object1.BikeFrame != Object2.BikeFrame)
					equal = false;
			}
			else if (Object1.BikeFrame == null ^ Object1.BikeFrame == null )
			{
				equal = false;
			}
			if (Object1.Crankset != null && Object2.Crankset != null )
			{
				if (Object1.Crankset != Object2.Crankset)
					equal = false;
			}
			else if (Object1.Crankset == null ^ Object1.Crankset == null )
			{
				equal = false;
			}
			if (Object1.PictureAngle != null && Object2.PictureAngle != null )
			{
				if (Object1.PictureAngle != Object2.PictureAngle)
					equal = false;
			}
			else if (Object1.PictureAngle == null ^ Object1.PictureAngle == null )
			{
				equal = false;
			}
			if (Object1.PictureSize != null && Object2.PictureSize != null )
			{
				if (Object1.PictureSize != Object2.PictureSize)
					equal = false;
			}
			else if (Object1.PictureSize == null ^ Object1.PictureSize == null )
			{
				equal = false;
			}
			if (Object1.ProductPhotoId != null && Object2.ProductPhotoId != null )
			{
				if (Object1.ProductPhotoId != Object2.ProductPhotoId)
					equal = false;
			}
			else if (Object1.ProductPhotoId == null ^ Object1.ProductPhotoId == null )
			{
				equal = false;
			}
			if (Object1.Material != null && Object2.Material != null )
			{
				if (Object1.Material != Object2.Material)
					equal = false;
			}
			else if (Object1.Material == null ^ Object1.Material == null )
			{
				equal = false;
			}
			if (Object1.Color != null && Object2.Color != null )
			{
				if (Object1.Color != Object2.Color)
					equal = false;
			}
			else if (Object1.Color == null ^ Object1.Color == null )
			{
				equal = false;
			}
			if (Object1.ProductLine != null && Object2.ProductLine != null )
			{
				if (Object1.ProductLine != Object2.ProductLine)
					equal = false;
			}
			else if (Object1.ProductLine == null ^ Object1.ProductLine == null )
			{
				equal = false;
			}
			if (Object1.Style != null && Object2.Style != null )
			{
				if (Object1.Style != Object2.Style)
					equal = false;
			}
			else if (Object1.Style == null ^ Object1.Style == null )
			{
				equal = false;
			}
			if (Object1.RiderExperience != null && Object2.RiderExperience != null )
			{
				if (Object1.RiderExperience != Object2.RiderExperience)
					equal = false;
			}
			else if (Object1.RiderExperience == null ^ Object1.RiderExperience == null )
			{
				equal = false;
			}
			if (Object1.Rowguid != Object2.Rowguid)
				equal = false;
			if (Object1.ModifiedDate != Object2.ModifiedDate)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(VProductModelCatalogDescription entity, string propertyName)
		{
			switch (propertyName)
			{
				case "ProductModelId":
					return entity.ProductModelId;
				case "Name":
					return entity.Name;
				case "Summary":
					return entity.Summary;
				case "Manufacturer":
					return entity.Manufacturer;
				case "Copyright":
					return entity.Copyright;
				case "ProductUrl":
					return entity.ProductUrl;
				case "WarrantyPeriod":
					return entity.WarrantyPeriod;
				case "WarrantyDescription":
					return entity.WarrantyDescription;
				case "NoOfYears":
					return entity.NoOfYears;
				case "MaintenanceDescription":
					return entity.MaintenanceDescription;
				case "Wheel":
					return entity.Wheel;
				case "Saddle":
					return entity.Saddle;
				case "Pedal":
					return entity.Pedal;
				case "BikeFrame":
					return entity.BikeFrame;
				case "Crankset":
					return entity.Crankset;
				case "PictureAngle":
					return entity.PictureAngle;
				case "PictureSize":
					return entity.PictureSize;
				case "ProductPhotoId":
					return entity.ProductPhotoId;
				case "Material":
					return entity.Material;
				case "Color":
					return entity.Color;
				case "ProductLine":
					return entity.ProductLine;
				case "Style":
					return entity.Style;
				case "RiderExperience":
					return entity.RiderExperience;
				case "Rowguid":
					return entity.Rowguid;
				case "ModifiedDate":
					return entity.ModifiedDate;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as VProductModelCatalogDescription, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{26}{25}- ProductModelId: {0}{25}- Name: {1}{25}- Summary: {2}{25}- Manufacturer: {3}{25}- Copyright: {4}{25}- ProductUrl: {5}{25}- WarrantyPeriod: {6}{25}- WarrantyDescription: {7}{25}- NoOfYears: {8}{25}- MaintenanceDescription: {9}{25}- Wheel: {10}{25}- Saddle: {11}{25}- Pedal: {12}{25}- BikeFrame: {13}{25}- Crankset: {14}{25}- PictureAngle: {15}{25}- PictureSize: {16}{25}- ProductPhotoId: {17}{25}- Material: {18}{25}- Color: {19}{25}- ProductLine: {20}{25}- Style: {21}{25}- RiderExperience: {22}{25}- Rowguid: {23}{25}- ModifiedDate: {24}{25}", 
				this.ProductModelId,
				this.Name,
				(this.Summary == null) ? string.Empty : this.Summary.ToString(),
			     
				(this.Manufacturer == null) ? string.Empty : this.Manufacturer.ToString(),
			     
				(this.Copyright == null) ? string.Empty : this.Copyright.ToString(),
			     
				(this.ProductUrl == null) ? string.Empty : this.ProductUrl.ToString(),
			     
				(this.WarrantyPeriod == null) ? string.Empty : this.WarrantyPeriod.ToString(),
			     
				(this.WarrantyDescription == null) ? string.Empty : this.WarrantyDescription.ToString(),
			     
				(this.NoOfYears == null) ? string.Empty : this.NoOfYears.ToString(),
			     
				(this.MaintenanceDescription == null) ? string.Empty : this.MaintenanceDescription.ToString(),
			     
				(this.Wheel == null) ? string.Empty : this.Wheel.ToString(),
			     
				(this.Saddle == null) ? string.Empty : this.Saddle.ToString(),
			     
				(this.Pedal == null) ? string.Empty : this.Pedal.ToString(),
			     
				(this.BikeFrame == null) ? string.Empty : this.BikeFrame.ToString(),
			     
				(this.Crankset == null) ? string.Empty : this.Crankset.ToString(),
			     
				(this.PictureAngle == null) ? string.Empty : this.PictureAngle.ToString(),
			     
				(this.PictureSize == null) ? string.Empty : this.PictureSize.ToString(),
			     
				(this.ProductPhotoId == null) ? string.Empty : this.ProductPhotoId.ToString(),
			     
				(this.Material == null) ? string.Empty : this.Material.ToString(),
			     
				(this.Color == null) ? string.Empty : this.Color.ToString(),
			     
				(this.ProductLine == null) ? string.Empty : this.ProductLine.ToString(),
			     
				(this.Style == null) ? string.Empty : this.Style.ToString(),
			     
				(this.RiderExperience == null) ? string.Empty : this.RiderExperience.ToString(),
			     
				this.Rowguid,
				this.ModifiedDate,
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the VProductModelCatalogDescription columns.
	/// </summary>
	[Serializable]
	public enum VProductModelCatalogDescriptionColumn
	{
		/// <summary>
		/// ProductModelID : 
		/// </summary>
		[EnumTextValue("ProductModelID")]
		[ColumnEnum("ProductModelID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ProductModelId,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Name,
		/// <summary>
		/// Summary : 
		/// </summary>
		[EnumTextValue("Summary")]
		[ColumnEnum("Summary", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Summary,
		/// <summary>
		/// Manufacturer : 
		/// </summary>
		[EnumTextValue("Manufacturer")]
		[ColumnEnum("Manufacturer", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Manufacturer,
		/// <summary>
		/// Copyright : 
		/// </summary>
		[EnumTextValue("Copyright")]
		[ColumnEnum("Copyright", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		Copyright,
		/// <summary>
		/// ProductURL : 
		/// </summary>
		[EnumTextValue("ProductURL")]
		[ColumnEnum("ProductURL", typeof(System.String), System.Data.DbType.String, false, false, true, 256)]
		ProductUrl,
		/// <summary>
		/// WarrantyPeriod : 
		/// </summary>
		[EnumTextValue("WarrantyPeriod")]
		[ColumnEnum("WarrantyPeriod", typeof(System.String), System.Data.DbType.String, false, false, true, 256)]
		WarrantyPeriod,
		/// <summary>
		/// WarrantyDescription : 
		/// </summary>
		[EnumTextValue("WarrantyDescription")]
		[ColumnEnum("WarrantyDescription", typeof(System.String), System.Data.DbType.String, false, false, true, 256)]
		WarrantyDescription,
		/// <summary>
		/// NoOfYears : 
		/// </summary>
		[EnumTextValue("NoOfYears")]
		[ColumnEnum("NoOfYears", typeof(System.String), System.Data.DbType.String, false, false, true, 256)]
		NoOfYears,
		/// <summary>
		/// MaintenanceDescription : 
		/// </summary>
		[EnumTextValue("MaintenanceDescription")]
		[ColumnEnum("MaintenanceDescription", typeof(System.String), System.Data.DbType.String, false, false, true, 256)]
		MaintenanceDescription,
		/// <summary>
		/// Wheel : 
		/// </summary>
		[EnumTextValue("Wheel")]
		[ColumnEnum("Wheel", typeof(System.String), System.Data.DbType.String, false, false, true, 256)]
		Wheel,
		/// <summary>
		/// Saddle : 
		/// </summary>
		[EnumTextValue("Saddle")]
		[ColumnEnum("Saddle", typeof(System.String), System.Data.DbType.String, false, false, true, 256)]
		Saddle,
		/// <summary>
		/// Pedal : 
		/// </summary>
		[EnumTextValue("Pedal")]
		[ColumnEnum("Pedal", typeof(System.String), System.Data.DbType.String, false, false, true, 256)]
		Pedal,
		/// <summary>
		/// BikeFrame : 
		/// </summary>
		[EnumTextValue("BikeFrame")]
		[ColumnEnum("BikeFrame", typeof(System.String), System.Data.DbType.String, false, false, true)]
		BikeFrame,
		/// <summary>
		/// Crankset : 
		/// </summary>
		[EnumTextValue("Crankset")]
		[ColumnEnum("Crankset", typeof(System.String), System.Data.DbType.String, false, false, true, 256)]
		Crankset,
		/// <summary>
		/// PictureAngle : 
		/// </summary>
		[EnumTextValue("PictureAngle")]
		[ColumnEnum("PictureAngle", typeof(System.String), System.Data.DbType.String, false, false, true, 256)]
		PictureAngle,
		/// <summary>
		/// PictureSize : 
		/// </summary>
		[EnumTextValue("PictureSize")]
		[ColumnEnum("PictureSize", typeof(System.String), System.Data.DbType.String, false, false, true, 256)]
		PictureSize,
		/// <summary>
		/// ProductPhotoID : 
		/// </summary>
		[EnumTextValue("ProductPhotoID")]
		[ColumnEnum("ProductPhotoID", typeof(System.String), System.Data.DbType.String, false, false, true, 256)]
		ProductPhotoId,
		/// <summary>
		/// Material : 
		/// </summary>
		[EnumTextValue("Material")]
		[ColumnEnum("Material", typeof(System.String), System.Data.DbType.String, false, false, true, 256)]
		Material,
		/// <summary>
		/// Color : 
		/// </summary>
		[EnumTextValue("Color")]
		[ColumnEnum("Color", typeof(System.String), System.Data.DbType.String, false, false, true, 256)]
		Color,
		/// <summary>
		/// ProductLine : 
		/// </summary>
		[EnumTextValue("ProductLine")]
		[ColumnEnum("ProductLine", typeof(System.String), System.Data.DbType.String, false, false, true, 256)]
		ProductLine,
		/// <summary>
		/// Style : 
		/// </summary>
		[EnumTextValue("Style")]
		[ColumnEnum("Style", typeof(System.String), System.Data.DbType.String, false, false, true, 256)]
		Style,
		/// <summary>
		/// RiderExperience : 
		/// </summary>
		[EnumTextValue("RiderExperience")]
		[ColumnEnum("RiderExperience", typeof(System.String), System.Data.DbType.String, false, false, true, 1024)]
		RiderExperience,
		/// <summary>
		/// rowguid : 
		/// </summary>
		[EnumTextValue("rowguid")]
		[ColumnEnum("rowguid", typeof(System.Guid), System.Data.DbType.Guid, false, false, false)]
		Rowguid,
		/// <summary>
		/// ModifiedDate : 
		/// </summary>
		[EnumTextValue("ModifiedDate")]
		[ColumnEnum("ModifiedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ModifiedDate
	}//End enum

} // end namespace
