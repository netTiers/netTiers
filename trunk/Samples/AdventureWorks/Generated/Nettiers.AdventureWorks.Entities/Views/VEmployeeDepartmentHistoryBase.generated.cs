/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VEmployeeDepartmentHistory.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace Nettiers.AdventureWorks.Entities
{
	///<summary>
	/// Returns employee name and current and previous departments.	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("VEmployeeDepartmentHistoryBase")]
	public abstract partial class VEmployeeDepartmentHistoryBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// EmployeeID : 
		/// </summary>
		private System.Int32		  _employeeId = (int)0;
		
		/// <summary>
		/// Title : 
		/// </summary>
		private System.String		  _title = null;
		
		/// <summary>
		/// FirstName : 
		/// </summary>
		private System.String		  _firstName = string.Empty;
		
		/// <summary>
		/// MiddleName : 
		/// </summary>
		private System.String		  _middleName = null;
		
		/// <summary>
		/// LastName : 
		/// </summary>
		private System.String		  _lastName = string.Empty;
		
		/// <summary>
		/// Suffix : 
		/// </summary>
		private System.String		  _suffix = null;
		
		/// <summary>
		/// Shift : 
		/// </summary>
		private System.String		  _shift = string.Empty;
		
		/// <summary>
		/// Department : 
		/// </summary>
		private System.String		  _department = string.Empty;
		
		/// <summary>
		/// GroupName : 
		/// </summary>
		private System.String		  _groupName = string.Empty;
		
		/// <summary>
		/// StartDate : 
		/// </summary>
		private System.DateTime		  _startDate = DateTime.MinValue;
		
		/// <summary>
		/// EndDate : 
		/// </summary>
		private System.DateTime?		  _endDate = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VEmployeeDepartmentHistoryBase"/> instance.
		///</summary>
		public VEmployeeDepartmentHistoryBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="VEmployeeDepartmentHistoryBase"/> instance.
		///</summary>
		///<param name="_employeeId"></param>
		///<param name="_title"></param>
		///<param name="_firstName"></param>
		///<param name="_middleName"></param>
		///<param name="_lastName"></param>
		///<param name="_suffix"></param>
		///<param name="_shift"></param>
		///<param name="_department"></param>
		///<param name="_groupName"></param>
		///<param name="_startDate"></param>
		///<param name="_endDate"></param>
		public VEmployeeDepartmentHistoryBase(System.Int32 _employeeId, System.String _title, System.String _firstName, System.String _middleName, System.String _lastName, System.String _suffix, System.String _shift, System.String _department, System.String _groupName, System.DateTime _startDate, System.DateTime? _endDate)
		{
			this._employeeId = _employeeId;
			this._title = _title;
			this._firstName = _firstName;
			this._middleName = _middleName;
			this._lastName = _lastName;
			this._suffix = _suffix;
			this._shift = _shift;
			this._department = _department;
			this._groupName = _groupName;
			this._startDate = _startDate;
			this._endDate = _endDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VEmployeeDepartmentHistory"/> instance.
		///</summary>
		///<param name="_employeeId"></param>
		///<param name="_title"></param>
		///<param name="_firstName"></param>
		///<param name="_middleName"></param>
		///<param name="_lastName"></param>
		///<param name="_suffix"></param>
		///<param name="_shift"></param>
		///<param name="_department"></param>
		///<param name="_groupName"></param>
		///<param name="_startDate"></param>
		///<param name="_endDate"></param>
		public static VEmployeeDepartmentHistory CreateVEmployeeDepartmentHistory(System.Int32 _employeeId, System.String _title, System.String _firstName, System.String _middleName, System.String _lastName, System.String _suffix, System.String _shift, System.String _department, System.String _groupName, System.DateTime _startDate, System.DateTime? _endDate)
		{
			VEmployeeDepartmentHistory newVEmployeeDepartmentHistory = new VEmployeeDepartmentHistory();
			newVEmployeeDepartmentHistory.EmployeeId = _employeeId;
			newVEmployeeDepartmentHistory.Title = _title;
			newVEmployeeDepartmentHistory.FirstName = _firstName;
			newVEmployeeDepartmentHistory.MiddleName = _middleName;
			newVEmployeeDepartmentHistory.LastName = _lastName;
			newVEmployeeDepartmentHistory.Suffix = _suffix;
			newVEmployeeDepartmentHistory.Shift = _shift;
			newVEmployeeDepartmentHistory.Department = _department;
			newVEmployeeDepartmentHistory.GroupName = _groupName;
			newVEmployeeDepartmentHistory.StartDate = _startDate;
			newVEmployeeDepartmentHistory.EndDate = _endDate;
			return newVEmployeeDepartmentHistory;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the EmployeeID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 EmployeeId
		{
			get
			{
				return this._employeeId; 
			}
			set
			{
				if (_employeeId == value)
					return;
					
				this._employeeId = value;
				this._isDirty = true;
				
				OnPropertyChanged("EmployeeId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Title property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Title
		{
			get
			{
				return this._title; 
			}
			set
			{
				if (_title == value)
					return;
					
				this._title = value;
				this._isDirty = true;
				
				OnPropertyChanged("Title");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FirstName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String FirstName
		{
			get
			{
				return this._firstName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "FirstName does not allow null values.");
				if (_firstName == value)
					return;
					
				this._firstName = value;
				this._isDirty = true;
				
				OnPropertyChanged("FirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MiddleName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MiddleName
		{
			get
			{
				return this._middleName; 
			}
			set
			{
				if (_middleName == value)
					return;
					
				this._middleName = value;
				this._isDirty = true;
				
				OnPropertyChanged("MiddleName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LastName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String LastName
		{
			get
			{
				return this._lastName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "LastName does not allow null values.");
				if (_lastName == value)
					return;
					
				this._lastName = value;
				this._isDirty = true;
				
				OnPropertyChanged("LastName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Suffix property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Suffix
		{
			get
			{
				return this._suffix; 
			}
			set
			{
				if (_suffix == value)
					return;
					
				this._suffix = value;
				this._isDirty = true;
				
				OnPropertyChanged("Suffix");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Shift property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Shift
		{
			get
			{
				return this._shift; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "Shift does not allow null values.");
				if (_shift == value)
					return;
					
				this._shift = value;
				this._isDirty = true;
				
				OnPropertyChanged("Shift");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Department property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Department
		{
			get
			{
				return this._department; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "Department does not allow null values.");
				if (_department == value)
					return;
					
				this._department = value;
				this._isDirty = true;
				
				OnPropertyChanged("Department");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the GroupName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String GroupName
		{
			get
			{
				return this._groupName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "GroupName does not allow null values.");
				if (_groupName == value)
					return;
					
				this._groupName = value;
				this._isDirty = true;
				
				OnPropertyChanged("GroupName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the StartDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime StartDate
		{
			get
			{
				return this._startDate; 
			}
			set
			{
				if (_startDate == value)
					return;
					
				this._startDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("StartDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the EndDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsEndDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? EndDate
		{
			get
			{
				return this._endDate; 
			}
			set
			{
				if (_endDate == value && EndDate != null )
					return;
					
				this._endDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("EndDate");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "vEmployeeDepartmentHistory"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VEmployeeDepartmentHistoryBase Entity 
		///</summary>
		public virtual VEmployeeDepartmentHistoryBase Copy()
		{
			//shallow copy entity
			VEmployeeDepartmentHistory copy = new VEmployeeDepartmentHistory();
				copy.EmployeeId = this.EmployeeId;
				copy.Title = this.Title;
				copy.FirstName = this.FirstName;
				copy.MiddleName = this.MiddleName;
				copy.LastName = this.LastName;
				copy.Suffix = this.Suffix;
				copy.Shift = this.Shift;
				copy.Department = this.Department;
				copy.GroupName = this.GroupName;
				copy.StartDate = this.StartDate;
				copy.EndDate = this.EndDate;
			copy.AcceptChanges();
			return (VEmployeeDepartmentHistory)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VEmployeeDepartmentHistoryBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VEmployeeDepartmentHistoryBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="VEmployeeDepartmentHistoryBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="VEmployeeDepartmentHistoryBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VEmployeeDepartmentHistoryBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(VEmployeeDepartmentHistoryBase Object1, VEmployeeDepartmentHistoryBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.EmployeeId != Object2.EmployeeId)
				equal = false;
			if (Object1.Title != null && Object2.Title != null )
			{
				if (Object1.Title != Object2.Title)
					equal = false;
			}
			else if (Object1.Title == null ^ Object1.Title == null )
			{
				equal = false;
			}
			if (Object1.FirstName != Object2.FirstName)
				equal = false;
			if (Object1.MiddleName != null && Object2.MiddleName != null )
			{
				if (Object1.MiddleName != Object2.MiddleName)
					equal = false;
			}
			else if (Object1.MiddleName == null ^ Object1.MiddleName == null )
			{
				equal = false;
			}
			if (Object1.LastName != Object2.LastName)
				equal = false;
			if (Object1.Suffix != null && Object2.Suffix != null )
			{
				if (Object1.Suffix != Object2.Suffix)
					equal = false;
			}
			else if (Object1.Suffix == null ^ Object1.Suffix == null )
			{
				equal = false;
			}
			if (Object1.Shift != Object2.Shift)
				equal = false;
			if (Object1.Department != Object2.Department)
				equal = false;
			if (Object1.GroupName != Object2.GroupName)
				equal = false;
			if (Object1.StartDate != Object2.StartDate)
				equal = false;
			if (Object1.EndDate != null && Object2.EndDate != null )
			{
				if (Object1.EndDate != Object2.EndDate)
					equal = false;
			}
			else if (Object1.EndDate == null ^ Object1.EndDate == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(VEmployeeDepartmentHistory entity, string propertyName)
		{
			switch (propertyName)
			{
				case "EmployeeId":
					return entity.EmployeeId;
				case "Title":
					return entity.Title;
				case "FirstName":
					return entity.FirstName;
				case "MiddleName":
					return entity.MiddleName;
				case "LastName":
					return entity.LastName;
				case "Suffix":
					return entity.Suffix;
				case "Shift":
					return entity.Shift;
				case "Department":
					return entity.Department;
				case "GroupName":
					return entity.GroupName;
				case "StartDate":
					return entity.StartDate;
				case "EndDate":
					return entity.EndDate;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as VEmployeeDepartmentHistory, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- EmployeeId: {0}{11}- Title: {1}{11}- FirstName: {2}{11}- MiddleName: {3}{11}- LastName: {4}{11}- Suffix: {5}{11}- Shift: {6}{11}- Department: {7}{11}- GroupName: {8}{11}- StartDate: {9}{11}- EndDate: {10}{11}", 
				this.EmployeeId,
				(this.Title == null) ? string.Empty : this.Title.ToString(),
			     
				this.FirstName,
				(this.MiddleName == null) ? string.Empty : this.MiddleName.ToString(),
			     
				this.LastName,
				(this.Suffix == null) ? string.Empty : this.Suffix.ToString(),
			     
				this.Shift,
				this.Department,
				this.GroupName,
				this.StartDate,
				(this.EndDate == null) ? string.Empty : this.EndDate.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the VEmployeeDepartmentHistory columns.
	/// </summary>
	[Serializable]
	public enum VEmployeeDepartmentHistoryColumn
	{
		/// <summary>
		/// EmployeeID : 
		/// </summary>
		[EnumTextValue("EmployeeID")]
		[ColumnEnum("EmployeeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		EmployeeId,
		/// <summary>
		/// Title : 
		/// </summary>
		[EnumTextValue("Title")]
		[ColumnEnum("Title", typeof(System.String), System.Data.DbType.String, false, false, true, 8)]
		Title,
		/// <summary>
		/// FirstName : 
		/// </summary>
		[EnumTextValue("FirstName")]
		[ColumnEnum("FirstName", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		FirstName,
		/// <summary>
		/// MiddleName : 
		/// </summary>
		[EnumTextValue("MiddleName")]
		[ColumnEnum("MiddleName", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		MiddleName,
		/// <summary>
		/// LastName : 
		/// </summary>
		[EnumTextValue("LastName")]
		[ColumnEnum("LastName", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		LastName,
		/// <summary>
		/// Suffix : 
		/// </summary>
		[EnumTextValue("Suffix")]
		[ColumnEnum("Suffix", typeof(System.String), System.Data.DbType.String, false, false, true, 10)]
		Suffix,
		/// <summary>
		/// Shift : 
		/// </summary>
		[EnumTextValue("Shift")]
		[ColumnEnum("Shift", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Shift,
		/// <summary>
		/// Department : 
		/// </summary>
		[EnumTextValue("Department")]
		[ColumnEnum("Department", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Department,
		/// <summary>
		/// GroupName : 
		/// </summary>
		[EnumTextValue("GroupName")]
		[ColumnEnum("GroupName", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		GroupName,
		/// <summary>
		/// StartDate : 
		/// </summary>
		[EnumTextValue("StartDate")]
		[ColumnEnum("StartDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		StartDate,
		/// <summary>
		/// EndDate : 
		/// </summary>
		[EnumTextValue("EndDate")]
		[ColumnEnum("EndDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		EndDate
	}//End enum

} // end namespace
