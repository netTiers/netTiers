
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file TestProduct.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Nettiers.AdventureWorks.Entities.Validation;
#endregion

namespace Nettiers.AdventureWorks.Entities
{
	///<summary>
	/// An object representation of the 'tblTestProduct' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class TestProductBase : EntityBase, ITestProduct, IEntityId<TestProductKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private TestProductEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private TestProductEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private TestProductEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<TestProduct> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event TestProductEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event TestProductEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="TestProductBase"/> instance.
		///</summary>
		public TestProductBase()
		{
			this.entityData = new TestProductEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="TestProductBase"/> instance.
		///</summary>
		///<param name="_productTypeId"></param>
		///<param name="_downloadId"></param>
		///<param name="_manufacturerId"></param>
		///<param name="_brandName"></param>
		///<param name="_productName"></param>
		///<param name="_productCode"></param>
		///<param name="_uniqueIdentifier"></param>
		///<param name="_typeName"></param>
		///<param name="_modelName"></param>
		///<param name="_displayName"></param>
		///<param name="_productLink"></param>
		///<param name="_connectorCode"></param>
		///<param name="_baseId"></param>
		///<param name="_orgProductId"></param>
		///<param name="_imageFileType"></param>
		///<param name="_fullImageFileType"></param>
		///<param name="_status"></param>
		///<param name="_addedBy"></param>
		///<param name="_addedDate"></param>
		///<param name="_updatedBy"></param>
		///<param name="_updatedDate"></param>
		public TestProductBase(System.Int32? _productTypeId, System.Int32? _downloadId, 
			System.Int32? _manufacturerId, System.String _brandName, System.String _productName, 
			System.String _productCode, System.String _uniqueIdentifier, System.String _typeName, 
			System.String _modelName, System.String _displayName, System.String _productLink, 
			System.String _connectorCode, System.Int32? _baseId, System.Int32? _orgProductId, 
			System.String _imageFileType, System.String _fullImageFileType, System.String _status, 
			System.Int32? _addedBy, System.DateTime? _addedDate, System.Int32? _updatedBy, 
			System.DateTime? _updatedDate)
		{
			this.entityData = new TestProductEntityData();
			this.backupData = null;

			this.ProductTypeId = _productTypeId;
			this.DownloadId = _downloadId;
			this.ManufacturerId = _manufacturerId;
			this.BrandName = _brandName;
			this.ProductName = _productName;
			this.ProductCode = _productCode;
			this.UniqueIdentifier = _uniqueIdentifier;
			this.TypeName = _typeName;
			this.ModelName = _modelName;
			this.DisplayName = _displayName;
			this.ProductLink = _productLink;
			this.ConnectorCode = _connectorCode;
			this.BaseId = _baseId;
			this.OrgProductId = _orgProductId;
			this.ImageFileType = _imageFileType;
			this.FullImageFileType = _fullImageFileType;
			this.Status = _status;
			this.AddedBy = _addedBy;
			this.AddedDate = _addedDate;
			this.UpdatedBy = _updatedBy;
			this.UpdatedDate = _updatedDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="TestProduct"/> instance.
		///</summary>
		///<param name="_productTypeId"></param>
		///<param name="_downloadId"></param>
		///<param name="_manufacturerId"></param>
		///<param name="_brandName"></param>
		///<param name="_productName"></param>
		///<param name="_productCode"></param>
		///<param name="_uniqueIdentifier"></param>
		///<param name="_typeName"></param>
		///<param name="_modelName"></param>
		///<param name="_displayName"></param>
		///<param name="_productLink"></param>
		///<param name="_connectorCode"></param>
		///<param name="_baseId"></param>
		///<param name="_orgProductId"></param>
		///<param name="_imageFileType"></param>
		///<param name="_fullImageFileType"></param>
		///<param name="_status"></param>
		///<param name="_addedBy"></param>
		///<param name="_addedDate"></param>
		///<param name="_updatedBy"></param>
		///<param name="_updatedDate"></param>
		public static TestProduct CreateTestProduct(System.Int32? _productTypeId, System.Int32? _downloadId, 
			System.Int32? _manufacturerId, System.String _brandName, System.String _productName, 
			System.String _productCode, System.String _uniqueIdentifier, System.String _typeName, 
			System.String _modelName, System.String _displayName, System.String _productLink, 
			System.String _connectorCode, System.Int32? _baseId, System.Int32? _orgProductId, 
			System.String _imageFileType, System.String _fullImageFileType, System.String _status, 
			System.Int32? _addedBy, System.DateTime? _addedDate, System.Int32? _updatedBy, 
			System.DateTime? _updatedDate)
		{
			TestProduct newTestProduct = new TestProduct();
			newTestProduct.ProductTypeId = _productTypeId;
			newTestProduct.DownloadId = _downloadId;
			newTestProduct.ManufacturerId = _manufacturerId;
			newTestProduct.BrandName = _brandName;
			newTestProduct.ProductName = _productName;
			newTestProduct.ProductCode = _productCode;
			newTestProduct.UniqueIdentifier = _uniqueIdentifier;
			newTestProduct.TypeName = _typeName;
			newTestProduct.ModelName = _modelName;
			newTestProduct.DisplayName = _displayName;
			newTestProduct.ProductLink = _productLink;
			newTestProduct.ConnectorCode = _connectorCode;
			newTestProduct.BaseId = _baseId;
			newTestProduct.OrgProductId = _orgProductId;
			newTestProduct.ImageFileType = _imageFileType;
			newTestProduct.FullImageFileType = _fullImageFileType;
			newTestProduct.Status = _status;
			newTestProduct.AddedBy = _addedBy;
			newTestProduct.AddedDate = _addedDate;
			newTestProduct.UpdatedBy = _updatedBy;
			newTestProduct.UpdatedDate = _updatedDate;
			return newTestProduct;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ProductId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>





		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 ProductId
		{
			get
			{
				return this.entityData.ProductId; 
			}
			
			set
			{
				if (this.entityData.ProductId == value)
					return;
					
				OnColumnChanging(TestProductColumn.ProductId, this.entityData.ProductId);
				this.entityData.ProductId = value;
				this.EntityId.ProductId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TestProductColumn.ProductId, this.entityData.ProductId);
				OnPropertyChanged("ProductId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProductTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsProductTypeIdNull() and perform business logic appropriately.
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ProductTypeId
		{
			get
			{
				return this.entityData.ProductTypeId; 
			}
			
			set
			{
				if (this.entityData.ProductTypeId == value)
					return;
					
				OnColumnChanging(TestProductColumn.ProductTypeId, this.entityData.ProductTypeId);
				this.entityData.ProductTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TestProductColumn.ProductTypeId, this.entityData.ProductTypeId);
				OnPropertyChanged("ProductTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DownloadId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDownloadIdNull() and perform business logic appropriately.
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DownloadId
		{
			get
			{
				return this.entityData.DownloadId; 
			}
			
			set
			{
				if (this.entityData.DownloadId == value)
					return;
					
				OnColumnChanging(TestProductColumn.DownloadId, this.entityData.DownloadId);
				this.entityData.DownloadId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TestProductColumn.DownloadId, this.entityData.DownloadId);
				OnPropertyChanged("DownloadId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ManufacturerId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsManufacturerIdNull() and perform business logic appropriately.
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ManufacturerId
		{
			get
			{
				return this.entityData.ManufacturerId; 
			}
			
			set
			{
				if (this.entityData.ManufacturerId == value)
					return;
					
				OnColumnChanging(TestProductColumn.ManufacturerId, this.entityData.ManufacturerId);
				this.entityData.ManufacturerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TestProductColumn.ManufacturerId, this.entityData.ManufacturerId);
				OnPropertyChanged("ManufacturerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BrandName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String BrandName
		{
			get
			{
				return this.entityData.BrandName; 
			}
			
			set
			{
				if (this.entityData.BrandName == value)
					return;
					
				OnColumnChanging(TestProductColumn.BrandName, this.entityData.BrandName);
				this.entityData.BrandName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TestProductColumn.BrandName, this.entityData.BrandName);
				OnPropertyChanged("BrandName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProductName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String ProductName
		{
			get
			{
				return this.entityData.ProductName; 
			}
			
			set
			{
				if (this.entityData.ProductName == value)
					return;
					
				OnColumnChanging(TestProductColumn.ProductName, this.entityData.ProductName);
				this.entityData.ProductName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TestProductColumn.ProductName, this.entityData.ProductName);
				OnPropertyChanged("ProductName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProductCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ProductCode
		{
			get
			{
				return this.entityData.ProductCode; 
			}
			
			set
			{
				if (this.entityData.ProductCode == value)
					return;
					
				OnColumnChanging(TestProductColumn.ProductCode, this.entityData.ProductCode);
				this.entityData.ProductCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TestProductColumn.ProductCode, this.entityData.ProductCode);
				OnPropertyChanged("ProductCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UniqueIdentifier property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String UniqueIdentifier
		{
			get
			{
				return this.entityData.UniqueIdentifier; 
			}
			
			set
			{
				if (this.entityData.UniqueIdentifier == value)
					return;
					
				OnColumnChanging(TestProductColumn.UniqueIdentifier, this.entityData.UniqueIdentifier);
				this.entityData.UniqueIdentifier = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TestProductColumn.UniqueIdentifier, this.entityData.UniqueIdentifier);
				OnPropertyChanged("UniqueIdentifier");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TypeName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String TypeName
		{
			get
			{
				return this.entityData.TypeName; 
			}
			
			set
			{
				if (this.entityData.TypeName == value)
					return;
					
				OnColumnChanging(TestProductColumn.TypeName, this.entityData.TypeName);
				this.entityData.TypeName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TestProductColumn.TypeName, this.entityData.TypeName);
				OnPropertyChanged("TypeName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModelName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String ModelName
		{
			get
			{
				return this.entityData.ModelName; 
			}
			
			set
			{
				if (this.entityData.ModelName == value)
					return;
					
				OnColumnChanging(TestProductColumn.ModelName, this.entityData.ModelName);
				this.entityData.ModelName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TestProductColumn.ModelName, this.entityData.ModelName);
				OnPropertyChanged("ModelName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DisplayName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String DisplayName
		{
			get
			{
				return this.entityData.DisplayName; 
			}
			
			set
			{
				if (this.entityData.DisplayName == value)
					return;
					
				OnColumnChanging(TestProductColumn.DisplayName, this.entityData.DisplayName);
				this.entityData.DisplayName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TestProductColumn.DisplayName, this.entityData.DisplayName);
				OnPropertyChanged("DisplayName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProductLink property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1000)]
		public virtual System.String ProductLink
		{
			get
			{
				return this.entityData.ProductLink; 
			}
			
			set
			{
				if (this.entityData.ProductLink == value)
					return;
					
				OnColumnChanging(TestProductColumn.ProductLink, this.entityData.ProductLink);
				this.entityData.ProductLink = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TestProductColumn.ProductLink, this.entityData.ProductLink);
				OnPropertyChanged("ProductLink");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ConnectorCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1000)]
		public virtual System.String ConnectorCode
		{
			get
			{
				return this.entityData.ConnectorCode; 
			}
			
			set
			{
				if (this.entityData.ConnectorCode == value)
					return;
					
				OnColumnChanging(TestProductColumn.ConnectorCode, this.entityData.ConnectorCode);
				this.entityData.ConnectorCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TestProductColumn.ConnectorCode, this.entityData.ConnectorCode);
				OnPropertyChanged("ConnectorCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BaseId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsBaseIdNull() and perform business logic appropriately.
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? BaseId
		{
			get
			{
				return this.entityData.BaseId; 
			}
			
			set
			{
				if (this.entityData.BaseId == value)
					return;
					
				OnColumnChanging(TestProductColumn.BaseId, this.entityData.BaseId);
				this.entityData.BaseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TestProductColumn.BaseId, this.entityData.BaseId);
				OnPropertyChanged("BaseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrgProductId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsOrgProductIdNull() and perform business logic appropriately.
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? OrgProductId
		{
			get
			{
				return this.entityData.OrgProductId; 
			}
			
			set
			{
				if (this.entityData.OrgProductId == value)
					return;
					
				OnColumnChanging(TestProductColumn.OrgProductId, this.entityData.OrgProductId);
				this.entityData.OrgProductId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TestProductColumn.OrgProductId, this.entityData.OrgProductId);
				OnPropertyChanged("OrgProductId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ImageFileType property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String ImageFileType
		{
			get
			{
				return this.entityData.ImageFileType; 
			}
			
			set
			{
				if (this.entityData.ImageFileType == value)
					return;
					
				OnColumnChanging(TestProductColumn.ImageFileType, this.entityData.ImageFileType);
				this.entityData.ImageFileType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TestProductColumn.ImageFileType, this.entityData.ImageFileType);
				OnPropertyChanged("ImageFileType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FullImageFileType property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String FullImageFileType
		{
			get
			{
				return this.entityData.FullImageFileType; 
			}
			
			set
			{
				if (this.entityData.FullImageFileType == value)
					return;
					
				OnColumnChanging(TestProductColumn.FullImageFileType, this.entityData.FullImageFileType);
				this.entityData.FullImageFileType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TestProductColumn.FullImageFileType, this.entityData.FullImageFileType);
				OnPropertyChanged("FullImageFileType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
					
				OnColumnChanging(TestProductColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TestProductColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AddedBy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsAddedByNull() and perform business logic appropriately.
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? AddedBy
		{
			get
			{
				return this.entityData.AddedBy; 
			}
			
			set
			{
				if (this.entityData.AddedBy == value)
					return;
					
				OnColumnChanging(TestProductColumn.AddedBy, this.entityData.AddedBy);
				this.entityData.AddedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TestProductColumn.AddedBy, this.entityData.AddedBy);
				OnPropertyChanged("AddedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AddedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsAddedDateNull() and perform business logic appropriately.
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? AddedDate
		{
			get
			{
				return this.entityData.AddedDate; 
			}
			
			set
			{
				if (this.entityData.AddedDate == value)
					return;
					
				OnColumnChanging(TestProductColumn.AddedDate, this.entityData.AddedDate);
				this.entityData.AddedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TestProductColumn.AddedDate, this.entityData.AddedDate);
				OnPropertyChanged("AddedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdatedBy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsUpdatedByNull() and perform business logic appropriately.
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? UpdatedBy
		{
			get
			{
				return this.entityData.UpdatedBy; 
			}
			
			set
			{
				if (this.entityData.UpdatedBy == value)
					return;
					
				OnColumnChanging(TestProductColumn.UpdatedBy, this.entityData.UpdatedBy);
				this.entityData.UpdatedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TestProductColumn.UpdatedBy, this.entityData.UpdatedBy);
				OnPropertyChanged("UpdatedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsUpdatedDateNull() and perform business logic appropriately.
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdatedDate
		{
			get
			{
				return this.entityData.UpdatedDate; 
			}
			
			set
			{
				if (this.entityData.UpdatedDate == value)
					return;
					
				OnColumnChanging(TestProductColumn.UpdatedDate, this.entityData.UpdatedDate);
				this.entityData.UpdatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TestProductColumn.UpdatedDate, this.entityData.UpdatedDate);
				OnPropertyChanged("UpdatedDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BrandName", "Brand Name", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ProductName", "Product Name", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ProductCode", "Product Code", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UniqueIdentifier", "Unique Identifier", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TypeName", "Type Name", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ModelName", "Model Name", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DisplayName", "Display Name", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ProductLink", "Product Link", 1000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ConnectorCode", "Connector Code", 1000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ImageFileType", "Image File Type", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FullImageFileType", "Full Image File Type", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Status", "Status", 1));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "tblTestProduct"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ProductID", "ProductTypeID", "DownloadID", "ManufacturerID", "BrandName", "ProductName", "ProductCode", "UniqueIdentifier", "TypeName", "ModelName", "DisplayName", "ProductLink", "ConnectorCode", "BaseID", "OrgProductID", "ImageFileType", "FullImageFileType", "Status", "AddedBy", "AddedDate", "UpdatedBy", "UpdatedDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as TestProductEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (TestProduct) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<TestProduct>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as TestProduct);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed TestProduct Entity 
		///</summary>
		protected virtual TestProduct Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			TestProduct copy = new TestProduct();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.ProductId = this.ProductId;
				copy.ProductTypeId = this.ProductTypeId;
				copy.DownloadId = this.DownloadId;
				copy.ManufacturerId = this.ManufacturerId;
				copy.BrandName = this.BrandName;
				copy.ProductName = this.ProductName;
				copy.ProductCode = this.ProductCode;
				copy.UniqueIdentifier = this.UniqueIdentifier;
				copy.TypeName = this.TypeName;
				copy.ModelName = this.ModelName;
				copy.DisplayName = this.DisplayName;
				copy.ProductLink = this.ProductLink;
				copy.ConnectorCode = this.ConnectorCode;
				copy.BaseId = this.BaseId;
				copy.OrgProductId = this.OrgProductId;
				copy.ImageFileType = this.ImageFileType;
				copy.FullImageFileType = this.FullImageFileType;
				copy.Status = this.Status;
				copy.AddedBy = this.AddedBy;
				copy.AddedDate = this.AddedDate;
				copy.UpdatedBy = this.UpdatedBy;
				copy.UpdatedDate = this.UpdatedDate;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed TestProduct Entity 
		///</summary>
		public virtual TestProduct Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed TestProduct Entity which is a deep copy of the current entity.
		///</summary>
		public virtual TestProduct DeepCopy()
		{
			return EntityHelper.Clone<TestProduct>(this as TestProduct);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as TestProductEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new TestProductEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as TestProductEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(TestProductColumn column)
		{
			switch(column)
			{
					case TestProductColumn.ProductId:
					return entityData.ProductId != _originalData.ProductId;
					case TestProductColumn.ProductTypeId:
					return entityData.ProductTypeId != _originalData.ProductTypeId;
					case TestProductColumn.DownloadId:
					return entityData.DownloadId != _originalData.DownloadId;
					case TestProductColumn.ManufacturerId:
					return entityData.ManufacturerId != _originalData.ManufacturerId;
					case TestProductColumn.BrandName:
					return entityData.BrandName != _originalData.BrandName;
					case TestProductColumn.ProductName:
					return entityData.ProductName != _originalData.ProductName;
					case TestProductColumn.ProductCode:
					return entityData.ProductCode != _originalData.ProductCode;
					case TestProductColumn.UniqueIdentifier:
					return entityData.UniqueIdentifier != _originalData.UniqueIdentifier;
					case TestProductColumn.TypeName:
					return entityData.TypeName != _originalData.TypeName;
					case TestProductColumn.ModelName:
					return entityData.ModelName != _originalData.ModelName;
					case TestProductColumn.DisplayName:
					return entityData.DisplayName != _originalData.DisplayName;
					case TestProductColumn.ProductLink:
					return entityData.ProductLink != _originalData.ProductLink;
					case TestProductColumn.ConnectorCode:
					return entityData.ConnectorCode != _originalData.ConnectorCode;
					case TestProductColumn.BaseId:
					return entityData.BaseId != _originalData.BaseId;
					case TestProductColumn.OrgProductId:
					return entityData.OrgProductId != _originalData.OrgProductId;
					case TestProductColumn.ImageFileType:
					return entityData.ImageFileType != _originalData.ImageFileType;
					case TestProductColumn.FullImageFileType:
					return entityData.FullImageFileType != _originalData.FullImageFileType;
					case TestProductColumn.Status:
					return entityData.Status != _originalData.Status;
					case TestProductColumn.AddedBy:
					return entityData.AddedBy != _originalData.AddedBy;
					case TestProductColumn.AddedDate:
					return entityData.AddedDate != _originalData.AddedDate;
					case TestProductColumn.UpdatedBy:
					return entityData.UpdatedBy != _originalData.UpdatedBy;
					case TestProductColumn.UpdatedDate:
					return entityData.UpdatedDate != _originalData.UpdatedDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< TestProductColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ProductId != _originalData.ProductId;
			result = result || entityData.ProductTypeId != _originalData.ProductTypeId;
			result = result || entityData.DownloadId != _originalData.DownloadId;
			result = result || entityData.ManufacturerId != _originalData.ManufacturerId;
			result = result || entityData.BrandName != _originalData.BrandName;
			result = result || entityData.ProductName != _originalData.ProductName;
			result = result || entityData.ProductCode != _originalData.ProductCode;
			result = result || entityData.UniqueIdentifier != _originalData.UniqueIdentifier;
			result = result || entityData.TypeName != _originalData.TypeName;
			result = result || entityData.ModelName != _originalData.ModelName;
			result = result || entityData.DisplayName != _originalData.DisplayName;
			result = result || entityData.ProductLink != _originalData.ProductLink;
			result = result || entityData.ConnectorCode != _originalData.ConnectorCode;
			result = result || entityData.BaseId != _originalData.BaseId;
			result = result || entityData.OrgProductId != _originalData.OrgProductId;
			result = result || entityData.ImageFileType != _originalData.ImageFileType;
			result = result || entityData.FullImageFileType != _originalData.FullImageFileType;
			result = result || entityData.Status != _originalData.Status;
			result = result || entityData.AddedBy != _originalData.AddedBy;
			result = result || entityData.AddedDate != _originalData.AddedDate;
			result = result || entityData.UpdatedBy != _originalData.UpdatedBy;
			result = result || entityData.UpdatedDate != _originalData.UpdatedDate;
			return result;
		}	
		
		///<summary>
		///  Returns a TestProduct Entity with the original data.
		///</summary>
		public TestProduct GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateTestProduct(
				_originalData.ProductTypeId,
				_originalData.DownloadId,
				_originalData.ManufacturerId,
				_originalData.BrandName,
				_originalData.ProductName,
				_originalData.ProductCode,
				_originalData.UniqueIdentifier,
				_originalData.TypeName,
				_originalData.ModelName,
				_originalData.DisplayName,
				_originalData.ProductLink,
				_originalData.ConnectorCode,
				_originalData.BaseId,
				_originalData.OrgProductId,
				_originalData.ImageFileType,
				_originalData.FullImageFileType,
				_originalData.Status,
				_originalData.AddedBy,
				_originalData.AddedDate,
				_originalData.UpdatedBy,
				_originalData.UpdatedDate
				);
				
			return (TestProduct)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="TestProductBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is TestProductBase)
				return ValueEquals(this, (TestProductBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="TestProductBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ProductId.GetHashCode() ^ 
					((this.ProductTypeId == null) ? string.Empty : this.ProductTypeId.ToString()).GetHashCode() ^ 
					((this.DownloadId == null) ? string.Empty : this.DownloadId.ToString()).GetHashCode() ^ 
					((this.ManufacturerId == null) ? string.Empty : this.ManufacturerId.ToString()).GetHashCode() ^ 
					((this.BrandName == null) ? string.Empty : this.BrandName.ToString()).GetHashCode() ^ 
					((this.ProductName == null) ? string.Empty : this.ProductName.ToString()).GetHashCode() ^ 
					((this.ProductCode == null) ? string.Empty : this.ProductCode.ToString()).GetHashCode() ^ 
					((this.UniqueIdentifier == null) ? string.Empty : this.UniqueIdentifier.ToString()).GetHashCode() ^ 
					((this.TypeName == null) ? string.Empty : this.TypeName.ToString()).GetHashCode() ^ 
					((this.ModelName == null) ? string.Empty : this.ModelName.ToString()).GetHashCode() ^ 
					((this.DisplayName == null) ? string.Empty : this.DisplayName.ToString()).GetHashCode() ^ 
					((this.ProductLink == null) ? string.Empty : this.ProductLink.ToString()).GetHashCode() ^ 
					((this.ConnectorCode == null) ? string.Empty : this.ConnectorCode.ToString()).GetHashCode() ^ 
					((this.BaseId == null) ? string.Empty : this.BaseId.ToString()).GetHashCode() ^ 
					((this.OrgProductId == null) ? string.Empty : this.OrgProductId.ToString()).GetHashCode() ^ 
					((this.ImageFileType == null) ? string.Empty : this.ImageFileType.ToString()).GetHashCode() ^ 
					((this.FullImageFileType == null) ? string.Empty : this.FullImageFileType.ToString()).GetHashCode() ^ 
					((this.Status == null) ? string.Empty : this.Status.ToString()).GetHashCode() ^ 
					((this.AddedBy == null) ? string.Empty : this.AddedBy.ToString()).GetHashCode() ^ 
					((this.AddedDate == null) ? string.Empty : this.AddedDate.ToString()).GetHashCode() ^ 
					((this.UpdatedBy == null) ? string.Empty : this.UpdatedBy.ToString()).GetHashCode() ^ 
					((this.UpdatedDate == null) ? string.Empty : this.UpdatedDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="TestProductBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(TestProductBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="TestProductBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="TestProductBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="TestProductBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(TestProductBase Object1, TestProductBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ProductId != Object2.ProductId)
				equal = false;
			if ( Object1.ProductTypeId != null && Object2.ProductTypeId != null )
			{
				if (Object1.ProductTypeId != Object2.ProductTypeId)
					equal = false;
			}
			else if (Object1.ProductTypeId == null ^ Object2.ProductTypeId == null )
			{
				equal = false;
			}
			if ( Object1.DownloadId != null && Object2.DownloadId != null )
			{
				if (Object1.DownloadId != Object2.DownloadId)
					equal = false;
			}
			else if (Object1.DownloadId == null ^ Object2.DownloadId == null )
			{
				equal = false;
			}
			if ( Object1.ManufacturerId != null && Object2.ManufacturerId != null )
			{
				if (Object1.ManufacturerId != Object2.ManufacturerId)
					equal = false;
			}
			else if (Object1.ManufacturerId == null ^ Object2.ManufacturerId == null )
			{
				equal = false;
			}
			if ( Object1.BrandName != null && Object2.BrandName != null )
			{
				if (Object1.BrandName != Object2.BrandName)
					equal = false;
			}
			else if (Object1.BrandName == null ^ Object2.BrandName == null )
			{
				equal = false;
			}
			if ( Object1.ProductName != null && Object2.ProductName != null )
			{
				if (Object1.ProductName != Object2.ProductName)
					equal = false;
			}
			else if (Object1.ProductName == null ^ Object2.ProductName == null )
			{
				equal = false;
			}
			if ( Object1.ProductCode != null && Object2.ProductCode != null )
			{
				if (Object1.ProductCode != Object2.ProductCode)
					equal = false;
			}
			else if (Object1.ProductCode == null ^ Object2.ProductCode == null )
			{
				equal = false;
			}
			if ( Object1.UniqueIdentifier != null && Object2.UniqueIdentifier != null )
			{
				if (Object1.UniqueIdentifier != Object2.UniqueIdentifier)
					equal = false;
			}
			else if (Object1.UniqueIdentifier == null ^ Object2.UniqueIdentifier == null )
			{
				equal = false;
			}
			if ( Object1.TypeName != null && Object2.TypeName != null )
			{
				if (Object1.TypeName != Object2.TypeName)
					equal = false;
			}
			else if (Object1.TypeName == null ^ Object2.TypeName == null )
			{
				equal = false;
			}
			if ( Object1.ModelName != null && Object2.ModelName != null )
			{
				if (Object1.ModelName != Object2.ModelName)
					equal = false;
			}
			else if (Object1.ModelName == null ^ Object2.ModelName == null )
			{
				equal = false;
			}
			if ( Object1.DisplayName != null && Object2.DisplayName != null )
			{
				if (Object1.DisplayName != Object2.DisplayName)
					equal = false;
			}
			else if (Object1.DisplayName == null ^ Object2.DisplayName == null )
			{
				equal = false;
			}
			if ( Object1.ProductLink != null && Object2.ProductLink != null )
			{
				if (Object1.ProductLink != Object2.ProductLink)
					equal = false;
			}
			else if (Object1.ProductLink == null ^ Object2.ProductLink == null )
			{
				equal = false;
			}
			if ( Object1.ConnectorCode != null && Object2.ConnectorCode != null )
			{
				if (Object1.ConnectorCode != Object2.ConnectorCode)
					equal = false;
			}
			else if (Object1.ConnectorCode == null ^ Object2.ConnectorCode == null )
			{
				equal = false;
			}
			if ( Object1.BaseId != null && Object2.BaseId != null )
			{
				if (Object1.BaseId != Object2.BaseId)
					equal = false;
			}
			else if (Object1.BaseId == null ^ Object2.BaseId == null )
			{
				equal = false;
			}
			if ( Object1.OrgProductId != null && Object2.OrgProductId != null )
			{
				if (Object1.OrgProductId != Object2.OrgProductId)
					equal = false;
			}
			else if (Object1.OrgProductId == null ^ Object2.OrgProductId == null )
			{
				equal = false;
			}
			if ( Object1.ImageFileType != null && Object2.ImageFileType != null )
			{
				if (Object1.ImageFileType != Object2.ImageFileType)
					equal = false;
			}
			else if (Object1.ImageFileType == null ^ Object2.ImageFileType == null )
			{
				equal = false;
			}
			if ( Object1.FullImageFileType != null && Object2.FullImageFileType != null )
			{
				if (Object1.FullImageFileType != Object2.FullImageFileType)
					equal = false;
			}
			else if (Object1.FullImageFileType == null ^ Object2.FullImageFileType == null )
			{
				equal = false;
			}
			if ( Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object2.Status == null )
			{
				equal = false;
			}
			if ( Object1.AddedBy != null && Object2.AddedBy != null )
			{
				if (Object1.AddedBy != Object2.AddedBy)
					equal = false;
			}
			else if (Object1.AddedBy == null ^ Object2.AddedBy == null )
			{
				equal = false;
			}
			if ( Object1.AddedDate != null && Object2.AddedDate != null )
			{
				if (Object1.AddedDate != Object2.AddedDate)
					equal = false;
			}
			else if (Object1.AddedDate == null ^ Object2.AddedDate == null )
			{
				equal = false;
			}
			if ( Object1.UpdatedBy != null && Object2.UpdatedBy != null )
			{
				if (Object1.UpdatedBy != Object2.UpdatedBy)
					equal = false;
			}
			else if (Object1.UpdatedBy == null ^ Object2.UpdatedBy == null )
			{
				equal = false;
			}
			if ( Object1.UpdatedDate != null && Object2.UpdatedDate != null )
			{
				if (Object1.UpdatedDate != Object2.UpdatedDate)
					equal = false;
			}
			else if (Object1.UpdatedDate == null ^ Object2.UpdatedDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((TestProductBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static TestProductComparer GetComparer()
        {
            return new TestProductComparer();
        }
        */

        // Comparer delegates back to TestProduct
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(TestProduct rhs, TestProductColumn which)
        {
            switch (which)
            {
            	
            	
            	case TestProductColumn.ProductId:
            		return this.ProductId.CompareTo(rhs.ProductId);
            		
            		                 
            	
            	
            	case TestProductColumn.ProductTypeId:
            		return this.ProductTypeId.Value.CompareTo(rhs.ProductTypeId.Value);
            		
            		                 
            	
            	
            	case TestProductColumn.DownloadId:
            		return this.DownloadId.Value.CompareTo(rhs.DownloadId.Value);
            		
            		                 
            	
            	
            	case TestProductColumn.ManufacturerId:
            		return this.ManufacturerId.Value.CompareTo(rhs.ManufacturerId.Value);
            		
            		                 
            	
            	
            	case TestProductColumn.BrandName:
            		return this.BrandName.CompareTo(rhs.BrandName);
            		
            		                 
            	
            	
            	case TestProductColumn.ProductName:
            		return this.ProductName.CompareTo(rhs.ProductName);
            		
            		                 
            	
            	
            	case TestProductColumn.ProductCode:
            		return this.ProductCode.CompareTo(rhs.ProductCode);
            		
            		                 
            	
            	
            	case TestProductColumn.UniqueIdentifier:
            		return this.UniqueIdentifier.CompareTo(rhs.UniqueIdentifier);
            		
            		                 
            	
            	
            	case TestProductColumn.TypeName:
            		return this.TypeName.CompareTo(rhs.TypeName);
            		
            		                 
            	
            	
            	case TestProductColumn.ModelName:
            		return this.ModelName.CompareTo(rhs.ModelName);
            		
            		                 
            	
            	
            	case TestProductColumn.DisplayName:
            		return this.DisplayName.CompareTo(rhs.DisplayName);
            		
            		                 
            	
            	
            	case TestProductColumn.ProductLink:
            		return this.ProductLink.CompareTo(rhs.ProductLink);
            		
            		                 
            	
            	
            	case TestProductColumn.ConnectorCode:
            		return this.ConnectorCode.CompareTo(rhs.ConnectorCode);
            		
            		                 
            	
            	
            	case TestProductColumn.BaseId:
            		return this.BaseId.Value.CompareTo(rhs.BaseId.Value);
            		
            		                 
            	
            	
            	case TestProductColumn.OrgProductId:
            		return this.OrgProductId.Value.CompareTo(rhs.OrgProductId.Value);
            		
            		                 
            	
            	
            	case TestProductColumn.ImageFileType:
            		return this.ImageFileType.CompareTo(rhs.ImageFileType);
            		
            		                 
            	
            	
            	case TestProductColumn.FullImageFileType:
            		return this.FullImageFileType.CompareTo(rhs.FullImageFileType);
            		
            		                 
            	
            	
            	case TestProductColumn.Status:
            		return this.Status.CompareTo(rhs.Status);
            		
            		                 
            	
            	
            	case TestProductColumn.AddedBy:
            		return this.AddedBy.Value.CompareTo(rhs.AddedBy.Value);
            		
            		                 
            	
            	
            	case TestProductColumn.AddedDate:
            		return this.AddedDate.Value.CompareTo(rhs.AddedDate.Value);
            		
            		                 
            	
            	
            	case TestProductColumn.UpdatedBy:
            		return this.UpdatedBy.Value.CompareTo(rhs.UpdatedBy.Value);
            		
            		                 
            	
            	
            	case TestProductColumn.UpdatedDate:
            		return this.UpdatedDate.Value.CompareTo(rhs.UpdatedDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<TestProductKey> Members
		
		// member variable for the EntityId property
		private TestProductKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual TestProductKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new TestProductKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("TestProduct")
					.Append("|").Append( this.ProductId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{23}{22}- ProductId: {0}{22}- ProductTypeId: {1}{22}- DownloadId: {2}{22}- ManufacturerId: {3}{22}- BrandName: {4}{22}- ProductName: {5}{22}- ProductCode: {6}{22}- UniqueIdentifier: {7}{22}- TypeName: {8}{22}- ModelName: {9}{22}- DisplayName: {10}{22}- ProductLink: {11}{22}- ConnectorCode: {12}{22}- BaseId: {13}{22}- OrgProductId: {14}{22}- ImageFileType: {15}{22}- FullImageFileType: {16}{22}- Status: {17}{22}- AddedBy: {18}{22}- AddedDate: {19}{22}- UpdatedBy: {20}{22}- UpdatedDate: {21}{22}{24}", 
				this.ProductId,
				(this.ProductTypeId == null) ? string.Empty : this.ProductTypeId.ToString(),
				(this.DownloadId == null) ? string.Empty : this.DownloadId.ToString(),
				(this.ManufacturerId == null) ? string.Empty : this.ManufacturerId.ToString(),
				(this.BrandName == null) ? string.Empty : this.BrandName.ToString(),
				(this.ProductName == null) ? string.Empty : this.ProductName.ToString(),
				(this.ProductCode == null) ? string.Empty : this.ProductCode.ToString(),
				(this.UniqueIdentifier == null) ? string.Empty : this.UniqueIdentifier.ToString(),
				(this.TypeName == null) ? string.Empty : this.TypeName.ToString(),
				(this.ModelName == null) ? string.Empty : this.ModelName.ToString(),
				(this.DisplayName == null) ? string.Empty : this.DisplayName.ToString(),
				(this.ProductLink == null) ? string.Empty : this.ProductLink.ToString(),
				(this.ConnectorCode == null) ? string.Empty : this.ConnectorCode.ToString(),
				(this.BaseId == null) ? string.Empty : this.BaseId.ToString(),
				(this.OrgProductId == null) ? string.Empty : this.OrgProductId.ToString(),
				(this.ImageFileType == null) ? string.Empty : this.ImageFileType.ToString(),
				(this.FullImageFileType == null) ? string.Empty : this.FullImageFileType.ToString(),
				(this.Status == null) ? string.Empty : this.Status.ToString(),
				(this.AddedBy == null) ? string.Empty : this.AddedBy.ToString(),
				(this.AddedDate == null) ? string.Empty : this.AddedDate.ToString(),
				(this.UpdatedBy == null) ? string.Empty : this.UpdatedBy.ToString(),
				(this.UpdatedDate == null) ? string.Empty : this.UpdatedDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'tblTestProduct' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class TestProductEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ProductID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "tblTestProduct"</remarks>
		public System.Int32 ProductId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ProductTypeID : 
		/// </summary>
		public System.Int32?		  ProductTypeId = null;
		
		/// <summary>
		/// DownloadID : 
		/// </summary>
		public System.Int32?		  DownloadId = null;
		
		/// <summary>
		/// ManufacturerID : 
		/// </summary>
		public System.Int32?		  ManufacturerId = null;
		
		/// <summary>
		/// BrandName : 
		/// </summary>
		public System.String		  BrandName = null;
		
		/// <summary>
		/// ProductName : 
		/// </summary>
		public System.String		  ProductName = null;
		
		/// <summary>
		/// ProductCode : 
		/// </summary>
		public System.String		  ProductCode = null;
		
		/// <summary>
		/// UniqueIdentifier : 
		/// </summary>
		public System.String		  UniqueIdentifier = null;
		
		/// <summary>
		/// TypeName : 
		/// </summary>
		public System.String		  TypeName = null;
		
		/// <summary>
		/// ModelName : 
		/// </summary>
		public System.String		  ModelName = null;
		
		/// <summary>
		/// DisplayName : 
		/// </summary>
		public System.String		  DisplayName = null;
		
		/// <summary>
		/// ProductLink : 
		/// </summary>
		public System.String		  ProductLink = null;
		
		/// <summary>
		/// ConnectorCode : 
		/// </summary>
		public System.String		  ConnectorCode = null;
		
		/// <summary>
		/// BaseID : 
		/// </summary>
		public System.Int32?		  BaseId = null;
		
		/// <summary>
		/// OrgProductID : 
		/// </summary>
		public System.Int32?		  OrgProductId = null;
		
		/// <summary>
		/// ImageFileType : 
		/// </summary>
		public System.String		  ImageFileType = null;
		
		/// <summary>
		/// FullImageFileType : 
		/// </summary>
		public System.String		  FullImageFileType = null;
		
		/// <summary>
		/// Status : 
		/// </summary>
		public System.String		  Status = null;
		
		/// <summary>
		/// AddedBy : 
		/// </summary>
		public System.Int32?		  AddedBy = null;
		
		/// <summary>
		/// AddedDate : 
		/// </summary>
		public System.DateTime?		  AddedDate = null;
		
		/// <summary>
		/// UpdatedBy : 
		/// </summary>
		public System.Int32?		  UpdatedBy = null;
		
		/// <summary>
		/// UpdatedDate : 
		/// </summary>
		public System.DateTime?		  UpdatedDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			TestProductEntityData _tmp = new TestProductEntityData();
						
			_tmp.ProductId = this.ProductId;
			
			_tmp.ProductTypeId = this.ProductTypeId;
			_tmp.DownloadId = this.DownloadId;
			_tmp.ManufacturerId = this.ManufacturerId;
			_tmp.BrandName = this.BrandName;
			_tmp.ProductName = this.ProductName;
			_tmp.ProductCode = this.ProductCode;
			_tmp.UniqueIdentifier = this.UniqueIdentifier;
			_tmp.TypeName = this.TypeName;
			_tmp.ModelName = this.ModelName;
			_tmp.DisplayName = this.DisplayName;
			_tmp.ProductLink = this.ProductLink;
			_tmp.ConnectorCode = this.ConnectorCode;
			_tmp.BaseId = this.BaseId;
			_tmp.OrgProductId = this.OrgProductId;
			_tmp.ImageFileType = this.ImageFileType;
			_tmp.FullImageFileType = this.FullImageFileType;
			_tmp.Status = this.Status;
			_tmp.AddedBy = this.AddedBy;
			_tmp.AddedDate = this.AddedDate;
			_tmp.UpdatedBy = this.UpdatedBy;
			_tmp.UpdatedDate = this.UpdatedDate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			TestProductEntityData _tmp = new TestProductEntityData();
						
			_tmp.ProductId = this.ProductId;
			
			_tmp.ProductTypeId = this.ProductTypeId;
			_tmp.DownloadId = this.DownloadId;
			_tmp.ManufacturerId = this.ManufacturerId;
			_tmp.BrandName = this.BrandName;
			_tmp.ProductName = this.ProductName;
			_tmp.ProductCode = this.ProductCode;
			_tmp.UniqueIdentifier = this.UniqueIdentifier;
			_tmp.TypeName = this.TypeName;
			_tmp.ModelName = this.ModelName;
			_tmp.DisplayName = this.DisplayName;
			_tmp.ProductLink = this.ProductLink;
			_tmp.ConnectorCode = this.ConnectorCode;
			_tmp.BaseId = this.BaseId;
			_tmp.OrgProductId = this.OrgProductId;
			_tmp.ImageFileType = this.ImageFileType;
			_tmp.FullImageFileType = this.FullImageFileType;
			_tmp.Status = this.Status;
			_tmp.AddedBy = this.AddedBy;
			_tmp.AddedDate = this.AddedDate;
			_tmp.UpdatedBy = this.UpdatedBy;
			_tmp.UpdatedDate = this.UpdatedDate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TestProductColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(TestProductColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TestProductColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(TestProductColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TestProductColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(TestProductColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				TestProductEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new TestProductEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TestProductColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(TestProductColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				TestProductEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new TestProductEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region TestProductEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="TestProduct"/> object.
	/// </remarks>
	public class TestProductEventArgs : System.EventArgs
	{
		private TestProductColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the TestProductEventArgs class.
		///</summary>
		public TestProductEventArgs(TestProductColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the TestProductEventArgs class.
		///</summary>
		public TestProductEventArgs(TestProductColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The TestProductColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="TestProductColumn" />
		public TestProductColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all TestProduct related events.
	///</summary>
	public delegate void TestProductEventHandler(object sender, TestProductEventArgs e);
	
	#region TestProductComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class TestProductComparer : System.Collections.Generic.IComparer<TestProduct>
	{
		TestProductColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:TestProductComparer"/> class.
        /// </summary>
		public TestProductComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:TestProductComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public TestProductComparer(TestProductColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="TestProduct"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="TestProduct"/> to compare.</param>
        /// <param name="b">The second <c>TestProduct</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(TestProduct a, TestProduct b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(TestProduct entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(TestProduct a, TestProduct b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public TestProductColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region TestProductKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="TestProduct"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class TestProductKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the TestProductKey class.
		/// </summary>
		public TestProductKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the TestProductKey class.
		/// </summary>
		public TestProductKey(TestProductBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.ProductId = entity.ProductId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the TestProductKey class.
		/// </summary>
		public TestProductKey(System.Int32 _productId)
		{
			#region Init Properties

			this.ProductId = _productId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private TestProductBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public TestProductBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ProductId property
		private System.Int32 _productId;
		
		/// <summary>
		/// Gets or sets the ProductId property.
		/// </summary>
		public System.Int32 ProductId
		{
			get { return _productId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ProductId = value;
				
				_productId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ProductId = ( values["ProductId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ProductId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ProductId", ProductId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ProductId: {0}{1}",
								ProductId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region TestProductColumn Enum
	
	/// <summary>
	/// Enumerate the TestProduct columns.
	/// </summary>
	[Serializable]
	public enum TestProductColumn : int
	{
		/// <summary>
		/// ProductId : 
		/// </summary>
		[EnumTextValue("ProductID")]
		[ColumnEnum("ProductID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		ProductId = 1,
		/// <summary>
		/// ProductTypeId : 
		/// </summary>
		[EnumTextValue("ProductTypeID")]
		[ColumnEnum("ProductTypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ProductTypeId = 2,
		/// <summary>
		/// DownloadId : 
		/// </summary>
		[EnumTextValue("DownloadID")]
		[ColumnEnum("DownloadID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DownloadId = 3,
		/// <summary>
		/// ManufacturerId : 
		/// </summary>
		[EnumTextValue("ManufacturerID")]
		[ColumnEnum("ManufacturerID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ManufacturerId = 4,
		/// <summary>
		/// BrandName : 
		/// </summary>
		[EnumTextValue("BrandName")]
		[ColumnEnum("BrandName", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		BrandName = 5,
		/// <summary>
		/// ProductName : 
		/// </summary>
		[EnumTextValue("ProductName")]
		[ColumnEnum("ProductName", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		ProductName = 6,
		/// <summary>
		/// ProductCode : 
		/// </summary>
		[EnumTextValue("ProductCode")]
		[ColumnEnum("ProductCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ProductCode = 7,
		/// <summary>
		/// UniqueIdentifier : 
		/// </summary>
		[EnumTextValue("UniqueIdentifier")]
		[ColumnEnum("UniqueIdentifier", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		UniqueIdentifier = 8,
		/// <summary>
		/// TypeName : 
		/// </summary>
		[EnumTextValue("TypeName")]
		[ColumnEnum("TypeName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		TypeName = 9,
		/// <summary>
		/// ModelName : 
		/// </summary>
		[EnumTextValue("ModelName")]
		[ColumnEnum("ModelName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 150)]
		ModelName = 10,
		/// <summary>
		/// DisplayName : 
		/// </summary>
		[EnumTextValue("DisplayName")]
		[ColumnEnum("DisplayName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 150)]
		DisplayName = 11,
		/// <summary>
		/// ProductLink : 
		/// </summary>
		[EnumTextValue("ProductLink")]
		[ColumnEnum("ProductLink", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1000)]
		ProductLink = 12,
		/// <summary>
		/// ConnectorCode : 
		/// </summary>
		[EnumTextValue("ConnectorCode")]
		[ColumnEnum("ConnectorCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1000)]
		ConnectorCode = 13,
		/// <summary>
		/// BaseId : 
		/// </summary>
		[EnumTextValue("BaseID")]
		[ColumnEnum("BaseID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		BaseId = 14,
		/// <summary>
		/// OrgProductId : 
		/// </summary>
		[EnumTextValue("OrgProductID")]
		[ColumnEnum("OrgProductID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		OrgProductId = 15,
		/// <summary>
		/// ImageFileType : 
		/// </summary>
		[EnumTextValue("ImageFileType")]
		[ColumnEnum("ImageFileType", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 1)]
		ImageFileType = 16,
		/// <summary>
		/// FullImageFileType : 
		/// </summary>
		[EnumTextValue("FullImageFileType")]
		[ColumnEnum("FullImageFileType", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 1)]
		FullImageFileType = 17,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 1)]
		Status = 18,
		/// <summary>
		/// AddedBy : 
		/// </summary>
		[EnumTextValue("AddedBy")]
		[ColumnEnum("AddedBy", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		AddedBy = 19,
		/// <summary>
		/// AddedDate : 
		/// </summary>
		[EnumTextValue("AddedDate")]
		[ColumnEnum("AddedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		AddedDate = 20,
		/// <summary>
		/// UpdatedBy : 
		/// </summary>
		[EnumTextValue("UpdatedBy")]
		[ColumnEnum("UpdatedBy", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UpdatedBy = 21,
		/// <summary>
		/// UpdatedDate : 
		/// </summary>
		[EnumTextValue("UpdatedDate")]
		[ColumnEnum("UpdatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdatedDate = 22
	}//End enum

	#endregion TestProductColumn Enum

} // end namespace
