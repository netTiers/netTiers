
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Document.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Nettiers.AdventureWorks.Entities.Validation;
#endregion

namespace Nettiers.AdventureWorks.Entities
{
	///<summary>
	/// Product maintenance documents.	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class DocumentBase : EntityBase, IDocument, IEntityId<DocumentKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private DocumentEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private DocumentEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private DocumentEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Document> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DocumentEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DocumentEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="DocumentBase"/> instance.
		///</summary>
		public DocumentBase()
		{
			this.entityData = new DocumentEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="DocumentBase"/> instance.
		///</summary>
		///<param name="_title">Title of the document.</param>
		///<param name="_fileName">Directory path and file name of the document</param>
		///<param name="_fileExtension">File extension indicating the document type. For example, .doc or .txt.</param>
		///<param name="_revision">Revision number of the document. </param>
		///<param name="_changeNumber">Engineering change approval number.</param>
		///<param name="_status">1 = Pending approval, 2 = Approved, 3 = Obsolete</param>
		///<param name="_documentSummary">Document abstract.</param>
		///<param name="_document">Complete document.</param>
		///<param name="_modifiedDate">Date and time the record was last updated.</param>
		public DocumentBase(System.String _title, System.String _fileName, System.String _fileExtension, 
			System.String _revision, System.Int32 _changeNumber, System.Byte _status, System.String _documentSummary, 
			System.Byte[] _document, System.DateTime _modifiedDate)
		{
			this.entityData = new DocumentEntityData();
			this.backupData = null;

			this.Title = _title;
			this.FileName = _fileName;
			this.FileExtension = _fileExtension;
			this.Revision = _revision;
			this.ChangeNumber = _changeNumber;
			this.Status = _status;
			this.DocumentSummary = _documentSummary;
			this.Document = _document;
			this.ModifiedDate = _modifiedDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Document"/> instance.
		///</summary>
		///<param name="_title">Title of the document.</param>
		///<param name="_fileName">Directory path and file name of the document</param>
		///<param name="_fileExtension">File extension indicating the document type. For example, .doc or .txt.</param>
		///<param name="_revision">Revision number of the document. </param>
		///<param name="_changeNumber">Engineering change approval number.</param>
		///<param name="_status">1 = Pending approval, 2 = Approved, 3 = Obsolete</param>
		///<param name="_documentSummary">Document abstract.</param>
		///<param name="_document">Complete document.</param>
		///<param name="_modifiedDate">Date and time the record was last updated.</param>
		public static Document CreateDocument(System.String _title, System.String _fileName, System.String _fileExtension, 
			System.String _revision, System.Int32 _changeNumber, System.Byte _status, System.String _documentSummary, 
			System.Byte[] _document, System.DateTime _modifiedDate)
		{
			Document newDocument = new Document();
			newDocument.Title = _title;
			newDocument.FileName = _fileName;
			newDocument.FileExtension = _fileExtension;
			newDocument.Revision = _revision;
			newDocument.ChangeNumber = _changeNumber;
			newDocument.Status = _status;
			newDocument.DocumentSummary = _documentSummary;
			newDocument.Document = _document;
			newDocument.ModifiedDate = _modifiedDate;
			return newDocument;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the DocumentId property. 
		///		Primary key for Document records.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@"Primary key for Document records."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 DocumentId
		{
			get
			{
				return this.entityData.DocumentId; 
			}
			
			set
			{
				if (this.entityData.DocumentId == value)
					return;
				
                OnPropertyChanging("DocumentId");                    
				OnColumnChanging(DocumentColumn.DocumentId, this.entityData.DocumentId);
				this.entityData.DocumentId = value;
				this.EntityId.DocumentId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DocumentColumn.DocumentId, this.entityData.DocumentId);
				OnPropertyChanged("DocumentId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Title property. 
		///		Title of the document.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Title of the document."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String Title
		{
			get
			{
				return this.entityData.Title; 
			}
			
			set
			{
				if (this.entityData.Title == value)
					return;
				
                OnPropertyChanging("Title");                    
				OnColumnChanging(DocumentColumn.Title, this.entityData.Title);
				this.entityData.Title = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DocumentColumn.Title, this.entityData.Title);
				OnPropertyChanged("Title");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FileName property. 
		///		Directory path and file name of the document
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Directory path and file name of the document"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 400)]
		public virtual System.String FileName
		{
			get
			{
				return this.entityData.FileName; 
			}
			
			set
			{
				if (this.entityData.FileName == value)
					return;
				
                OnPropertyChanging("FileName");                    
				OnColumnChanging(DocumentColumn.FileName, this.entityData.FileName);
				this.entityData.FileName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DocumentColumn.FileName, this.entityData.FileName);
				OnPropertyChanged("FileName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FileExtension property. 
		///		File extension indicating the document type. For example, .doc or .txt.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"File extension indicating the document type. For example, .doc or .txt."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 8)]
		public virtual System.String FileExtension
		{
			get
			{
				return this.entityData.FileExtension; 
			}
			
			set
			{
				if (this.entityData.FileExtension == value)
					return;
				
                OnPropertyChanging("FileExtension");                    
				OnColumnChanging(DocumentColumn.FileExtension, this.entityData.FileExtension);
				this.entityData.FileExtension = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DocumentColumn.FileExtension, this.entityData.FileExtension);
				OnPropertyChanged("FileExtension");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Revision property. 
		///		Revision number of the document. 
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Revision number of the document. "), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 5)]
		public virtual System.String Revision
		{
			get
			{
				return this.entityData.Revision; 
			}
			
			set
			{
				if (this.entityData.Revision == value)
					return;
				
                OnPropertyChanging("Revision");                    
				OnColumnChanging(DocumentColumn.Revision, this.entityData.Revision);
				this.entityData.Revision = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DocumentColumn.Revision, this.entityData.Revision);
				OnPropertyChanged("Revision");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ChangeNumber property. 
		///		Engineering change approval number.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Engineering change approval number."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ChangeNumber
		{
			get
			{
				return this.entityData.ChangeNumber; 
			}
			
			set
			{
				if (this.entityData.ChangeNumber == value)
					return;
				
                OnPropertyChanging("ChangeNumber");                    
				OnColumnChanging(DocumentColumn.ChangeNumber, this.entityData.ChangeNumber);
				this.entityData.ChangeNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DocumentColumn.ChangeNumber, this.entityData.ChangeNumber);
				OnPropertyChanged("ChangeNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		1 = Pending approval, 2 = Approved, 3 = Obsolete
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"1 = Pending approval, 2 = Approved, 3 = Obsolete"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Byte Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
				
                OnPropertyChanging("Status");                    
				OnColumnChanging(DocumentColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DocumentColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DocumentSummary property. 
		///		Document abstract.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Document abstract."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String DocumentSummary
		{
			get
			{
				return this.entityData.DocumentSummary; 
			}
			
			set
			{
				if (this.entityData.DocumentSummary == value)
					return;
				
                OnPropertyChanging("DocumentSummary");                    
				OnColumnChanging(DocumentColumn.DocumentSummary, this.entityData.DocumentSummary);
				this.entityData.DocumentSummary = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DocumentColumn.DocumentSummary, this.entityData.DocumentSummary);
				OnPropertyChanged("DocumentSummary");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Document property. 
		///		Complete document.
		/// </summary>
		/// <value>This type is varbinary.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Complete document."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Byte[] Document
		{
			get
			{
				return this.entityData.Document; 
			}
			
			set
			{
				if (this.entityData.Document == value)
					return;
				
                OnPropertyChanging("Document");                    
				OnColumnChanging(DocumentColumn.Document, this.entityData.Document);
				this.entityData.Document = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DocumentColumn.Document, this.entityData.Document);
				OnPropertyChanged("Document");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModifiedDate property. 
		///		Date and time the record was last updated.
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Date and time the record was last updated."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ModifiedDate
		{
			get
			{
				return this.entityData.ModifiedDate; 
			}
			
			set
			{
				if (this.entityData.ModifiedDate == value)
					return;
				
                OnPropertyChanging("ModifiedDate");                    
				OnColumnChanging(DocumentColumn.ModifiedDate, this.entityData.ModifiedDate);
				this.entityData.ModifiedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DocumentColumn.ModifiedDate, this.entityData.ModifiedDate);
				OnPropertyChanged("ModifiedDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of ProductDocument objects
		///	which are related to this object through the relation FK_ProductDocument_Document_DocumentID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ProductDocument> ProductDocumentCollection
		{
			get { return entityData.ProductDocumentCollection; }
			set { entityData.ProductDocumentCollection = value; }	
		}

		/// <summary>
		///	Holds a collection of ProductFromProductDocument objects
		///	which are related to this object through the junction table ProductDocument
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Product> ProductIdProductCollection_From_ProductDocument
		{
			get { return entityData.ProductIdProductCollection_From_ProductDocument; }
			set { entityData.ProductIdProductCollection_From_ProductDocument = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Title", "Title"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Title", "Title", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("FileName", "File Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FileName", "File Name", 400));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("FileExtension", "File Extension"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FileExtension", "File Extension", 8));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Revision", "Revision"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Revision", "Revision", 5));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Document"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"DocumentID", "Title", "FileName", "FileExtension", "Revision", "ChangeNumber", "Status", "DocumentSummary", "Document", "ModifiedDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as DocumentEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Document) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Document>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Document);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Document Entity 
		///</summary>
		protected virtual Document Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Document copy = new Document();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.DocumentId = this.DocumentId;
				copy.Title = this.Title;
				copy.FileName = this.FileName;
				copy.FileExtension = this.FileExtension;
				copy.Revision = this.Revision;
				copy.ChangeNumber = this.ChangeNumber;
				copy.Status = this.Status;
				copy.DocumentSummary = this.DocumentSummary;
				copy.Document = this.Document;
				copy.ModifiedDate = this.ModifiedDate;
			
		
			//deep copy nested objects
			copy.ProductDocumentCollection = (TList<ProductDocument>) MakeCopyOf(this.ProductDocumentCollection, existingCopies); 
			copy.ProductIdProductCollection_From_ProductDocument = (TList<Product>) MakeCopyOf(this.ProductIdProductCollection_From_ProductDocument, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Document Entity 
		///</summary>
		public virtual Document Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Document Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Document DeepCopy()
		{
			return EntityHelper.Clone<Document>(this as Document);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as DocumentEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new DocumentEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as DocumentEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(DocumentColumn column)
		{
			switch(column)
			{
					case DocumentColumn.DocumentId:
					return entityData.DocumentId != _originalData.DocumentId;
					case DocumentColumn.Title:
					return entityData.Title != _originalData.Title;
					case DocumentColumn.FileName:
					return entityData.FileName != _originalData.FileName;
					case DocumentColumn.FileExtension:
					return entityData.FileExtension != _originalData.FileExtension;
					case DocumentColumn.Revision:
					return entityData.Revision != _originalData.Revision;
					case DocumentColumn.ChangeNumber:
					return entityData.ChangeNumber != _originalData.ChangeNumber;
					case DocumentColumn.Status:
					return entityData.Status != _originalData.Status;
					case DocumentColumn.DocumentSummary:
					return entityData.DocumentSummary != _originalData.DocumentSummary;
					case DocumentColumn.Document:
					return entityData.Document != _originalData.Document;
					case DocumentColumn.ModifiedDate:
					return entityData.ModifiedDate != _originalData.ModifiedDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< DocumentColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.DocumentId != _originalData.DocumentId;
			result = result || entityData.Title != _originalData.Title;
			result = result || entityData.FileName != _originalData.FileName;
			result = result || entityData.FileExtension != _originalData.FileExtension;
			result = result || entityData.Revision != _originalData.Revision;
			result = result || entityData.ChangeNumber != _originalData.ChangeNumber;
			result = result || entityData.Status != _originalData.Status;
			result = result || entityData.DocumentSummary != _originalData.DocumentSummary;
			result = result || entityData.Document != _originalData.Document;
			result = result || entityData.ModifiedDate != _originalData.ModifiedDate;
			return result;
		}	
		
		///<summary>
		///  Returns a Document Entity with the original data.
		///</summary>
		public Document GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateDocument(
				_originalData.Title,
				_originalData.FileName,
				_originalData.FileExtension,
				_originalData.Revision,
				_originalData.ChangeNumber,
				_originalData.Status,
				_originalData.DocumentSummary,
				_originalData.Document,
				_originalData.ModifiedDate
				);
				
			return (Document)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="DocumentBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is DocumentBase)
				return ValueEquals(this, (DocumentBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="DocumentBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.DocumentId.GetHashCode() ^ 
					this.Title.GetHashCode() ^ 
					this.FileName.GetHashCode() ^ 
					this.FileExtension.GetHashCode() ^ 
					this.Revision.GetHashCode() ^ 
					this.ChangeNumber.GetHashCode() ^ 
					this.Status.GetHashCode() ^ 
					((this.DocumentSummary == null) ? string.Empty : this.DocumentSummary.ToString()).GetHashCode() ^ 
					((this.Document == null) ? string.Empty : this.Document.ToString()).GetHashCode() ^ 
					this.ModifiedDate.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="DocumentBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(DocumentBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="DocumentBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="DocumentBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="DocumentBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(DocumentBase Object1, DocumentBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.DocumentId != Object2.DocumentId)
				equal = false;
			if (Object1.Title != Object2.Title)
				equal = false;
			if (Object1.FileName != Object2.FileName)
				equal = false;
			if (Object1.FileExtension != Object2.FileExtension)
				equal = false;
			if (Object1.Revision != Object2.Revision)
				equal = false;
			if (Object1.ChangeNumber != Object2.ChangeNumber)
				equal = false;
			if (Object1.Status != Object2.Status)
				equal = false;
			if ( Object1.DocumentSummary != null && Object2.DocumentSummary != null )
			{
				if (Object1.DocumentSummary != Object2.DocumentSummary)
					equal = false;
			}
			else if (Object1.DocumentSummary == null ^ Object2.DocumentSummary == null )
			{
				equal = false;
			}
			if ( Object1.Document != null && Object2.Document != null )
			{
				if (Object1.Document != Object2.Document)
					equal = false;
			}
			else if (Object1.Document == null ^ Object2.Document == null )
			{
				equal = false;
			}
			if (Object1.ModifiedDate != Object2.ModifiedDate)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((DocumentBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static DocumentComparer GetComparer()
        {
            return new DocumentComparer();
        }
        */

        // Comparer delegates back to Document
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Document rhs, DocumentColumn which)
        {
            switch (which)
            {
            	
            	
            	case DocumentColumn.DocumentId:
            		return this.DocumentId.CompareTo(rhs.DocumentId);
            		
            		                 
            	
            	
            	case DocumentColumn.Title:
            		return this.Title.CompareTo(rhs.Title);
            		
            		                 
            	
            	
            	case DocumentColumn.FileName:
            		return this.FileName.CompareTo(rhs.FileName);
            		
            		                 
            	
            	
            	case DocumentColumn.FileExtension:
            		return this.FileExtension.CompareTo(rhs.FileExtension);
            		
            		                 
            	
            	
            	case DocumentColumn.Revision:
            		return this.Revision.CompareTo(rhs.Revision);
            		
            		                 
            	
            	
            	case DocumentColumn.ChangeNumber:
            		return this.ChangeNumber.CompareTo(rhs.ChangeNumber);
            		
            		                 
            	
            	
            	case DocumentColumn.Status:
            		return this.Status.CompareTo(rhs.Status);
            		
            		                 
            	
            	
            	case DocumentColumn.DocumentSummary:
            		return this.DocumentSummary.CompareTo(rhs.DocumentSummary);
            		
            		                 
            	
            		                 
            	
            	
            	case DocumentColumn.ModifiedDate:
            		return this.ModifiedDate.CompareTo(rhs.ModifiedDate);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<DocumentKey> Members
		
		// member variable for the EntityId property
		private DocumentKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual DocumentKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new DocumentKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Document")
					.Append("|").Append( this.DocumentId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{11}{10}- DocumentId: {0}{10}- Title: {1}{10}- FileName: {2}{10}- FileExtension: {3}{10}- Revision: {4}{10}- ChangeNumber: {5}{10}- Status: {6}{10}- DocumentSummary: {7}{10}- Document: {8}{10}- ModifiedDate: {9}{10}{12}", 
				this.DocumentId,
				this.Title,
				this.FileName,
				this.FileExtension,
				this.Revision,
				this.ChangeNumber,
				this.Status,
				(this.DocumentSummary == null) ? string.Empty : this.DocumentSummary.ToString(),
				(this.Document == null) ? string.Empty : this.Document.ToString(),
				this.ModifiedDate,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Document' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class DocumentEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// DocumentID : Primary key for Document records.
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Document"</remarks>
		public System.Int32 DocumentId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// Title : Title of the document.
		/// </summary>
		public System.String Title = string.Empty;
		
		/// <summary>
		/// FileName : Directory path and file name of the document
		/// </summary>
		public System.String FileName = string.Empty;
		
		/// <summary>
		/// FileExtension : File extension indicating the document type. For example, .doc or .txt.
		/// </summary>
		public System.String FileExtension = string.Empty;
		
		/// <summary>
		/// Revision : Revision number of the document. 
		/// </summary>
		public System.String Revision = string.Empty;
		
		/// <summary>
		/// ChangeNumber : Engineering change approval number.
		/// </summary>
		public System.Int32 ChangeNumber = (int)0;
		
		/// <summary>
		/// Status : 1 = Pending approval, 2 = Approved, 3 = Obsolete
		/// </summary>
		public System.Byte Status = (byte)0;
		
		/// <summary>
		/// DocumentSummary : Document abstract.
		/// </summary>
		public System.String DocumentSummary = null;
		
		/// <summary>
		/// Document : Complete document.
		/// </summary>
		public System.Byte[] Document = null;
		
		/// <summary>
		/// ModifiedDate : Date and time the record was last updated.
		/// </summary>
		public System.DateTime ModifiedDate = DateTime.MinValue;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region ProductDocumentCollection
		
		private TList<ProductDocument> _productDocumentDocumentId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _productDocumentDocumentId
		/// </summary>
		
		public TList<ProductDocument> ProductDocumentCollection
		{
			get
			{
				if (_productDocumentDocumentId == null)
				{
				_productDocumentDocumentId = new TList<ProductDocument>();
				}
	
				return _productDocumentDocumentId;
			}
			set { _productDocumentDocumentId = value; }
		}
		
		#endregion

		#region ProductIdProductCollection_From_ProductDocument
		
		private TList<Product> productIdProductCollectionFromProductDocument;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table productIdProductCollectionFromProductDocument
		/// </summary>
		
		public TList<Product> ProductIdProductCollection_From_ProductDocument
		{
			get
			{
				if (productIdProductCollectionFromProductDocument == null)
				{
				productIdProductCollectionFromProductDocument = new TList<Product>();
				}
	
				return productIdProductCollectionFromProductDocument;
			}
			set { productIdProductCollectionFromProductDocument = value; }
		}
		
		#endregion 

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			DocumentEntityData _tmp = new DocumentEntityData();
						
			_tmp.DocumentId = this.DocumentId;
			
			_tmp.Title = this.Title;
			_tmp.FileName = this.FileName;
			_tmp.FileExtension = this.FileExtension;
			_tmp.Revision = this.Revision;
			_tmp.ChangeNumber = this.ChangeNumber;
			_tmp.Status = this.Status;
			_tmp.DocumentSummary = this.DocumentSummary;
			_tmp.Document = this.Document;
			_tmp.ModifiedDate = this.ModifiedDate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._productDocumentDocumentId != null)
				_tmp.ProductDocumentCollection = (TList<ProductDocument>) MakeCopyOf(this.ProductDocumentCollection); 
			if (this.productIdProductCollectionFromProductDocument != null)
				_tmp.ProductIdProductCollection_From_ProductDocument = (TList<Product>) MakeCopyOf(this.ProductIdProductCollection_From_ProductDocument); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			DocumentEntityData _tmp = new DocumentEntityData();
						
			_tmp.DocumentId = this.DocumentId;
			
			_tmp.Title = this.Title;
			_tmp.FileName = this.FileName;
			_tmp.FileExtension = this.FileExtension;
			_tmp.Revision = this.Revision;
			_tmp.ChangeNumber = this.ChangeNumber;
			_tmp.Status = this.Status;
			_tmp.DocumentSummary = this.DocumentSummary;
			_tmp.Document = this.Document;
			_tmp.ModifiedDate = this.ModifiedDate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.ProductDocumentCollection = (TList<ProductDocument>) MakeCopyOf(this.ProductDocumentCollection, existingCopies); 
			_tmp.ProductIdProductCollection_From_ProductDocument = (TList<Product>) MakeCopyOf(this.ProductIdProductCollection_From_ProductDocument, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DocumentColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(DocumentColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DocumentColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(DocumentColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DocumentColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(DocumentColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				DocumentEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new DocumentEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DocumentColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(DocumentColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				DocumentEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new DocumentEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region DocumentEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Document"/> object.
	/// </remarks>
	public class DocumentEventArgs : System.EventArgs
	{
		private DocumentColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the DocumentEventArgs class.
		///</summary>
		public DocumentEventArgs(DocumentColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the DocumentEventArgs class.
		///</summary>
		public DocumentEventArgs(DocumentColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The DocumentColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="DocumentColumn" />
		public DocumentColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Document related events.
	///</summary>
	public delegate void DocumentEventHandler(object sender, DocumentEventArgs e);
	
	#region DocumentComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class DocumentComparer : System.Collections.Generic.IComparer<Document>
	{
		DocumentColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:DocumentComparer"/> class.
        /// </summary>
		public DocumentComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:DocumentComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public DocumentComparer(DocumentColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Document"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Document"/> to compare.</param>
        /// <param name="b">The second <c>Document</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Document a, Document b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Document entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Document a, Document b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public DocumentColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region DocumentKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Document"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class DocumentKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the DocumentKey class.
		/// </summary>
		public DocumentKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the DocumentKey class.
		/// </summary>
		public DocumentKey(DocumentBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.DocumentId = entity.DocumentId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the DocumentKey class.
		/// </summary>
		public DocumentKey(System.Int32 _documentId)
		{
			#region Init Properties

			this.DocumentId = _documentId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private DocumentBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public DocumentBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the DocumentId property
		private System.Int32 _documentId;
		
		/// <summary>
		/// Gets or sets the DocumentId property.
		/// </summary>
		public System.Int32 DocumentId
		{
			get { return _documentId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.DocumentId = value;
				
				_documentId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				DocumentId = ( values["DocumentId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["DocumentId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("DocumentId", DocumentId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("DocumentId: {0}{1}",
								DocumentId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region DocumentColumn Enum
	
	/// <summary>
	/// Enumerate the Document columns.
	/// </summary>
	[Serializable]
	public enum DocumentColumn : int
	{
		/// <summary>
		/// DocumentId : Primary key for Document records.
		/// </summary>
		[EnumTextValue("DocumentID")]
		[ColumnEnum("DocumentID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		DocumentId = 1,
		/// <summary>
		/// Title : Title of the document.
		/// </summary>
		[EnumTextValue("Title")]
		[ColumnEnum("Title", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Title = 2,
		/// <summary>
		/// FileName : Directory path and file name of the document
		/// </summary>
		[EnumTextValue("FileName")]
		[ColumnEnum("FileName", typeof(System.String), System.Data.DbType.String, false, false, false, 400)]
		FileName = 3,
		/// <summary>
		/// FileExtension : File extension indicating the document type. For example, .doc or .txt.
		/// </summary>
		[EnumTextValue("FileExtension")]
		[ColumnEnum("FileExtension", typeof(System.String), System.Data.DbType.String, false, false, false, 8)]
		FileExtension = 4,
		/// <summary>
		/// Revision : Revision number of the document. 
		/// </summary>
		[EnumTextValue("Revision")]
		[ColumnEnum("Revision", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, false, 5)]
		Revision = 5,
		/// <summary>
		/// ChangeNumber : Engineering change approval number.
		/// </summary>
		[EnumTextValue("ChangeNumber")]
		[ColumnEnum("ChangeNumber", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ChangeNumber = 6,
		/// <summary>
		/// Status : 1 = Pending approval, 2 = Approved, 3 = Obsolete
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(System.Byte), System.Data.DbType.Byte, false, false, false)]
		Status = 7,
		/// <summary>
		/// DocumentSummary : Document abstract.
		/// </summary>
		[EnumTextValue("DocumentSummary")]
		[ColumnEnum("DocumentSummary", typeof(System.String), System.Data.DbType.String, false, false, true)]
		DocumentSummary = 8,
		/// <summary>
		/// Document : Complete document.
		/// </summary>
		[EnumTextValue("Document")]
		[ColumnEnum("Document", typeof(System.Byte[]), System.Data.DbType.Binary, false, false, true)]
		Document = 9,
		/// <summary>
		/// ModifiedDate : Date and time the record was last updated.
		/// </summary>
		[EnumTextValue("ModifiedDate")]
		[ColumnEnum("ModifiedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ModifiedDate = 10
	}//End enum

	#endregion DocumentColumn Enum

} // end namespace
