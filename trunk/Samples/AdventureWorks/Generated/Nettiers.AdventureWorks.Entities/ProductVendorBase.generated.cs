
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ProductVendor.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Nettiers.AdventureWorks.Entities.Validation;
#endregion

namespace Nettiers.AdventureWorks.Entities
{
	///<summary>
	/// Cross-reference table mapping vendors with the products they supply.	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ProductVendorBase : EntityBase, IProductVendor, IEntityId<ProductVendorKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ProductVendorEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ProductVendorEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ProductVendorEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ProductVendor> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ProductVendorEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ProductVendorEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ProductVendorBase"/> instance.
		///</summary>
		public ProductVendorBase()
		{
			this.entityData = new ProductVendorEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ProductVendorBase"/> instance.
		///</summary>
		///<param name="_productId">Primary key. Foreign key to Product.ProductID.</param>
		///<param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
		///<param name="_averageLeadTime">The average span of time (in days) between placing an order with the vendor and receiving the purchased product.</param>
		///<param name="_standardPrice">The vendor's usual selling price.</param>
		///<param name="_lastReceiptCost">The selling price when last purchased.</param>
		///<param name="_lastReceiptDate">Date the product was last received by the vendor.</param>
		///<param name="_minOrderQty">The maximum quantity that should be ordered.</param>
		///<param name="_maxOrderQty">The minimum quantity that should be ordered.</param>
		///<param name="_onOrderQty">The quantity currently on order.</param>
		///<param name="_unitMeasureCode">The product's unit of measure.</param>
		///<param name="_modifiedDate">Date and time the record was last updated.</param>
		public ProductVendorBase(System.Int32 _productId, System.Int32 _vendorId, System.Int32 _averageLeadTime, 
			System.Decimal _standardPrice, System.Decimal? _lastReceiptCost, System.DateTime? _lastReceiptDate, 
			System.Int32 _minOrderQty, System.Int32 _maxOrderQty, System.Int32? _onOrderQty, System.String _unitMeasureCode, 
			System.DateTime _modifiedDate)
		{
			this.entityData = new ProductVendorEntityData();
			this.backupData = null;

			this.ProductId = _productId;
			this.VendorId = _vendorId;
			this.AverageLeadTime = _averageLeadTime;
			this.StandardPrice = _standardPrice;
			this.LastReceiptCost = _lastReceiptCost;
			this.LastReceiptDate = _lastReceiptDate;
			this.MinOrderQty = _minOrderQty;
			this.MaxOrderQty = _maxOrderQty;
			this.OnOrderQty = _onOrderQty;
			this.UnitMeasureCode = _unitMeasureCode;
			this.ModifiedDate = _modifiedDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ProductVendor"/> instance.
		///</summary>
		///<param name="_productId">Primary key. Foreign key to Product.ProductID.</param>
		///<param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
		///<param name="_averageLeadTime">The average span of time (in days) between placing an order with the vendor and receiving the purchased product.</param>
		///<param name="_standardPrice">The vendor's usual selling price.</param>
		///<param name="_lastReceiptCost">The selling price when last purchased.</param>
		///<param name="_lastReceiptDate">Date the product was last received by the vendor.</param>
		///<param name="_minOrderQty">The maximum quantity that should be ordered.</param>
		///<param name="_maxOrderQty">The minimum quantity that should be ordered.</param>
		///<param name="_onOrderQty">The quantity currently on order.</param>
		///<param name="_unitMeasureCode">The product's unit of measure.</param>
		///<param name="_modifiedDate">Date and time the record was last updated.</param>
		public static ProductVendor CreateProductVendor(System.Int32 _productId, System.Int32 _vendorId, System.Int32 _averageLeadTime, 
			System.Decimal _standardPrice, System.Decimal? _lastReceiptCost, System.DateTime? _lastReceiptDate, 
			System.Int32 _minOrderQty, System.Int32 _maxOrderQty, System.Int32? _onOrderQty, System.String _unitMeasureCode, 
			System.DateTime _modifiedDate)
		{
			ProductVendor newProductVendor = new ProductVendor();
			newProductVendor.ProductId = _productId;
			newProductVendor.VendorId = _vendorId;
			newProductVendor.AverageLeadTime = _averageLeadTime;
			newProductVendor.StandardPrice = _standardPrice;
			newProductVendor.LastReceiptCost = _lastReceiptCost;
			newProductVendor.LastReceiptDate = _lastReceiptDate;
			newProductVendor.MinOrderQty = _minOrderQty;
			newProductVendor.MaxOrderQty = _maxOrderQty;
			newProductVendor.OnOrderQty = _onOrderQty;
			newProductVendor.UnitMeasureCode = _unitMeasureCode;
			newProductVendor.ModifiedDate = _modifiedDate;
			return newProductVendor;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ProductId property. 
		///		Primary key. Foreign key to Product.ProductID.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Primary key. Foreign key to Product.ProductID."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 ProductId
		{
			get
			{
				return this.entityData.ProductId; 
			}
			
			set
			{
				if (this.entityData.ProductId == value)
					return;
				
                OnPropertyChanging("ProductId");                    
				OnColumnChanging(ProductVendorColumn.ProductId, this.entityData.ProductId);
				this.entityData.ProductId = value;
				this.EntityId.ProductId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductVendorColumn.ProductId, this.entityData.ProductId);
				OnPropertyChanged("ProductId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ProductID property.
		///		Primary key. Foreign key to Product.ProductID.
		/// </summary>
		/// <remarks>This is the original value of the ProductID property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalProductId
		{
			get { return this.entityData.OriginalProductId; }
			set { this.entityData.OriginalProductId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the VendorId property. 
		///		Primary key. Foreign key to Vendor.VendorID.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Primary key. Foreign key to Vendor.VendorID."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 VendorId
		{
			get
			{
				return this.entityData.VendorId; 
			}
			
			set
			{
				if (this.entityData.VendorId == value)
					return;
				
                OnPropertyChanging("VendorId");                    
				OnColumnChanging(ProductVendorColumn.VendorId, this.entityData.VendorId);
				this.entityData.VendorId = value;
				this.EntityId.VendorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductVendorColumn.VendorId, this.entityData.VendorId);
				OnPropertyChanged("VendorId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the VendorID property.
		///		Primary key. Foreign key to Vendor.VendorID.
		/// </summary>
		/// <remarks>This is the original value of the VendorID property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalVendorId
		{
			get { return this.entityData.OriginalVendorId; }
			set { this.entityData.OriginalVendorId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the AverageLeadTime property. 
		///		The average span of time (in days) between placing an order with the vendor and receiving the purchased product.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"The average span of time (in days) between placing an order with the vendor and receiving the purchased product."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 AverageLeadTime
		{
			get
			{
				return this.entityData.AverageLeadTime; 
			}
			
			set
			{
				if (this.entityData.AverageLeadTime == value)
					return;
				
                OnPropertyChanging("AverageLeadTime");                    
				OnColumnChanging(ProductVendorColumn.AverageLeadTime, this.entityData.AverageLeadTime);
				this.entityData.AverageLeadTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductVendorColumn.AverageLeadTime, this.entityData.AverageLeadTime);
				OnPropertyChanged("AverageLeadTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StandardPrice property. 
		///		The vendor's usual selling price.
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"The vendor's usual selling price."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal StandardPrice
		{
			get
			{
				return this.entityData.StandardPrice; 
			}
			
			set
			{
				if (this.entityData.StandardPrice == value)
					return;
				
                OnPropertyChanging("StandardPrice");                    
				OnColumnChanging(ProductVendorColumn.StandardPrice, this.entityData.StandardPrice);
				this.entityData.StandardPrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductVendorColumn.StandardPrice, this.entityData.StandardPrice);
				OnPropertyChanged("StandardPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastReceiptCost property. 
		///		The selling price when last purchased.
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsLastReceiptCostNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"The selling price when last purchased."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? LastReceiptCost
		{
			get
			{
				return this.entityData.LastReceiptCost; 
			}
			
			set
			{
				if (this.entityData.LastReceiptCost == value)
					return;
				
                OnPropertyChanging("LastReceiptCost");                    
				OnColumnChanging(ProductVendorColumn.LastReceiptCost, this.entityData.LastReceiptCost);
				this.entityData.LastReceiptCost = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductVendorColumn.LastReceiptCost, this.entityData.LastReceiptCost);
				OnPropertyChanged("LastReceiptCost");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastReceiptDate property. 
		///		Date the product was last received by the vendor.
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastReceiptDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Date the product was last received by the vendor."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastReceiptDate
		{
			get
			{
				return this.entityData.LastReceiptDate; 
			}
			
			set
			{
				if (this.entityData.LastReceiptDate == value)
					return;
				
                OnPropertyChanging("LastReceiptDate");                    
				OnColumnChanging(ProductVendorColumn.LastReceiptDate, this.entityData.LastReceiptDate);
				this.entityData.LastReceiptDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductVendorColumn.LastReceiptDate, this.entityData.LastReceiptDate);
				OnPropertyChanged("LastReceiptDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MinOrderQty property. 
		///		The maximum quantity that should be ordered.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"The maximum quantity that should be ordered."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 MinOrderQty
		{
			get
			{
				return this.entityData.MinOrderQty; 
			}
			
			set
			{
				if (this.entityData.MinOrderQty == value)
					return;
				
                OnPropertyChanging("MinOrderQty");                    
				OnColumnChanging(ProductVendorColumn.MinOrderQty, this.entityData.MinOrderQty);
				this.entityData.MinOrderQty = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductVendorColumn.MinOrderQty, this.entityData.MinOrderQty);
				OnPropertyChanged("MinOrderQty");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaxOrderQty property. 
		///		The minimum quantity that should be ordered.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"The minimum quantity that should be ordered."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 MaxOrderQty
		{
			get
			{
				return this.entityData.MaxOrderQty; 
			}
			
			set
			{
				if (this.entityData.MaxOrderQty == value)
					return;
				
                OnPropertyChanging("MaxOrderQty");                    
				OnColumnChanging(ProductVendorColumn.MaxOrderQty, this.entityData.MaxOrderQty);
				this.entityData.MaxOrderQty = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductVendorColumn.MaxOrderQty, this.entityData.MaxOrderQty);
				OnPropertyChanged("MaxOrderQty");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OnOrderQty property. 
		///		The quantity currently on order.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsOnOrderQtyNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"The quantity currently on order."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? OnOrderQty
		{
			get
			{
				return this.entityData.OnOrderQty; 
			}
			
			set
			{
				if (this.entityData.OnOrderQty == value)
					return;
				
                OnPropertyChanging("OnOrderQty");                    
				OnColumnChanging(ProductVendorColumn.OnOrderQty, this.entityData.OnOrderQty);
				this.entityData.OnOrderQty = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductVendorColumn.OnOrderQty, this.entityData.OnOrderQty);
				OnPropertyChanged("OnOrderQty");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UnitMeasureCode property. 
		///		The product's unit of measure.
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"The product's unit of measure."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 3)]
		public virtual System.String UnitMeasureCode
		{
			get
			{
				return this.entityData.UnitMeasureCode; 
			}
			
			set
			{
				if (this.entityData.UnitMeasureCode == value)
					return;
				
                OnPropertyChanging("UnitMeasureCode");                    
				OnColumnChanging(ProductVendorColumn.UnitMeasureCode, this.entityData.UnitMeasureCode);
				this.entityData.UnitMeasureCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductVendorColumn.UnitMeasureCode, this.entityData.UnitMeasureCode);
				OnPropertyChanged("UnitMeasureCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModifiedDate property. 
		///		Date and time the record was last updated.
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Date and time the record was last updated."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ModifiedDate
		{
			get
			{
				return this.entityData.ModifiedDate; 
			}
			
			set
			{
				if (this.entityData.ModifiedDate == value)
					return;
				
                OnPropertyChanging("ModifiedDate");                    
				OnColumnChanging(ProductVendorColumn.ModifiedDate, this.entityData.ModifiedDate);
				this.entityData.ModifiedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductVendorColumn.ModifiedDate, this.entityData.ModifiedDate);
				OnPropertyChanged("ModifiedDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Product"/>.
		/// </summary>
		/// <value>The source Product for ProductId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Product ProductIdSource
      	{
            get { return entityData.ProductIdSource; }
            set { entityData.ProductIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="UnitMeasure"/>.
		/// </summary>
		/// <value>The source UnitMeasure for UnitMeasureCode.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual UnitMeasure UnitMeasureCodeSource
      	{
            get { return entityData.UnitMeasureCodeSource; }
            set { entityData.UnitMeasureCodeSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Vendor"/>.
		/// </summary>
		/// <value>The source Vendor for VendorId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Vendor VendorIdSource
      	{
            get { return entityData.VendorIdSource; }
            set { entityData.VendorIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("UnitMeasureCode", "Unit Measure Code"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UnitMeasureCode", "Unit Measure Code", 3));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ProductVendor"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ProductID", "VendorID", "AverageLeadTime", "StandardPrice", "LastReceiptCost", "LastReceiptDate", "MinOrderQty", "MaxOrderQty", "OnOrderQty", "UnitMeasureCode", "ModifiedDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ProductVendorEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ProductVendor) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ProductVendor>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ProductVendor);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ProductVendor Entity 
		///</summary>
		protected virtual ProductVendor Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ProductVendor copy = new ProductVendor();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.ProductId = this.ProductId;
					copy.OriginalProductId = this.OriginalProductId;
				copy.VendorId = this.VendorId;
					copy.OriginalVendorId = this.OriginalVendorId;
				copy.AverageLeadTime = this.AverageLeadTime;
				copy.StandardPrice = this.StandardPrice;
				copy.LastReceiptCost = this.LastReceiptCost;
				copy.LastReceiptDate = this.LastReceiptDate;
				copy.MinOrderQty = this.MinOrderQty;
				copy.MaxOrderQty = this.MaxOrderQty;
				copy.OnOrderQty = this.OnOrderQty;
				copy.UnitMeasureCode = this.UnitMeasureCode;
				copy.ModifiedDate = this.ModifiedDate;
			
			if (this.ProductIdSource != null && existingCopies.Contains(this.ProductIdSource))
				copy.ProductIdSource = existingCopies[this.ProductIdSource] as Product;
			else
				copy.ProductIdSource = MakeCopyOf(this.ProductIdSource, existingCopies) as Product;
			if (this.UnitMeasureCodeSource != null && existingCopies.Contains(this.UnitMeasureCodeSource))
				copy.UnitMeasureCodeSource = existingCopies[this.UnitMeasureCodeSource] as UnitMeasure;
			else
				copy.UnitMeasureCodeSource = MakeCopyOf(this.UnitMeasureCodeSource, existingCopies) as UnitMeasure;
			if (this.VendorIdSource != null && existingCopies.Contains(this.VendorIdSource))
				copy.VendorIdSource = existingCopies[this.VendorIdSource] as Vendor;
			else
				copy.VendorIdSource = MakeCopyOf(this.VendorIdSource, existingCopies) as Vendor;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ProductVendor Entity 
		///</summary>
		public virtual ProductVendor Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ProductVendor Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ProductVendor DeepCopy()
		{
			return EntityHelper.Clone<ProductVendor>(this as ProductVendor);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ProductVendorEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ProductVendorEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ProductVendorEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ProductVendorColumn column)
		{
			switch(column)
			{
					case ProductVendorColumn.ProductId:
					return entityData.ProductId != _originalData.ProductId;
					case ProductVendorColumn.VendorId:
					return entityData.VendorId != _originalData.VendorId;
					case ProductVendorColumn.AverageLeadTime:
					return entityData.AverageLeadTime != _originalData.AverageLeadTime;
					case ProductVendorColumn.StandardPrice:
					return entityData.StandardPrice != _originalData.StandardPrice;
					case ProductVendorColumn.LastReceiptCost:
					return entityData.LastReceiptCost != _originalData.LastReceiptCost;
					case ProductVendorColumn.LastReceiptDate:
					return entityData.LastReceiptDate != _originalData.LastReceiptDate;
					case ProductVendorColumn.MinOrderQty:
					return entityData.MinOrderQty != _originalData.MinOrderQty;
					case ProductVendorColumn.MaxOrderQty:
					return entityData.MaxOrderQty != _originalData.MaxOrderQty;
					case ProductVendorColumn.OnOrderQty:
					return entityData.OnOrderQty != _originalData.OnOrderQty;
					case ProductVendorColumn.UnitMeasureCode:
					return entityData.UnitMeasureCode != _originalData.UnitMeasureCode;
					case ProductVendorColumn.ModifiedDate:
					return entityData.ModifiedDate != _originalData.ModifiedDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ProductVendorColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ProductId != _originalData.ProductId;
			result = result || entityData.VendorId != _originalData.VendorId;
			result = result || entityData.AverageLeadTime != _originalData.AverageLeadTime;
			result = result || entityData.StandardPrice != _originalData.StandardPrice;
			result = result || entityData.LastReceiptCost != _originalData.LastReceiptCost;
			result = result || entityData.LastReceiptDate != _originalData.LastReceiptDate;
			result = result || entityData.MinOrderQty != _originalData.MinOrderQty;
			result = result || entityData.MaxOrderQty != _originalData.MaxOrderQty;
			result = result || entityData.OnOrderQty != _originalData.OnOrderQty;
			result = result || entityData.UnitMeasureCode != _originalData.UnitMeasureCode;
			result = result || entityData.ModifiedDate != _originalData.ModifiedDate;
			return result;
		}	
		
		///<summary>
		///  Returns a ProductVendor Entity with the original data.
		///</summary>
		public ProductVendor GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateProductVendor(
				_originalData.ProductId,
				_originalData.VendorId,
				_originalData.AverageLeadTime,
				_originalData.StandardPrice,
				_originalData.LastReceiptCost,
				_originalData.LastReceiptDate,
				_originalData.MinOrderQty,
				_originalData.MaxOrderQty,
				_originalData.OnOrderQty,
				_originalData.UnitMeasureCode,
				_originalData.ModifiedDate
				);
				
			return (ProductVendor)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ProductVendorBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ProductVendorBase)
				return ValueEquals(this, (ProductVendorBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ProductVendorBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ProductId.GetHashCode() ^ 
					this.VendorId.GetHashCode() ^ 
					this.AverageLeadTime.GetHashCode() ^ 
					this.StandardPrice.GetHashCode() ^ 
					((this.LastReceiptCost == null) ? string.Empty : this.LastReceiptCost.ToString()).GetHashCode() ^ 
					((this.LastReceiptDate == null) ? string.Empty : this.LastReceiptDate.ToString()).GetHashCode() ^ 
					this.MinOrderQty.GetHashCode() ^ 
					this.MaxOrderQty.GetHashCode() ^ 
					((this.OnOrderQty == null) ? string.Empty : this.OnOrderQty.ToString()).GetHashCode() ^ 
					this.UnitMeasureCode.GetHashCode() ^ 
					this.ModifiedDate.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ProductVendorBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ProductVendorBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ProductVendorBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ProductVendorBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ProductVendorBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ProductVendorBase Object1, ProductVendorBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ProductId != Object2.ProductId)
				equal = false;
			if (Object1.VendorId != Object2.VendorId)
				equal = false;
			if (Object1.AverageLeadTime != Object2.AverageLeadTime)
				equal = false;
			if (Object1.StandardPrice != Object2.StandardPrice)
				equal = false;
			if ( Object1.LastReceiptCost != null && Object2.LastReceiptCost != null )
			{
				if (Object1.LastReceiptCost != Object2.LastReceiptCost)
					equal = false;
			}
			else if (Object1.LastReceiptCost == null ^ Object2.LastReceiptCost == null )
			{
				equal = false;
			}
			if ( Object1.LastReceiptDate != null && Object2.LastReceiptDate != null )
			{
				if (Object1.LastReceiptDate != Object2.LastReceiptDate)
					equal = false;
			}
			else if (Object1.LastReceiptDate == null ^ Object2.LastReceiptDate == null )
			{
				equal = false;
			}
			if (Object1.MinOrderQty != Object2.MinOrderQty)
				equal = false;
			if (Object1.MaxOrderQty != Object2.MaxOrderQty)
				equal = false;
			if ( Object1.OnOrderQty != null && Object2.OnOrderQty != null )
			{
				if (Object1.OnOrderQty != Object2.OnOrderQty)
					equal = false;
			}
			else if (Object1.OnOrderQty == null ^ Object2.OnOrderQty == null )
			{
				equal = false;
			}
			if (Object1.UnitMeasureCode != Object2.UnitMeasureCode)
				equal = false;
			if (Object1.ModifiedDate != Object2.ModifiedDate)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ProductVendorBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ProductVendorComparer GetComparer()
        {
            return new ProductVendorComparer();
        }
        */

        // Comparer delegates back to ProductVendor
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ProductVendor rhs, ProductVendorColumn which)
        {
            switch (which)
            {
            	
            	
            	case ProductVendorColumn.ProductId:
            		return this.ProductId.CompareTo(rhs.ProductId);
            		
            		                 
            	
            	
            	case ProductVendorColumn.VendorId:
            		return this.VendorId.CompareTo(rhs.VendorId);
            		
            		                 
            	
            	
            	case ProductVendorColumn.AverageLeadTime:
            		return this.AverageLeadTime.CompareTo(rhs.AverageLeadTime);
            		
            		                 
            	
            	
            	case ProductVendorColumn.StandardPrice:
            		return this.StandardPrice.CompareTo(rhs.StandardPrice);
            		
            		                 
            	
            	
            	case ProductVendorColumn.LastReceiptCost:
            		return this.LastReceiptCost.Value.CompareTo(rhs.LastReceiptCost.Value);
            		
            		                 
            	
            	
            	case ProductVendorColumn.LastReceiptDate:
            		return this.LastReceiptDate.Value.CompareTo(rhs.LastReceiptDate.Value);
            		
            		                 
            	
            	
            	case ProductVendorColumn.MinOrderQty:
            		return this.MinOrderQty.CompareTo(rhs.MinOrderQty);
            		
            		                 
            	
            	
            	case ProductVendorColumn.MaxOrderQty:
            		return this.MaxOrderQty.CompareTo(rhs.MaxOrderQty);
            		
            		                 
            	
            	
            	case ProductVendorColumn.OnOrderQty:
            		return this.OnOrderQty.Value.CompareTo(rhs.OnOrderQty.Value);
            		
            		                 
            	
            	
            	case ProductVendorColumn.UnitMeasureCode:
            		return this.UnitMeasureCode.CompareTo(rhs.UnitMeasureCode);
            		
            		                 
            	
            	
            	case ProductVendorColumn.ModifiedDate:
            		return this.ModifiedDate.CompareTo(rhs.ModifiedDate);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ProductVendorKey> Members
		
		// member variable for the EntityId property
		private ProductVendorKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ProductVendorKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ProductVendorKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ProductVendor")
					.Append("|").Append( this.ProductId.ToString())
					.Append("|").Append( this.VendorId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- ProductId: {0}{11}- VendorId: {1}{11}- AverageLeadTime: {2}{11}- StandardPrice: {3}{11}- LastReceiptCost: {4}{11}- LastReceiptDate: {5}{11}- MinOrderQty: {6}{11}- MaxOrderQty: {7}{11}- OnOrderQty: {8}{11}- UnitMeasureCode: {9}{11}- ModifiedDate: {10}{11}{13}", 
				this.ProductId,
				this.VendorId,
				this.AverageLeadTime,
				this.StandardPrice,
				(this.LastReceiptCost == null) ? string.Empty : this.LastReceiptCost.ToString(),
				(this.LastReceiptDate == null) ? string.Empty : this.LastReceiptDate.ToString(),
				this.MinOrderQty,
				this.MaxOrderQty,
				(this.OnOrderQty == null) ? string.Empty : this.OnOrderQty.ToString(),
				this.UnitMeasureCode,
				this.ModifiedDate,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ProductVendor' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ProductVendorEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ProductID : Primary key. Foreign key to Product.ProductID.
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ProductVendor"</remarks>
		public System.Int32 ProductId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Int32 OriginalProductId;
		
		/// <summary>			
		/// VendorID : Primary key. Foreign key to Vendor.VendorID.
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ProductVendor"</remarks>
		public System.Int32 VendorId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Int32 OriginalVendorId;
		
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// AverageLeadTime : The average span of time (in days) between placing an order with the vendor and receiving the purchased product.
		/// </summary>
		public System.Int32 AverageLeadTime = (int)0;
		
		/// <summary>
		/// StandardPrice : The vendor's usual selling price.
		/// </summary>
		public System.Decimal StandardPrice = 0;
		
		/// <summary>
		/// LastReceiptCost : The selling price when last purchased.
		/// </summary>
		public System.Decimal? LastReceiptCost = null;
		
		/// <summary>
		/// LastReceiptDate : Date the product was last received by the vendor.
		/// </summary>
		public System.DateTime? LastReceiptDate = null;
		
		/// <summary>
		/// MinOrderQty : The maximum quantity that should be ordered.
		/// </summary>
		public System.Int32 MinOrderQty = (int)0;
		
		/// <summary>
		/// MaxOrderQty : The minimum quantity that should be ordered.
		/// </summary>
		public System.Int32 MaxOrderQty = (int)0;
		
		/// <summary>
		/// OnOrderQty : The quantity currently on order.
		/// </summary>
		public System.Int32? OnOrderQty = null;
		
		/// <summary>
		/// UnitMeasureCode : The product's unit of measure.
		/// </summary>
		public System.String UnitMeasureCode = string.Empty;
		
		/// <summary>
		/// ModifiedDate : Date and time the record was last updated.
		/// </summary>
		public System.DateTime ModifiedDate = DateTime.MinValue;
		#endregion
			
		#region Source Foreign Key Property
				
		private Product _productIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Product"/>.
		/// </summary>
		/// <value>The source Product for ProductId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Product ProductIdSource
      	{
            get { return this._productIdSource; }
            set { this._productIdSource = value; }
      	}
		private UnitMeasure _unitMeasureCodeSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="UnitMeasure"/>.
		/// </summary>
		/// <value>The source UnitMeasure for UnitMeasureCode.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual UnitMeasure UnitMeasureCodeSource
      	{
            get { return this._unitMeasureCodeSource; }
            set { this._unitMeasureCodeSource = value; }
      	}
		private Vendor _vendorIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Vendor"/>.
		/// </summary>
		/// <value>The source Vendor for VendorId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Vendor VendorIdSource
      	{
            get { return this._vendorIdSource; }
            set { this._vendorIdSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ProductVendorEntityData _tmp = new ProductVendorEntityData();
						
			_tmp.ProductId = this.ProductId;
			_tmp.OriginalProductId = this.OriginalProductId;
			_tmp.VendorId = this.VendorId;
			_tmp.OriginalVendorId = this.OriginalVendorId;
			
			_tmp.AverageLeadTime = this.AverageLeadTime;
			_tmp.StandardPrice = this.StandardPrice;
			_tmp.LastReceiptCost = this.LastReceiptCost;
			_tmp.LastReceiptDate = this.LastReceiptDate;
			_tmp.MinOrderQty = this.MinOrderQty;
			_tmp.MaxOrderQty = this.MaxOrderQty;
			_tmp.OnOrderQty = this.OnOrderQty;
			_tmp.UnitMeasureCode = this.UnitMeasureCode;
			_tmp.ModifiedDate = this.ModifiedDate;
			
			#region Source Parent Composite Entities
			if (this.ProductIdSource != null)
				_tmp.ProductIdSource = MakeCopyOf(this.ProductIdSource) as Product;
			if (this.UnitMeasureCodeSource != null)
				_tmp.UnitMeasureCodeSource = MakeCopyOf(this.UnitMeasureCodeSource) as UnitMeasure;
			if (this.VendorIdSource != null)
				_tmp.VendorIdSource = MakeCopyOf(this.VendorIdSource) as Vendor;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ProductVendorEntityData _tmp = new ProductVendorEntityData();
						
			_tmp.ProductId = this.ProductId;
			_tmp.OriginalProductId = this.OriginalProductId;
			_tmp.VendorId = this.VendorId;
			_tmp.OriginalVendorId = this.OriginalVendorId;
			
			_tmp.AverageLeadTime = this.AverageLeadTime;
			_tmp.StandardPrice = this.StandardPrice;
			_tmp.LastReceiptCost = this.LastReceiptCost;
			_tmp.LastReceiptDate = this.LastReceiptDate;
			_tmp.MinOrderQty = this.MinOrderQty;
			_tmp.MaxOrderQty = this.MaxOrderQty;
			_tmp.OnOrderQty = this.OnOrderQty;
			_tmp.UnitMeasureCode = this.UnitMeasureCode;
			_tmp.ModifiedDate = this.ModifiedDate;
			
			#region Source Parent Composite Entities
			if (this.ProductIdSource != null && existingCopies.Contains(this.ProductIdSource))
				_tmp.ProductIdSource = existingCopies[this.ProductIdSource] as Product;
			else
				_tmp.ProductIdSource = MakeCopyOf(this.ProductIdSource, existingCopies) as Product;
			if (this.UnitMeasureCodeSource != null && existingCopies.Contains(this.UnitMeasureCodeSource))
				_tmp.UnitMeasureCodeSource = existingCopies[this.UnitMeasureCodeSource] as UnitMeasure;
			else
				_tmp.UnitMeasureCodeSource = MakeCopyOf(this.UnitMeasureCodeSource, existingCopies) as UnitMeasure;
			if (this.VendorIdSource != null && existingCopies.Contains(this.VendorIdSource))
				_tmp.VendorIdSource = existingCopies[this.VendorIdSource] as Vendor;
			else
				_tmp.VendorIdSource = MakeCopyOf(this.VendorIdSource, existingCopies) as Vendor;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProductVendorColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ProductVendorColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProductVendorColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ProductVendorColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProductVendorColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ProductVendorColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ProductVendorEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ProductVendorEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProductVendorColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ProductVendorColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ProductVendorEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ProductVendorEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ProductVendorEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ProductVendor"/> object.
	/// </remarks>
	public class ProductVendorEventArgs : System.EventArgs
	{
		private ProductVendorColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ProductVendorEventArgs class.
		///</summary>
		public ProductVendorEventArgs(ProductVendorColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ProductVendorEventArgs class.
		///</summary>
		public ProductVendorEventArgs(ProductVendorColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ProductVendorColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ProductVendorColumn" />
		public ProductVendorColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ProductVendor related events.
	///</summary>
	public delegate void ProductVendorEventHandler(object sender, ProductVendorEventArgs e);
	
	#region ProductVendorComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ProductVendorComparer : System.Collections.Generic.IComparer<ProductVendor>
	{
		ProductVendorColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ProductVendorComparer"/> class.
        /// </summary>
		public ProductVendorComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ProductVendorComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ProductVendorComparer(ProductVendorColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="ProductVendor"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="ProductVendor"/> to compare.</param>
        /// <param name="b">The second <c>ProductVendor</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ProductVendor a, ProductVendor b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ProductVendor entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ProductVendor a, ProductVendor b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ProductVendorColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ProductVendorKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ProductVendor"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ProductVendorKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ProductVendorKey class.
		/// </summary>
		public ProductVendorKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ProductVendorKey class.
		/// </summary>
		public ProductVendorKey(ProductVendorBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.ProductId = entity.ProductId;
				this.VendorId = entity.VendorId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ProductVendorKey class.
		/// </summary>
		public ProductVendorKey(System.Int32 _productId, System.Int32 _vendorId)
		{
			#region Init Properties

			this.ProductId = _productId;
			this.VendorId = _vendorId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ProductVendorBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ProductVendorBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ProductId property
		private System.Int32 _productId;
		
		/// <summary>
		/// Gets or sets the ProductId property.
		/// </summary>
		public System.Int32 ProductId
		{
			get { return _productId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ProductId = value;
				
				_productId = value;
			}
		}
		
		// member variable for the VendorId property
		private System.Int32 _vendorId;
		
		/// <summary>
		/// Gets or sets the VendorId property.
		/// </summary>
		public System.Int32 VendorId
		{
			get { return _vendorId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.VendorId = value;
				
				_vendorId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ProductId = ( values["ProductId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ProductId"], typeof(System.Int32)) : (int)0;
				VendorId = ( values["VendorId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["VendorId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ProductId", ProductId);
			values.Add("VendorId", VendorId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ProductId: {0}{2}VendorId: {1}{2}",
								ProductId,
								VendorId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ProductVendorColumn Enum
	
	/// <summary>
	/// Enumerate the ProductVendor columns.
	/// </summary>
	[Serializable]
	public enum ProductVendorColumn : int
	{
		/// <summary>
		/// ProductId : Primary key. Foreign key to Product.ProductID.
		/// </summary>
		[EnumTextValue("ProductID")]
		[ColumnEnum("ProductID", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		ProductId = 1,
		/// <summary>
		/// VendorId : Primary key. Foreign key to Vendor.VendorID.
		/// </summary>
		[EnumTextValue("VendorID")]
		[ColumnEnum("VendorID", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		VendorId = 2,
		/// <summary>
		/// AverageLeadTime : The average span of time (in days) between placing an order with the vendor and receiving the purchased product.
		/// </summary>
		[EnumTextValue("AverageLeadTime")]
		[ColumnEnum("AverageLeadTime", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		AverageLeadTime = 3,
		/// <summary>
		/// StandardPrice : The vendor's usual selling price.
		/// </summary>
		[EnumTextValue("StandardPrice")]
		[ColumnEnum("StandardPrice", typeof(System.Decimal), System.Data.DbType.Currency, false, false, false)]
		StandardPrice = 4,
		/// <summary>
		/// LastReceiptCost : The selling price when last purchased.
		/// </summary>
		[EnumTextValue("LastReceiptCost")]
		[ColumnEnum("LastReceiptCost", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		LastReceiptCost = 5,
		/// <summary>
		/// LastReceiptDate : Date the product was last received by the vendor.
		/// </summary>
		[EnumTextValue("LastReceiptDate")]
		[ColumnEnum("LastReceiptDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastReceiptDate = 6,
		/// <summary>
		/// MinOrderQty : The maximum quantity that should be ordered.
		/// </summary>
		[EnumTextValue("MinOrderQty")]
		[ColumnEnum("MinOrderQty", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MinOrderQty = 7,
		/// <summary>
		/// MaxOrderQty : The minimum quantity that should be ordered.
		/// </summary>
		[EnumTextValue("MaxOrderQty")]
		[ColumnEnum("MaxOrderQty", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MaxOrderQty = 8,
		/// <summary>
		/// OnOrderQty : The quantity currently on order.
		/// </summary>
		[EnumTextValue("OnOrderQty")]
		[ColumnEnum("OnOrderQty", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		OnOrderQty = 9,
		/// <summary>
		/// UnitMeasureCode : The product's unit of measure.
		/// </summary>
		[EnumTextValue("UnitMeasureCode")]
		[ColumnEnum("UnitMeasureCode", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, false, 3)]
		UnitMeasureCode = 10,
		/// <summary>
		/// ModifiedDate : Date and time the record was last updated.
		/// </summary>
		[EnumTextValue("ModifiedDate")]
		[ColumnEnum("ModifiedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ModifiedDate = 11
	}//End enum

	#endregion ProductVendorColumn Enum

} // end namespace
