
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file PurchaseOrderHeader.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Nettiers.AdventureWorks.Entities.Validation;
#endregion

namespace Nettiers.AdventureWorks.Entities
{
	///<summary>
	/// General purchase order information. See PurchaseOrderDetail.	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class PurchaseOrderHeaderBase : EntityBase, IPurchaseOrderHeader, IEntityId<PurchaseOrderHeaderKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private PurchaseOrderHeaderEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private PurchaseOrderHeaderEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private PurchaseOrderHeaderEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<PurchaseOrderHeader> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event PurchaseOrderHeaderEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event PurchaseOrderHeaderEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="PurchaseOrderHeaderBase"/> instance.
		///</summary>
		public PurchaseOrderHeaderBase()
		{
			this.entityData = new PurchaseOrderHeaderEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="PurchaseOrderHeaderBase"/> instance.
		///</summary>
		///<param name="_revisionNumber">Incremental number to track changes to the purchase order over time.</param>
		///<param name="_status">Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete</param>
		///<param name="_employeeId">Employee who created the purchase order. Foreign key to Employee.EmployeeID.</param>
		///<param name="_vendorId">Vendor with whom the purchase order is placed. Foreign key to Vendor.VendorID.</param>
		///<param name="_shipMethodId">Shipping method. Foreign key to ShipMethod.ShipMethodID.</param>
		///<param name="_orderDate">Purchase order creation date.</param>
		///<param name="_shipDate">Estimated shipment date from the vendor.</param>
		///<param name="_subTotal">Purchase order subtotal. Computed as SUM(PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID.</param>
		///<param name="_taxAmt">Tax amount.</param>
		///<param name="_freight">Shipping cost.</param>
		///<param name="_modifiedDate">Date and time the record was last updated.</param>
		public PurchaseOrderHeaderBase(System.Byte _revisionNumber, System.Byte _status, 
			System.Int32 _employeeId, System.Int32 _vendorId, System.Int32 _shipMethodId, 
			System.DateTime _orderDate, System.DateTime? _shipDate, System.Decimal _subTotal, 
			System.Decimal _taxAmt, System.Decimal _freight, System.DateTime _modifiedDate)
		{
			this.entityData = new PurchaseOrderHeaderEntityData();
			this.backupData = null;

			this.RevisionNumber = _revisionNumber;
			this.Status = _status;
			this.EmployeeId = _employeeId;
			this.VendorId = _vendorId;
			this.ShipMethodId = _shipMethodId;
			this.OrderDate = _orderDate;
			this.ShipDate = _shipDate;
			this.SubTotal = _subTotal;
			this.TaxAmt = _taxAmt;
			this.Freight = _freight;
			this.ModifiedDate = _modifiedDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="PurchaseOrderHeader"/> instance.
		///</summary>
		///<param name="_revisionNumber">Incremental number to track changes to the purchase order over time.</param>
		///<param name="_status">Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete</param>
		///<param name="_employeeId">Employee who created the purchase order. Foreign key to Employee.EmployeeID.</param>
		///<param name="_vendorId">Vendor with whom the purchase order is placed. Foreign key to Vendor.VendorID.</param>
		///<param name="_shipMethodId">Shipping method. Foreign key to ShipMethod.ShipMethodID.</param>
		///<param name="_orderDate">Purchase order creation date.</param>
		///<param name="_shipDate">Estimated shipment date from the vendor.</param>
		///<param name="_subTotal">Purchase order subtotal. Computed as SUM(PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID.</param>
		///<param name="_taxAmt">Tax amount.</param>
		///<param name="_freight">Shipping cost.</param>
		///<param name="_modifiedDate">Date and time the record was last updated.</param>
		public static PurchaseOrderHeader CreatePurchaseOrderHeader(System.Byte _revisionNumber, System.Byte _status, 
			System.Int32 _employeeId, System.Int32 _vendorId, System.Int32 _shipMethodId, 
			System.DateTime _orderDate, System.DateTime? _shipDate, System.Decimal _subTotal, 
			System.Decimal _taxAmt, System.Decimal _freight, System.DateTime _modifiedDate)
		{
			PurchaseOrderHeader newPurchaseOrderHeader = new PurchaseOrderHeader();
			newPurchaseOrderHeader.RevisionNumber = _revisionNumber;
			newPurchaseOrderHeader.Status = _status;
			newPurchaseOrderHeader.EmployeeId = _employeeId;
			newPurchaseOrderHeader.VendorId = _vendorId;
			newPurchaseOrderHeader.ShipMethodId = _shipMethodId;
			newPurchaseOrderHeader.OrderDate = _orderDate;
			newPurchaseOrderHeader.ShipDate = _shipDate;
			newPurchaseOrderHeader.SubTotal = _subTotal;
			newPurchaseOrderHeader.TaxAmt = _taxAmt;
			newPurchaseOrderHeader.Freight = _freight;
			newPurchaseOrderHeader.ModifiedDate = _modifiedDate;
			return newPurchaseOrderHeader;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the PurchaseOrderId property. 
		///		Primary key.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@"Primary key."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 PurchaseOrderId
		{
			get
			{
				return this.entityData.PurchaseOrderId; 
			}
			
			set
			{
				if (this.entityData.PurchaseOrderId == value)
					return;
				
                OnPropertyChanging("PurchaseOrderId");                    
				OnColumnChanging(PurchaseOrderHeaderColumn.PurchaseOrderId, this.entityData.PurchaseOrderId);
				this.entityData.PurchaseOrderId = value;
				this.EntityId.PurchaseOrderId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PurchaseOrderHeaderColumn.PurchaseOrderId, this.entityData.PurchaseOrderId);
				OnPropertyChanged("PurchaseOrderId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RevisionNumber property. 
		///		Incremental number to track changes to the purchase order over time.
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Incremental number to track changes to the purchase order over time."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Byte RevisionNumber
		{
			get
			{
				return this.entityData.RevisionNumber; 
			}
			
			set
			{
				if (this.entityData.RevisionNumber == value)
					return;
				
                OnPropertyChanging("RevisionNumber");                    
				OnColumnChanging(PurchaseOrderHeaderColumn.RevisionNumber, this.entityData.RevisionNumber);
				this.entityData.RevisionNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PurchaseOrderHeaderColumn.RevisionNumber, this.entityData.RevisionNumber);
				OnPropertyChanged("RevisionNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Byte Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
				
                OnPropertyChanging("Status");                    
				OnColumnChanging(PurchaseOrderHeaderColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PurchaseOrderHeaderColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmployeeId property. 
		///		Employee who created the purchase order. Foreign key to Employee.EmployeeID.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Employee who created the purchase order. Foreign key to Employee.EmployeeID."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 EmployeeId
		{
			get
			{
				return this.entityData.EmployeeId; 
			}
			
			set
			{
				if (this.entityData.EmployeeId == value)
					return;
				
                OnPropertyChanging("EmployeeId");                    
				OnColumnChanging(PurchaseOrderHeaderColumn.EmployeeId, this.entityData.EmployeeId);
				this.entityData.EmployeeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PurchaseOrderHeaderColumn.EmployeeId, this.entityData.EmployeeId);
				OnPropertyChanged("EmployeeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the VendorId property. 
		///		Vendor with whom the purchase order is placed. Foreign key to Vendor.VendorID.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Vendor with whom the purchase order is placed. Foreign key to Vendor.VendorID."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 VendorId
		{
			get
			{
				return this.entityData.VendorId; 
			}
			
			set
			{
				if (this.entityData.VendorId == value)
					return;
				
                OnPropertyChanging("VendorId");                    
				OnColumnChanging(PurchaseOrderHeaderColumn.VendorId, this.entityData.VendorId);
				this.entityData.VendorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PurchaseOrderHeaderColumn.VendorId, this.entityData.VendorId);
				OnPropertyChanged("VendorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipMethodId property. 
		///		Shipping method. Foreign key to ShipMethod.ShipMethodID.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Shipping method. Foreign key to ShipMethod.ShipMethodID."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ShipMethodId
		{
			get
			{
				return this.entityData.ShipMethodId; 
			}
			
			set
			{
				if (this.entityData.ShipMethodId == value)
					return;
				
                OnPropertyChanging("ShipMethodId");                    
				OnColumnChanging(PurchaseOrderHeaderColumn.ShipMethodId, this.entityData.ShipMethodId);
				this.entityData.ShipMethodId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PurchaseOrderHeaderColumn.ShipMethodId, this.entityData.ShipMethodId);
				OnPropertyChanged("ShipMethodId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrderDate property. 
		///		Purchase order creation date.
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Purchase order creation date."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime OrderDate
		{
			get
			{
				return this.entityData.OrderDate; 
			}
			
			set
			{
				if (this.entityData.OrderDate == value)
					return;
				
                OnPropertyChanging("OrderDate");                    
				OnColumnChanging(PurchaseOrderHeaderColumn.OrderDate, this.entityData.OrderDate);
				this.entityData.OrderDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PurchaseOrderHeaderColumn.OrderDate, this.entityData.OrderDate);
				OnPropertyChanged("OrderDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipDate property. 
		///		Estimated shipment date from the vendor.
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsShipDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Estimated shipment date from the vendor."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ShipDate
		{
			get
			{
				return this.entityData.ShipDate; 
			}
			
			set
			{
				if (this.entityData.ShipDate == value)
					return;
				
                OnPropertyChanging("ShipDate");                    
				OnColumnChanging(PurchaseOrderHeaderColumn.ShipDate, this.entityData.ShipDate);
				this.entityData.ShipDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PurchaseOrderHeaderColumn.ShipDate, this.entityData.ShipDate);
				OnPropertyChanged("ShipDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SubTotal property. 
		///		Purchase order subtotal. Computed as SUM(PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID.
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Purchase order subtotal. Computed as SUM(PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SubTotal
		{
			get
			{
				return this.entityData.SubTotal; 
			}
			
			set
			{
				if (this.entityData.SubTotal == value)
					return;
				
                OnPropertyChanging("SubTotal");                    
				OnColumnChanging(PurchaseOrderHeaderColumn.SubTotal, this.entityData.SubTotal);
				this.entityData.SubTotal = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PurchaseOrderHeaderColumn.SubTotal, this.entityData.SubTotal);
				OnPropertyChanged("SubTotal");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TaxAmt property. 
		///		Tax amount.
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Tax amount."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal TaxAmt
		{
			get
			{
				return this.entityData.TaxAmt; 
			}
			
			set
			{
				if (this.entityData.TaxAmt == value)
					return;
				
                OnPropertyChanging("TaxAmt");                    
				OnColumnChanging(PurchaseOrderHeaderColumn.TaxAmt, this.entityData.TaxAmt);
				this.entityData.TaxAmt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PurchaseOrderHeaderColumn.TaxAmt, this.entityData.TaxAmt);
				OnPropertyChanged("TaxAmt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Freight property. 
		///		Shipping cost.
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Shipping cost."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal Freight
		{
			get
			{
				return this.entityData.Freight; 
			}
			
			set
			{
				if (this.entityData.Freight == value)
					return;
				
                OnPropertyChanging("Freight");                    
				OnColumnChanging(PurchaseOrderHeaderColumn.Freight, this.entityData.Freight);
				this.entityData.Freight = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PurchaseOrderHeaderColumn.Freight, this.entityData.Freight);
				OnPropertyChanged("Freight");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalDue property. 
		///		Total due to vendor. Computed as Subtotal + TaxAmt + Freight.
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Total due to vendor. Computed as Subtotal + TaxAmt + Freight."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal TotalDue
		{
			get
			{
				return this.entityData.TotalDue; 
			}
			
			set
			{
				if (this.entityData.TotalDue == value)
					return;
				
                OnPropertyChanging("TotalDue");                    
				OnColumnChanging(PurchaseOrderHeaderColumn.TotalDue, this.entityData.TotalDue);
				this.entityData.TotalDue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PurchaseOrderHeaderColumn.TotalDue, this.entityData.TotalDue);
				OnPropertyChanged("TotalDue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModifiedDate property. 
		///		Date and time the record was last updated.
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Date and time the record was last updated."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ModifiedDate
		{
			get
			{
				return this.entityData.ModifiedDate; 
			}
			
			set
			{
				if (this.entityData.ModifiedDate == value)
					return;
				
                OnPropertyChanging("ModifiedDate");                    
				OnColumnChanging(PurchaseOrderHeaderColumn.ModifiedDate, this.entityData.ModifiedDate);
				this.entityData.ModifiedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PurchaseOrderHeaderColumn.ModifiedDate, this.entityData.ModifiedDate);
				OnPropertyChanged("ModifiedDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Employee"/>.
		/// </summary>
		/// <value>The source Employee for EmployeeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Employee EmployeeIdSource
      	{
            get { return entityData.EmployeeIdSource; }
            set { entityData.EmployeeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ShipMethod"/>.
		/// </summary>
		/// <value>The source ShipMethod for ShipMethodId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ShipMethod ShipMethodIdSource
      	{
            get { return entityData.ShipMethodIdSource; }
            set { entityData.ShipMethodIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Vendor"/>.
		/// </summary>
		/// <value>The source Vendor for VendorId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Vendor VendorIdSource
      	{
            get { return entityData.VendorIdSource; }
            set { entityData.VendorIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of PurchaseOrderDetail objects
		///	which are related to this object through the relation FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PurchaseOrderDetail> PurchaseOrderDetailCollection
		{
			get { return entityData.PurchaseOrderDetailCollection; }
			set { entityData.PurchaseOrderDetailCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "PurchaseOrderHeader"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"PurchaseOrderID", "RevisionNumber", "Status", "EmployeeID", "VendorID", "ShipMethodID", "OrderDate", "ShipDate", "SubTotal", "TaxAmt", "Freight", "TotalDue", "ModifiedDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as PurchaseOrderHeaderEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (PurchaseOrderHeader) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<PurchaseOrderHeader>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as PurchaseOrderHeader);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed PurchaseOrderHeader Entity 
		///</summary>
		protected virtual PurchaseOrderHeader Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			PurchaseOrderHeader copy = new PurchaseOrderHeader();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.PurchaseOrderId = this.PurchaseOrderId;
				copy.RevisionNumber = this.RevisionNumber;
				copy.Status = this.Status;
				copy.EmployeeId = this.EmployeeId;
				copy.VendorId = this.VendorId;
				copy.ShipMethodId = this.ShipMethodId;
				copy.OrderDate = this.OrderDate;
				copy.ShipDate = this.ShipDate;
				copy.SubTotal = this.SubTotal;
				copy.TaxAmt = this.TaxAmt;
				copy.Freight = this.Freight;
				copy.TotalDue = this.TotalDue;
				copy.ModifiedDate = this.ModifiedDate;
			
			if (this.EmployeeIdSource != null && existingCopies.Contains(this.EmployeeIdSource))
				copy.EmployeeIdSource = existingCopies[this.EmployeeIdSource] as Employee;
			else
				copy.EmployeeIdSource = MakeCopyOf(this.EmployeeIdSource, existingCopies) as Employee;
			if (this.ShipMethodIdSource != null && existingCopies.Contains(this.ShipMethodIdSource))
				copy.ShipMethodIdSource = existingCopies[this.ShipMethodIdSource] as ShipMethod;
			else
				copy.ShipMethodIdSource = MakeCopyOf(this.ShipMethodIdSource, existingCopies) as ShipMethod;
			if (this.VendorIdSource != null && existingCopies.Contains(this.VendorIdSource))
				copy.VendorIdSource = existingCopies[this.VendorIdSource] as Vendor;
			else
				copy.VendorIdSource = MakeCopyOf(this.VendorIdSource, existingCopies) as Vendor;
		
			//deep copy nested objects
			copy.PurchaseOrderDetailCollection = (TList<PurchaseOrderDetail>) MakeCopyOf(this.PurchaseOrderDetailCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed PurchaseOrderHeader Entity 
		///</summary>
		public virtual PurchaseOrderHeader Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed PurchaseOrderHeader Entity which is a deep copy of the current entity.
		///</summary>
		public virtual PurchaseOrderHeader DeepCopy()
		{
			return EntityHelper.Clone<PurchaseOrderHeader>(this as PurchaseOrderHeader);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as PurchaseOrderHeaderEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new PurchaseOrderHeaderEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as PurchaseOrderHeaderEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(PurchaseOrderHeaderColumn column)
		{
			switch(column)
			{
					case PurchaseOrderHeaderColumn.PurchaseOrderId:
					return entityData.PurchaseOrderId != _originalData.PurchaseOrderId;
					case PurchaseOrderHeaderColumn.RevisionNumber:
					return entityData.RevisionNumber != _originalData.RevisionNumber;
					case PurchaseOrderHeaderColumn.Status:
					return entityData.Status != _originalData.Status;
					case PurchaseOrderHeaderColumn.EmployeeId:
					return entityData.EmployeeId != _originalData.EmployeeId;
					case PurchaseOrderHeaderColumn.VendorId:
					return entityData.VendorId != _originalData.VendorId;
					case PurchaseOrderHeaderColumn.ShipMethodId:
					return entityData.ShipMethodId != _originalData.ShipMethodId;
					case PurchaseOrderHeaderColumn.OrderDate:
					return entityData.OrderDate != _originalData.OrderDate;
					case PurchaseOrderHeaderColumn.ShipDate:
					return entityData.ShipDate != _originalData.ShipDate;
					case PurchaseOrderHeaderColumn.SubTotal:
					return entityData.SubTotal != _originalData.SubTotal;
					case PurchaseOrderHeaderColumn.TaxAmt:
					return entityData.TaxAmt != _originalData.TaxAmt;
					case PurchaseOrderHeaderColumn.Freight:
					return entityData.Freight != _originalData.Freight;
					case PurchaseOrderHeaderColumn.TotalDue:
					return entityData.TotalDue != _originalData.TotalDue;
					case PurchaseOrderHeaderColumn.ModifiedDate:
					return entityData.ModifiedDate != _originalData.ModifiedDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< PurchaseOrderHeaderColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.PurchaseOrderId != _originalData.PurchaseOrderId;
			result = result || entityData.RevisionNumber != _originalData.RevisionNumber;
			result = result || entityData.Status != _originalData.Status;
			result = result || entityData.EmployeeId != _originalData.EmployeeId;
			result = result || entityData.VendorId != _originalData.VendorId;
			result = result || entityData.ShipMethodId != _originalData.ShipMethodId;
			result = result || entityData.OrderDate != _originalData.OrderDate;
			result = result || entityData.ShipDate != _originalData.ShipDate;
			result = result || entityData.SubTotal != _originalData.SubTotal;
			result = result || entityData.TaxAmt != _originalData.TaxAmt;
			result = result || entityData.Freight != _originalData.Freight;
			result = result || entityData.TotalDue != _originalData.TotalDue;
			result = result || entityData.ModifiedDate != _originalData.ModifiedDate;
			return result;
		}	
		
		///<summary>
		///  Returns a PurchaseOrderHeader Entity with the original data.
		///</summary>
		public PurchaseOrderHeader GetOriginalEntity()
		{
			if (_originalData != null)
				return CreatePurchaseOrderHeader(
				_originalData.RevisionNumber,
				_originalData.Status,
				_originalData.EmployeeId,
				_originalData.VendorId,
				_originalData.ShipMethodId,
				_originalData.OrderDate,
				_originalData.ShipDate,
				_originalData.SubTotal,
				_originalData.TaxAmt,
				_originalData.Freight,
				_originalData.ModifiedDate
				);
				
			return (PurchaseOrderHeader)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="PurchaseOrderHeaderBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is PurchaseOrderHeaderBase)
				return ValueEquals(this, (PurchaseOrderHeaderBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="PurchaseOrderHeaderBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.PurchaseOrderId.GetHashCode() ^ 
					this.RevisionNumber.GetHashCode() ^ 
					this.Status.GetHashCode() ^ 
					this.EmployeeId.GetHashCode() ^ 
					this.VendorId.GetHashCode() ^ 
					this.ShipMethodId.GetHashCode() ^ 
					this.OrderDate.GetHashCode() ^ 
					((this.ShipDate == null) ? string.Empty : this.ShipDate.ToString()).GetHashCode() ^ 
					this.SubTotal.GetHashCode() ^ 
					this.TaxAmt.GetHashCode() ^ 
					this.Freight.GetHashCode() ^ 
					this.TotalDue.GetHashCode() ^ 
					this.ModifiedDate.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="PurchaseOrderHeaderBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(PurchaseOrderHeaderBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="PurchaseOrderHeaderBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="PurchaseOrderHeaderBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="PurchaseOrderHeaderBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(PurchaseOrderHeaderBase Object1, PurchaseOrderHeaderBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.PurchaseOrderId != Object2.PurchaseOrderId)
				equal = false;
			if (Object1.RevisionNumber != Object2.RevisionNumber)
				equal = false;
			if (Object1.Status != Object2.Status)
				equal = false;
			if (Object1.EmployeeId != Object2.EmployeeId)
				equal = false;
			if (Object1.VendorId != Object2.VendorId)
				equal = false;
			if (Object1.ShipMethodId != Object2.ShipMethodId)
				equal = false;
			if (Object1.OrderDate != Object2.OrderDate)
				equal = false;
			if ( Object1.ShipDate != null && Object2.ShipDate != null )
			{
				if (Object1.ShipDate != Object2.ShipDate)
					equal = false;
			}
			else if (Object1.ShipDate == null ^ Object2.ShipDate == null )
			{
				equal = false;
			}
			if (Object1.SubTotal != Object2.SubTotal)
				equal = false;
			if (Object1.TaxAmt != Object2.TaxAmt)
				equal = false;
			if (Object1.Freight != Object2.Freight)
				equal = false;
			if (Object1.TotalDue != Object2.TotalDue)
				equal = false;
			if (Object1.ModifiedDate != Object2.ModifiedDate)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((PurchaseOrderHeaderBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static PurchaseOrderHeaderComparer GetComparer()
        {
            return new PurchaseOrderHeaderComparer();
        }
        */

        // Comparer delegates back to PurchaseOrderHeader
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(PurchaseOrderHeader rhs, PurchaseOrderHeaderColumn which)
        {
            switch (which)
            {
            	
            	
            	case PurchaseOrderHeaderColumn.PurchaseOrderId:
            		return this.PurchaseOrderId.CompareTo(rhs.PurchaseOrderId);
            		
            		                 
            	
            	
            	case PurchaseOrderHeaderColumn.RevisionNumber:
            		return this.RevisionNumber.CompareTo(rhs.RevisionNumber);
            		
            		                 
            	
            	
            	case PurchaseOrderHeaderColumn.Status:
            		return this.Status.CompareTo(rhs.Status);
            		
            		                 
            	
            	
            	case PurchaseOrderHeaderColumn.EmployeeId:
            		return this.EmployeeId.CompareTo(rhs.EmployeeId);
            		
            		                 
            	
            	
            	case PurchaseOrderHeaderColumn.VendorId:
            		return this.VendorId.CompareTo(rhs.VendorId);
            		
            		                 
            	
            	
            	case PurchaseOrderHeaderColumn.ShipMethodId:
            		return this.ShipMethodId.CompareTo(rhs.ShipMethodId);
            		
            		                 
            	
            	
            	case PurchaseOrderHeaderColumn.OrderDate:
            		return this.OrderDate.CompareTo(rhs.OrderDate);
            		
            		                 
            	
            	
            	case PurchaseOrderHeaderColumn.ShipDate:
            		return this.ShipDate.Value.CompareTo(rhs.ShipDate.Value);
            		
            		                 
            	
            	
            	case PurchaseOrderHeaderColumn.SubTotal:
            		return this.SubTotal.CompareTo(rhs.SubTotal);
            		
            		                 
            	
            	
            	case PurchaseOrderHeaderColumn.TaxAmt:
            		return this.TaxAmt.CompareTo(rhs.TaxAmt);
            		
            		                 
            	
            	
            	case PurchaseOrderHeaderColumn.Freight:
            		return this.Freight.CompareTo(rhs.Freight);
            		
            		                 
            	
            	
            	case PurchaseOrderHeaderColumn.TotalDue:
            		return this.TotalDue.CompareTo(rhs.TotalDue);
            		
            		                 
            	
            	
            	case PurchaseOrderHeaderColumn.ModifiedDate:
            		return this.ModifiedDate.CompareTo(rhs.ModifiedDate);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<PurchaseOrderHeaderKey> Members
		
		// member variable for the EntityId property
		private PurchaseOrderHeaderKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual PurchaseOrderHeaderKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new PurchaseOrderHeaderKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("PurchaseOrderHeader")
					.Append("|").Append( this.PurchaseOrderId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{14}{13}- PurchaseOrderId: {0}{13}- RevisionNumber: {1}{13}- Status: {2}{13}- EmployeeId: {3}{13}- VendorId: {4}{13}- ShipMethodId: {5}{13}- OrderDate: {6}{13}- ShipDate: {7}{13}- SubTotal: {8}{13}- TaxAmt: {9}{13}- Freight: {10}{13}- TotalDue: {11}{13}- ModifiedDate: {12}{13}{15}", 
				this.PurchaseOrderId,
				this.RevisionNumber,
				this.Status,
				this.EmployeeId,
				this.VendorId,
				this.ShipMethodId,
				this.OrderDate,
				(this.ShipDate == null) ? string.Empty : this.ShipDate.ToString(),
				this.SubTotal,
				this.TaxAmt,
				this.Freight,
				this.TotalDue,
				this.ModifiedDate,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'PurchaseOrderHeader' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class PurchaseOrderHeaderEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// PurchaseOrderID : Primary key.
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "PurchaseOrderHeader"</remarks>
		public System.Int32 PurchaseOrderId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// RevisionNumber : Incremental number to track changes to the purchase order over time.
		/// </summary>
		public System.Byte RevisionNumber = (byte)0;
		
		/// <summary>
		/// Status : Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete
		/// </summary>
		public System.Byte Status = (byte)0;
		
		/// <summary>
		/// EmployeeID : Employee who created the purchase order. Foreign key to Employee.EmployeeID.
		/// </summary>
		public System.Int32 EmployeeId = (int)0;
		
		/// <summary>
		/// VendorID : Vendor with whom the purchase order is placed. Foreign key to Vendor.VendorID.
		/// </summary>
		public System.Int32 VendorId = (int)0;
		
		/// <summary>
		/// ShipMethodID : Shipping method. Foreign key to ShipMethod.ShipMethodID.
		/// </summary>
		public System.Int32 ShipMethodId = (int)0;
		
		/// <summary>
		/// OrderDate : Purchase order creation date.
		/// </summary>
		public System.DateTime OrderDate = DateTime.MinValue;
		
		/// <summary>
		/// ShipDate : Estimated shipment date from the vendor.
		/// </summary>
		public System.DateTime? ShipDate = null;
		
		/// <summary>
		/// SubTotal : Purchase order subtotal. Computed as SUM(PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID.
		/// </summary>
		public System.Decimal SubTotal = 0;
		
		/// <summary>
		/// TaxAmt : Tax amount.
		/// </summary>
		public System.Decimal TaxAmt = 0;
		
		/// <summary>
		/// Freight : Shipping cost.
		/// </summary>
		public System.Decimal Freight = 0;
		
		/// <summary>
		/// TotalDue : Total due to vendor. Computed as Subtotal + TaxAmt + Freight.
		/// </summary>
		public System.Decimal TotalDue = 0;
		
		/// <summary>
		/// ModifiedDate : Date and time the record was last updated.
		/// </summary>
		public System.DateTime ModifiedDate = DateTime.MinValue;
		#endregion
			
		#region Source Foreign Key Property
				
		private Employee _employeeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Employee"/>.
		/// </summary>
		/// <value>The source Employee for EmployeeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Employee EmployeeIdSource
      	{
            get { return this._employeeIdSource; }
            set { this._employeeIdSource = value; }
      	}
		private ShipMethod _shipMethodIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ShipMethod"/>.
		/// </summary>
		/// <value>The source ShipMethod for ShipMethodId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ShipMethod ShipMethodIdSource
      	{
            get { return this._shipMethodIdSource; }
            set { this._shipMethodIdSource = value; }
      	}
		private Vendor _vendorIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Vendor"/>.
		/// </summary>
		/// <value>The source Vendor for VendorId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Vendor VendorIdSource
      	{
            get { return this._vendorIdSource; }
            set { this._vendorIdSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region PurchaseOrderDetailCollection
		
		private TList<PurchaseOrderDetail> _purchaseOrderDetailPurchaseOrderId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _purchaseOrderDetailPurchaseOrderId
		/// </summary>
		
		public TList<PurchaseOrderDetail> PurchaseOrderDetailCollection
		{
			get
			{
				if (_purchaseOrderDetailPurchaseOrderId == null)
				{
				_purchaseOrderDetailPurchaseOrderId = new TList<PurchaseOrderDetail>();
				}
	
				return _purchaseOrderDetailPurchaseOrderId;
			}
			set { _purchaseOrderDetailPurchaseOrderId = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			PurchaseOrderHeaderEntityData _tmp = new PurchaseOrderHeaderEntityData();
						
			_tmp.PurchaseOrderId = this.PurchaseOrderId;
			
			_tmp.RevisionNumber = this.RevisionNumber;
			_tmp.Status = this.Status;
			_tmp.EmployeeId = this.EmployeeId;
			_tmp.VendorId = this.VendorId;
			_tmp.ShipMethodId = this.ShipMethodId;
			_tmp.OrderDate = this.OrderDate;
			_tmp.ShipDate = this.ShipDate;
			_tmp.SubTotal = this.SubTotal;
			_tmp.TaxAmt = this.TaxAmt;
			_tmp.Freight = this.Freight;
			_tmp.TotalDue = this.TotalDue;
			_tmp.ModifiedDate = this.ModifiedDate;
			
			#region Source Parent Composite Entities
			if (this.EmployeeIdSource != null)
				_tmp.EmployeeIdSource = MakeCopyOf(this.EmployeeIdSource) as Employee;
			if (this.ShipMethodIdSource != null)
				_tmp.ShipMethodIdSource = MakeCopyOf(this.ShipMethodIdSource) as ShipMethod;
			if (this.VendorIdSource != null)
				_tmp.VendorIdSource = MakeCopyOf(this.VendorIdSource) as Vendor;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._purchaseOrderDetailPurchaseOrderId != null)
				_tmp.PurchaseOrderDetailCollection = (TList<PurchaseOrderDetail>) MakeCopyOf(this.PurchaseOrderDetailCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			PurchaseOrderHeaderEntityData _tmp = new PurchaseOrderHeaderEntityData();
						
			_tmp.PurchaseOrderId = this.PurchaseOrderId;
			
			_tmp.RevisionNumber = this.RevisionNumber;
			_tmp.Status = this.Status;
			_tmp.EmployeeId = this.EmployeeId;
			_tmp.VendorId = this.VendorId;
			_tmp.ShipMethodId = this.ShipMethodId;
			_tmp.OrderDate = this.OrderDate;
			_tmp.ShipDate = this.ShipDate;
			_tmp.SubTotal = this.SubTotal;
			_tmp.TaxAmt = this.TaxAmt;
			_tmp.Freight = this.Freight;
			_tmp.TotalDue = this.TotalDue;
			_tmp.ModifiedDate = this.ModifiedDate;
			
			#region Source Parent Composite Entities
			if (this.EmployeeIdSource != null && existingCopies.Contains(this.EmployeeIdSource))
				_tmp.EmployeeIdSource = existingCopies[this.EmployeeIdSource] as Employee;
			else
				_tmp.EmployeeIdSource = MakeCopyOf(this.EmployeeIdSource, existingCopies) as Employee;
			if (this.ShipMethodIdSource != null && existingCopies.Contains(this.ShipMethodIdSource))
				_tmp.ShipMethodIdSource = existingCopies[this.ShipMethodIdSource] as ShipMethod;
			else
				_tmp.ShipMethodIdSource = MakeCopyOf(this.ShipMethodIdSource, existingCopies) as ShipMethod;
			if (this.VendorIdSource != null && existingCopies.Contains(this.VendorIdSource))
				_tmp.VendorIdSource = existingCopies[this.VendorIdSource] as Vendor;
			else
				_tmp.VendorIdSource = MakeCopyOf(this.VendorIdSource, existingCopies) as Vendor;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.PurchaseOrderDetailCollection = (TList<PurchaseOrderDetail>) MakeCopyOf(this.PurchaseOrderDetailCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PurchaseOrderHeaderColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(PurchaseOrderHeaderColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PurchaseOrderHeaderColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(PurchaseOrderHeaderColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PurchaseOrderHeaderColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(PurchaseOrderHeaderColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				PurchaseOrderHeaderEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new PurchaseOrderHeaderEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PurchaseOrderHeaderColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(PurchaseOrderHeaderColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				PurchaseOrderHeaderEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new PurchaseOrderHeaderEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region PurchaseOrderHeaderEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="PurchaseOrderHeader"/> object.
	/// </remarks>
	public class PurchaseOrderHeaderEventArgs : System.EventArgs
	{
		private PurchaseOrderHeaderColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the PurchaseOrderHeaderEventArgs class.
		///</summary>
		public PurchaseOrderHeaderEventArgs(PurchaseOrderHeaderColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the PurchaseOrderHeaderEventArgs class.
		///</summary>
		public PurchaseOrderHeaderEventArgs(PurchaseOrderHeaderColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The PurchaseOrderHeaderColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="PurchaseOrderHeaderColumn" />
		public PurchaseOrderHeaderColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all PurchaseOrderHeader related events.
	///</summary>
	public delegate void PurchaseOrderHeaderEventHandler(object sender, PurchaseOrderHeaderEventArgs e);
	
	#region PurchaseOrderHeaderComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class PurchaseOrderHeaderComparer : System.Collections.Generic.IComparer<PurchaseOrderHeader>
	{
		PurchaseOrderHeaderColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:PurchaseOrderHeaderComparer"/> class.
        /// </summary>
		public PurchaseOrderHeaderComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:PurchaseOrderHeaderComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public PurchaseOrderHeaderComparer(PurchaseOrderHeaderColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="PurchaseOrderHeader"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="PurchaseOrderHeader"/> to compare.</param>
        /// <param name="b">The second <c>PurchaseOrderHeader</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(PurchaseOrderHeader a, PurchaseOrderHeader b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(PurchaseOrderHeader entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(PurchaseOrderHeader a, PurchaseOrderHeader b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public PurchaseOrderHeaderColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region PurchaseOrderHeaderKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="PurchaseOrderHeader"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class PurchaseOrderHeaderKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the PurchaseOrderHeaderKey class.
		/// </summary>
		public PurchaseOrderHeaderKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the PurchaseOrderHeaderKey class.
		/// </summary>
		public PurchaseOrderHeaderKey(PurchaseOrderHeaderBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.PurchaseOrderId = entity.PurchaseOrderId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the PurchaseOrderHeaderKey class.
		/// </summary>
		public PurchaseOrderHeaderKey(System.Int32 _purchaseOrderId)
		{
			#region Init Properties

			this.PurchaseOrderId = _purchaseOrderId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private PurchaseOrderHeaderBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public PurchaseOrderHeaderBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the PurchaseOrderId property
		private System.Int32 _purchaseOrderId;
		
		/// <summary>
		/// Gets or sets the PurchaseOrderId property.
		/// </summary>
		public System.Int32 PurchaseOrderId
		{
			get { return _purchaseOrderId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.PurchaseOrderId = value;
				
				_purchaseOrderId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				PurchaseOrderId = ( values["PurchaseOrderId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["PurchaseOrderId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("PurchaseOrderId", PurchaseOrderId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("PurchaseOrderId: {0}{1}",
								PurchaseOrderId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region PurchaseOrderHeaderColumn Enum
	
	/// <summary>
	/// Enumerate the PurchaseOrderHeader columns.
	/// </summary>
	[Serializable]
	public enum PurchaseOrderHeaderColumn : int
	{
		/// <summary>
		/// PurchaseOrderId : Primary key.
		/// </summary>
		[EnumTextValue("PurchaseOrderID")]
		[ColumnEnum("PurchaseOrderID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		PurchaseOrderId = 1,
		/// <summary>
		/// RevisionNumber : Incremental number to track changes to the purchase order over time.
		/// </summary>
		[EnumTextValue("RevisionNumber")]
		[ColumnEnum("RevisionNumber", typeof(System.Byte), System.Data.DbType.Byte, false, false, false)]
		RevisionNumber = 2,
		/// <summary>
		/// Status : Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(System.Byte), System.Data.DbType.Byte, false, false, false)]
		Status = 3,
		/// <summary>
		/// EmployeeId : Employee who created the purchase order. Foreign key to Employee.EmployeeID.
		/// </summary>
		[EnumTextValue("EmployeeID")]
		[ColumnEnum("EmployeeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		EmployeeId = 4,
		/// <summary>
		/// VendorId : Vendor with whom the purchase order is placed. Foreign key to Vendor.VendorID.
		/// </summary>
		[EnumTextValue("VendorID")]
		[ColumnEnum("VendorID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		VendorId = 5,
		/// <summary>
		/// ShipMethodId : Shipping method. Foreign key to ShipMethod.ShipMethodID.
		/// </summary>
		[EnumTextValue("ShipMethodID")]
		[ColumnEnum("ShipMethodID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ShipMethodId = 6,
		/// <summary>
		/// OrderDate : Purchase order creation date.
		/// </summary>
		[EnumTextValue("OrderDate")]
		[ColumnEnum("OrderDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		OrderDate = 7,
		/// <summary>
		/// ShipDate : Estimated shipment date from the vendor.
		/// </summary>
		[EnumTextValue("ShipDate")]
		[ColumnEnum("ShipDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ShipDate = 8,
		/// <summary>
		/// SubTotal : Purchase order subtotal. Computed as SUM(PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID.
		/// </summary>
		[EnumTextValue("SubTotal")]
		[ColumnEnum("SubTotal", typeof(System.Decimal), System.Data.DbType.Currency, false, false, false)]
		SubTotal = 9,
		/// <summary>
		/// TaxAmt : Tax amount.
		/// </summary>
		[EnumTextValue("TaxAmt")]
		[ColumnEnum("TaxAmt", typeof(System.Decimal), System.Data.DbType.Currency, false, false, false)]
		TaxAmt = 10,
		/// <summary>
		/// Freight : Shipping cost.
		/// </summary>
		[EnumTextValue("Freight")]
		[ColumnEnum("Freight", typeof(System.Decimal), System.Data.DbType.Currency, false, false, false)]
		Freight = 11,
		/// <summary>
		/// TotalDue : Total due to vendor. Computed as Subtotal + TaxAmt + Freight.
		/// </summary>
		[EnumTextValue("TotalDue")]
		[ColumnEnum("TotalDue", typeof(System.Decimal), System.Data.DbType.Currency, false, false, false)]
		TotalDue = 12,
		/// <summary>
		/// ModifiedDate : Date and time the record was last updated.
		/// </summary>
		[EnumTextValue("ModifiedDate")]
		[ColumnEnum("ModifiedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ModifiedDate = 13
	}//End enum

	#endregion PurchaseOrderHeaderColumn Enum

} // end namespace
