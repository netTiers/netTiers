

/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SalesOrderHeaderTest.cs instead.
*/

#region Using directives

using System;
using System.Xml;
using System.Xml.Serialization;
using NUnit.Framework;
using Nettiers.AdventureWorks.Entities;
using Nettiers.AdventureWorks.Data;
using Nettiers.AdventureWorks.Data.Bases;

#endregion

namespace Nettiers.AdventureWorks.UnitTests
{
    /// <summary>
    /// Provides tests for the and <see cref="SalesOrderHeader"/> objects (entity, collection and repository).
    /// </summary>
   public partial class SalesOrderHeaderTest
    {
    	// the SalesOrderHeader instance used to test the repository.
		protected SalesOrderHeader mock;
		
		// the TList<SalesOrderHeader> instance used to test the repository.
		protected TList<SalesOrderHeader> mockCollection;
		
		protected static TransactionManager CreateTransaction()
		{
			TransactionManager transactionManager = null;
			if (DataRepository.Provider.IsTransactionSupported)
			{
				transactionManager = DataRepository.Provider.CreateTransaction();
				transactionManager.BeginTransaction(System.Data.IsolationLevel.ReadCommitted);
			}			
			return transactionManager;
		}
		       
        /// <summary>
		/// This method is used to construct the test environment prior to running the tests.
		/// </summary>        
        static public void Init_Generated()
        {		
        	System.Console.WriteLine(new String('-', 75));
			System.Console.WriteLine("-- Testing the SalesOrderHeader Entity with the {0} --", Nettiers.AdventureWorks.Data.DataRepository.Provider.Name);
			System.Console.WriteLine(new String('-', 75));
        }
    
    	/// <summary>
		/// This method is used to restore the environment after the tests are completed.
		/// </summary>
		static public void CleanUp_Generated()
        {   		
			System.Console.WriteLine("All Tests Completed");
			System.Console.WriteLine();
        }
    
    
		/// <summary>
		/// Inserts a mock SalesOrderHeader entity into the database.
		/// </summary>
		private void Step_01_Insert_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock = CreateMockInstance(tm);
				Assert.IsTrue(DataRepository.SalesOrderHeaderProvider.Insert(tm, mock), "Insert failed");
										
				System.Console.WriteLine("DataRepository.SalesOrderHeaderProvider.Insert(mock):");			
				System.Console.WriteLine(mock);			
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		
		/// <summary>
		/// Selects all SalesOrderHeader objects of the database.
		/// </summary>
		private void Step_02_SelectAll_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				//Find
				int count = -1;
				
				mockCollection = DataRepository.SalesOrderHeaderProvider.Find(tm, null, "", 0, 10, out count );
				Assert.IsTrue(count >= 0 && mockCollection != null, "Query Failed to issue Find Command.");
				
				System.Console.WriteLine("DataRepository.SalesOrderHeaderProvider.Find():");			
				System.Console.WriteLine(mockCollection);
				
				// GetPaged
				count = -1;
				
				mockCollection = DataRepository.SalesOrderHeaderProvider.GetPaged(tm, 0, 10, out count);
				Assert.IsTrue(count >= 0 && mockCollection != null, "Query Failed to issue GetPaged Command.");
				System.Console.WriteLine("#get paged count: " + count.ToString());
			}
		}
		
		
		
		
		/// <summary>
		/// Deep load all SalesOrderHeader children.
		/// </summary>
		private void Step_03_DeepLoad_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				int count = -1;
				mock =  CreateMockInstance(tm);
				mockCollection = DataRepository.SalesOrderHeaderProvider.GetPaged(tm, 0, 10, out count);
			
				DataRepository.SalesOrderHeaderProvider.DeepLoading += new EntityProviderBaseCore<SalesOrderHeader, SalesOrderHeaderKey>.DeepLoadingEventHandler(
						delegate(object sender, DeepSessionEventArgs e)
						{
							if (e.DeepSession.Count > 3)
								e.Cancel = true;
						}
					);

				if (mockCollection.Count > 0)
				{
					
					DataRepository.SalesOrderHeaderProvider.DeepLoad(tm, mockCollection[0]);
					System.Console.WriteLine("SalesOrderHeader instance correctly deep loaded at 1 level.");
									
					mockCollection.Add(mock);
					// DataRepository.SalesOrderHeaderProvider.DeepSave(tm, mockCollection);
				}
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		/// <summary>
		/// Updates a mock SalesOrderHeader entity into the database.
		/// </summary>
		private void Step_04_Update_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				SalesOrderHeader mock = CreateMockInstance(tm);
				Assert.IsTrue(DataRepository.SalesOrderHeaderProvider.Insert(tm, mock), "Insert failed");
				
				UpdateMockInstance(tm, mock);
				Assert.IsTrue(DataRepository.SalesOrderHeaderProvider.Update(tm, mock), "Update failed.");			
				
				System.Console.WriteLine("DataRepository.SalesOrderHeaderProvider.Update(mock):");			
				System.Console.WriteLine(mock);
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		
		/// <summary>
		/// Delete the mock SalesOrderHeader entity into the database.
		/// </summary>
		private void Step_05_Delete_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock =  (SalesOrderHeader)CreateMockInstance(tm);
				DataRepository.SalesOrderHeaderProvider.Insert(tm, mock);
			
				Assert.IsTrue(DataRepository.SalesOrderHeaderProvider.Delete(tm, mock), "Delete failed.");
				System.Console.WriteLine("DataRepository.SalesOrderHeaderProvider.Delete(mock):");			
				System.Console.WriteLine(mock);
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		#region Serialization tests
		
		/// <summary>
		/// Serialize the mock SalesOrderHeader entity into a temporary file.
		/// </summary>
		private void Step_06_SerializeEntity_Generated()
		{	
			using (TransactionManager tm = CreateTransaction())
			{
				mock =  CreateMockInstance(tm);
				string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_SalesOrderHeader.xml");
			
				EntityHelper.SerializeXml(mock, fileName);
				Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock not found");
					
				System.Console.WriteLine("mock correctly serialized to a temporary file.");			
			}
		}
		
		/// <summary>
		/// Deserialize the mock SalesOrderHeader entity from a temporary file.
		/// </summary>
		private void Step_07_DeserializeEntity_Generated()
		{
			string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_SalesOrderHeader.xml");
			Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock file not found to deserialize");
			
			using (System.IO.StreamReader sr = System.IO.File.OpenText(fileName))
			{
				object item = EntityHelper.DeserializeEntityXml<SalesOrderHeader>(sr.ReadToEnd());
				sr.Close();
			}
			System.IO.File.Delete(fileName);
			
			System.Console.WriteLine("mock correctly deserialized from a temporary file.");
		}
		
		/// <summary>
		/// Serialize a SalesOrderHeader collection into a temporary file.
		/// </summary>
		private void Step_08_SerializeCollection_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_SalesOrderHeaderCollection.xml");
				
				mock = CreateMockInstance(tm);
				TList<SalesOrderHeader> mockCollection = new TList<SalesOrderHeader>();
				mockCollection.Add(mock);
			
				EntityHelper.SerializeXml(mockCollection, fileName);
				
				Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock collection not found");
				System.Console.WriteLine("TList<SalesOrderHeader> correctly serialized to a temporary file.");					
			}
		}
		
		
		/// <summary>
		/// Deserialize a SalesOrderHeader collection from a temporary file.
		/// </summary>
		private void Step_09_DeserializeCollection_Generated()
		{
			string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_SalesOrderHeaderCollection.xml");
			Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock file not found to deserialize");
			
			XmlSerializer mySerializer = new XmlSerializer(typeof(TList<SalesOrderHeader>)); 
			using (System.IO.FileStream myFileStream = new System.IO.FileStream(fileName,  System.IO.FileMode.Open))
			{
				TList<SalesOrderHeader> mockCollection = (TList<SalesOrderHeader>) mySerializer.Deserialize(myFileStream);
				myFileStream.Close();
			}
			
			System.IO.File.Delete(fileName);
			System.Console.WriteLine("TList<SalesOrderHeader> correctly deserialized from a temporary file.");	
		}
		#endregion
		
		
		
		/// <summary>
		/// Check the foreign key dal methods.
		/// </summary>
		private void Step_10_FK_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				SalesOrderHeader entity = CreateMockInstance(tm);
				bool result = DataRepository.SalesOrderHeaderProvider.Insert(tm, entity);
				
				Assert.IsTrue(result, "Could Not Test FK, Insert Failed");
				
				TList<SalesOrderHeader> t0 = DataRepository.SalesOrderHeaderProvider.GetByBillToAddressId(tm, entity.BillToAddressId, 0, 10);
				TList<SalesOrderHeader> t1 = DataRepository.SalesOrderHeaderProvider.GetByShipToAddressId(tm, entity.ShipToAddressId, 0, 10);
				TList<SalesOrderHeader> t2 = DataRepository.SalesOrderHeaderProvider.GetByContactId(tm, entity.ContactId, 0, 10);
				TList<SalesOrderHeader> t3 = DataRepository.SalesOrderHeaderProvider.GetByCreditCardId(tm, entity.CreditCardId, 0, 10);
				TList<SalesOrderHeader> t4 = DataRepository.SalesOrderHeaderProvider.GetByCurrencyRateId(tm, entity.CurrencyRateId, 0, 10);
				TList<SalesOrderHeader> t7 = DataRepository.SalesOrderHeaderProvider.GetByTerritoryId(tm, entity.TerritoryId, 0, 10);
				TList<SalesOrderHeader> t8 = DataRepository.SalesOrderHeaderProvider.GetByShipMethodId(tm, entity.ShipMethodId, 0, 10);
			}
		}
		
		
		/// <summary>
		/// Check the indexes dal methods.
		/// </summary>
		private void Step_11_IX_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				SalesOrderHeader entity = CreateMockInstance(tm);
				bool result = DataRepository.SalesOrderHeaderProvider.Insert(tm, entity);
				
				Assert.IsTrue(result, "Could Not Test IX, Insert Failed");

			
				SalesOrderHeader t0 = DataRepository.SalesOrderHeaderProvider.GetByRowguid(tm, entity.Rowguid);
				SalesOrderHeader t1 = DataRepository.SalesOrderHeaderProvider.GetBySalesOrderNumber(tm, entity.SalesOrderNumber);
				TList<SalesOrderHeader> t2 = DataRepository.SalesOrderHeaderProvider.GetByCustomerId(tm, entity.CustomerId);
				TList<SalesOrderHeader> t3 = DataRepository.SalesOrderHeaderProvider.GetBySalesPersonId(tm, entity.SalesPersonId);
				SalesOrderHeader t4 = DataRepository.SalesOrderHeaderProvider.GetBySalesOrderId(tm, entity.SalesOrderId);
			}
		}
		
		/// <summary>
		/// Test methods exposed by the EntityHelper class.
		/// </summary>
		private void Step_20_TestEntityHelper_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock = CreateMockInstance(tm);
				
				SalesOrderHeader entity = mock.Copy() as SalesOrderHeader;
				entity = (SalesOrderHeader)mock.Clone();
				Assert.IsTrue(SalesOrderHeader.ValueEquals(entity, mock), "Clone is not working");
			}
		}
		
		/// <summary>
		/// Test Find using the Query class
		/// </summary>
		private void Step_30_TestFindByQuery_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				//Insert Mock Instance
				SalesOrderHeader mock = CreateMockInstance(tm);
				bool result = DataRepository.SalesOrderHeaderProvider.Insert(tm, mock);
				
				Assert.IsTrue(result, "Could Not Test FindByQuery, Insert Failed");

				SalesOrderHeaderQuery query = new SalesOrderHeaderQuery();
			
				query.AppendEquals(SalesOrderHeaderColumn.SalesOrderId, mock.SalesOrderId.ToString());
				query.AppendEquals(SalesOrderHeaderColumn.RevisionNumber, mock.RevisionNumber.ToString());
				query.AppendEquals(SalesOrderHeaderColumn.OrderDate, mock.OrderDate.ToString());
				query.AppendEquals(SalesOrderHeaderColumn.DueDate, mock.DueDate.ToString());
				if(mock.ShipDate != null)
					query.AppendEquals(SalesOrderHeaderColumn.ShipDate, mock.ShipDate.ToString());
				query.AppendEquals(SalesOrderHeaderColumn.Status, mock.Status.ToString());
				query.AppendEquals(SalesOrderHeaderColumn.OnlineOrderFlag, mock.OnlineOrderFlag.ToString());
				if(mock.PurchaseOrderNumber != null)
					query.AppendEquals(SalesOrderHeaderColumn.PurchaseOrderNumber, mock.PurchaseOrderNumber.ToString());
				if(mock.AccountNumber != null)
					query.AppendEquals(SalesOrderHeaderColumn.AccountNumber, mock.AccountNumber.ToString());
				query.AppendEquals(SalesOrderHeaderColumn.CustomerId, mock.CustomerId.ToString());
				query.AppendEquals(SalesOrderHeaderColumn.ContactId, mock.ContactId.ToString());
				if(mock.SalesPersonId != null)
					query.AppendEquals(SalesOrderHeaderColumn.SalesPersonId, mock.SalesPersonId.ToString());
				if(mock.TerritoryId != null)
					query.AppendEquals(SalesOrderHeaderColumn.TerritoryId, mock.TerritoryId.ToString());
				query.AppendEquals(SalesOrderHeaderColumn.BillToAddressId, mock.BillToAddressId.ToString());
				query.AppendEquals(SalesOrderHeaderColumn.ShipToAddressId, mock.ShipToAddressId.ToString());
				query.AppendEquals(SalesOrderHeaderColumn.ShipMethodId, mock.ShipMethodId.ToString());
				if(mock.CreditCardId != null)
					query.AppendEquals(SalesOrderHeaderColumn.CreditCardId, mock.CreditCardId.ToString());
				if(mock.CreditCardApprovalCode != null)
					query.AppendEquals(SalesOrderHeaderColumn.CreditCardApprovalCode, mock.CreditCardApprovalCode.ToString());
				if(mock.CurrencyRateId != null)
					query.AppendEquals(SalesOrderHeaderColumn.CurrencyRateId, mock.CurrencyRateId.ToString());
				query.AppendEquals(SalesOrderHeaderColumn.SubTotal, mock.SubTotal.ToString());
				query.AppendEquals(SalesOrderHeaderColumn.TaxAmt, mock.TaxAmt.ToString());
				query.AppendEquals(SalesOrderHeaderColumn.Freight, mock.Freight.ToString());
				if(mock.Comment != null)
					query.AppendEquals(SalesOrderHeaderColumn.Comment, mock.Comment.ToString());
				query.AppendEquals(SalesOrderHeaderColumn.Rowguid, mock.Rowguid.ToString());
				query.AppendEquals(SalesOrderHeaderColumn.ModifiedDate, mock.ModifiedDate.ToString());
				
				TList<SalesOrderHeader> results = DataRepository.SalesOrderHeaderProvider.Find(tm, query);
				
				Assert.IsTrue(results.Count == 1, "Find is not working correctly.  Failed to find the mock instance");
			}
		}
						
		#region Mock Instance
		///<summary>
		///  Returns a Typed SalesOrderHeader Entity with mock values.
		///</summary>
		static public SalesOrderHeader CreateMockInstance_Generated(TransactionManager tm)
		{		
			SalesOrderHeader mock = new SalesOrderHeader();
						
			mock.RevisionNumber = TestUtility.Instance.RandomByte();
			mock.OrderDate = TestUtility.Instance.RandomDateTime();
			mock.DueDate = TestUtility.Instance.RandomDateTime();
			mock.ShipDate = TestUtility.Instance.RandomDateTime();
			mock.Status = TestUtility.Instance.RandomByte();
			mock.OnlineOrderFlag = TestUtility.Instance.RandomBoolean();
			mock.PurchaseOrderNumber = TestUtility.Instance.RandomString(11, false);;
			mock.AccountNumber = TestUtility.Instance.RandomString(6, false);;
			mock.CreditCardApprovalCode = TestUtility.Instance.RandomString(6, false);;
			mock.SubTotal = TestUtility.Instance.RandomShort();
			mock.TaxAmt = TestUtility.Instance.RandomShort();
			mock.Freight = TestUtility.Instance.RandomShort();
			mock.Comment = TestUtility.Instance.RandomString(63, false);;
			mock.ModifiedDate = TestUtility.Instance.RandomDateTime();
			
			int count0 = 0;
			TList<Address> _collection0 = DataRepository.AddressProvider.GetPaged(tm, 0, 10, out count0);
			//_collection0.Shuffle();
			if (_collection0.Count > 0)
			{
				mock.BillToAddressId = _collection0[0].AddressId;
						
			}
			int count1 = 0;
			TList<Address> _collection1 = DataRepository.AddressProvider.GetPaged(tm, 0, 10, out count1);
			//_collection1.Shuffle();
			if (_collection1.Count > 0)
			{
				mock.ShipToAddressId = _collection1[0].AddressId;
						
			}
			int count2 = 0;
			TList<Contact> _collection2 = DataRepository.ContactProvider.GetPaged(tm, 0, 10, out count2);
			//_collection2.Shuffle();
			if (_collection2.Count > 0)
			{
				mock.ContactId = _collection2[0].ContactId;
						
			}
			int count3 = 0;
			TList<CreditCard> _collection3 = DataRepository.CreditCardProvider.GetPaged(tm, 0, 10, out count3);
			//_collection3.Shuffle();
			if (_collection3.Count > 0)
			{
				mock.CreditCardId = _collection3[0].CreditCardId;
						
			}
			int count4 = 0;
			TList<CurrencyRate> _collection4 = DataRepository.CurrencyRateProvider.GetPaged(tm, 0, 10, out count4);
			//_collection4.Shuffle();
			if (_collection4.Count > 0)
			{
				mock.CurrencyRateId = _collection4[0].CurrencyRateId;
						
			}
			int count5 = 0;
			TList<Customer> _collection5 = DataRepository.CustomerProvider.GetPaged(tm, 0, 10, out count5);
			//_collection5.Shuffle();
			if (_collection5.Count > 0)
			{
				mock.CustomerId = _collection5[0].CustomerId;
						
			}
			int count6 = 0;
			TList<SalesPerson> _collection6 = DataRepository.SalesPersonProvider.GetPaged(tm, 0, 10, out count6);
			//_collection6.Shuffle();
			if (_collection6.Count > 0)
			{
				mock.SalesPersonId = _collection6[0].SalesPersonId;
						
			}
			int count7 = 0;
			TList<SalesTerritory> _collection7 = DataRepository.SalesTerritoryProvider.GetPaged(tm, 0, 10, out count7);
			//_collection7.Shuffle();
			if (_collection7.Count > 0)
			{
				mock.TerritoryId = _collection7[0].TerritoryId;
						
			}
			int count8 = 0;
			TList<ShipMethod> _collection8 = DataRepository.ShipMethodProvider.GetPaged(tm, 0, 10, out count8);
			//_collection8.Shuffle();
			if (_collection8.Count > 0)
			{
				mock.ShipMethodId = _collection8[0].ShipMethodId;
						
			}
		
			// create a temporary collection and add the item to it
			TList<SalesOrderHeader> tempMockCollection = new TList<SalesOrderHeader>();
			tempMockCollection.Add(mock);
			tempMockCollection.Remove(mock);
			
		
		   return (SalesOrderHeader)mock;
		}
		
		
		///<summary>
		///  Update the Typed SalesOrderHeader Entity with modified mock values.
		///</summary>
		static public void UpdateMockInstance_Generated(TransactionManager tm, SalesOrderHeader mock)
		{
			mock.RevisionNumber = TestUtility.Instance.RandomByte();
			mock.OrderDate = TestUtility.Instance.RandomDateTime();
			mock.DueDate = TestUtility.Instance.RandomDateTime();
			mock.ShipDate = TestUtility.Instance.RandomDateTime();
			mock.Status = TestUtility.Instance.RandomByte();
			mock.OnlineOrderFlag = TestUtility.Instance.RandomBoolean();
			mock.PurchaseOrderNumber = TestUtility.Instance.RandomString(11, false);;
			mock.AccountNumber = TestUtility.Instance.RandomString(6, false);;
			mock.CreditCardApprovalCode = TestUtility.Instance.RandomString(6, false);;
			mock.SubTotal = TestUtility.Instance.RandomShort();
			mock.TaxAmt = TestUtility.Instance.RandomShort();
			mock.Freight = TestUtility.Instance.RandomShort();
			mock.Comment = TestUtility.Instance.RandomString(63, false);;
			mock.ModifiedDate = TestUtility.Instance.RandomDateTime();
			
			int count0 = 0;
			TList<Address> _collection0 = DataRepository.AddressProvider.GetPaged(tm, 0, 10, out count0);
			//_collection0.Shuffle();
			if (_collection0.Count > 0)
			{
				mock.BillToAddressId = _collection0[0].AddressId;
			}
			int count1 = 0;
			TList<Address> _collection1 = DataRepository.AddressProvider.GetPaged(tm, 0, 10, out count1);
			//_collection1.Shuffle();
			if (_collection1.Count > 0)
			{
				mock.ShipToAddressId = _collection1[0].AddressId;
			}
			int count2 = 0;
			TList<Contact> _collection2 = DataRepository.ContactProvider.GetPaged(tm, 0, 10, out count2);
			//_collection2.Shuffle();
			if (_collection2.Count > 0)
			{
				mock.ContactId = _collection2[0].ContactId;
			}
			int count3 = 0;
			TList<CreditCard> _collection3 = DataRepository.CreditCardProvider.GetPaged(tm, 0, 10, out count3);
			//_collection3.Shuffle();
			if (_collection3.Count > 0)
			{
				mock.CreditCardId = _collection3[0].CreditCardId;
			}
			int count4 = 0;
			TList<CurrencyRate> _collection4 = DataRepository.CurrencyRateProvider.GetPaged(tm, 0, 10, out count4);
			//_collection4.Shuffle();
			if (_collection4.Count > 0)
			{
				mock.CurrencyRateId = _collection4[0].CurrencyRateId;
			}
			int count5 = 0;
			TList<Customer> _collection5 = DataRepository.CustomerProvider.GetPaged(tm, 0, 10, out count5);
			//_collection5.Shuffle();
			if (_collection5.Count > 0)
			{
				mock.CustomerId = _collection5[0].CustomerId;
			}
			int count6 = 0;
			TList<SalesPerson> _collection6 = DataRepository.SalesPersonProvider.GetPaged(tm, 0, 10, out count6);
			//_collection6.Shuffle();
			if (_collection6.Count > 0)
			{
				mock.SalesPersonId = _collection6[0].SalesPersonId;
			}
			int count7 = 0;
			TList<SalesTerritory> _collection7 = DataRepository.SalesTerritoryProvider.GetPaged(tm, 0, 10, out count7);
			//_collection7.Shuffle();
			if (_collection7.Count > 0)
			{
				mock.TerritoryId = _collection7[0].TerritoryId;
			}
			int count8 = 0;
			TList<ShipMethod> _collection8 = DataRepository.ShipMethodProvider.GetPaged(tm, 0, 10, out count8);
			//_collection8.Shuffle();
			if (_collection8.Count > 0)
			{
				mock.ShipMethodId = _collection8[0].ShipMethodId;
			}
		}
		#endregion
    }
}
