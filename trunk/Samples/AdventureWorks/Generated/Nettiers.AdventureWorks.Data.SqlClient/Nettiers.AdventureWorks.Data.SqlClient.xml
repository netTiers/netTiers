<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nettiers.AdventureWorks.Data.SqlClient</name>
    </assembly>
    <members>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderRoutingProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrderRouting"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderRoutingProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderRoutingProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderRoutingProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderRoutingProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderRoutingProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int16)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_workOrderId">Primary key. Foreign key to WorkOrder.WorkOrderID.. Primary Key.</param>	
            <param name="_productId">Primary key. Foreign key to Product.ProductID.. Primary Key.</param>	
            <param name="_operationSequence">Primary key. Indicates the manufacturing process sequence.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderRoutingProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.WorkOrderRouting objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderRoutingProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.WorkOrderRouting objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderRoutingProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.WorkOrderRouting objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderRoutingProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.WorkOrderRouting objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderRoutingProviderBase.GetByLocationId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int16,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WorkOrderRouting_Location_LocationID key.
            	FK_WorkOrderRouting_Location_LocationID Description: Foreign key constraint referencing Location.LocationID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_locationId">Manufacturing location where the part is processed. Foreign key to Location.LocationID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.WorkOrderRouting objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderRoutingProviderBase.GetByWorkOrderId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WorkOrderRouting_WorkOrder_WorkOrderID key.
            	FK_WorkOrderRouting_WorkOrder_WorkOrderID Description: Foreign key constraint referencing WorkOrder.WorkOrderID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_workOrderId">Primary key. Foreign key to WorkOrder.WorkOrderID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.WorkOrderRouting objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderRoutingProviderBase.GetByProductId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_WorkOrderRouting_ProductID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Primary key. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderRoutingProviderBase.GetByWorkOrderIdProductIdOperationSequence(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int16,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_WorkOrderRouting_WorkOrderID_ProductID_OperationSequence index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_workOrderId">Primary key. Foreign key to WorkOrder.WorkOrderID.</param>
            <param name="_productId">Primary key. Foreign key to Product.ProductID.</param>
            <param name="_operationSequence">Primary key. Indicates the manufacturing process sequence.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrderRouting"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderRoutingProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.WorkOrderRouting})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.WorkOrderRouting object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderRoutingProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.WorkOrderRouting)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.WorkOrderRouting object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.WorkOrderRouting object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.WorkOrderRouting object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderRoutingProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.WorkOrderRouting)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.WorkOrderRouting object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.WorkOrderRouting object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderRoutingProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderRoutingProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderRoutingProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOffer"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProviderBase.GetByProductIdFromSpecialOfferProduct(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets SpecialOffer objects from the datasource by ProductID in the
            	SpecialOfferProduct table. Table SpecialOffer is related to table Product
            	through the (M:N) relationship defined in the SpecialOfferProduct table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of SpecialOffer objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_specialOfferId">Primary key for SpecialOffer records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SpecialOffer objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SpecialOffer objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SpecialOffer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SpecialOffer objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProviderBase.GetByRowguid(Nettiers.AdventureWorks.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_SpecialOffer_rowguid index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOffer"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProviderBase.GetBySpecialOfferId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SpecialOffer_SpecialOfferID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_specialOfferId">Primary key for SpecialOffer records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOffer"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SpecialOffer})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.SpecialOffer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.SpecialOffer)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.SpecialOffer object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.SpecialOffer object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.SpecialOffer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.SpecialOffer)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.SpecialOffer object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.SpecialOffer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryHistoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritoryHistory"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryHistoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryHistoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryHistoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryHistoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryHistoryProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.DateTime,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_salesPersonId">Primary key for SalesTerritoryHistory records.. Primary Key.</param>	
            <param name="_startDate">Date the sales representive started work in the territory.. Primary Key.</param>	
            <param name="_territoryId">Territory identification number. Foreign key to SalesTerritory.SalesTerritoryID.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryHistoryProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesTerritoryHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryHistoryProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesTerritoryHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryHistoryProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesTerritoryHistory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryHistoryProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesTerritoryHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryHistoryProviderBase.GetBySalesPersonId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SalesTerritoryHistory_SalesPerson_SalesPersonID key.
            	FK_SalesTerritoryHistory_SalesPerson_SalesPersonID Description: Foreign key constraint referencing SalesPerson.SalesPersonID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId">Primary key for SalesTerritoryHistory records.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesTerritoryHistory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryHistoryProviderBase.GetByTerritoryId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SalesTerritoryHistory_SalesTerritory_TerritoryID key.
            	FK_SalesTerritoryHistory_SalesTerritory_TerritoryID Description: Foreign key constraint referencing SalesTerritory.TerritoryID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_territoryId">Territory identification number. Foreign key to SalesTerritory.SalesTerritoryID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesTerritoryHistory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryHistoryProviderBase.GetByRowguid(Nettiers.AdventureWorks.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_SalesTerritoryHistory_rowguid index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritoryHistory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryHistoryProviderBase.GetBySalesPersonIdStartDateTerritoryId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SalesTerritoryHistory_SalesPersonID_StartDate_TerritoryID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId">Primary key for SalesTerritoryHistory records.</param>
            <param name="_startDate">Date the sales representive started work in the territory.</param>
            <param name="_territoryId">Territory identification number. Foreign key to SalesTerritory.SalesTerritoryID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritoryHistory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryHistoryProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTerritoryHistory})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.SalesTerritoryHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryHistoryProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.SalesTerritoryHistory)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.SalesTerritoryHistory object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.SalesTerritoryHistory object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.SalesTerritoryHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryHistoryProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.SalesTerritoryHistory)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.SalesTerritoryHistory object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.SalesTerritoryHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryHistoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryHistoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryHistoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductSubcategoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductSubcategory"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductSubcategoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductSubcategory"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductSubcategoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductSubcategoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductSubcategoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductSubcategoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductSubcategoryProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_productSubcategoryId">Primary key for ProductSubcategory records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductSubcategoryProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductSubcategory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductSubcategoryProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductSubcategory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductSubcategoryProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductSubcategory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductSubcategoryProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductSubcategory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductSubcategoryProviderBase.GetByProductCategoryId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductSubcategory_ProductCategory_ProductCategoryID key.
            	FK_ProductSubcategory_ProductCategory_ProductCategoryID Description: Foreign key constraint referencing ProductCategory.ProductCategoryID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productCategoryId">Product category identification number. Foreign key to ProductCategory.ProductCategoryID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductSubcategory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductSubcategoryProviderBase.GetByName(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_ProductSubcategory_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_name">Subcategory description.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductSubcategory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductSubcategoryProviderBase.GetByRowguid(Nettiers.AdventureWorks.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_ProductSubcategory_rowguid index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductSubcategory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductSubcategoryProviderBase.GetByProductSubcategoryId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ProductSubcategory_ProductSubcategoryID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productSubcategoryId">Primary key for ProductSubcategory records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductSubcategory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductSubcategoryProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductSubcategory})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductSubcategory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductSubcategoryProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductSubcategory)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.ProductSubcategory object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductSubcategory object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductSubcategory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductSubcategoryProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductSubcategory)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductSubcategory object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.ProductSubcategory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductSubcategoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductSubcategoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductSubcategoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductSubcategoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductSubcategoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductReviewProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductReview"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductReviewProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductReview"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductReviewProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductReviewProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductReviewProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductReviewProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductReviewProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_productReviewId">Primary key for ProductReview records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductReviewProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductReview objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductReviewProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductReview objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductReviewProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductReview objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductReviewProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductReview objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductReviewProviderBase.GetByProductId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductReview_Product_ProductID key.
            	FK_ProductReview_Product_ProductID Description: Foreign key constraint referencing Product.ProductID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductReview objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductReviewProviderBase.GetByProductIdReviewerName(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductReview_ProductID_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="_reviewerName">Name of the reviewer.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductReviewProviderBase.GetByProductReviewId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ProductReview_ProductReviewID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productReviewId">Primary key for ProductReview records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductReview"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductReviewProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductReview})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductReview object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductReviewProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductReview)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.ProductReview object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductReview object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductReview object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductReviewProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductReview)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductReview object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.ProductReview object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductReviewProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductReviewProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductReviewProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductReviewProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductReviewProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelIllustrationProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelIllustration"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelIllustrationProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelIllustrationProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelIllustrationProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelIllustrationProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelIllustrationProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.. Primary Key.</param>	
            <param name="_illustrationId">Primary key. Foreign key to Illustration.IllustrationID.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelIllustrationProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductModelIllustration objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelIllustrationProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductModelIllustration objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelIllustrationProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductModelIllustration objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelIllustrationProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductModelIllustration objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelIllustrationProviderBase.GetByIllustrationId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductModelIllustration_Illustration_IllustrationID key.
            	FK_ProductModelIllustration_Illustration_IllustrationID Description: Foreign key constraint referencing Illustration.IllustrationID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_illustrationId">Primary key. Foreign key to Illustration.IllustrationID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductModelIllustration objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelIllustrationProviderBase.GetByProductModelId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductModelIllustration_ProductModel_ProductModelID key.
            	FK_ProductModelIllustration_ProductModel_ProductModelID Description: Foreign key constraint referencing ProductModel.ProductModelID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductModelIllustration objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelIllustrationProviderBase.GetByProductModelIdIllustrationId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ProductModelIllustration_ProductModelID_IllustrationID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
            <param name="_illustrationId">Primary key. Foreign key to Illustration.IllustrationID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelIllustration"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelIllustrationProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModelIllustration})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductModelIllustration object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelIllustrationProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductModelIllustration)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.ProductModelIllustration object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductModelIllustration object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductModelIllustration object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelIllustrationProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductModelIllustration)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductModelIllustration object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.ProductModelIllustration object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelIllustrationProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelIllustrationProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelIllustrationProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlIndividualProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Individual"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIndividualProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlIndividualProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIndividualProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlIndividualProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIndividualProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_customerId">Unique customer identification number. Foreign key to Customer.CustomerID.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIndividualProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Individual objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIndividualProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Individual objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIndividualProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Individual objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIndividualProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Individual objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIndividualProviderBase.GetByContactId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Individual_Contact_ContactID key.
            	FK_Individual_Contact_ContactID Description: Foreign key constraint referencing Contact.ContactID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_contactId">Identifies the customer in the Contact table. Foreign key to Contact.ContactID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Individual objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIndividualProviderBase.GetByCustomerId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Individual_CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_customerId">Unique customer identification number. Foreign key to Customer.CustomerID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Individual"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIndividualProviderBase.GetByDemographics(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PXML_Individual_Demographics index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_demographics">Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIndividualProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Individual})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Individual object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIndividualProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Individual)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.Individual object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Individual object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Individual object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIndividualProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Individual)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Individual object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.Individual object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlIndividualProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlIndividualProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlIndividualProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlDocumentProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Document"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlDocumentProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Document"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDocumentProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlDocumentProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDocumentProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlDocumentProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDocumentProviderBase.GetByProductIdFromProductDocument(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Document objects from the datasource by ProductID in the
            	ProductDocument table. Table Document is related to table Product
            	through the (M:N) relationship defined in the ProductDocument table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of Document objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDocumentProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_documentId">Primary key for Document records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDocumentProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Document objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDocumentProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Document objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDocumentProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Document objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDocumentProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Document objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDocumentProviderBase.GetByFileNameRevision(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_Document_FileName_Revision index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_fileName">Directory path and file name of the document</param>
            <param name="_revision">Revision number of the document. </param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Document"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDocumentProviderBase.GetByDocumentId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Document_DocumentID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_documentId">Primary key for Document records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Document"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDocumentProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Document})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Document object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDocumentProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Document)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.Document object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Document object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Document object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDocumentProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Document)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Document object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.Document object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlDocumentProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlDocumentProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlDocumentProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDocumentProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlDocumentProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlDatabaseLogProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.DatabaseLog"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlDatabaseLogProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.DatabaseLog"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDatabaseLogProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlDatabaseLogProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDatabaseLogProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlDatabaseLogProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDatabaseLogProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_databaseLogId">Primary key for DatabaseLog records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDatabaseLogProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.DatabaseLog objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDatabaseLogProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.DatabaseLog objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDatabaseLogProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.DatabaseLog objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDatabaseLogProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.DatabaseLog objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDatabaseLogProviderBase.GetByDatabaseLogId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DatabaseLog_DatabaseLogID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_databaseLogId">Primary key for DatabaseLog records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.DatabaseLog"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDatabaseLogProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.DatabaseLog})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.DatabaseLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDatabaseLogProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.DatabaseLog)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.DatabaseLog object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.DatabaseLog object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.DatabaseLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDatabaseLogProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.DatabaseLog)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.DatabaseLog object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.DatabaseLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlDatabaseLogProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlDatabaseLogProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlDatabaseLogProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDatabaseLogProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlDatabaseLogProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlContactProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Contact"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlContactProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Contact"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlContactProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlContactProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactProviderBase.GetByCreditCardIdFromContactCreditCard(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Contact objects from the datasource by CreditCardID in the
            	ContactCreditCard table. Table Contact is related to table CreditCard
            	through the (M:N) relationship defined in the ContactCreditCard table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_creditCardId">Credit card identification number. Foreign key to CreditCard.CreditCardID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of Contact objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactProviderBase.GetByCustomerIdFromStoreContact(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Contact objects from the datasource by CustomerID in the
            	StoreContact table. Table Contact is related to table Store
            	through the (M:N) relationship defined in the StoreContact table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_customerId">Store identification number. Foreign key to Customer.CustomerID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of Contact objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactProviderBase.GetByVendorIdFromVendorContact(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Contact objects from the datasource by VendorID in the
            	VendorContact table. Table Contact is related to table Vendor
            	through the (M:N) relationship defined in the VendorContact table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_vendorId">Primary key.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of Contact objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_contactId">Primary key for Contact records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Contact objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Contact objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Contact objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Contact objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactProviderBase.GetByRowguid(Nettiers.AdventureWorks.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_Contact_rowguid index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Contact"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactProviderBase.GetByEmailAddress(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Contact_EmailAddress index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_emailAddress">E-mail address for the person.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactProviderBase.GetByContactId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Contact_ContactID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_contactId">Primary key for Contact records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Contact"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactProviderBase.GetByAdditionalContactInfo(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PXML_Contact_AddContact index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_additionalContactInfo">Additional contact information about the person stored in xml format. </param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Contact})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Contact object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Contact)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.Contact object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Contact object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Contact object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Contact)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Contact object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.Contact object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlContactProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlContactProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlContactProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlContactProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonSalesByFiscalYearsProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VSalesPersonSalesByFiscalYears objects.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonSalesByFiscalYearsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonSalesByFiscalYearsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonSalesByFiscalYearsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonSalesByFiscalYearsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonSalesByFiscalYearsProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VSalesPersonSalesByFiscalYears objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonSalesByFiscalYearsProviderBase.Get(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VSalesPersonSalesByFiscalYears objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonSalesByFiscalYearsProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VSalesPersonSalesByFiscalYears objects.</returns>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonSalesByFiscalYearsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonSalesByFiscalYearsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonSalesByFiscalYearsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelCatalogDescriptionProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VProductModelCatalogDescription objects.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelCatalogDescriptionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelCatalogDescriptionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelCatalogDescriptionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelCatalogDescriptionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelCatalogDescriptionProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VProductModelCatalogDescription objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelCatalogDescriptionProviderBase.Get(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VProductModelCatalogDescription objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelCatalogDescriptionProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VProductModelCatalogDescription objects.</returns>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelCatalogDescriptionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelCatalogDescriptionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelCatalogDescriptionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualDemographicsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.VIndividualDemographics"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualDemographicsProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VIndividualDemographics objects.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualDemographicsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualDemographicsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualDemographicsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualDemographicsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualDemographicsProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VIndividualDemographics objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualDemographicsProviderBase.Get(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VIndividualDemographics objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualDemographicsProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VIndividualDemographics objects.</returns>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualDemographicsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualDemographicsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualDemographicsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualDemographicsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualDemographicsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(Nettiers.AdventureWorks.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(Nettiers.AdventureWorks.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(Nettiers.AdventureWorks.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(Nettiers.AdventureWorks.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(Nettiers.AdventureWorks.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(Nettiers.AdventureWorks.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(Nettiers.AdventureWorks.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(Nettiers.AdventureWorks.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <see cref="T:Nettiers.AdventureWorks.Data.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SalesTerritoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlSalesTerritoryProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlSalesTerritoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.LocationProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.Location"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlLocationProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlLocationProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SalesReasonProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesReason"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlSalesReasonProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlSalesReasonProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SalesPersonQuotaHistoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlSalesPersonQuotaHistoryProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlSalesPersonQuotaHistoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SalesOrderHeaderProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlSalesOrderHeaderProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlSalesOrderHeaderProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SalesOrderHeaderSalesReasonProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlSalesOrderHeaderSalesReasonProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlSalesOrderHeaderSalesReasonProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ProductModelProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModel"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductModelProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductModelProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SalesTaxRateProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTaxRate"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlSalesTaxRateProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlSalesTaxRateProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SalesPersonProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesPerson"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlSalesPersonProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlSalesPersonProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ProductCategoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductCategory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductCategoryProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductCategoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ProductSubcategoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductSubcategory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductSubcategoryProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductSubcategoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ProductProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SalesTerritoryHistoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritoryHistory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlSalesTerritoryHistoryProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlSalesTerritoryHistoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.PurchaseOrderDetailProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderDetail"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlPurchaseOrderDetailProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlPurchaseOrderDetailProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SalesOrderDetailProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderDetail"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlSalesOrderDetailProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlSalesOrderDetailProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ProductProductPhotoProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductProductPhoto"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductProductPhotoProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductProductPhotoProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ProductReviewProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductReview"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductReviewProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductReviewProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.PurchaseOrderHeaderProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderHeader"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlPurchaseOrderHeaderProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlPurchaseOrderHeaderProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ProductVendorProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductVendor"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductVendorProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductVendorProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ScrapReasonProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.ScrapReason"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlScrapReasonProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlScrapReasonProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.UnitMeasureProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.UnitMeasure"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlUnitMeasureProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlUnitMeasureProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ShiftProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.Shift"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlShiftProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlShiftProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.TransactionHistoryArchiveProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistoryArchive"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlTransactionHistoryArchiveProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlTransactionHistoryArchiveProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.VendorProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.Vendor"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVendorProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVendorProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.AddressProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.Address"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlAddressProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlAddressProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.WorkOrderProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrder"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlWorkOrderProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlWorkOrderProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.VendorAddressProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.VendorAddress"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVendorAddressProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVendorAddressProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.TransactionHistoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlTransactionHistoryProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlTransactionHistoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.VendorContactProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.VendorContact"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVendorContactProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVendorContactProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.TimestampPkProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.TimestampPk"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlTimestampPkProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlTimestampPkProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ShoppingCartItemProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.ShoppingCartItem"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlShoppingCartItemProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlShoppingCartItemProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.TestVariantProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.TestVariant"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlTestVariantProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlTestVariantProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SpecialOfferProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOffer"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlSpecialOfferProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlSpecialOfferProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ShipMethodProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.ShipMethod"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlShipMethodProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlShipMethodProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SpecialOfferProductProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOfferProduct"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlSpecialOfferProductProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlSpecialOfferProductProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.StateProvinceProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlStateProvinceProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlStateProvinceProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.StoreProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.Store"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlStoreProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlStoreProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ProductPhotoProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductPhoto"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductPhotoProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductPhotoProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.StoreContactProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.StoreContact"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlStoreContactProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlStoreContactProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ProductModelProductDescriptionCultureProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductModelProductDescriptionCultureProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductModelProductDescriptionCultureProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.CurrencyProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.Currency"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlCurrencyProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlCurrencyProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.CustomerProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.Customer"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlCustomerProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlCustomerProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.CurrencyRateProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.CurrencyRate"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlCurrencyRateProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlCurrencyRateProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.DepartmentProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.Department"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlDepartmentProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlDepartmentProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.CustomerAddressProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.CustomerAddress"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlCustomerAddressProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlCustomerAddressProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.CultureProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.Culture"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlCultureProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlCultureProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.DatabaseLogProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.DatabaseLog"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlDatabaseLogProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlDatabaseLogProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.CreditCardProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.CreditCard"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlCreditCardProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlCreditCardProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.BillOfMaterialsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.BillOfMaterials"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlBillOfMaterialsProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlBillOfMaterialsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.CountryRegionCurrencyProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegionCurrency"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlCountryRegionCurrencyProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlCountryRegionCurrencyProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ContactProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.Contact"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlContactProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlContactProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.AwBuildVersionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.AwBuildVersion"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlAwBuildVersionProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlAwBuildVersionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.CountryRegionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegion"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlCountryRegionProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlCountryRegionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ContactCreditCardProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.ContactCreditCard"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlContactCreditCardProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlContactCreditCardProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.DocumentProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.Document"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlDocumentProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlDocumentProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ContactTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.ContactType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlContactTypeProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlContactTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.EmployeeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlEmployeeProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlEmployeeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ProductDocumentProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductDocument"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductDocumentProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductDocumentProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.EmployeeAddressProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeAddress"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlEmployeeAddressProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlEmployeeAddressProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ProductInventoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductInventory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductInventoryProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductInventoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ProductDescriptionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductDescription"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductDescriptionProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductDescriptionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ProductModelIllustrationProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelIllustration"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductModelIllustrationProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductModelIllustrationProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ProductListPriceHistoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductListPriceHistory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductListPriceHistoryProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductListPriceHistoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ProductCostHistoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductCostHistory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductCostHistoryProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlProductCostHistoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.WorkOrderRoutingProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrderRouting"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlWorkOrderRoutingProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlWorkOrderRoutingProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.NullFkeyParentProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyParent"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlNullFkeyParentProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlNullFkeyParentProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.EmployeePayHistoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeePayHistory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlEmployeePayHistoryProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlEmployeePayHistoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.NullFkeyChildProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyChild"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlNullFkeyChildProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlNullFkeyChildProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.ErrorLogProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.ErrorLog"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlErrorLogProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlErrorLogProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.EmployeeDepartmentHistoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlEmployeeDepartmentHistoryProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlEmployeeDepartmentHistoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.JobCandidateProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.JobCandidate"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlJobCandidateProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlJobCandidateProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.IllustrationProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.Illustration"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlIllustrationProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlIllustrationProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.AddressTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.AddressType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlAddressTypeProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlAddressTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.IndividualProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.Individual"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlIndividualProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlIndividualProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.VAdditionalContactInfoProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.VAdditionalContactInfo"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVAdditionalContactInfoProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVAdditionalContactInfoProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.VEmployeeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.VEmployee"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVEmployeeProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVEmployeeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.VEmployeeDepartmentProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.VEmployeeDepartment"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVEmployeeDepartmentProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVEmployeeDepartmentProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.VEmployeeDepartmentHistoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.VEmployeeDepartmentHistory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVEmployeeDepartmentHistoryProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVEmployeeDepartmentHistoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.VIndividualCustomerProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.VIndividualCustomer"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVIndividualCustomerProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVIndividualCustomerProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.VIndividualDemographicsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.VIndividualDemographics"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVIndividualDemographicsProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVIndividualDemographicsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.VJobCandidateProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.VJobCandidate"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVJobCandidateProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVJobCandidateProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.VJobCandidateEducationProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.VJobCandidateEducation"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVJobCandidateEducationProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVJobCandidateEducationProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.VJobCandidateEmploymentProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.VJobCandidateEmployment"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVJobCandidateEmploymentProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVJobCandidateEmploymentProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.VProductAndDescriptionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.VProductAndDescription"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVProductAndDescriptionProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVProductAndDescriptionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.VProductModelCatalogDescriptionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.VProductModelCatalogDescription"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVProductModelCatalogDescriptionProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVProductModelCatalogDescriptionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.VProductModelInstructionsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.VProductModelInstructions"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVProductModelInstructionsProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVProductModelInstructionsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.VSalesPersonProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.VSalesPerson"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVSalesPersonProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVSalesPersonProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.VSalesPersonSalesByFiscalYearsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.VSalesPersonSalesByFiscalYears"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVSalesPersonSalesByFiscalYearsProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVSalesPersonSalesByFiscalYearsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.VStateProvinceCountryRegionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.VStateProvinceCountryRegion"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVStateProvinceCountryRegionProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVStateProvinceCountryRegionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.VStoreWithDemographicsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.VStoreWithDemographics"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVStoreWithDemographicsProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVStoreWithDemographicsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.VVendorProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Nettiers.AdventureWorks.Entities.VVendor"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVVendorProvider">
            <summary>
            Gets the current <see cref="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNetTiersProvider.SqlVVendorProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistory"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_transactionId">Primary key for TransactionHistory records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.TransactionHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.TransactionHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.TransactionHistory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.TransactionHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryProviderBase.GetByProductId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_TransactionHistory_ProductID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryProviderBase.GetByReferenceOrderIdReferenceOrderLineId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_TransactionHistory_ReferenceOrderID_ReferenceOrderLineID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_referenceOrderId">Purchase order, sales order, or work order identification number.</param>
            <param name="_referenceOrderLineId">Line number associated with the purchase order, sales order, or work order.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryProviderBase.GetByTransactionId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_TransactionHistory_TransactionID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_transactionId">Primary key for TransactionHistory records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TransactionHistory})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.TransactionHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TransactionHistory)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.TransactionHistory object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.TransactionHistory object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.TransactionHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TransactionHistory)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.TransactionHistory object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.TransactionHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistory"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Store"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Store"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreProviderBase.GetByContactIdFromStoreContact(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Store objects from the datasource by ContactID in the
            	StoreContact table. Table Store is related to table Contact
            	through the (M:N) relationship defined in the StoreContact table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_contactId">Contact (store employee) identification number. Foreign key to Contact.ContactID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of Store objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_customerId">Primary key. Foreign key to Customer.CustomerID.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Store objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Store objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Store objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Store objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreProviderBase.GetByRowguid(Nettiers.AdventureWorks.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_Store_rowguid index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Store"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreProviderBase.GetBySalesPersonId(Nettiers.AdventureWorks.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Store_SalesPersonID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId">ID of the sales person assigned to the customer. Foreign key to SalesPerson.SalesPersonID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreProviderBase.GetByCustomerId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Store_CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_customerId">Primary key. Foreign key to Customer.CustomerID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Store"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreProviderBase.GetByDemographics(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PXML_Store_Demographics index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_demographics">Demographic informationg about the store such as the number of employees, annual sales and store type.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Store})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Store object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Store)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.Store object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Store object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Store object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Store)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Store object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.Store object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlShoppingCartItemProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ShoppingCartItem"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShoppingCartItemProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlShoppingCartItemProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShoppingCartItemProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlShoppingCartItemProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShoppingCartItemProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_shoppingCartItemId">Primary key for ShoppingCartItem records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShoppingCartItemProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ShoppingCartItem objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShoppingCartItemProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ShoppingCartItem objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShoppingCartItemProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ShoppingCartItem objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShoppingCartItemProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ShoppingCartItem objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShoppingCartItemProviderBase.GetByProductId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ShoppingCartItem_Product_ProductID key.
            	FK_ShoppingCartItem_Product_ProductID Description: Foreign key constraint referencing Product.ProductID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Product ordered. Foreign key to Product.ProductID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ShoppingCartItem objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShoppingCartItemProviderBase.GetByShoppingCartIdProductId(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ShoppingCartItem_ShoppingCartID_ProductID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_shoppingCartId">Shopping cart identification number.</param>
            <param name="_productId">Product ordered. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShoppingCartItemProviderBase.GetByShoppingCartItemId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ShoppingCartItem_ShoppingCartItemID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_shoppingCartItemId">Primary key for ShoppingCartItem records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ShoppingCartItem"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShoppingCartItemProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ShoppingCartItem})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ShoppingCartItem object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShoppingCartItemProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ShoppingCartItem)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.ShoppingCartItem object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ShoppingCartItem object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ShoppingCartItem object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShoppingCartItemProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ShoppingCartItem)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ShoppingCartItem object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.ShoppingCartItem object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlShoppingCartItemProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlShoppingCartItemProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlShoppingCartItemProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModel"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProviderBase.GetByIllustrationIdFromProductModelIllustration(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets ProductModel objects from the datasource by IllustrationID in the
            	ProductModelIllustration table. Table ProductModel is related to table Illustration
            	through the (M:N) relationship defined in the ProductModelIllustration table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_illustrationId">Primary key. Foreign key to Illustration.IllustrationID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of ProductModel objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProviderBase.GetByCultureIdFromProductModelProductDescriptionCulture(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets ProductModel objects from the datasource by CultureID in the
            	ProductModelProductDescriptionCulture table. Table ProductModel is related to table Culture
            	through the (M:N) relationship defined in the ProductModelProductDescriptionCulture table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_cultureId">Culture identification number. Foreign key to Culture.CultureID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of ProductModel objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProviderBase.GetByProductDescriptionIdFromProductModelProductDescriptionCulture(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets ProductModel objects from the datasource by ProductDescriptionID in the
            	ProductModelProductDescriptionCulture table. Table ProductModel is related to table ProductDescription
            	through the (M:N) relationship defined in the ProductModelProductDescriptionCulture table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productDescriptionId">Primary key. Foreign key to ProductDescription.ProductDescriptionID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of ProductModel objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_productModelId">Primary key for ProductModel records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductModel objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductModel objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductModel objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductModel objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProviderBase.GetByName(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_ProductModel_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_name">Product model description.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModel"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProviderBase.GetByRowguid(Nettiers.AdventureWorks.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_ProductModel_rowguid index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModel"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProviderBase.GetByProductModelId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ProductModel_ProductModelID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productModelId">Primary key for ProductModel records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModel"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProviderBase.GetByCatalogDescription(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PXML_ProductModel_CatalogDescription index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_catalogDescription">Detailed product catalog information in xml format.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProviderBase.GetByInstructions(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PXML_ProductModel_Instructions index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_instructions">Manufacturing instructions in xml format.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModel})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductModel object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductModel)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.ProductModel object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductModel object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductModel object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductModel)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductModel object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.ProductModel object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCostHistoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductCostHistory"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCostHistoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCostHistoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCostHistoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCostHistoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCostHistoryProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.DateTime)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID. Primary Key.</param>	
            <param name="_startDate">Product cost start date.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCostHistoryProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductCostHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCostHistoryProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductCostHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCostHistoryProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductCostHistory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCostHistoryProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductCostHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCostHistoryProviderBase.GetByProductId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductCostHistory_Product_ProductID key.
            	FK_ProductCostHistory_Product_ProductID Description: Foreign key constraint referencing Product.ProductID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductCostHistory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCostHistoryProviderBase.GetByProductIdStartDate(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ProductCostHistory_ProductID_StartDate index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID</param>
            <param name="_startDate">Product cost start date.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductCostHistory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCostHistoryProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductCostHistory})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductCostHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCostHistoryProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductCostHistory)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.ProductCostHistory object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductCostHistory object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductCostHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCostHistoryProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductCostHistory)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductCostHistory object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.ProductCostHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCostHistoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCostHistoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCostHistoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyChildProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyChild"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyChildProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyChild"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyChildProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyChildProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyChildProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyChildProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyChildProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_nullFkeyChildId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyChildProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.NullFkeyChild objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyChildProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.NullFkeyChild objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyChildProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.NullFkeyChild objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyChildProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.NullFkeyChild objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyChildProviderBase.GetByNullFkeyParentId(Nettiers.AdventureWorks.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_NullFKeyChild_NullFKeyParent key.
            	FK_NullFKeyChild_NullFKeyParent Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_nullFkeyParentId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.NullFkeyChild objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyChildProviderBase.GetByNullFkeyChildId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_NullFKeyChild index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_nullFkeyChildId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyChild"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyChildProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.NullFkeyChild})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.NullFkeyChild object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyChildProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.NullFkeyChild)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.NullFkeyChild object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.NullFkeyChild object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.NullFkeyChild object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyChildProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.NullFkeyChild)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.NullFkeyChild object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.NullFkeyChild object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyChildProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyChildProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyChildProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyChildProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyChildProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeProviderBase.GetByAddressIdFromEmployeeAddress(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Employee objects from the datasource by AddressID in the
            	EmployeeAddress table. Table Employee is related to table Address
            	through the (M:N) relationship defined in the EmployeeAddress table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of Employee objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_employeeId">Primary key for Employee records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Employee objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Employee objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Employee objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Employee objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeProviderBase.GetByContactId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Employee_Contact_ContactID key.
            	FK_Employee_Contact_ContactID Description: Foreign key constraint referencing Contact.ContactID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_contactId">Identifies the employee in the Contact table. Foreign key to Contact.ContactID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Employee objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeProviderBase.GetByLoginId(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_Employee_LoginID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_loginId">Network login.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeProviderBase.GetByNationalIdNumber(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_Employee_NationalIDNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_nationalIdNumber">Unique national identification number such as a social security number.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeProviderBase.GetByRowguid(Nettiers.AdventureWorks.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_Employee_rowguid index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeProviderBase.GetByManagerId(Nettiers.AdventureWorks.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Employee_ManagerID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_managerId">Manager to whom the employee is assigned. Foreign Key to Employee.M</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeProviderBase.GetByEmployeeId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Employee_EmployeeID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_employeeId">Primary key for Employee records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Employee})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Employee object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Employee)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.Employee object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Employee object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Employee object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Employee)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Employee object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.Employee object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyRateProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.CurrencyRate"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyRateProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyRateProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyRateProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyRateProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyRateProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_currencyRateId">Primary key for CurrencyRate records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyRateProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.CurrencyRate objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyRateProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.CurrencyRate objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyRateProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.CurrencyRate objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyRateProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.CurrencyRate objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyRateProviderBase.GetByFromCurrencyCode(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CurrencyRate_Currency_FromCurrencyCode key.
            	FK_CurrencyRate_Currency_FromCurrencyCode Description: Foreign key constraint referencing Currency.FromCurrencyCode.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_fromCurrencyCode">Exchange rate was converted from this currency code.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.CurrencyRate objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyRateProviderBase.GetByToCurrencyCode(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CurrencyRate_Currency_ToCurrencyCode key.
            	FK_CurrencyRate_Currency_ToCurrencyCode Description: Foreign key constraint referencing Currency.ToCurrencyCode.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_toCurrencyCode">Exchange rate was converted to this currency code.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.CurrencyRate objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyRateProviderBase.GetByCurrencyRateDateFromCurrencyCodeToCurrencyCode(Nettiers.AdventureWorks.Data.TransactionManager,System.DateTime,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_CurrencyRate_CurrencyRateDate_FromCurrencyCode_ToCurrencyCode index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_currencyRateDate">Date and time the exchange rate was obtained.</param>
            <param name="_fromCurrencyCode">Exchange rate was converted from this currency code.</param>
            <param name="_toCurrencyCode">Exchange rate was converted to this currency code.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CurrencyRate"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyRateProviderBase.GetByCurrencyRateId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CurrencyRate_CurrencyRateID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_currencyRateId">Primary key for CurrencyRate records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CurrencyRate"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyRateProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CurrencyRate})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.CurrencyRate object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyRateProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.CurrencyRate)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.CurrencyRate object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.CurrencyRate object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.CurrencyRate object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyRateProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.CurrencyRate)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.CurrencyRate object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.CurrencyRate object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyRateProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyRateProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyRateProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionCurrencyProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegionCurrency"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionCurrencyProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionCurrencyProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionCurrencyProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionCurrencyProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionCurrencyProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_countryRegionCode">ISO code for countries and regions. Foreign key to CountryRegion.CountryRegionCode.. Primary Key.</param>	
            <param name="_currencyCode">ISO standard currency code. Foreign key to Currency.CurrencyCode.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionCurrencyProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.CountryRegionCurrency objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionCurrencyProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.CountryRegionCurrency objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionCurrencyProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.CountryRegionCurrency objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionCurrencyProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.CountryRegionCurrency objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionCurrencyProviderBase.GetByCountryRegionCode(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CountryRegionCurrency_CountryRegion_CountryRegionCode key.
            	FK_CountryRegionCurrency_CountryRegion_CountryRegionCode Description: Foreign key constraint referencing CountryRegion.CountryRegionCode.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_countryRegionCode">ISO code for countries and regions. Foreign key to CountryRegion.CountryRegionCode.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.CountryRegionCurrency objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionCurrencyProviderBase.GetByCurrencyCode(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_CountryRegionCurrency_CurrencyCode index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_currencyCode">ISO standard currency code. Foreign key to Currency.CurrencyCode.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionCurrencyProviderBase.GetByCountryRegionCodeCurrencyCode(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CountryRegionCurrency_CountryRegionCode_CurrencyCode index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_countryRegionCode">ISO code for countries and regions. Foreign key to CountryRegion.CountryRegionCode.</param>
            <param name="_currencyCode">ISO standard currency code. Foreign key to Currency.CurrencyCode.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegionCurrency"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionCurrencyProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CountryRegionCurrency})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.CountryRegionCurrency object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionCurrencyProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.CountryRegionCurrency)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.CountryRegionCurrency object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.CountryRegionCurrency object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.CountryRegionCurrency object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionCurrencyProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.CountryRegionCurrency)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.CountryRegionCurrency object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.CountryRegionCurrency object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionCurrencyProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionCurrencyProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionCurrencyProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Address"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressProviderBase.GetByCustomerIdFromCustomerAddress(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Address objects from the datasource by CustomerID in the
            	CustomerAddress table. Table Address is related to table Customer
            	through the (M:N) relationship defined in the CustomerAddress table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_customerId">Primary key. Foreign key to Customer.CustomerID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of Address objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressProviderBase.GetByEmployeeIdFromEmployeeAddress(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Address objects from the datasource by EmployeeID in the
            	EmployeeAddress table. Table Address is related to table Employee
            	through the (M:N) relationship defined in the EmployeeAddress table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_employeeId">Primary key. Foreign key to Employee.EmployeeID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of Address objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressProviderBase.GetByVendorIdFromVendorAddress(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Address objects from the datasource by VendorID in the
            	VendorAddress table. Table Address is related to table Vendor
            	through the (M:N) relationship defined in the VendorAddress table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of Address objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_addressId">Primary key for Address records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Address objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Address objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Address objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Address objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressProviderBase.GetByRowguid(Nettiers.AdventureWorks.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_Address_rowguid index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Address"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressProviderBase.GetByAddressLine1AddressLine2CityStateProvinceIdPostalCode(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_addressLine1">First street address line.</param>
            <param name="_addressLine2">Second street address line.</param>
            <param name="_city">Name of the city.</param>
            <param name="_stateProvinceId">Unique identification number for the state or province. Foreign key to StateProvince table.</param>
            <param name="_postalCode">Postal code for the street address.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Address"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressProviderBase.GetByStateProvinceId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Address_StateProvinceID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_stateProvinceId">Unique identification number for the state or province. Foreign key to StateProvince table.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressProviderBase.GetByAddressId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Address_AddressID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_addressId">Primary key for Address records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Address"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Address})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Address object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Address)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.Address object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Address object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Address object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Address)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Address object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.Address object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVStoreWithDemographicsProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VStoreWithDemographics objects.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVStoreWithDemographicsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVStoreWithDemographicsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVStoreWithDemographicsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVStoreWithDemographicsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVStoreWithDemographicsProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VStoreWithDemographics objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVStoreWithDemographicsProviderBase.Get(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VStoreWithDemographics objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVStoreWithDemographicsProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VStoreWithDemographics objects.</returns>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVStoreWithDemographicsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVStoreWithDemographicsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVStoreWithDemographicsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualCustomerProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.VIndividualCustomer"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualCustomerProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VIndividualCustomer objects.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualCustomerProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualCustomerProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualCustomerProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualCustomerProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualCustomerProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VIndividualCustomer objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualCustomerProviderBase.Get(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VIndividualCustomer objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualCustomerProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VIndividualCustomer objects.</returns>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualCustomerProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualCustomerProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualCustomerProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualCustomerProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVIndividualCustomerProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderRoutingProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrderRouting"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderRoutingProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderRoutingProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlShiftProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Shift"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlShiftProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Shift"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShiftProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlShiftProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShiftProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlShiftProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShiftProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Byte)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_shiftId">Primary key for Shift records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShiftProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Shift objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShiftProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Shift objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShiftProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Shift objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShiftProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Shift objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShiftProviderBase.GetByName(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_Shift_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_name">Shift description.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Shift"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShiftProviderBase.GetByStartTimeEndTime(Nettiers.AdventureWorks.Data.TransactionManager,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_Shift_StartTime_EndTime index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_startTime">Shift start time.</param>
            <param name="_endTime">Shift end time.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Shift"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShiftProviderBase.GetByShiftId(Nettiers.AdventureWorks.Data.TransactionManager,System.Byte,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Shift_ShiftID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_shiftId">Primary key for Shift records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Shift"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShiftProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Shift})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Shift object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShiftProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Shift)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.Shift object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Shift object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Shift object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShiftProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Shift)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Shift object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.Shift object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlShiftProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlShiftProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlShiftProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShiftProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlShiftProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderSalesReasonProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderSalesReasonProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderSalesReasonProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderSalesReasonProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderSalesReasonProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderSalesReasonProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_salesOrderId">Primary key. Foreign key to SalesOrderHeader.SalesOrderID.. Primary Key.</param>	
            <param name="_salesReasonId">Primary key. Foreign key to SalesReason.SalesReasonID.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderSalesReasonProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderSalesReasonProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderSalesReasonProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderSalesReasonProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderSalesReasonProviderBase.GetBySalesOrderId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID key.
            	FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID Description: Foreign key constraint referencing SalesOrderHeader.SalesOrderID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_salesOrderId">Primary key. Foreign key to SalesOrderHeader.SalesOrderID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderSalesReasonProviderBase.GetBySalesReasonId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID key.
            	FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID Description: Foreign key constraint referencing SalesReason.SalesReasonID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_salesReasonId">Primary key. Foreign key to SalesReason.SalesReasonID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderSalesReasonProviderBase.GetBySalesOrderIdSalesReasonId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SalesOrderHeaderSalesReason_SalesOrderID_SalesReasonID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_salesOrderId">Primary key. Foreign key to SalesOrderHeader.SalesOrderID.</param>
            <param name="_salesReasonId">Primary key. Foreign key to SalesReason.SalesReasonID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderSalesReasonProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderSalesReasonProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderSalesReasonProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderSalesReasonProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderSalesReasonProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderSalesReasonProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderSalesReasonProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderSalesReasonProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderSalesReasonProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDescriptionProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductDescription"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDescriptionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDescriptionProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDescriptionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDescriptionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDescriptionProviderBase.GetByCultureIdFromProductModelProductDescriptionCulture(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets ProductDescription objects from the datasource by CultureID in the
            	ProductModelProductDescriptionCulture table. Table ProductDescription is related to table Culture
            	through the (M:N) relationship defined in the ProductModelProductDescriptionCulture table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_cultureId">Culture identification number. Foreign key to Culture.CultureID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of ProductDescription objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDescriptionProviderBase.GetByProductModelIdFromProductModelProductDescriptionCulture(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets ProductDescription objects from the datasource by ProductModelID in the
            	ProductModelProductDescriptionCulture table. Table ProductDescription is related to table ProductModel
            	through the (M:N) relationship defined in the ProductModelProductDescriptionCulture table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of ProductDescription objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDescriptionProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_productDescriptionId">Primary key for ProductDescription records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDescriptionProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductDescription objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDescriptionProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductDescription objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDescriptionProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductDescription objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDescriptionProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductDescription objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDescriptionProviderBase.GetByRowguid(Nettiers.AdventureWorks.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_ProductDescription_rowguid index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductDescription"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDescriptionProviderBase.GetByProductDescriptionId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ProductDescription_ProductDescriptionID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productDescriptionId">Primary key for ProductDescription records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductDescription"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDescriptionProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductDescription})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductDescription object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDescriptionProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductDescription)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.ProductDescription object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductDescription object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductDescription object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDescriptionProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductDescription)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductDescription object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.ProductDescription object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDescriptionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDescriptionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDescriptionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlIndividualProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Individual"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIndividualProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlIndividualProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlContactCreditCardProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ContactCreditCard"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlContactCreditCardProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ContactCreditCard"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactCreditCardProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlContactCreditCardProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactCreditCardProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlContactCreditCardProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactCreditCardProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_contactId">Customer identification number. Foreign key to Contact.ContactID.. Primary Key.</param>	
            <param name="_creditCardId">Credit card identification number. Foreign key to CreditCard.CreditCardID.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactCreditCardProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ContactCreditCard objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactCreditCardProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ContactCreditCard objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactCreditCardProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ContactCreditCard objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactCreditCardProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ContactCreditCard objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactCreditCardProviderBase.GetByContactId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ContactCreditCard_Contact_ContactID key.
            	FK_ContactCreditCard_Contact_ContactID Description: Foreign key constraint referencing Contact.ContactID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_contactId">Customer identification number. Foreign key to Contact.ContactID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ContactCreditCard objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactCreditCardProviderBase.GetByCreditCardId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ContactCreditCard_CreditCard_CreditCardID key.
            	FK_ContactCreditCard_CreditCard_CreditCardID Description: Foreign key constraint referencing CreditCard.CreditCardID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_creditCardId">Credit card identification number. Foreign key to CreditCard.CreditCardID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ContactCreditCard objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactCreditCardProviderBase.GetByContactIdCreditCardId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ContactCreditCard_ContactID_CreditCardID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_contactId">Customer identification number. Foreign key to Contact.ContactID.</param>
            <param name="_creditCardId">Credit card identification number. Foreign key to CreditCard.CreditCardID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ContactCreditCard"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactCreditCardProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ContactCreditCard})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ContactCreditCard object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactCreditCardProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ContactCreditCard)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.ContactCreditCard object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ContactCreditCard object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ContactCreditCard object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactCreditCardProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ContactCreditCard)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ContactCreditCard object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.ContactCreditCard object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlContactCreditCardProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlContactCreditCardProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlContactCreditCardProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactCreditCardProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlContactCreditCardProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VSalesPerson objects.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VSalesPerson objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonProviderBase.Get(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VSalesPerson objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VSalesPerson objects.</returns>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.VEmployee"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VEmployee objects.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VEmployee objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeProviderBase.Get(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VEmployee objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VEmployee objects.</returns>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryArchiveProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistoryArchive"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryArchiveProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryArchiveProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryArchiveProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryArchiveProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryArchiveProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_transactionId">Primary key for TransactionHistoryArchive records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryArchiveProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.TransactionHistoryArchive objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryArchiveProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.TransactionHistoryArchive objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryArchiveProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.TransactionHistoryArchive objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryArchiveProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.TransactionHistoryArchive objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryArchiveProviderBase.GetByProductId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_TransactionHistoryArchive_ProductID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryArchiveProviderBase.GetByReferenceOrderIdReferenceOrderLineId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_TransactionHistoryArchive_ReferenceOrderID_ReferenceOrderLineID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_referenceOrderId">Purchase order, sales order, or work order identification number.</param>
            <param name="_referenceOrderLineId">Line number associated with the purchase order, sales order, or work order.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryArchiveProviderBase.GetByTransactionId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_TransactionHistoryArchive_TransactionID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_transactionId">Primary key for TransactionHistoryArchive records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistoryArchive"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryArchiveProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TransactionHistoryArchive})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.TransactionHistoryArchive object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryArchiveProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TransactionHistoryArchive)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.TransactionHistoryArchive object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.TransactionHistoryArchive object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.TransactionHistoryArchive object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryArchiveProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TransactionHistoryArchive)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.TransactionHistoryArchive object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.TransactionHistoryArchive object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryArchiveProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryArchiveProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryArchiveProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProductProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOfferProduct"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProductProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOfferProduct"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProductProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProductProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProductProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProductProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProductProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_specialOfferId">Primary key for SpecialOfferProduct records.. Primary Key.</param>	
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProductProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SpecialOfferProduct objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProductProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SpecialOfferProduct objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProductProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SpecialOfferProduct objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProductProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SpecialOfferProduct objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProductProviderBase.GetBySpecialOfferId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID key.
            	FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID Description: Foreign key constraint referencing SpecialOffer.SpecialOfferID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_specialOfferId">Primary key for SpecialOfferProduct records.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SpecialOfferProduct objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProductProviderBase.GetByRowguid(Nettiers.AdventureWorks.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_SpecialOfferProduct_rowguid index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOfferProduct"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProductProviderBase.GetByProductId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SpecialOfferProduct_ProductID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProductProviderBase.GetBySpecialOfferIdProductId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SpecialOfferProduct_SpecialOfferID_ProductID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_specialOfferId">Primary key for SpecialOfferProduct records.</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOfferProduct"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProductProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SpecialOfferProduct})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.SpecialOfferProduct object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProductProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.SpecialOfferProduct)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.SpecialOfferProduct object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.SpecialOfferProduct object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.SpecialOfferProduct object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProductProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.SpecialOfferProduct)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.SpecialOfferProduct object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.SpecialOfferProduct object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProductProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProductProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProductProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProductProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProductProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlShoppingCartItemProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ShoppingCartItem"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShoppingCartItemProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlShoppingCartItemProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonQuotaHistoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonQuotaHistoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonQuotaHistoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonQuotaHistoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonQuotaHistoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonQuotaHistoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonQuotaHistoryProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.DateTime)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_salesPersonId">Sales person identification number. Foreign key to SalesPerson.SalesPersonID.. Primary Key.</param>	
            <param name="_quotaDate">Sales quota date.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonQuotaHistoryProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonQuotaHistoryProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonQuotaHistoryProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonQuotaHistoryProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonQuotaHistoryProviderBase.GetBySalesPersonId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SalesPersonQuotaHistory_SalesPerson_SalesPersonID key.
            	FK_SalesPersonQuotaHistory_SalesPerson_SalesPersonID Description: Foreign key constraint referencing SalesPerson.SalesPersonID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId">Sales person identification number. Foreign key to SalesPerson.SalesPersonID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonQuotaHistoryProviderBase.GetByRowguid(Nettiers.AdventureWorks.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_SalesPersonQuotaHistory_rowguid index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonQuotaHistoryProviderBase.GetBySalesPersonIdQuotaDate(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SalesPersonQuotaHistory_SalesPersonID_QuotaDate index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId">Sales person identification number. Foreign key to SalesPerson.SalesPersonID.</param>
            <param name="_quotaDate">Sales quota date.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonQuotaHistoryProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonQuotaHistoryProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonQuotaHistoryProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonQuotaHistoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonQuotaHistoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonQuotaHistoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonQuotaHistoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonQuotaHistoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCreditCardProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.CreditCard"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCreditCardProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.CreditCard"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCreditCardProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCreditCardProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCreditCardProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCreditCardProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCreditCardProviderBase.GetByContactIdFromContactCreditCard(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets CreditCard objects from the datasource by ContactID in the
            	ContactCreditCard table. Table CreditCard is related to table Contact
            	through the (M:N) relationship defined in the ContactCreditCard table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_contactId">Customer identification number. Foreign key to Contact.ContactID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of CreditCard objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCreditCardProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_creditCardId">Primary key for CreditCard records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCreditCardProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.CreditCard objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCreditCardProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.CreditCard objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCreditCardProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.CreditCard objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCreditCardProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.CreditCard objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCreditCardProviderBase.GetByCardNumber(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_CreditCard_CardNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_cardNumber">Credit card number.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CreditCard"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCreditCardProviderBase.GetByCreditCardId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CreditCard_CreditCardID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_creditCardId">Primary key for CreditCard records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CreditCard"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCreditCardProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CreditCard})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.CreditCard object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCreditCardProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.CreditCard)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.CreditCard object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.CreditCard object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.CreditCard object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCreditCardProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.CreditCard)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.CreditCard object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.CreditCard object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlCreditCardProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlCreditCardProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlCreditCardProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCreditCardProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCreditCardProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegion"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionProviderBase.GetByCurrencyCodeFromCountryRegionCurrency(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets CountryRegion objects from the datasource by CurrencyCode in the
            	CountryRegionCurrency table. Table CountryRegion is related to table Currency
            	through the (M:N) relationship defined in the CountryRegionCurrency table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_currencyCode">ISO standard currency code. Foreign key to Currency.CurrencyCode.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of CountryRegion objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_countryRegionCode">ISO standard code for countries and regions.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.CountryRegion objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.CountryRegion objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.CountryRegion objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.CountryRegion objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionProviderBase.GetByName(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_CountryRegion_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_name">Country or region name.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegion"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionProviderBase.GetByCountryRegionCode(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CountryRegion_CountryRegionCode index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_countryRegionCode">ISO standard code for countries and regions.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegion"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CountryRegion})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.CountryRegion object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.CountryRegion)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.CountryRegion object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.CountryRegion object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.CountryRegion object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.CountryRegion)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.CountryRegion object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.CountryRegion object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlContactTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ContactType"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlContactTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlContactTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactTypeProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_contactTypeId">Primary key for ContactType records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactTypeProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ContactType objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactTypeProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ContactType objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactTypeProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ContactType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactTypeProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ContactType objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactTypeProviderBase.GetByName(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_ContactType_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_name">Contact type description.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ContactType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactTypeProviderBase.GetByContactTypeId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ContactType_ContactTypeID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_contactTypeId">Primary key for ContactType records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ContactType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactTypeProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ContactType})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ContactType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactTypeProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ContactType)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.ContactType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ContactType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ContactType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactTypeProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ContactType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ContactType object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.ContactType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlContactTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlContactTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlContactTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Address"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVStateProvinceCountryRegionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.VStateProvinceCountryRegion"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVStateProvinceCountryRegionProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VStateProvinceCountryRegion objects.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVStateProvinceCountryRegionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVStateProvinceCountryRegionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVStateProvinceCountryRegionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVStateProvinceCountryRegionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVStateProvinceCountryRegionProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VStateProvinceCountryRegion objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVStateProvinceCountryRegionProviderBase.Get(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VStateProvinceCountryRegion objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVStateProvinceCountryRegionProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VStateProvinceCountryRegion objects.</returns>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVStateProvinceCountryRegionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVStateProvinceCountryRegionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVStateProvinceCountryRegionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVStateProvinceCountryRegionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVStateProvinceCountryRegionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonSalesByFiscalYearsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.VSalesPersonSalesByFiscalYears"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonSalesByFiscalYearsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonSalesByFiscalYearsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModel"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDocumentProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductDocument"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDocumentProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDocumentProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDocumentProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDocumentProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDocumentProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.. Primary Key.</param>	
            <param name="_documentId">Document identification number. Foreign key to Document.DocumentID.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDocumentProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductDocument objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDocumentProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductDocument objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDocumentProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductDocument objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDocumentProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductDocument objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDocumentProviderBase.GetByDocumentId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductDocument_Document_DocumentID key.
            	FK_ProductDocument_Document_DocumentID Description: Foreign key constraint referencing Document.DocumentID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_documentId">Document identification number. Foreign key to Document.DocumentID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductDocument objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDocumentProviderBase.GetByProductId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductDocument_Product_ProductID key.
            	FK_ProductDocument_Product_ProductID Description: Foreign key constraint referencing Product.ProductID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductDocument objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDocumentProviderBase.GetByProductIdDocumentId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ProductDocument_ProductID_DocumentID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="_documentId">Document identification number. Foreign key to Document.DocumentID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductDocument"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDocumentProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductDocument})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductDocument object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDocumentProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductDocument)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.ProductDocument object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductDocument object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductDocument object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDocumentProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductDocument)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductDocument object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.ProductDocument object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDocumentProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDocumentProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDocumentProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDescriptionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductDescription"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDescriptionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDescriptionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyParentProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyParent"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyParentProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyParent"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyParentProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyParentProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyParentProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyParentProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyParentProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_nullFkeyParentId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyParentProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.NullFkeyParent objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyParentProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.NullFkeyParent objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyParentProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.NullFkeyParent objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyParentProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.NullFkeyParent objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyParentProviderBase.GetByNullFkeyParentId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_NullKeyParent index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_nullFkeyParentId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyParent"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyParentProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.NullFkeyParent})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.NullFkeyParent object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyParentProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.NullFkeyParent)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.NullFkeyParent object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.NullFkeyParent object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.NullFkeyParent object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyParentProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.NullFkeyParent)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.NullFkeyParent object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.NullFkeyParent object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyParentProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyParentProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyParentProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyParentProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlNullFkeyParentProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlLocationProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Location"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlLocationProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Location"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlLocationProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlLocationProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlLocationProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlLocationProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlLocationProviderBase.GetByProductIdFromProductInventory(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Location objects from the datasource by ProductID in the
            	ProductInventory table. Table Location is related to table Product
            	through the (M:N) relationship defined in the ProductInventory table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of Location objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlLocationProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int16)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_locationId">Primary key for Location records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlLocationProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Location objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlLocationProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Location objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlLocationProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Location objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlLocationProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Location objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlLocationProviderBase.GetByName(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_Location_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_name">Location description.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Location"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlLocationProviderBase.GetByLocationId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int16,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Location_LocationID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_locationId">Primary key for Location records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Location"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlLocationProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Location})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Location object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlLocationProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Location)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.Location object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Location object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Location object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlLocationProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Location)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Location object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.Location object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlLocationProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlLocationProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlLocationProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlLocationProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlLocationProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCultureProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Culture"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCultureProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Culture"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCultureProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCultureProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCultureProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCultureProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCultureProviderBase.GetByProductDescriptionIdFromProductModelProductDescriptionCulture(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Culture objects from the datasource by ProductDescriptionID in the
            	ProductModelProductDescriptionCulture table. Table Culture is related to table ProductDescription
            	through the (M:N) relationship defined in the ProductModelProductDescriptionCulture table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productDescriptionId">Primary key. Foreign key to ProductDescription.ProductDescriptionID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of Culture objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCultureProviderBase.GetByProductModelIdFromProductModelProductDescriptionCulture(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Culture objects from the datasource by ProductModelID in the
            	ProductModelProductDescriptionCulture table. Table Culture is related to table ProductModel
            	through the (M:N) relationship defined in the ProductModelProductDescriptionCulture table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of Culture objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCultureProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_cultureId">Primary key for Culture records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCultureProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Culture objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCultureProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Culture objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCultureProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Culture objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCultureProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Culture objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCultureProviderBase.GetByName(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_Culture_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_name">Culture description.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Culture"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCultureProviderBase.GetByCultureId(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Culture_CultureID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_cultureId">Primary key for Culture records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Culture"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCultureProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Culture})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Culture object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCultureProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Culture)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.Culture object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Culture object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Culture object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCultureProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Culture)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Culture object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.Culture object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlCultureProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlCultureProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlCultureProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCultureProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCultureProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlContactTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ContactType"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlContactTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlContactTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVVendorProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VVendor objects.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVVendorProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVVendorProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVVendorProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVVendorProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVVendorProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VVendor objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVVendorProviderBase.Get(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VVendor objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVVendorProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VVendor objects.</returns>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVVendorProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVVendorProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVVendorProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEmploymentProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.VJobCandidateEmployment"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEmploymentProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VJobCandidateEmployment objects.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEmploymentProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEmploymentProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEmploymentProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEmploymentProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEmploymentProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VJobCandidateEmployment objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEmploymentProviderBase.Get(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VJobCandidateEmployment objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEmploymentProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VJobCandidateEmployment objects.</returns>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEmploymentProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEmploymentProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEmploymentProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEmploymentProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEmploymentProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlShipMethodProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ShipMethod"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShipMethodProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlShipMethodProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShipMethodProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlShipMethodProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShipMethodProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_shipMethodId">Primary key for ShipMethod records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShipMethodProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ShipMethod objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShipMethodProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ShipMethod objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShipMethodProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ShipMethod objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShipMethodProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ShipMethod objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShipMethodProviderBase.GetByName(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_ShipMethod_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_name">Shipping company name.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ShipMethod"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShipMethodProviderBase.GetByRowguid(Nettiers.AdventureWorks.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_ShipMethod_rowguid index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ShipMethod"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShipMethodProviderBase.GetByShipMethodId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ShipMethod_ShipMethodID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_shipMethodId">Primary key for ShipMethod records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ShipMethod"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShipMethodProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ShipMethod})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ShipMethod object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShipMethodProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ShipMethod)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.ShipMethod object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ShipMethod object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ShipMethod object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShipMethodProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ShipMethod)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ShipMethod object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.ShipMethod object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlShipMethodProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlShipMethodProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlShipMethodProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductPhotoProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductPhoto"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductPhotoProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductPhotoProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductPhotoProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductPhotoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductPhotoProviderBase.GetByProductIdFromProductProductPhoto(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets ProductPhoto objects from the datasource by ProductID in the
            	ProductProductPhoto table. Table ProductPhoto is related to table Product
            	through the (M:N) relationship defined in the ProductProductPhoto table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of ProductPhoto objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductPhotoProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_productPhotoId">Primary key for ProductPhoto records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductPhotoProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductPhoto objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductPhotoProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductPhoto objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductPhotoProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductPhoto objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductPhotoProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductPhoto objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductPhotoProviderBase.GetByProductPhotoId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ProductPhoto_ProductPhotoID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productPhotoId">Primary key for ProductPhoto records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductPhoto"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductPhotoProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductPhoto})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductPhoto object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductPhotoProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductPhoto)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.ProductPhoto object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductPhoto object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductPhoto object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductPhotoProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductPhoto)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductPhoto object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.ProductPhoto object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductPhotoProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductPhotoProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductPhotoProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductListPriceHistoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductListPriceHistory"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductListPriceHistoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductListPriceHistoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductListPriceHistoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductListPriceHistoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductListPriceHistoryProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.DateTime)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID. Primary Key.</param>	
            <param name="_startDate">List price start date.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductListPriceHistoryProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductListPriceHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductListPriceHistoryProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductListPriceHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductListPriceHistoryProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductListPriceHistory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductListPriceHistoryProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductListPriceHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductListPriceHistoryProviderBase.GetByProductId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductListPriceHistory_Product_ProductID key.
            	FK_ProductListPriceHistory_Product_ProductID Description: Foreign key constraint referencing Product.ProductID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductListPriceHistory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductListPriceHistoryProviderBase.GetByProductIdStartDate(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ProductListPriceHistory_ProductID_StartDate index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID</param>
            <param name="_startDate">List price start date.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductListPriceHistory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductListPriceHistoryProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductListPriceHistory})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductListPriceHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductListPriceHistoryProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductListPriceHistory)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.ProductListPriceHistory object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductListPriceHistory object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductListPriceHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductListPriceHistoryProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductListPriceHistory)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductListPriceHistory object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.ProductListPriceHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductListPriceHistoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductListPriceHistoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductListPriceHistoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDocumentProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductDocument"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDocumentProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductDocumentProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeAddressProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeAddress"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeAddressProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeAddress"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeAddressProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeAddressProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeAddressProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeAddressProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeAddressProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_employeeId">Primary key. Foreign key to Employee.EmployeeID.. Primary Key.</param>	
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeAddressProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.EmployeeAddress objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeAddressProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.EmployeeAddress objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeAddressProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.EmployeeAddress objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeAddressProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.EmployeeAddress objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeAddressProviderBase.GetByAddressId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_EmployeeAddress_Address_AddressID key.
            	FK_EmployeeAddress_Address_AddressID Description: Foreign key constraint referencing Address.AddressID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.EmployeeAddress objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeAddressProviderBase.GetByEmployeeId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_EmployeeAddress_Employee_EmployeeID key.
            	FK_EmployeeAddress_Employee_EmployeeID Description: Foreign key constraint referencing Employee.EmployeeID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_employeeId">Primary key. Foreign key to Employee.EmployeeID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.EmployeeAddress objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeAddressProviderBase.GetByRowguid(Nettiers.AdventureWorks.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_EmployeeAddress_rowguid index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeAddress"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeAddressProviderBase.GetByEmployeeIdAddressId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_EmployeeAddress_EmployeeID_AddressID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_employeeId">Primary key. Foreign key to Employee.EmployeeID.</param>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeAddress"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeAddressProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeeAddress})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.EmployeeAddress object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeAddressProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.EmployeeAddress)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.EmployeeAddress object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.EmployeeAddress object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.EmployeeAddress object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeAddressProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.EmployeeAddress)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.EmployeeAddress object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.EmployeeAddress object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeAddressProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeAddressProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeAddressProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeAddressProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeAddressProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlDepartmentProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Department"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDepartmentProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlDepartmentProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDepartmentProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlDepartmentProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDepartmentProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int16)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_departmentId">Primary key for Department records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDepartmentProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Department objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDepartmentProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Department objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDepartmentProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Department objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDepartmentProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Department objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDepartmentProviderBase.GetByName(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_Department_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_name">Name of the department.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Department"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDepartmentProviderBase.GetByDepartmentId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int16,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Department_DepartmentID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_departmentId">Primary key for Department records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Department"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDepartmentProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Department})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Department object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDepartmentProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Department)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.Department object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Department object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Department object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDepartmentProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Department)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Department object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.Department object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlDepartmentProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlDepartmentProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlDepartmentProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVStoreWithDemographicsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.VStoreWithDemographics"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVStoreWithDemographicsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVStoreWithDemographicsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelInstructionsProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VProductModelInstructions objects.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelInstructionsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelInstructionsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelInstructionsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelInstructionsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelInstructionsProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VProductModelInstructions objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelInstructionsProviderBase.Get(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VProductModelInstructions objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelInstructionsProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VProductModelInstructions objects.</returns>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelInstructionsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelInstructionsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelInstructionsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEducationProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VJobCandidateEducation objects.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEducationProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEducationProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEducationProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEducationProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEducationProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VJobCandidateEducation objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEducationProviderBase.Get(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VJobCandidateEducation objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEducationProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VJobCandidateEducation objects.</returns>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEducationProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEducationProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEducationProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentHistoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.VEmployeeDepartmentHistory"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentHistoryProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VEmployeeDepartmentHistory objects.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentHistoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentHistoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentHistoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentHistoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentHistoryProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VEmployeeDepartmentHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentHistoryProviderBase.Get(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VEmployeeDepartmentHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentHistoryProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VEmployeeDepartmentHistory objects.</returns>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentHistoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentHistoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentHistoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentHistoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentHistoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrder"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrder"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_workOrderId">Primary key for WorkOrder records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.WorkOrder objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.WorkOrder objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.WorkOrder objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.WorkOrder objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderProviderBase.GetByProductId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_WorkOrder_ProductID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderProviderBase.GetByScrapReasonId(Nettiers.AdventureWorks.Data.TransactionManager,System.Nullable{System.Int16},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_WorkOrder_ScrapReasonID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_scrapReasonId">Reason for inspection failure.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderProviderBase.GetByWorkOrderId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_WorkOrder_WorkOrderID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_workOrderId">Primary key for WorkOrder records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrder"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.WorkOrder})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.WorkOrder object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.WorkOrder)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.WorkOrder object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.WorkOrder object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.WorkOrder object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.WorkOrder)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.WorkOrder object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.WorkOrder object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlWorkOrderProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlTimestampPkProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.TimestampPk"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlTimestampPkProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.TimestampPk"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTimestampPkProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlTimestampPkProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTimestampPkProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlTimestampPkProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTimestampPkProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Byte[])">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_timestampPk">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
            <exception cref="T:System.Data.DBConcurrencyException">The record has been modified by an other user. Please reload the instance before deleting.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTimestampPkProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.TimestampPk objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTimestampPkProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.TimestampPk objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTimestampPkProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.TimestampPk objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTimestampPkProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.TimestampPk objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTimestampPkProviderBase.GetByTimestampPk(Nettiers.AdventureWorks.Data.TransactionManager,System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_TimestampPK index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_timestampPk"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TimestampPk"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTimestampPkProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TimestampPk})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.TimestampPk object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTimestampPkProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TimestampPk)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.TimestampPk object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.TimestampPk object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.TimestampPk object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTimestampPkProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TimestampPk)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.TimestampPk object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.TimestampPk object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
            <exception cref="T:System.Data.DBConcurrencyException">The record has been modified by an other user. Please reload the instance before updating.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlTimestampPkProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlTimestampPkProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlTimestampPkProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTimestampPkProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlTimestampPkProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.AddressType"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressTypeProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_addressTypeId">Primary key for AddressType records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressTypeProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.AddressType objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressTypeProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.AddressType objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressTypeProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.AddressType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressTypeProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.AddressType objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressTypeProviderBase.GetByName(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_AddressType_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_name">Address type description. For example, Billing, Home, or Shipping.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.AddressType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressTypeProviderBase.GetByRowguid(Nettiers.AdventureWorks.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_AddressType_rowguid index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.AddressType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressTypeProviderBase.GetByAddressTypeId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AddressType_AddressTypeID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_addressTypeId">Primary key for AddressType records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.AddressType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressTypeProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.AddressType})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.AddressType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressTypeProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.AddressType)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.AddressType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.AddressType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.AddressType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressTypeProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.AddressType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.AddressType object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.AddressType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelInstructionsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.VProductModelInstructions"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelInstructionsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelInstructionsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductAndDescriptionProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VProductAndDescription objects.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductAndDescriptionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductAndDescriptionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductAndDescriptionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductAndDescriptionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductAndDescriptionProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VProductAndDescription objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductAndDescriptionProviderBase.Get(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VProductAndDescription objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductAndDescriptionProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VProductAndDescription objects.</returns>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductAndDescriptionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductAndDescriptionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductAndDescriptionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVAdditionalContactInfoProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.VAdditionalContactInfo"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVAdditionalContactInfoProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VAdditionalContactInfo objects.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVAdditionalContactInfoProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVAdditionalContactInfoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVAdditionalContactInfoProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVAdditionalContactInfoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVAdditionalContactInfoProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VAdditionalContactInfo objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVAdditionalContactInfoProviderBase.Get(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VAdditionalContactInfo objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVAdditionalContactInfoProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VAdditionalContactInfo objects.</returns>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVAdditionalContactInfoProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVAdditionalContactInfoProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVAdditionalContactInfoProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVAdditionalContactInfoProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVAdditionalContactInfoProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorContactProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.VendorContact"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorContactProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorContactProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorContactProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorContactProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorContactProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_vendorId">Primary key.. Primary Key.</param>	
            <param name="_contactId">Contact (Vendor employee) identification number. Foreign key to Contact.ContactID.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorContactProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.VendorContact objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorContactProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.VendorContact objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorContactProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.VendorContact objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorContactProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.VendorContact objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorContactProviderBase.GetByVendorId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_VendorContact_Vendor_VendorID key.
            	FK_VendorContact_Vendor_VendorID Description: Foreign key constraint referencing Vendor.VendorID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_vendorId">Primary key.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.VendorContact objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorContactProviderBase.GetByContactId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_VendorContact_ContactID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_contactId">Contact (Vendor employee) identification number. Foreign key to Contact.ContactID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorContactProviderBase.GetByContactTypeId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_VendorContact_ContactTypeID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_contactTypeId">Contact type such as sales manager, or sales agent.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorContactProviderBase.GetByVendorIdContactId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_VendorContact_VendorID_ContactID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_vendorId">Primary key.</param>
            <param name="_contactId">Contact (Vendor employee) identification number. Foreign key to Contact.ContactID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.VendorContact"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorContactProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.VendorContact})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.VendorContact object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorContactProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.VendorContact)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.VendorContact object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.VendorContact object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.VendorContact object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorContactProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.VendorContact)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.VendorContact object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.VendorContact object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorContactProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorContactProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorContactProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorContactProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.VendorContact"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorContactProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorContactProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlUnitMeasureProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.UnitMeasure"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlUnitMeasureProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.UnitMeasure"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlUnitMeasureProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlUnitMeasureProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlUnitMeasureProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlUnitMeasureProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlUnitMeasureProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_unitMeasureCode">Primary key.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlUnitMeasureProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.UnitMeasure objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlUnitMeasureProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.UnitMeasure objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlUnitMeasureProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.UnitMeasure objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlUnitMeasureProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.UnitMeasure objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlUnitMeasureProviderBase.GetByName(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_UnitMeasure_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_name">Unit of measure description.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.UnitMeasure"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlUnitMeasureProviderBase.GetByUnitMeasureCode(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_UnitMeasure_UnitMeasureCode index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_unitMeasureCode">Primary key.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.UnitMeasure"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlUnitMeasureProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.UnitMeasure})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.UnitMeasure object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlUnitMeasureProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.UnitMeasure)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.UnitMeasure object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.UnitMeasure object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.UnitMeasure object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlUnitMeasureProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.UnitMeasure)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.UnitMeasure object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.UnitMeasure object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlUnitMeasureProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlUnitMeasureProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlUnitMeasureProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlUnitMeasureProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlUnitMeasureProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlShipMethodProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ShipMethod"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlShipMethodProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlShipMethodProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesReasonProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesReason"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesReasonProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesReason"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesReasonProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesReasonProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesReasonProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesReasonProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesReasonProviderBase.GetBySalesOrderIdFromSalesOrderHeaderSalesReason(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets SalesReason objects from the datasource by SalesOrderID in the
            	SalesOrderHeaderSalesReason table. Table SalesReason is related to table SalesOrderHeader
            	through the (M:N) relationship defined in the SalesOrderHeaderSalesReason table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_salesOrderId">Primary key. Foreign key to SalesOrderHeader.SalesOrderID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of SalesReason objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesReasonProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_salesReasonId">Primary key for SalesReason records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesReasonProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesReason objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesReasonProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesReason objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesReasonProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesReason objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesReasonProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesReason objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesReasonProviderBase.GetBySalesReasonId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SalesReason_SalesReasonID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_salesReasonId">Primary key for SalesReason records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesReason"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesReasonProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesReason})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.SalesReason object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesReasonProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.SalesReason)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.SalesReason object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.SalesReason object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.SalesReason object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesReasonProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.SalesReason)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.SalesReason object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.SalesReason object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesReasonProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesReasonProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesReasonProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesReasonProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesReasonProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderHeaderProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderHeader"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderHeaderProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderHeader"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderHeaderProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderHeaderProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderHeaderProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderHeaderProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderHeaderProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_purchaseOrderId">Primary key.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderHeaderProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.PurchaseOrderHeader objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderHeaderProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.PurchaseOrderHeader objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderHeaderProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.PurchaseOrderHeader objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderHeaderProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.PurchaseOrderHeader objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderHeaderProviderBase.GetByShipMethodId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PurchaseOrderHeader_ShipMethod_ShipMethodID key.
            	FK_PurchaseOrderHeader_ShipMethod_ShipMethodID Description: Foreign key constraint referencing ShipMethod.ShipMethodID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_shipMethodId">Shipping method. Foreign key to ShipMethod.ShipMethodID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.PurchaseOrderHeader objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderHeaderProviderBase.GetByEmployeeId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_PurchaseOrderHeader_EmployeeID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_employeeId">Employee who created the purchase order. Foreign key to Employee.EmployeeID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderHeaderProviderBase.GetByVendorId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_PurchaseOrderHeader_VendorID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_vendorId">Vendor with whom the purchase order is placed. Foreign key to Vendor.VendorID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderHeaderProviderBase.GetByPurchaseOrderId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_PurchaseOrderHeader_PurchaseOrderID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_purchaseOrderId">Primary key.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderHeader"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderHeaderProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.PurchaseOrderHeader})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.PurchaseOrderHeader object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderHeaderProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.PurchaseOrderHeader)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.PurchaseOrderHeader object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.PurchaseOrderHeader object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.PurchaseOrderHeader object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderHeaderProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.PurchaseOrderHeader)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.PurchaseOrderHeader object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.PurchaseOrderHeader object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderHeaderProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderHeaderProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderHeaderProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderHeaderProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderHeaderProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelIllustrationProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelIllustration"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelIllustrationProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelIllustrationProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductInventoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductInventory"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductInventoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductInventoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductInventoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductInventoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductInventoryProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int16)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.. Primary Key.</param>	
            <param name="_locationId">Inventory location identification number. Foreign key to Location.LocationID. . Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductInventoryProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductInventory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductInventoryProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductInventory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductInventoryProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductInventory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductInventoryProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductInventory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductInventoryProviderBase.GetByLocationId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int16,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductInventory_Location_LocationID key.
            	FK_ProductInventory_Location_LocationID Description: Foreign key constraint referencing Location.LocationID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_locationId">Inventory location identification number. Foreign key to Location.LocationID. </param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductInventory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductInventoryProviderBase.GetByProductId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductInventory_Product_ProductID key.
            	FK_ProductInventory_Product_ProductID Description: Foreign key constraint referencing Product.ProductID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductInventory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductInventoryProviderBase.GetByProductIdLocationId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int16,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ProductInventory_ProductID_LocationID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="_locationId">Inventory location identification number. Foreign key to Location.LocationID. </param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductInventory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductInventoryProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductInventory})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductInventory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductInventoryProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductInventory)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.ProductInventory object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductInventory object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductInventory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductInventoryProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductInventory)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductInventory object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.ProductInventory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductInventoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductInventoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductInventoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductInventoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductInventory"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductInventoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductInventoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlJobCandidateProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.JobCandidate"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlJobCandidateProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlJobCandidateProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlJobCandidateProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlJobCandidateProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlJobCandidateProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_jobCandidateId">Primary key for JobCandidate records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlJobCandidateProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.JobCandidate objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlJobCandidateProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.JobCandidate objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlJobCandidateProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.JobCandidate objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlJobCandidateProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.JobCandidate objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlJobCandidateProviderBase.GetByEmployeeId(Nettiers.AdventureWorks.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_JobCandidate_EmployeeID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_employeeId">Employee identification number if applicant was hired. Foreign key to Employee.EmployeeID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlJobCandidateProviderBase.GetByJobCandidateId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_JobCandidate_JobCandidateID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_jobCandidateId">Primary key for JobCandidate records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.JobCandidate"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlJobCandidateProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.JobCandidate})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.JobCandidate object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlJobCandidateProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.JobCandidate)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.JobCandidate object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.JobCandidate object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.JobCandidate object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlJobCandidateProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.JobCandidate)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.JobCandidate object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.JobCandidate object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlJobCandidateProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlJobCandidateProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlJobCandidateProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Customer"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Customer"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerProviderBase.GetByAddressIdFromCustomerAddress(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Customer objects from the datasource by AddressID in the
            	CustomerAddress table. Table Customer is related to table Address
            	through the (M:N) relationship defined in the CustomerAddress table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of Customer objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_customerId">Primary key for Customer records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Customer objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Customer objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Customer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Customer objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerProviderBase.GetByAccountNumber(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_Customer_AccountNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_accountNumber">Unique number identifying the customer assigned by the accounting system.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Customer"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerProviderBase.GetByRowguid(Nettiers.AdventureWorks.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_Customer_rowguid index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Customer"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerProviderBase.GetByTerritoryId(Nettiers.AdventureWorks.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_TerritoryID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_territoryId">ID of the territory in which the customer is located. Foreign key to SalesTerritory.SalesTerritoryID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerProviderBase.GetByCustomerId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Customer_CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_customerId">Primary key for Customer records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Customer"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Customer})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Customer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Customer)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.Customer object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Customer object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Customer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Customer)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Customer object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.Customer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegion"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlScrapReasonProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ScrapReason"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlScrapReasonProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlScrapReasonProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlScrapReasonProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlScrapReasonProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlScrapReasonProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int16)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_scrapReasonId">Primary key for ScrapReason records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlScrapReasonProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ScrapReason objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlScrapReasonProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ScrapReason objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlScrapReasonProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ScrapReason objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlScrapReasonProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ScrapReason objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlScrapReasonProviderBase.GetByName(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_ScrapReason_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_name">Failure description.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ScrapReason"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlScrapReasonProviderBase.GetByScrapReasonId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int16,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ScrapReason_ScrapReasonID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_scrapReasonId">Primary key for ScrapReason records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ScrapReason"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlScrapReasonProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ScrapReason})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ScrapReason object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlScrapReasonProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ScrapReason)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.ScrapReason object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ScrapReason object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ScrapReason object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlScrapReasonProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ScrapReason)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ScrapReason object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.ScrapReason object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlScrapReasonProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlScrapReasonProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlScrapReasonProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesPerson"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesPerson"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_salesPersonId">Primary key for SalesPerson records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesPerson objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesPerson objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesPerson objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesPerson objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonProviderBase.GetByTerritoryId(Nettiers.AdventureWorks.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SalesPerson_SalesTerritory_TerritoryID key.
            	FK_SalesPerson_SalesTerritory_TerritoryID Description: Foreign key constraint referencing SalesTerritory.TerritoryID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_territoryId">Territory currently assigned to. Foreign key to SalesTerritory.SalesTerritoryID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesPerson objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonProviderBase.GetByRowguid(Nettiers.AdventureWorks.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_SalesPerson_rowguid index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesPerson"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonProviderBase.GetBySalesPersonId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SalesPerson_SalesPersonID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId">Primary key for SalesPerson records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesPerson"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesPerson})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.SalesPerson object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.SalesPerson)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.SalesPerson object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.SalesPerson object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.SalesPerson object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.SalesPerson)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.SalesPerson object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.SalesPerson object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesPersonProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase.GetBySalesReasonIdFromSalesOrderHeaderSalesReason(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets SalesOrderHeader objects from the datasource by SalesReasonID in the
            	SalesOrderHeaderSalesReason table. Table SalesOrderHeader is related to table SalesReason
            	through the (M:N) relationship defined in the SalesOrderHeaderSalesReason table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_salesReasonId">Primary key. Foreign key to SalesReason.SalesReasonID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of SalesOrderHeader objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_salesOrderId">Primary key.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeader objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeader objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeader objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeader objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase.GetByBillToAddressId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SalesOrderHeader_Address_BillToAddressID key.
            	FK_SalesOrderHeader_Address_BillToAddressID Description: Foreign key constraint referencing Address.AddressID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_billToAddressId">Customer billing address. Foreign key to Address.AddressID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeader objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase.GetByShipToAddressId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SalesOrderHeader_Address_ShipToAddressID key.
            	FK_SalesOrderHeader_Address_ShipToAddressID Description: Foreign key constraint referencing Address.AddressID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_shipToAddressId">Customer shipping address. Foreign key to Address.AddressID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeader objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase.GetByContactId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SalesOrderHeader_Contact_ContactID key.
            	FK_SalesOrderHeader_Contact_ContactID Description: Foreign key constraint referencing Contact.ContactID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_contactId">Customer contact identification number. Foreign key to Contact.ContactID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeader objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase.GetByCreditCardId(Nettiers.AdventureWorks.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SalesOrderHeader_CreditCard_CreditCardID key.
            	FK_SalesOrderHeader_CreditCard_CreditCardID Description: Foreign key constraint referencing CreditCard.CreditCardID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_creditCardId">Credit card identification number. Foreign key to CreditCard.CreditCardID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeader objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase.GetByCurrencyRateId(Nettiers.AdventureWorks.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SalesOrderHeader_CurrencyRate_CurrencyRateID key.
            	FK_SalesOrderHeader_CurrencyRate_CurrencyRateID Description: Foreign key constraint referencing CurrencyRate.CurrencyRateID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_currencyRateId">Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeader objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase.GetByTerritoryId(Nettiers.AdventureWorks.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SalesOrderHeader_SalesTerritory_TerritoryID key.
            	FK_SalesOrderHeader_SalesTerritory_TerritoryID Description: Foreign key constraint referencing SalesTerritory.TerritoryID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_territoryId">Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeader objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase.GetByShipMethodId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SalesOrderHeader_ShipMethod_ShipMethodID key.
            	FK_SalesOrderHeader_ShipMethod_ShipMethodID Description: Foreign key constraint referencing ShipMethod.ShipMethodID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_shipMethodId">Shipping method. Foreign key to ShipMethod.ShipMethodID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderHeader objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase.GetByRowguid(Nettiers.AdventureWorks.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_SalesOrderHeader_rowguid index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase.GetBySalesOrderNumber(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_SalesOrderHeader_SalesOrderNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_salesOrderNumber">Unique sales order identification number.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase.GetByCustomerId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SalesOrderHeader_CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_customerId">Customer identification number. Foreign key to Customer.CustomerID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase.GetBySalesPersonId(Nettiers.AdventureWorks.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SalesOrderHeader_SalesPersonID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_salesPersonId">Sales person who created the sales order. Foreign key to SalesPerson.SalePersonID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase.GetBySalesOrderId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SalesOrderHeader_SalesOrderID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_salesOrderId">Primary key.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderHeader})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.SalesOrderHeader object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.SalesOrderHeader)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.SalesOrderHeader object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.SalesOrderHeader object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.SalesOrderHeader object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.SalesOrderHeader)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.SalesOrderHeader object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.SalesOrderHeader object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductVendorProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductVendor"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductVendorProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductVendor"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductVendorProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductVendorProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductVendorProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductVendorProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductVendorProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_productId">Primary key. Foreign key to Product.ProductID.. Primary Key.</param>	
            <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductVendorProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductVendor objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductVendorProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductVendor objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductVendorProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductVendor objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductVendorProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductVendor objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductVendorProviderBase.GetByProductId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductVendor_Product_ProductID key.
            	FK_ProductVendor_Product_ProductID Description: Foreign key constraint referencing Product.ProductID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Primary key. Foreign key to Product.ProductID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductVendor objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductVendorProviderBase.GetByUnitMeasureCode(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductVendor_UnitMeasureCode index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_unitMeasureCode">The product's unit of measure.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductVendorProviderBase.GetByVendorId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductVendor_VendorID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductVendorProviderBase.GetByProductIdVendorId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ProductVendor_ProductID_VendorID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Primary key. Foreign key to Product.ProductID.</param>
            <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductVendor"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductVendorProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductVendor})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductVendor object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductVendorProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductVendor)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.ProductVendor object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductVendor object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductVendor object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductVendorProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductVendor)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductVendor object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.ProductVendor object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductVendorProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductVendorProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductVendorProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductVendorProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductVendorProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProductPhotoProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductProductPhoto"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProductPhotoProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProductPhotoProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProductPhotoProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProductPhotoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProductPhotoProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.. Primary Key.</param>	
            <param name="_productPhotoId">Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProductPhotoProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductProductPhoto objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProductPhotoProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductProductPhoto objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProductPhotoProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductProductPhoto objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProductPhotoProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductProductPhoto objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProductPhotoProviderBase.GetByProductId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductProductPhoto_Product_ProductID key.
            	FK_ProductProductPhoto_Product_ProductID Description: Foreign key constraint referencing Product.ProductID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductProductPhoto objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProductPhotoProviderBase.GetByProductPhotoId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductProductPhoto_ProductPhoto_ProductPhotoID key.
            	FK_ProductProductPhoto_ProductPhoto_ProductPhotoID Description: Foreign key constraint referencing ProductPhoto.ProductPhotoID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productPhotoId">Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductProductPhoto objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProductPhotoProviderBase.GetByProductIdProductPhotoId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ProductProductPhoto_ProductID_ProductPhotoID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="_productPhotoId">Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductProductPhoto"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProductPhotoProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductProductPhoto})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductProductPhoto object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProductPhotoProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductProductPhoto)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.ProductProductPhoto object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductProductPhoto object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductProductPhoto object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProductPhotoProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductProductPhoto)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductProductPhoto object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.ProductProductPhoto object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProductPhotoProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProductPhotoProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProductPhotoProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCategoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductCategory"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCategoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCategoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCategoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCategoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCategoryProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_productCategoryId">Primary key for ProductCategory records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCategoryProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductCategory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCategoryProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductCategory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCategoryProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductCategory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCategoryProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductCategory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCategoryProviderBase.GetByName(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_ProductCategory_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_name">Category description.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductCategory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCategoryProviderBase.GetByRowguid(Nettiers.AdventureWorks.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_ProductCategory_rowguid index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductCategory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCategoryProviderBase.GetByProductCategoryId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ProductCategory_ProductCategoryID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productCategoryId">Primary key for ProductCategory records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductCategory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCategoryProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductCategory})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductCategory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCategoryProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductCategory)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.ProductCategory object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductCategory object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductCategory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCategoryProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductCategory)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductCategory object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.ProductCategory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCategoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCategoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCategoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeDepartmentHistoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeDepartmentHistoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeDepartmentHistoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeDepartmentHistoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeDepartmentHistoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeDepartmentHistoryProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.DateTime,System.Int16,System.Byte)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_employeeId">Employee identification number. Foreign key to Employee.EmployeeID.. Primary Key.</param>	
            <param name="_startDate">Date the employee started work in the department.. Primary Key.</param>	
            <param name="_departmentId">Department in which the employee worked including currently. Foreign key to Department.DepartmentID.. Primary Key.</param>	
            <param name="_shiftId">Identifies which 8-hour shift the employee works. Foreign key to Shift.Shift.ID.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeDepartmentHistoryProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeDepartmentHistoryProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeDepartmentHistoryProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeDepartmentHistoryProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeDepartmentHistoryProviderBase.GetByEmployeeId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_EmployeeDepartmentHistory_Employee_EmployeeID key.
            	FK_EmployeeDepartmentHistory_Employee_EmployeeID Description: Foreign key constraint referencing Employee.EmployeeID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_employeeId">Employee identification number. Foreign key to Employee.EmployeeID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeDepartmentHistoryProviderBase.GetByDepartmentId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int16,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_EmployeeDepartmentHistory_DepartmentID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_departmentId">Department in which the employee worked including currently. Foreign key to Department.DepartmentID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeDepartmentHistoryProviderBase.GetByShiftId(Nettiers.AdventureWorks.Data.TransactionManager,System.Byte,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_EmployeeDepartmentHistory_ShiftID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_shiftId">Identifies which 8-hour shift the employee works. Foreign key to Shift.Shift.ID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeDepartmentHistoryProviderBase.GetByEmployeeIdStartDateDepartmentIdShiftId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.DateTime,System.Int16,System.Byte,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_EmployeeDepartmentHistory_EmployeeID_StartDate_DepartmentID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_employeeId">Employee identification number. Foreign key to Employee.EmployeeID.</param>
            <param name="_startDate">Date the employee started work in the department.</param>
            <param name="_departmentId">Department in which the employee worked including currently. Foreign key to Department.DepartmentID.</param>
            <param name="_shiftId">Identifies which 8-hour shift the employee works. Foreign key to Shift.Shift.ID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeDepartmentHistoryProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeDepartmentHistoryProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeDepartmentHistoryProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeDepartmentHistoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeDepartmentHistoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeDepartmentHistoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlStateProvinceProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStateProvinceProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlStateProvinceProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStateProvinceProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlStateProvinceProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStateProvinceProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_stateProvinceId">Primary key for StateProvince records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStateProvinceProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.StateProvince objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStateProvinceProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.StateProvince objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStateProvinceProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.StateProvince objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStateProvinceProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.StateProvince objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStateProvinceProviderBase.GetByCountryRegionCode(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_StateProvince_CountryRegion_CountryRegionCode key.
            	FK_StateProvince_CountryRegion_CountryRegionCode Description: Foreign key constraint referencing CountryRegion.CountryRegionCode.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_countryRegionCode">ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode. </param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.StateProvince objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStateProvinceProviderBase.GetByTerritoryId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_StateProvince_SalesTerritory_TerritoryID key.
            	FK_StateProvince_SalesTerritory_TerritoryID Description: Foreign key constraint referencing SalesTerritory.TerritoryID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_territoryId">ID of the territory in which the state or province is located. Foreign key to SalesTerritory.SalesTerritoryID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.StateProvince objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStateProvinceProviderBase.GetByName(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_StateProvince_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_name">State or province description.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStateProvinceProviderBase.GetByRowguid(Nettiers.AdventureWorks.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_StateProvince_rowguid index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStateProvinceProviderBase.GetByStateProvinceCodeCountryRegionCode(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_StateProvince_StateProvinceCode_CountryRegionCode index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_stateProvinceCode">ISO standard state or province code.</param>
            <param name="_countryRegionCode">ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode. </param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStateProvinceProviderBase.GetByStateProvinceId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_StateProvince_StateProvinceID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_stateProvinceId">Primary key for StateProvince records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStateProvinceProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.StateProvince})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.StateProvince object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStateProvinceProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.StateProvince)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.StateProvince object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.StateProvince object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.StateProvince object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStateProvinceProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.StateProvince)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.StateProvince object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.StateProvince object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlStateProvinceProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlStateProvinceProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlStateProvinceProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlScrapReasonProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ScrapReason"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlScrapReasonProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlScrapReasonProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderHeaderProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlIllustrationProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Illustration"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIllustrationProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlIllustrationProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIllustrationProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlIllustrationProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIllustrationProviderBase.GetByProductModelIdFromProductModelIllustration(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Illustration objects from the datasource by ProductModelID in the
            	ProductModelIllustration table. Table Illustration is related to table ProductModel
            	through the (M:N) relationship defined in the ProductModelIllustration table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of Illustration objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIllustrationProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_illustrationId">Primary key for Illustration records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIllustrationProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Illustration objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIllustrationProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Illustration objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIllustrationProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Illustration objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIllustrationProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Illustration objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIllustrationProviderBase.GetByIllustrationId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Illustration_IllustrationID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_illustrationId">Primary key for Illustration records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Illustration"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIllustrationProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Illustration})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Illustration object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIllustrationProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Illustration)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.Illustration object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Illustration object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Illustration object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIllustrationProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Illustration)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Illustration object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.Illustration object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlIllustrationProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlIllustrationProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlIllustrationProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerAddressProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.CustomerAddress"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerAddressProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.CustomerAddress"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerAddressProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerAddressProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerAddressProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerAddressProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerAddressProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_customerId">Primary key. Foreign key to Customer.CustomerID.. Primary Key.</param>	
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerAddressProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.CustomerAddress objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerAddressProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.CustomerAddress objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerAddressProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.CustomerAddress objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerAddressProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.CustomerAddress objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerAddressProviderBase.GetByAddressId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerAddress_Address_AddressID key.
            	FK_CustomerAddress_Address_AddressID Description: Foreign key constraint referencing Address.AddressID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.CustomerAddress objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerAddressProviderBase.GetByAddressTypeId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerAddress_AddressType_AddressTypeID key.
            	FK_CustomerAddress_AddressType_AddressTypeID Description: Foreign key constraint referencing AddressType.AddressTypeID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_addressTypeId">Address type. Foreign key to AddressType.AddressTypeID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.CustomerAddress objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerAddressProviderBase.GetByCustomerId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerAddress_Customer_CustomerID key.
            	FK_CustomerAddress_Customer_CustomerID Description: Foreign key constraint referencing Customer.CustomerID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_customerId">Primary key. Foreign key to Customer.CustomerID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.CustomerAddress objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerAddressProviderBase.GetByRowguid(Nettiers.AdventureWorks.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_CustomerAddress_rowguid index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CustomerAddress"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerAddressProviderBase.GetByCustomerIdAddressId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CustomerAddress_CustomerID_AddressID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_customerId">Primary key. Foreign key to Customer.CustomerID.</param>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CustomerAddress"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerAddressProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CustomerAddress})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.CustomerAddress object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerAddressProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.CustomerAddress)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.CustomerAddress object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.CustomerAddress object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.CustomerAddress object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerAddressProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.CustomerAddress)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.CustomerAddress object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.CustomerAddress object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerAddressProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerAddressProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerAddressProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerAddressProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCustomerAddressProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionCurrencyProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegionCurrency"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionCurrencyProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCountryRegionCurrencyProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlAwBuildVersionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.AwBuildVersion"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlAwBuildVersionProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.AwBuildVersion"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAwBuildVersionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlAwBuildVersionProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAwBuildVersionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlAwBuildVersionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAwBuildVersionProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Byte)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_systemInformationId">Primary key for AWBuildVersion records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAwBuildVersionProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.AwBuildVersion objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAwBuildVersionProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.AwBuildVersion objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAwBuildVersionProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.AwBuildVersion objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAwBuildVersionProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.AwBuildVersion objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAwBuildVersionProviderBase.GetBySystemInformationId(Nettiers.AdventureWorks.Data.TransactionManager,System.Byte,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AWBuildVersion_SystemInformationID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_systemInformationId">Primary key for AWBuildVersion records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.AwBuildVersion"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAwBuildVersionProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.AwBuildVersion})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.AwBuildVersion object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAwBuildVersionProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.AwBuildVersion)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.AwBuildVersion object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.AwBuildVersion object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.AwBuildVersion object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAwBuildVersionProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.AwBuildVersion)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.AwBuildVersion object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.AwBuildVersion object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlAwBuildVersionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlAwBuildVersionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlAwBuildVersionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAwBuildVersionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlAwBuildVersionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.AddressType"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlAddressTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VJobCandidate objects.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VJobCandidate objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateProviderBase.Get(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VJobCandidate objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VJobCandidate objects.</returns>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorAddressProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.VendorAddress"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorAddressProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorAddressProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorAddressProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorAddressProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorAddressProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.. Primary Key.</param>	
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorAddressProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.VendorAddress objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorAddressProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.VendorAddress objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorAddressProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.VendorAddress objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorAddressProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.VendorAddress objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorAddressProviderBase.GetByAddressTypeId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_VendorAddress_AddressType_AddressTypeID key.
            	FK_VendorAddress_AddressType_AddressTypeID Description: Foreign key constraint referencing AddressType.AddressTypeID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_addressTypeId">Address type. Foreign key to AddressType.AddressTypeID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.VendorAddress objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorAddressProviderBase.GetByVendorId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_VendorAddress_Vendor_VendorID key.
            	FK_VendorAddress_Vendor_VendorID Description: Foreign key constraint referencing Vendor.VendorID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.VendorAddress objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorAddressProviderBase.GetByAddressId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_VendorAddress_AddressID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorAddressProviderBase.GetByVendorIdAddressId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_VendorAddress_VendorID_AddressID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.VendorAddress"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorAddressProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.VendorAddress})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.VendorAddress object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorAddressProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.VendorAddress)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.VendorAddress object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.VendorAddress object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.VendorAddress object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorAddressProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.VendorAddress)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.VendorAddress object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.VendorAddress object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorAddressProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorAddressProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorAddressProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorAddressProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.VendorAddress"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorAddressProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorAddressProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreContactProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.StoreContact"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreContactProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreContactProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreContactProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreContactProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreContactProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_customerId">Store identification number. Foreign key to Customer.CustomerID.. Primary Key.</param>	
            <param name="_contactId">Contact (store employee) identification number. Foreign key to Contact.ContactID.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreContactProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.StoreContact objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreContactProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.StoreContact objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreContactProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.StoreContact objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreContactProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.StoreContact objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreContactProviderBase.GetByCustomerId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_StoreContact_Store_CustomerID key.
            	FK_StoreContact_Store_CustomerID Description: Foreign key constraint referencing Store.CustomerID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_customerId">Store identification number. Foreign key to Customer.CustomerID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.StoreContact objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreContactProviderBase.GetByRowguid(Nettiers.AdventureWorks.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_StoreContact_rowguid index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.StoreContact"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreContactProviderBase.GetByContactId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_StoreContact_ContactID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_contactId">Contact (store employee) identification number. Foreign key to Contact.ContactID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreContactProviderBase.GetByContactTypeId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_StoreContact_ContactTypeID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_contactTypeId">Contact type such as owner or purchasing agent. Foreign key to ContactType.ContactTypeID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreContactProviderBase.GetByCustomerIdContactId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_StoreContact_CustomerID_ContactID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_customerId">Store identification number. Foreign key to Customer.CustomerID.</param>
            <param name="_contactId">Contact (store employee) identification number. Foreign key to Contact.ContactID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.StoreContact"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreContactProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.StoreContact})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.StoreContact object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreContactProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.StoreContact)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.StoreContact object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.StoreContact object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.StoreContact object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreContactProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.StoreContact)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.StoreContact object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.StoreContact object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreContactProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreContactProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreContactProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreContactProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.StoreContact"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreContactProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlStoreContactProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderDetailProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderDetail"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderDetailProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderDetail"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderDetailProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderDetailProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderDetailProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderDetailProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderDetailProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_purchaseOrderId">Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.. Primary Key.</param>	
            <param name="_purchaseOrderDetailId">Primary key. One line number per purchased product.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderDetailProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.PurchaseOrderDetail objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderDetailProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.PurchaseOrderDetail objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderDetailProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.PurchaseOrderDetail objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderDetailProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.PurchaseOrderDetail objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderDetailProviderBase.GetByPurchaseOrderId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID key.
            	FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID Description: Foreign key constraint referencing PurchaseOrderHeader.PurchaseOrderID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_purchaseOrderId">Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.PurchaseOrderDetail objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderDetailProviderBase.GetByProductId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_PurchaseOrderDetail_ProductID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderDetailProviderBase.GetByPurchaseOrderIdPurchaseOrderDetailId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_PurchaseOrderDetail_PurchaseOrderID_PurchaseOrderDetailID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_purchaseOrderId">Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.</param>
            <param name="_purchaseOrderDetailId">Primary key. One line number per purchased product.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderDetail"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderDetailProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.PurchaseOrderDetail})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.PurchaseOrderDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderDetailProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.PurchaseOrderDetail)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.PurchaseOrderDetail object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.PurchaseOrderDetail object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.PurchaseOrderDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderDetailProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.PurchaseOrderDetail)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.PurchaseOrderDetail object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.PurchaseOrderDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderDetailProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderDetailProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderDetailProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderDetailProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlPurchaseOrderDetailProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlErrorLogProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ErrorLog"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlErrorLogProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ErrorLog"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlErrorLogProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlErrorLogProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlErrorLogProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlErrorLogProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlErrorLogProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_errorLogId">Primary key for ErrorLog records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlErrorLogProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ErrorLog objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlErrorLogProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ErrorLog objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlErrorLogProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ErrorLog objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlErrorLogProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ErrorLog objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlErrorLogProviderBase.GetByErrorLogId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ErrorLog_ErrorLogID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_errorLogId">Primary key for ErrorLog records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ErrorLog"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlErrorLogProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ErrorLog})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ErrorLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlErrorLogProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ErrorLog)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.ErrorLog object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ErrorLog object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ErrorLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlErrorLogProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ErrorLog)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ErrorLog object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.ErrorLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlErrorLogProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlErrorLogProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlErrorLogProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlErrorLogProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlErrorLogProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductAndDescriptionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.VProductAndDescription"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductAndDescriptionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductAndDescriptionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlTestVariantProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.TestVariant"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlTestVariantProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.TestVariant"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTestVariantProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlTestVariantProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTestVariantProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlTestVariantProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTestVariantProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_testVariantId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTestVariantProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.TestVariant objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTestVariantProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.TestVariant objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTestVariantProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.TestVariant objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTestVariantProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.TestVariant objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTestVariantProviderBase.GetByTestVariantId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_TestVariant index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_testVariantId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TestVariant"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTestVariantProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TestVariant})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.TestVariant object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTestVariantProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TestVariant)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.TestVariant object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.TestVariant object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.TestVariant object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTestVariantProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TestVariant)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.TestVariant object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.TestVariant object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlTestVariantProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlTestVariantProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlTestVariantProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTestVariantProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlTestVariantProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlStateProvinceProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlStateProvinceProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlStateProvinceProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderDetailProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderDetail"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderDetailProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderDetailProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderDetailProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderDetailProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderDetailProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_salesOrderId">Primary key. Foreign key to SalesOrderHeader.SalesOrderID.. Primary Key.</param>	
            <param name="_salesOrderDetailId">Primary key. One incremental unique number per product sold.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderDetailProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderDetail objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderDetailProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderDetail objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderDetailProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderDetail objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderDetailProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderDetail objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderDetailProviderBase.GetBySalesOrderId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID key.
            	FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID Description: Foreign key constraint referencing SalesOrderHeader.PurchaseOrderID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_salesOrderId">Primary key. Foreign key to SalesOrderHeader.SalesOrderID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderDetail objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderDetailProviderBase.GetBySpecialOfferIdProductId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID key.
            	FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID Description: Foreign key constraint referencing SpecialOfferProduct.SpecialOfferIDProductID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_specialOfferId">Promotional code. Foreign key to SpecialOffer.SpecialOfferID.</param>
            <param name="_productId">Product sold to customer. Foreign key to Product.ProductID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesOrderDetail objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderDetailProviderBase.GetByRowguid(Nettiers.AdventureWorks.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_SalesOrderDetail_rowguid index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderDetail"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderDetailProviderBase.GetByProductId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SalesOrderDetail_ProductID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Product sold to customer. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderDetailProviderBase.GetBySalesOrderIdSalesOrderDetailId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SalesOrderDetail_SalesOrderID_SalesOrderDetailID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_salesOrderId">Primary key. Foreign key to SalesOrderHeader.SalesOrderID.</param>
            <param name="_salesOrderDetailId">Primary key. One incremental unique number per product sold.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderDetail"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderDetailProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderDetail})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.SalesOrderDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderDetailProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.SalesOrderDetail)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.SalesOrderDetail object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.SalesOrderDetail object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.SalesOrderDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderDetailProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.SalesOrderDetail)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.SalesOrderDetail object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.SalesOrderDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderDetailProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderDetailProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderDetailProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProductDescriptionCultureProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProductDescriptionCultureProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProductDescriptionCultureProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProductDescriptionCultureProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProductDescriptionCultureProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProductDescriptionCultureProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.. Primary Key.</param>	
            <param name="_productDescriptionId">Primary key. Foreign key to ProductDescription.ProductDescriptionID.. Primary Key.</param>	
            <param name="_cultureId">Culture identification number. Foreign key to Culture.CultureID.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProductDescriptionCultureProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProductDescriptionCultureProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProductDescriptionCultureProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProductDescriptionCultureProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProductDescriptionCultureProviderBase.GetByCultureId(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductModelProductDescriptionCulture_Culture_CultureID key.
            	FK_ProductModelProductDescriptionCulture_Culture_CultureID Description: Foreign key constraint referencing Culture.CultureID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_cultureId">Culture identification number. Foreign key to Culture.CultureID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProductDescriptionCultureProviderBase.GetByProductDescriptionId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID key.
            	FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID Description: Foreign key constraint referencing ProductDescription.ProductDescriptionID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productDescriptionId">Primary key. Foreign key to ProductDescription.ProductDescriptionID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProductDescriptionCultureProviderBase.GetByProductModelId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID key.
            	FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID Description: Foreign key constraint referencing ProductModel.ProductModelID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProductDescriptionCultureProviderBase.GetByProductModelIdProductDescriptionIdCultureId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ProductModelProductDescriptionCulture_ProductModelID_ProductDescriptionID_CultureID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
            <param name="_productDescriptionId">Primary key. Foreign key to ProductDescription.ProductDescriptionID.</param>
            <param name="_cultureId">Culture identification number. Foreign key to Culture.CultureID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProductDescriptionCultureProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProductDescriptionCultureProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProductDescriptionCultureProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProductDescriptionCultureProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProductDescriptionCultureProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProductDescriptionCultureProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCostHistoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductCostHistory"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCostHistoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCostHistoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase.GetByDocumentIdFromProductDocument(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Product objects from the datasource by DocumentID in the
            	ProductDocument table. Table Product is related to table Document
            	through the (M:N) relationship defined in the ProductDocument table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_documentId">Document identification number. Foreign key to Document.DocumentID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of Product objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase.GetByLocationIdFromProductInventory(Nettiers.AdventureWorks.Data.TransactionManager,System.Int16,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Product objects from the datasource by LocationID in the
            	ProductInventory table. Table Product is related to table Location
            	through the (M:N) relationship defined in the ProductInventory table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_locationId">Inventory location identification number. Foreign key to Location.LocationID. </param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of Product objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase.GetByProductPhotoIdFromProductProductPhoto(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Product objects from the datasource by ProductPhotoID in the
            	ProductProductPhoto table. Table Product is related to table ProductPhoto
            	through the (M:N) relationship defined in the ProductProductPhoto table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productPhotoId">Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of Product objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase.GetByVendorIdFromProductVendor(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Product objects from the datasource by VendorID in the
            	ProductVendor table. Table Product is related to table Vendor
            	through the (M:N) relationship defined in the ProductVendor table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of Product objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase.GetBySpecialOfferIdFromSpecialOfferProduct(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Product objects from the datasource by SpecialOfferID in the
            	SpecialOfferProduct table. Table Product is related to table SpecialOffer
            	through the (M:N) relationship defined in the SpecialOfferProduct table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_specialOfferId">Primary key for SpecialOfferProduct records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of Product objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_productId">Primary key for Product records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Product objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Product objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Product objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Product objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase.GetByProductModelId(Nettiers.AdventureWorks.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Product_ProductModel_ProductModelID key.
            	FK_Product_ProductModel_ProductModelID Description: Foreign key constraint referencing ProductModel.ProductModelID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productModelId">Product is a member of this product model. Foreign key to ProductModel.ProductModelID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Product objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase.GetByProductSubcategoryId(Nettiers.AdventureWorks.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Product_ProductSubcategory_ProductSubcategoryID key.
            	FK_Product_ProductSubcategory_ProductSubcategoryID Description: Foreign key constraint referencing ProductSubcategory.ProductSubcategoryID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productSubcategoryId">Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID. </param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Product objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase.GetBySizeUnitMeasureCode(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Product_UnitMeasure_SizeUnitMeasureCode key.
            	FK_Product_UnitMeasure_SizeUnitMeasureCode Description: Foreign key constraint referencing UnitMeasure.UnitMeasureCode.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_sizeUnitMeasureCode">Unit of measure for Size column.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Product objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase.GetByWeightUnitMeasureCode(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Product_UnitMeasure_WeightUnitMeasureCode key.
            	FK_Product_UnitMeasure_WeightUnitMeasureCode Description: Foreign key constraint referencing UnitMeasure.UnitMeasureCode.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_weightUnitMeasureCode">Unit of measure for Weight column.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Product objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase.GetByName(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_Product_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_name">Name of the product.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase.GetByProductNumber(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_Product_ProductNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productNumber">Unique product identification number.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase.GetByRowguid(Nettiers.AdventureWorks.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_Product_rowguid index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase.GetByProductId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Product_ProductID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Primary key for Product records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Product})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Product object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Product)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.Product object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Product object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Product object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Product)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Product object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.Product object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEducationProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.VJobCandidateEducation"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEducationProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateEducationProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryHistoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritoryHistory"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryHistoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryHistoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTaxRateProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTaxRate"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTaxRateProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTaxRateProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTaxRateProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTaxRateProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTaxRateProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_salesTaxRateId">Primary key for SalesTaxRate records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTaxRateProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesTaxRate objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTaxRateProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesTaxRate objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTaxRateProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesTaxRate objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTaxRateProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesTaxRate objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTaxRateProviderBase.GetByStateProvinceId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SalesTaxRate_StateProvince_StateProvinceID key.
            	FK_SalesTaxRate_StateProvince_StateProvinceID Description: Foreign key constraint referencing StateProvince.StateProvinceID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_stateProvinceId">State, province, or country/region the sales tax applies to.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesTaxRate objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTaxRateProviderBase.GetByRowguid(Nettiers.AdventureWorks.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_SalesTaxRate_rowguid index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTaxRate"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTaxRateProviderBase.GetByStateProvinceIdTaxType(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Byte,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_SalesTaxRate_StateProvinceID_TaxType index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_stateProvinceId">State, province, or country/region the sales tax applies to.</param>
            <param name="_taxType">1 = Tax applied to retail transactions, 2 = Tax applied to wholesale transactions, 3 = Tax applied to all sales (retail and wholesale) transactions.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTaxRate"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTaxRateProviderBase.GetBySalesTaxRateId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SalesTaxRate_SalesTaxRateID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_salesTaxRateId">Primary key for SalesTaxRate records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTaxRate"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTaxRateProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTaxRate})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.SalesTaxRate object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTaxRateProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.SalesTaxRate)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.SalesTaxRate object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.SalesTaxRate object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.SalesTaxRate object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTaxRateProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.SalesTaxRate)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.SalesTaxRate object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.SalesTaxRate object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTaxRateProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTaxRateProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTaxRateProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderDetailProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderDetail"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderDetailProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesOrderDetailProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlIllustrationProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Illustration"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlIllustrationProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlIllustrationProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeePayHistoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeePayHistory"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeePayHistoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeePayHistoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeePayHistoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeePayHistoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeePayHistoryProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.DateTime)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_employeeId">Employee identification number. Foreign key to Employee.EmployeeID.. Primary Key.</param>	
            <param name="_rateChangeDate">Date the change in pay is effective. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeePayHistoryProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.EmployeePayHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeePayHistoryProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.EmployeePayHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeePayHistoryProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.EmployeePayHistory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeePayHistoryProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.EmployeePayHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeePayHistoryProviderBase.GetByEmployeeId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_EmployeePayHistory_Employee_EmployeeID key.
            	FK_EmployeePayHistory_Employee_EmployeeID Description: Foreign key constraint referencing Employee.EmployeeID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_employeeId">Employee identification number. Foreign key to Employee.EmployeeID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.EmployeePayHistory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeePayHistoryProviderBase.GetByEmployeeIdRateChangeDate(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_EmployeePayHistory_EmployeeID_RateChangeDate index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_employeeId">Employee identification number. Foreign key to Employee.EmployeeID.</param>
            <param name="_rateChangeDate">Date the change in pay is effective</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeePayHistory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeePayHistoryProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeePayHistory})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.EmployeePayHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeePayHistoryProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.EmployeePayHistory)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.EmployeePayHistory object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.EmployeePayHistory object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.EmployeePayHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeePayHistoryProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.EmployeePayHistory)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.EmployeePayHistory object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.EmployeePayHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeePayHistoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeePayHistoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeePayHistoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlDepartmentProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Department"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlDepartmentProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlDepartmentProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyRateProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.CurrencyRate"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyRateProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyRateProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Currency"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyProviderBase.GetByCountryRegionCodeFromCountryRegionCurrency(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Currency objects from the datasource by CountryRegionCode in the
            	CountryRegionCurrency table. Table Currency is related to table CountryRegion
            	through the (M:N) relationship defined in the CountryRegionCurrency table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_countryRegionCode">ISO code for countries and regions. Foreign key to CountryRegion.CountryRegionCode.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of Currency objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_currencyCode">The ISO code for the Currency.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Currency objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Currency objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Currency objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Currency objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyProviderBase.GetByName(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_Currency_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_name">Currency name.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Currency"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyProviderBase.GetByCurrencyCode(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Currency_CurrencyCode index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_currencyCode">The ISO code for the Currency.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Currency"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Currency})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Currency object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Currency)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.Currency object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Currency object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Currency object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Currency)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Currency object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.Currency object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Currency"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlCurrencyProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,Nettiers.AdventureWorks.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:Nettiers.AdventureWorks.Data.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryArchiveProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistoryArchive"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryArchiveProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlTransactionHistoryArchiveProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritory"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritory"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_territoryId">Primary key for SalesTerritory records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesTerritory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesTerritory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesTerritory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.SalesTerritory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryProviderBase.GetByName(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_SalesTerritory_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_name">Sales territory description</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryProviderBase.GetByRowguid(Nettiers.AdventureWorks.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_SalesTerritory_rowguid index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryProviderBase.GetByTerritoryId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SalesTerritory_TerritoryID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_territoryId">Primary key for SalesTerritory records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTerritory})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.SalesTerritory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.SalesTerritory)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.SalesTerritory object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.SalesTerritory object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.SalesTerritory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.SalesTerritory)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.SalesTerritory object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.SalesTerritory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTerritoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCategoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductCategory"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCategoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductCategoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlJobCandidateProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.JobCandidate"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlJobCandidateProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlJobCandidateProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeePayHistoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeePayHistory"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeePayHistoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeePayHistoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlBillOfMaterialsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.BillOfMaterials"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlBillOfMaterialsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.BillOfMaterials"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlBillOfMaterialsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlBillOfMaterialsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlBillOfMaterialsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlBillOfMaterialsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlBillOfMaterialsProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_billOfMaterialsId">Primary key for BillOfMaterials records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlBillOfMaterialsProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.BillOfMaterials objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlBillOfMaterialsProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.BillOfMaterials objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlBillOfMaterialsProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.BillOfMaterials objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlBillOfMaterialsProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.BillOfMaterials objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlBillOfMaterialsProviderBase.GetByComponentId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_BillOfMaterials_Product_ComponentID key.
            	FK_BillOfMaterials_Product_ComponentID Description: Foreign key constraint referencing Product.ComponentID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_componentId">Component identification number. Foreign key to Product.ProductID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.BillOfMaterials objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlBillOfMaterialsProviderBase.GetByProductAssemblyId(Nettiers.AdventureWorks.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_BillOfMaterials_Product_ProductAssemblyID key.
            	FK_BillOfMaterials_Product_ProductAssemblyID Description: Foreign key constraint referencing Product.ProductAssemblyID.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productAssemblyId">Parent product identification number. Foreign key to Product.ProductID.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.BillOfMaterials objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlBillOfMaterialsProviderBase.GetByProductAssemblyIdComponentIdStartDate(Nettiers.AdventureWorks.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_BillOfMaterials_ProductAssemblyID_ComponentID_StartDate index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productAssemblyId">Parent product identification number. Foreign key to Product.ProductID.</param>
            <param name="_componentId">Component identification number. Foreign key to Product.ProductID.</param>
            <param name="_startDate">Date the component started being used in the assembly item.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.BillOfMaterials"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlBillOfMaterialsProviderBase.GetByUnitMeasureCode(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_BillOfMaterials_UnitMeasureCode index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_unitMeasureCode">Standard code identifying the unit of measure for the quantity.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlBillOfMaterialsProviderBase.GetByBillOfMaterialsId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_BillOfMaterials_BillOfMaterialsID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_billOfMaterialsId">Primary key for BillOfMaterials records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.BillOfMaterials"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlBillOfMaterialsProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.BillOfMaterials})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.BillOfMaterials object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlBillOfMaterialsProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.BillOfMaterials)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.BillOfMaterials object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.BillOfMaterials object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.BillOfMaterials object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlBillOfMaterialsProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.BillOfMaterials)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.BillOfMaterials object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.BillOfMaterials object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlBillOfMaterialsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlBillOfMaterialsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlBillOfMaterialsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlBillOfMaterialsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlBillOfMaterialsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelCatalogDescriptionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.VProductModelCatalogDescription"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelCatalogDescriptionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVProductModelCatalogDescriptionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.VJobCandidate"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVJobCandidateProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Vendor"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Vendor"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorProviderBase.GetByProductIdFromProductVendor(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Vendor objects from the datasource by ProductID in the
            	ProductVendor table. Table Vendor is related to table Product
            	through the (M:N) relationship defined in the ProductVendor table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_productId">Primary key. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of Vendor objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorProviderBase.GetByAddressIdFromVendorAddress(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Vendor objects from the datasource by AddressID in the
            	VendorAddress table. Table Vendor is related to table Address
            	through the (M:N) relationship defined in the VendorAddress table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of Vendor objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorProviderBase.GetByContactIdFromVendorContact(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Vendor objects from the datasource by ContactID in the
            	VendorContact table. Table Vendor is related to table Contact
            	through the (M:N) relationship defined in the VendorContact table.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_contactId">Contact (Vendor employee) identification number. Foreign key to Contact.ContactID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of Vendor objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorProviderBase.Delete(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_vendorId">Primary key for Vendor records.. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Vendor objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Vendor objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Vendor objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorProviderBase.GetPaged(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Vendor objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorProviderBase.GetByAccountNumber(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AK_Vendor_AccountNumber index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_accountNumber">Vendor account (identification) number.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Vendor"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorProviderBase.GetByVendorId(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Vendor_VendorID index.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="_vendorId">Primary key for Vendor records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Vendor"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorProviderBase.BulkInsert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Vendor})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Vendor object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorProviderBase.Insert(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Vendor)">
            <summary>
            	Inserts a Nettiers.AdventureWorks.Entities.Vendor object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Vendor object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Vendor object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorProviderBase.Update(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Entities.Vendor)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="entity">Nettiers.AdventureWorks.Entities.Vendor object to update.</param>
            <remarks>
            	After updating the datasource, the Nettiers.AdventureWorks.Entities.Vendor object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVendorProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProductDescriptionCultureProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProductDescriptionCultureProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductModelProductDescriptionCultureProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVVendorProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.VVendor"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVVendorProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVVendorProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.VSalesPerson"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVSalesPersonProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.VEmployeeDepartment"/> entity.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VEmployeeDepartment objects.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentProviderBase.GetAll(Nettiers.AdventureWorks.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VEmployeeDepartment objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentProviderBase.Get(Nettiers.AdventureWorks.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VEmployeeDepartment objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentProviderBase.Find(Nettiers.AdventureWorks.Data.TransactionManager,Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VEmployeeDepartment objects.</returns>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlVEmployeeDepartmentProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTaxRateProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTaxRate"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTaxRateProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSalesTaxRateProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductPhotoProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductPhoto"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductPhotoProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductPhotoProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductListPriceHistoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductListPriceHistory"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductListPriceHistoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductListPriceHistoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeDepartmentHistoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeDepartmentHistoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlEmployeeDepartmentHistoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOffer"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlSpecialOfferProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProductPhotoProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Nettiers.AdventureWorks.Entities.ProductProductPhoto"/> entity.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProductPhotoProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nettiers.AdventureWorks.Data.SqlClient.SqlProductProductPhotoProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
    </members>
</doc>
