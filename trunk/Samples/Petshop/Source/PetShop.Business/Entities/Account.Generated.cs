//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CSLA 3.6.x CodeSmith Templates.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Account.cs'.
//
//     Template: EditableChild.Generated.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region using declarations

using System;

using Csla;
using Csla.Data;
using Csla.Validation;

#endregion

namespace PetShop.Business
{
	[Serializable]
	public partial class Account : BusinessBase< Account >
	{
        #region Contructor(s)

		private Account()
		{ /* Require use of factory methods */ }
        
        internal Account(SafeDataReader reader)
        {
            Fetch(reader);
        }
        
		#endregion
        
		#region Validation Rules
		
		protected override void AddBusinessRules()
		{
            if(AddBusinessValidationRules())
                return;
            
			ValidationRules.AddRule(CommonRules.StringRequired, "Email");
			ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs("Email", 80));
			ValidationRules.AddRule(CommonRules.StringRequired, "FirstName");
			ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs("FirstName", 80));
			ValidationRules.AddRule(CommonRules.StringRequired, "LastName");
			ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs("LastName", 80));
			ValidationRules.AddRule(CommonRules.StringRequired, "Address1");
			ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs("Address1", 80));
			ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs("Address2", 80));
			ValidationRules.AddRule(CommonRules.StringRequired, "City");
			ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs("City", 80));
			ValidationRules.AddRule(CommonRules.StringRequired, "State");
			ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs("State", 80));
			ValidationRules.AddRule(CommonRules.StringRequired, "Zip");
			ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs("Zip", 20));
			ValidationRules.AddRule(CommonRules.StringRequired, "Country");
			ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs("Country", 20));
			ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs("Phone", 20));
		}
		
		#endregion
        
		#region Business Methods


		private static readonly PropertyInfo< int > _accountIdProperty = RegisterProperty< int >(p => p.AccountId);
		[System.ComponentModel.DataObjectField(true, true)]
		public int AccountId
		{
			get { return GetProperty(_accountIdProperty); }				
		}
        
		private static readonly PropertyInfo< string > _emailProperty = RegisterProperty< string >(p => p.Email);
		public string Email
		{
			get { return GetProperty(_emailProperty); }				
            set
            { 
                OnPropertyChanging("Email");
                SetProperty(_emailProperty, value); 
                OnPropertyChanged("Email");
            }
		}
        
		private static readonly PropertyInfo< string > _firstNameProperty = RegisterProperty< string >(p => p.FirstName);
		public string FirstName
		{
			get { return GetProperty(_firstNameProperty); }				
            set
            { 
                OnPropertyChanging("FirstName");
                SetProperty(_firstNameProperty, value); 
                OnPropertyChanged("FirstName");
            }
		}
        
		private static readonly PropertyInfo< string > _lastNameProperty = RegisterProperty< string >(p => p.LastName);
		public string LastName
		{
			get { return GetProperty(_lastNameProperty); }				
            set
            { 
                OnPropertyChanging("LastName");
                SetProperty(_lastNameProperty, value); 
                OnPropertyChanged("LastName");
            }
		}
        
		private static readonly PropertyInfo< string > _address1Property = RegisterProperty< string >(p => p.Address1);
		public string Address1
		{
			get { return GetProperty(_address1Property); }				
            set
            { 
                OnPropertyChanging("Address1");
                SetProperty(_address1Property, value); 
                OnPropertyChanged("Address1");
            }
		}
        
		private static readonly PropertyInfo< string > _address2Property = RegisterProperty< string >(p => p.Address2);
		public string Address2
		{
			get { return GetProperty(_address2Property); }				
            set
            { 
                OnPropertyChanging("Address2");
                SetProperty(_address2Property, value); 
                OnPropertyChanged("Address2");
            }
		}
        
		private static readonly PropertyInfo< string > _cityProperty = RegisterProperty< string >(p => p.City);
		public string City
		{
			get { return GetProperty(_cityProperty); }				
            set
            { 
                OnPropertyChanging("City");
                SetProperty(_cityProperty, value); 
                OnPropertyChanged("City");
            }
		}
        
		private static readonly PropertyInfo< string > _stateProperty = RegisterProperty< string >(p => p.State);
		public string State
		{
			get { return GetProperty(_stateProperty); }				
            set
            { 
                OnPropertyChanging("State");
                SetProperty(_stateProperty, value); 
                OnPropertyChanged("State");
            }
		}
        
		private static readonly PropertyInfo< string > _zipProperty = RegisterProperty< string >(p => p.Zip);
		public string Zip
		{
			get { return GetProperty(_zipProperty); }				
            set
            { 
                OnPropertyChanging("Zip");
                SetProperty(_zipProperty, value); 
                OnPropertyChanged("Zip");
            }
		}
        
		private static readonly PropertyInfo< string > _countryProperty = RegisterProperty< string >(p => p.Country);
		public string Country
		{
			get { return GetProperty(_countryProperty); }				
            set
            { 
                OnPropertyChanging("Country");
                SetProperty(_countryProperty, value); 
                OnPropertyChanged("Country");
            }
		}
        
		private static readonly PropertyInfo< string > _phoneProperty = RegisterProperty< string >(p => p.Phone);
		public string Phone
		{
			get { return GetProperty(_phoneProperty); }				
            set
            { 
                OnPropertyChanging("Phone");
                SetProperty(_phoneProperty, value); 
                OnPropertyChanged("Phone");
            }
		}
        
		private static readonly PropertyInfo< int > _uniqueIDProperty = RegisterProperty< int >(p => p.UniqueID);
		public int UniqueID
		{
			get { return GetProperty(_uniqueIDProperty); }				
            set
            { 
                OnPropertyChanging("UniqueID");
                SetProperty(_uniqueIDProperty, value); 
                OnPropertyChanged("UniqueID");
            }
		}
		
		private static readonly PropertyInfo< Profile > _profileProperty = RegisterProperty< Profile >(p => p.Profile, Csla.RelationshipTypes.LazyLoad);
		public Profile Profile
		{
			get
            {
                if(!FieldManager.FieldExists(_profileProperty))
                    SetProperty(_profileProperty, Profile.GetProfile(UniqueID));

                   return GetProperty(_profileProperty); 
            }
		}

		#endregion
				
		#region Factory Methods 
		
		internal static Account NewAccount()
		{
			return DataPortal.CreateChild< Account >();
		}
		
		internal static Account GetAccount(int accountId)
		{
			return DataPortal.FetchChild< Account >(
				new AccountCriteria(accountId));
		}
		
		#endregion
		
	}
}