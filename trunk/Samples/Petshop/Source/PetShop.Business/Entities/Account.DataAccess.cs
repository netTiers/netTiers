
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CSLA 3.6.x CodeSmith Templates.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Account.cs'.
//
//     Template: EditableChild.DataAccess.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region using declarations

using System;

using Csla;
using Csla.Data;

using PetShop.Data;

#endregion

namespace PetShop.Business
{
	public partial class Account
	{
		#region Data Access
		
		protected override void Child_Create()
		{
			// TODO: load default values
			// omit this override if you have no defaults to set
			//base.Child_Create();
		}
		
		private void Child_Fetch(SafeDataReader reader)
		{
			Fetch(reader);
		}
		
		private void Child_Insert()
		{
			using(SafeDataReader reader = DataAccessLayer.Instance.AccountInsert(ReadProperty(_emailProperty), ReadProperty(_firstNameProperty), ReadProperty(_lastNameProperty), ReadProperty(_address1Property), ReadProperty(_address2Property), ReadProperty(_cityProperty), ReadProperty(_stateProperty), ReadProperty(_zipProperty), ReadProperty(_countryProperty), ReadProperty(_phoneProperty), ReadProperty(_uniqueIDProperty)))
			{
				if(reader.Read())
				{

					LoadProperty(_accountIdProperty, reader.GetInt32("AccountId"));
				}
			}
		}
		
		private void Child_Update()
		{
            using(SafeDataReader reader = DataAccessLayer.Instance.AccountUpdate(ReadProperty(_accountIdProperty), ReadProperty(_emailProperty), ReadProperty(_firstNameProperty), ReadProperty(_lastNameProperty), ReadProperty(_address1Property), ReadProperty(_address2Property), ReadProperty(_cityProperty), ReadProperty(_stateProperty), ReadProperty(_zipProperty), ReadProperty(_countryProperty), ReadProperty(_phoneProperty), ReadProperty(_uniqueIDProperty)))
            {
			}
		}
		
		private void Child_DeleteSelf()
		{
			DataPortal_Delete(new AccountCriteria(AccountId));
		}
		
        [Transactional(TransactionalTypes.TransactionScope)]
		protected override void DataPortal_Delete(object criteria)
		{
			AccountCriteria theCriteria = criteria as AccountCriteria;
            if (theCriteria != null)
            {
				using(SafeDataReader reader = DataAccessLayer.Instance.AccountDelete(theCriteria.StateBag)) 
				{
				}
			}
        }
        
		private void Fetch(SafeDataReader reader)
		{
			LoadProperty(_accountIdProperty, reader.GetInt32("AccountId"));
			LoadProperty(_emailProperty, reader.GetString("Email"));
			LoadProperty(_firstNameProperty, reader.GetString("FirstName"));
			LoadProperty(_lastNameProperty, reader.GetString("LastName"));
			LoadProperty(_address1Property, reader.GetString("Address1"));
			LoadProperty(_address2Property, reader.GetString("Address2"));
			LoadProperty(_cityProperty, reader.GetString("City"));
			LoadProperty(_stateProperty, reader.GetString("State"));
			LoadProperty(_zipProperty, reader.GetString("Zip"));
			LoadProperty(_countryProperty, reader.GetString("Country"));
			LoadProperty(_phoneProperty, reader.GetString("Phone"));

			LoadProperty(_uniqueIDProperty, reader.GetInt32("UniqueID"));

            MarkAsChild();
            MarkOld();
        }
		
		#endregion
	}
}