
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CSLA 3.6.x CodeSmith Templates.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Inventory.cs'.
//
//     Template: EditableRoot.DataAccess.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region using declarations

using System;

using Csla;
using Csla.Data;

using PetShop.Data;

#endregion

namespace PetShop.Business
{
	public partial class Inventory
	{		
		#region Data Access

		[RunLocal]
		protected override void DataPortal_Create()
		{
			//base.DataPortal_Create();

			ValidationRules.CheckRules();
		}

		private void DataPortal_Fetch(InventoryCriteria criteria)
		{
            using(SafeDataReader reader = DataAccessLayer.Instance.InventoryFetch(criteria.StateBag)) 
			{
				if(reader.Read())
				{	
					Fetch(reader);
				}
			}
        }
		
        private void Fetch(SafeDataReader reader)
		{
			LoadProperty(_itemIdProperty, reader.GetString("ItemId"));
			LoadProperty(_qtyProperty, reader.GetInt32("Qty"));


            MarkOld();
        }
		
		[Transactional(TransactionalTypes.TransactionScope)]
		protected override void DataPortal_Insert()
		{
			using(SafeDataReader reader = DataAccessLayer.Instance.InventoryInsert(ReadProperty(_itemIdProperty), ReadProperty(_qtyProperty)))
			{
				if(reader.Read())
				{

				}
			}
            
		}
		
		[Transactional(TransactionalTypes.TransactionScope)]
		protected override void DataPortal_Update()
		{
            using(SafeDataReader reader = DataAccessLayer.Instance.InventoryUpdate(ReadProperty(_itemIdProperty), ReadProperty(_qtyProperty)))
            {
            }
            
		}
		
		[Transactional(TransactionalTypes.TransactionScope)]
		protected override void DataPortal_DeleteSelf()
		{
            DataPortal_Delete(new InventoryCriteria(ItemId));
        }
		
		[Transactional(TransactionalTypes.TransactionScope)]
		protected override void DataPortal_Delete(object criteria)
		{
			InventoryCriteria theCriteria = criteria as InventoryCriteria;
            if (theCriteria != null)
            {
				using(SafeDataReader reader = DataAccessLayer.Instance.InventoryDelete(theCriteria.StateBag)) 
				{
				}
			}
        }


		#endregion
	}
}