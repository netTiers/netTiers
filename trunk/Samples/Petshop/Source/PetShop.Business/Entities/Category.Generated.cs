//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CSLA 3.6.x CodeSmith Templates.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Category.cs'.
//
//     Template path: EditableRoot.Generated.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region using declarations

using System;

using Csla;
using Csla.Data;
using Csla.Validation;

#endregion

namespace PetShop.Business
{
	[Serializable]
	public partial class Category : BusinessBase< Category >
	{
        #region Contructor(s)

		private Category()
		{ /* Require use of factory methods */ }
        
        internal Category(SafeDataReader reader)
        {
            Fetch(reader);
        }
        
		#endregion
        
		#region Validation Rules
		
		protected override void AddBusinessRules()
		{
            if(AddBusinessValidationRules())
                return;
                
			ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs("Name", 80));
			ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs("Descn", 255));
			ValidationRules.AddRule(CommonRules.StringRequired, "CategoryId");
			ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs("CategoryId", 10));
		}
		
		#endregion
		
		#region Business Methods


		private static readonly PropertyInfo< string > _categoryIdProperty = RegisterProperty< string >(p => p.CategoryId);
		[System.ComponentModel.DataObjectField(true, false)]
		public string CategoryId
		{
			get { return GetProperty(_categoryIdProperty); }				
            set
            {
                OnPropertyChanging("CategoryId");
                SetProperty(_categoryIdProperty, value);
                OnPropertyChanged("CategoryId");
            }
		}
		
		private static readonly PropertyInfo< string > _nameProperty = RegisterProperty< string >(p => p.Name);
		public string Name
		{
			get { return GetProperty(_nameProperty); }				
            set
            {
                OnPropertyChanging("Name");
                SetProperty(_nameProperty, value);
                OnPropertyChanged("Name");
            }
		}
		
		private static readonly PropertyInfo< string > _descnProperty = RegisterProperty< string >(p => p.Descn);
		public string Descn
		{
			get { return GetProperty(_descnProperty); }				
            set
            {
                OnPropertyChanging("Descn");
                SetProperty(_descnProperty, value);
                OnPropertyChanged("Descn");
            }
		}
		
		private static readonly PropertyInfo< ProductList > _productsProperty = RegisterProperty<ProductList>(p => p.Products, Csla.RelationshipTypes.LazyLoad);
		public ProductList Products
		{
			get
            {
                if(!FieldManager.FieldExists(_productsProperty))
                    SetProperty(_productsProperty, ProductList.GetByCategoryId(CategoryId));

                return GetProperty(_productsProperty); 
            }
		}

		#endregion
		
		#region Factory Methods 
		
		public static Category NewCategory()
		{
			return DataPortal.Create< Category >();
		}
		
		public static Category GetCategory(string categoryId)
		{
			return DataPortal.Fetch< Category >(
                new CategoryCriteria(categoryId));
		}

        public static void DeleteCategory(string categoryId)
		{
                DataPortal.Delete(new CategoryCriteria(categoryId));
		}

        #endregion
        
	}
}