//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CSLA 3.6.x CodeSmith Templates.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Item.cs'.
//
//     Template: SwitchableObject.Generated.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region using declarations

using System;

using Csla;
using Csla.Data;
using Csla.Validation;

#endregion

namespace PetShop.Business
{
	[Serializable]
	public partial class Item : BusinessBase< Item >
	{
        #region Contructor(s)

		private Item()
		{ /* Require use of factory methods */ }
        
        internal Item(SafeDataReader reader)
        {
            Fetch(reader);
        }
        
		#endregion
        
		#region Validation Rules
		
		protected override void AddBusinessRules()
		{
            if(AddBusinessValidationRules())
                return;
            
			ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs("Status", 2));
			ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs("Name", 80));
			ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs("Image", 80));
			ValidationRules.AddRule(CommonRules.StringRequired, "ProductId");
			ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs("ProductId", 10));
		}
		
		#endregion
		
		#region Business Methods


		private static readonly PropertyInfo< string > _itemIdProperty = RegisterProperty< string >(p => p.ItemId);
		[System.ComponentModel.DataObjectField(true, false)]
		public string ItemId
		{
			get { return GetProperty(_itemIdProperty); }				
            set
            { 
                OnPropertyChanging("ItemId");
                SetProperty(_itemIdProperty, value); 
                OnPropertyChanged("ItemId");
            }
		}
		
		private static readonly PropertyInfo< decimal? > _listPriceProperty = RegisterProperty< decimal? >(p => p.ListPrice);
		public decimal? ListPrice
		{
			get { return GetProperty(_listPriceProperty); }				
            set
            { 
                OnPropertyChanging("ListPrice");
                SetProperty(_listPriceProperty, value); 
                OnPropertyChanged("ListPrice");
            }
		}
		
		private static readonly PropertyInfo< decimal? > _unitCostProperty = RegisterProperty< decimal? >(p => p.UnitCost);
		public decimal? UnitCost
		{
			get { return GetProperty(_unitCostProperty); }				
            set
            { 
                OnPropertyChanging("UnitCost");
                SetProperty(_unitCostProperty, value); 
                OnPropertyChanged("UnitCost");
            }
		}
		
		private static readonly PropertyInfo< string > _statusProperty = RegisterProperty< string >(p => p.Status);
		public string Status
		{
			get { return GetProperty(_statusProperty); }				
            set
            { 
                OnPropertyChanging("Status");
                SetProperty(_statusProperty, value); 
                OnPropertyChanged("Status");
            }
		}
		
		private static readonly PropertyInfo< string > _nameProperty = RegisterProperty< string >(p => p.Name);
		public string Name
		{
			get { return GetProperty(_nameProperty); }				
            set
            { 
                OnPropertyChanging("Name");
                SetProperty(_nameProperty, value); 
                OnPropertyChanged("Name");
            }
		}
		
		private static readonly PropertyInfo< string > _imageProperty = RegisterProperty< string >(p => p.Image);
		public string Image
		{
			get { return GetProperty(_imageProperty); }				
            set
            { 
                OnPropertyChanging("Image");
                SetProperty(_imageProperty, value); 
                OnPropertyChanged("Image");
            }
		}
		
		private static readonly PropertyInfo< string > _productIdProperty = RegisterProperty< string >(p => p.ProductId);
		public string ProductId
		{
			get { return GetProperty(_productIdProperty); }				
            set
            { 
                OnPropertyChanging("ProductId");
                SetProperty(_productIdProperty, value); 
                OnPropertyChanged("ProductId");
            }
		}
		
		private static readonly PropertyInfo< int > _suppIdProperty = RegisterProperty< int >(p => p.SuppId);
		public int SuppId
		{
			get { return GetProperty(_suppIdProperty); }				
            set
            { 
                OnPropertyChanging("SuppId");
                SetProperty(_suppIdProperty, value); 
                OnPropertyChanged("SuppId");
            }
		}
		
		private static readonly PropertyInfo< Product > _productProperty = RegisterProperty< Product >(p => p.Product, Csla.RelationshipTypes.LazyLoad);
		public Product Product
		{
			get
            {
                if(!FieldManager.FieldExists(_productProperty))
                    SetProperty(_productProperty, Product.GetProduct(ProductId));

                   return GetProperty(_productProperty); 
            }
		}

		private static readonly PropertyInfo< Supplier > _supplierProperty = RegisterProperty< Supplier >(p => p.Supplier, Csla.RelationshipTypes.LazyLoad);
		public Supplier Supplier
		{
			get
            {
                if(!FieldManager.FieldExists(_supplierProperty))
                    SetProperty(_supplierProperty, Supplier.GetSupplier(SuppId));

                   return GetProperty(_supplierProperty); 
            }
		}

		#endregion
				
		#region Root Factory Methods 
		
		public static Item NewItem()
		{
			return DataPortal.Create< Item >();
		}
		
		public static Item GetItem(string itemId)
		{
			return DataPortal.Fetch< Item >(
                new ItemCriteria(itemId));
		}

        public static void DeleteItem(string itemId)
		{
                DataPortal.Delete(new ItemCriteria(itemId));
		}
		
		#endregion
		
		#region Child Factory Methods 
		
		internal static Item NewItemChild()
		{
			return DataPortal.CreateChild< Item >();
		}
		
		public static Item GetItemChild(string itemId)
		{
            return DataPortal.FetchChild< Item >(
				new ItemCriteria(itemId));
		}

		#endregion
		
	}
}