//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CSLA 3.6.x CodeSmith Templates.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Inventory.cs'.
//
//     Template path: EditableRoot.Generated.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region using declarations

using System;

using Csla;
using Csla.Data;
using Csla.Validation;

#endregion

namespace PetShop.Business
{
	[Serializable]
	public partial class Inventory : BusinessBase< Inventory >
	{
        #region Contructor(s)

		private Inventory()
		{ /* Require use of factory methods */ }
        
        internal Inventory(SafeDataReader reader)
        {
            Fetch(reader);
        }
        
		#endregion
        
		#region Validation Rules
		
		protected override void AddBusinessRules()
		{
            if(AddBusinessValidationRules())
                return;
                
		}
		
		#endregion
		
		#region Business Methods


		private static readonly PropertyInfo< string > _itemIdProperty = RegisterProperty< string >(p => p.ItemId);
		[System.ComponentModel.DataObjectField(true, false)]
		public string ItemId
		{
			get { return GetProperty(_itemIdProperty); }				
            set
            {
                OnPropertyChanging("ItemId");
                SetProperty(_itemIdProperty, value);
                OnPropertyChanged("ItemId");
            }
		}
		
		private static readonly PropertyInfo< int > _qtyProperty = RegisterProperty< int >(p => p.Qty);
		public int Qty
		{
			get { return GetProperty(_qtyProperty); }				
            set
            {
                OnPropertyChanging("Qty");
                SetProperty(_qtyProperty, value);
                OnPropertyChanged("Qty");
            }
		}
		
		#endregion
		
		#region Factory Methods 
		
		public static Inventory NewInventory()
		{
			return DataPortal.Create< Inventory >();
		}
		
		public static Inventory GetInventory(string itemId)
		{
			return DataPortal.Fetch< Inventory >(
                new InventoryCriteria(itemId));
		}

        public static void DeleteInventory(string itemId)
		{
                DataPortal.Delete(new InventoryCriteria(itemId));
		}

        #endregion
        
	}
}