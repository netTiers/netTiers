
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Account.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using PetShop.Business.Validation;
#endregion

namespace PetShop.Business
{
	///<summary>
	/// An object representation of the 'Account' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AccountBase : EntityBase, IAccount, IEntityId<AccountKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AccountEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AccountEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AccountEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Account> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AccountEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AccountEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AccountBase"/> instance.
		///</summary>
		public AccountBase()
		{
			this.entityData = new AccountEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AccountBase"/> instance.
		///</summary>
		///<param name="_uniqueId"></param>
		///<param name="_email"></param>
		///<param name="_firstName"></param>
		///<param name="_lastName"></param>
		///<param name="_address1"></param>
		///<param name="_address2"></param>
		///<param name="_city"></param>
		///<param name="_state"></param>
		///<param name="_zip"></param>
		///<param name="_country"></param>
		///<param name="_phone"></param>
		public AccountBase(int _uniqueId, string _email, string _firstName, string _lastName, 
			string _address1, string _address2, string _city, string _state, string _zip, string _country, 
			string _phone)
		{
			this.entityData = new AccountEntityData();
			this.backupData = null;

			this.UniqueId = _uniqueId;
			this.Email = _email;
			this.FirstName = _firstName;
			this.LastName = _lastName;
			this.Address1 = _address1;
			this.Address2 = _address2;
			this.City = _city;
			this.State = _state;
			this.Zip = _zip;
			this.Country = _country;
			this.Phone = _phone;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Account"/> instance.
		///</summary>
		///<param name="_uniqueId"></param>
		///<param name="_email"></param>
		///<param name="_firstName"></param>
		///<param name="_lastName"></param>
		///<param name="_address1"></param>
		///<param name="_address2"></param>
		///<param name="_city"></param>
		///<param name="_state"></param>
		///<param name="_zip"></param>
		///<param name="_country"></param>
		///<param name="_phone"></param>
		public static Account CreateAccount(int _uniqueId, string _email, string _firstName, string _lastName, 
			string _address1, string _address2, string _city, string _state, string _zip, string _country, 
			string _phone)
		{
			Account newAccount = new Account();
			newAccount.UniqueId = _uniqueId;
			newAccount.Email = _email;
			newAccount.FirstName = _firstName;
			newAccount.LastName = _lastName;
			newAccount.Address1 = _address1;
			newAccount.Address2 = _address2;
			newAccount.City = _city;
			newAccount.State = _state;
			newAccount.Zip = _zip;
			newAccount.Country = _country;
			newAccount.Phone = _phone;
			return newAccount;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AccountId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual int AccountId
		{
			get
			{
				return this.entityData.AccountId; 
			}
			
			set
			{
				if (this.entityData.AccountId == value)
					return;
					
				OnColumnChanging(AccountColumn.AccountId, this.entityData.AccountId);
				this.entityData.AccountId = value;
				this.EntityId.AccountId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccountColumn.AccountId, this.entityData.AccountId);
				OnPropertyChanged("AccountId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UniqueId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual int UniqueId
		{
			get
			{
				return this.entityData.UniqueId; 
			}
			
			set
			{
				if (this.entityData.UniqueId == value)
					return;
					
				OnColumnChanging(AccountColumn.UniqueId, this.entityData.UniqueId);
				this.entityData.UniqueId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccountColumn.UniqueId, this.entityData.UniqueId);
				OnPropertyChanged("UniqueId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Email property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 80)]
		public virtual string Email
		{
			get
			{
				return this.entityData.Email; 
			}
			
			set
			{
				if (this.entityData.Email == value)
					return;
					
				OnColumnChanging(AccountColumn.Email, this.entityData.Email);
				this.entityData.Email = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccountColumn.Email, this.entityData.Email);
				OnPropertyChanged("Email");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FirstName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 80)]
		public virtual string FirstName
		{
			get
			{
				return this.entityData.FirstName; 
			}
			
			set
			{
				if (this.entityData.FirstName == value)
					return;
					
				OnColumnChanging(AccountColumn.FirstName, this.entityData.FirstName);
				this.entityData.FirstName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccountColumn.FirstName, this.entityData.FirstName);
				OnPropertyChanged("FirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 80)]
		public virtual string LastName
		{
			get
			{
				return this.entityData.LastName; 
			}
			
			set
			{
				if (this.entityData.LastName == value)
					return;
					
				OnColumnChanging(AccountColumn.LastName, this.entityData.LastName);
				this.entityData.LastName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccountColumn.LastName, this.entityData.LastName);
				OnPropertyChanged("LastName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Address1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 80)]
		public virtual string Address1
		{
			get
			{
				return this.entityData.Address1; 
			}
			
			set
			{
				if (this.entityData.Address1 == value)
					return;
					
				OnColumnChanging(AccountColumn.Address1, this.entityData.Address1);
				this.entityData.Address1 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccountColumn.Address1, this.entityData.Address1);
				OnPropertyChanged("Address1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Address2 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 80)]
		public virtual string Address2
		{
			get
			{
				return this.entityData.Address2; 
			}
			
			set
			{
				if (this.entityData.Address2 == value)
					return;
					
				OnColumnChanging(AccountColumn.Address2, this.entityData.Address2);
				this.entityData.Address2 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccountColumn.Address2, this.entityData.Address2);
				OnPropertyChanged("Address2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the City property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 80)]
		public virtual string City
		{
			get
			{
				return this.entityData.City; 
			}
			
			set
			{
				if (this.entityData.City == value)
					return;
					
				OnColumnChanging(AccountColumn.City, this.entityData.City);
				this.entityData.City = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccountColumn.City, this.entityData.City);
				OnPropertyChanged("City");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the State property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 80)]
		public virtual string State
		{
			get
			{
				return this.entityData.State; 
			}
			
			set
			{
				if (this.entityData.State == value)
					return;
					
				OnColumnChanging(AccountColumn.State, this.entityData.State);
				this.entityData.State = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccountColumn.State, this.entityData.State);
				OnPropertyChanged("State");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Zip property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual string Zip
		{
			get
			{
				return this.entityData.Zip; 
			}
			
			set
			{
				if (this.entityData.Zip == value)
					return;
					
				OnColumnChanging(AccountColumn.Zip, this.entityData.Zip);
				this.entityData.Zip = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccountColumn.Zip, this.entityData.Zip);
				OnPropertyChanged("Zip");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Country property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual string Country
		{
			get
			{
				return this.entityData.Country; 
			}
			
			set
			{
				if (this.entityData.Country == value)
					return;
					
				OnColumnChanging(AccountColumn.Country, this.entityData.Country);
				this.entityData.Country = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccountColumn.Country, this.entityData.Country);
				OnPropertyChanged("Country");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Phone property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual string Phone
		{
			get
			{
				return this.entityData.Phone; 
			}
			
			set
			{
				if (this.entityData.Phone == value)
					return;
					
				OnColumnChanging(AccountColumn.Phone, this.entityData.Phone);
				this.entityData.Phone = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccountColumn.Phone, this.entityData.Phone);
				OnPropertyChanged("Phone");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Profile"/>.
		/// </summary>
		/// <value>The source Profile for UniqueId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Profile UniqueIdSource
      	{
            get { return entityData.UniqueIdSource; }
            set { entityData.UniqueIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Email", "Email"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Email", "Email", 80));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("FirstName", "First Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FirstName", "First Name", 80));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("LastName", "Last Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LastName", "Last Name", 80));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Address1", "Address1"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Address1", "Address1", 80));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Address2", "Address2", 80));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("City", "City"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("City", "City", 80));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("State", "State"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("State", "State", 80));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Zip", "Zip"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Zip", "Zip", 20));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Country", "Country"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Country", "Country", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Phone", "Phone", 20));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Account"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"AccountId", "UniqueID", "Email", "FirstName", "LastName", "Address1", "Address2", "City", "State", "Zip", "Country", "Phone"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AccountEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Account) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Account>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Account);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Account Entity 
		///</summary>
		protected virtual Account Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Account copy = new Account();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AccountId = this.AccountId;
				copy.UniqueId = this.UniqueId;
				copy.Email = this.Email;
				copy.FirstName = this.FirstName;
				copy.LastName = this.LastName;
				copy.Address1 = this.Address1;
				copy.Address2 = this.Address2;
				copy.City = this.City;
				copy.State = this.State;
				copy.Zip = this.Zip;
				copy.Country = this.Country;
				copy.Phone = this.Phone;
			
			if (this.UniqueIdSource != null && existingCopies.Contains(this.UniqueIdSource))
				copy.UniqueIdSource = existingCopies[this.UniqueIdSource] as Profile;
			else
				copy.UniqueIdSource = MakeCopyOf(this.UniqueIdSource, existingCopies) as Profile;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Account Entity 
		///</summary>
		public virtual Account Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Account Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Account DeepCopy()
		{
			return EntityHelper.Clone<Account>(this as Account);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AccountEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AccountEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AccountEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AccountColumn column)
		{
			switch(column)
			{
					case AccountColumn.AccountId:
					return entityData.AccountId != _originalData.AccountId;
					case AccountColumn.UniqueId:
					return entityData.UniqueId != _originalData.UniqueId;
					case AccountColumn.Email:
					return entityData.Email != _originalData.Email;
					case AccountColumn.FirstName:
					return entityData.FirstName != _originalData.FirstName;
					case AccountColumn.LastName:
					return entityData.LastName != _originalData.LastName;
					case AccountColumn.Address1:
					return entityData.Address1 != _originalData.Address1;
					case AccountColumn.Address2:
					return entityData.Address2 != _originalData.Address2;
					case AccountColumn.City:
					return entityData.City != _originalData.City;
					case AccountColumn.State:
					return entityData.State != _originalData.State;
					case AccountColumn.Zip:
					return entityData.Zip != _originalData.Zip;
					case AccountColumn.Country:
					return entityData.Country != _originalData.Country;
					case AccountColumn.Phone:
					return entityData.Phone != _originalData.Phone;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AccountColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AccountId != _originalData.AccountId;
			result = result || entityData.UniqueId != _originalData.UniqueId;
			result = result || entityData.Email != _originalData.Email;
			result = result || entityData.FirstName != _originalData.FirstName;
			result = result || entityData.LastName != _originalData.LastName;
			result = result || entityData.Address1 != _originalData.Address1;
			result = result || entityData.Address2 != _originalData.Address2;
			result = result || entityData.City != _originalData.City;
			result = result || entityData.State != _originalData.State;
			result = result || entityData.Zip != _originalData.Zip;
			result = result || entityData.Country != _originalData.Country;
			result = result || entityData.Phone != _originalData.Phone;
			return result;
		}	
		
		///<summary>
		///  Returns a Account Entity with the original data.
		///</summary>
		public Account GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAccount(
				_originalData.UniqueId,
				_originalData.Email,
				_originalData.FirstName,
				_originalData.LastName,
				_originalData.Address1,
				_originalData.Address2,
				_originalData.City,
				_originalData.State,
				_originalData.Zip,
				_originalData.Country,
				_originalData.Phone
				);
				
			return (Account)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AccountBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AccountBase)
				return ValueEquals(this, (AccountBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AccountBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AccountId.GetHashCode() ^ 
					this.UniqueId.GetHashCode() ^ 
					this.Email.GetHashCode() ^ 
					this.FirstName.GetHashCode() ^ 
					this.LastName.GetHashCode() ^ 
					this.Address1.GetHashCode() ^ 
					((this.Address2 == null) ? string.Empty : this.Address2.ToString()).GetHashCode() ^ 
					this.City.GetHashCode() ^ 
					this.State.GetHashCode() ^ 
					this.Zip.GetHashCode() ^ 
					this.Country.GetHashCode() ^ 
					((this.Phone == null) ? string.Empty : this.Phone.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AccountBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AccountBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AccountBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AccountBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AccountBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AccountBase Object1, AccountBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AccountId != Object2.AccountId)
				equal = false;
			if (Object1.UniqueId != Object2.UniqueId)
				equal = false;
			if (Object1.Email != Object2.Email)
				equal = false;
			if (Object1.FirstName != Object2.FirstName)
				equal = false;
			if (Object1.LastName != Object2.LastName)
				equal = false;
			if (Object1.Address1 != Object2.Address1)
				equal = false;
			if ( Object1.Address2 != null && Object2.Address2 != null )
			{
				if (Object1.Address2 != Object2.Address2)
					equal = false;
			}
			else if (Object1.Address2 == null ^ Object2.Address2 == null )
			{
				equal = false;
			}
			if (Object1.City != Object2.City)
				equal = false;
			if (Object1.State != Object2.State)
				equal = false;
			if (Object1.Zip != Object2.Zip)
				equal = false;
			if (Object1.Country != Object2.Country)
				equal = false;
			if ( Object1.Phone != null && Object2.Phone != null )
			{
				if (Object1.Phone != Object2.Phone)
					equal = false;
			}
			else if (Object1.Phone == null ^ Object2.Phone == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AccountBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AccountComparer GetComparer()
        {
            return new AccountComparer();
        }
        */

        // Comparer delegates back to Account
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Account rhs, AccountColumn which)
        {
            switch (which)
            {
            	
            	
            	case AccountColumn.AccountId:
            		return this.AccountId.CompareTo(rhs.AccountId);
            		
            		                 
            	
            	
            	case AccountColumn.UniqueId:
            		return this.UniqueId.CompareTo(rhs.UniqueId);
            		
            		                 
            	
            	
            	case AccountColumn.Email:
            		return this.Email.CompareTo(rhs.Email);
            		
            		                 
            	
            	
            	case AccountColumn.FirstName:
            		return this.FirstName.CompareTo(rhs.FirstName);
            		
            		                 
            	
            	
            	case AccountColumn.LastName:
            		return this.LastName.CompareTo(rhs.LastName);
            		
            		                 
            	
            	
            	case AccountColumn.Address1:
            		return this.Address1.CompareTo(rhs.Address1);
            		
            		                 
            	
            	
            	case AccountColumn.Address2:
            		return this.Address2.CompareTo(rhs.Address2);
            		
            		                 
            	
            	
            	case AccountColumn.City:
            		return this.City.CompareTo(rhs.City);
            		
            		                 
            	
            	
            	case AccountColumn.State:
            		return this.State.CompareTo(rhs.State);
            		
            		                 
            	
            	
            	case AccountColumn.Zip:
            		return this.Zip.CompareTo(rhs.Zip);
            		
            		                 
            	
            	
            	case AccountColumn.Country:
            		return this.Country.CompareTo(rhs.Country);
            		
            		                 
            	
            	
            	case AccountColumn.Phone:
            		return this.Phone.CompareTo(rhs.Phone);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AccountKey> Members
		
		// member variable for the EntityId property
		private AccountKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AccountKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AccountKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Account")
					.Append("|").Append( this.AccountId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- AccountId: {0}{12}- UniqueId: {1}{12}- Email: {2}{12}- FirstName: {3}{12}- LastName: {4}{12}- Address1: {5}{12}- Address2: {6}{12}- City: {7}{12}- State: {8}{12}- Zip: {9}{12}- Country: {10}{12}- Phone: {11}{12}{14}", 
				this.AccountId,
				this.UniqueId,
				this.Email,
				this.FirstName,
				this.LastName,
				this.Address1,
				(this.Address2 == null) ? string.Empty : this.Address2.ToString(),
				this.City,
				this.State,
				this.Zip,
				this.Country,
				(this.Phone == null) ? string.Empty : this.Phone.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Account' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AccountEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// AccountId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Account"</remarks>
		public int AccountId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// UniqueID : 
		/// </summary>
		public int		  UniqueId = (int)0;
		
		/// <summary>
		/// Email : 
		/// </summary>
		public string		  Email = string.Empty;
		
		/// <summary>
		/// FirstName : 
		/// </summary>
		public string		  FirstName = string.Empty;
		
		/// <summary>
		/// LastName : 
		/// </summary>
		public string		  LastName = string.Empty;
		
		/// <summary>
		/// Address1 : 
		/// </summary>
		public string		  Address1 = string.Empty;
		
		/// <summary>
		/// Address2 : 
		/// </summary>
		public string		  Address2 = null;
		
		/// <summary>
		/// City : 
		/// </summary>
		public string		  City = string.Empty;
		
		/// <summary>
		/// State : 
		/// </summary>
		public string		  State = string.Empty;
		
		/// <summary>
		/// Zip : 
		/// </summary>
		public string		  Zip = string.Empty;
		
		/// <summary>
		/// Country : 
		/// </summary>
		public string		  Country = string.Empty;
		
		/// <summary>
		/// Phone : 
		/// </summary>
		public string		  Phone = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Profile _uniqueIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Profile"/>.
		/// </summary>
		/// <value>The source Profile for UniqueId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Profile UniqueIdSource
      	{
            get { return this._uniqueIdSource; }
            set { this._uniqueIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AccountEntityData _tmp = new AccountEntityData();
						
			_tmp.AccountId = this.AccountId;
			
			_tmp.UniqueId = this.UniqueId;
			_tmp.Email = this.Email;
			_tmp.FirstName = this.FirstName;
			_tmp.LastName = this.LastName;
			_tmp.Address1 = this.Address1;
			_tmp.Address2 = this.Address2;
			_tmp.City = this.City;
			_tmp.State = this.State;
			_tmp.Zip = this.Zip;
			_tmp.Country = this.Country;
			_tmp.Phone = this.Phone;
			
			#region Source Parent Composite Entities
			if (this.UniqueIdSource != null)
				_tmp.UniqueIdSource = MakeCopyOf(this.UniqueIdSource) as Profile;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AccountEntityData _tmp = new AccountEntityData();
						
			_tmp.AccountId = this.AccountId;
			
			_tmp.UniqueId = this.UniqueId;
			_tmp.Email = this.Email;
			_tmp.FirstName = this.FirstName;
			_tmp.LastName = this.LastName;
			_tmp.Address1 = this.Address1;
			_tmp.Address2 = this.Address2;
			_tmp.City = this.City;
			_tmp.State = this.State;
			_tmp.Zip = this.Zip;
			_tmp.Country = this.Country;
			_tmp.Phone = this.Phone;
			
			#region Source Parent Composite Entities
			if (this.UniqueIdSource != null && existingCopies.Contains(this.UniqueIdSource))
				_tmp.UniqueIdSource = existingCopies[this.UniqueIdSource] as Profile;
			else
				_tmp.UniqueIdSource = MakeCopyOf(this.UniqueIdSource, existingCopies) as Profile;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccountColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AccountColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccountColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AccountColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccountColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AccountColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AccountEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AccountEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccountColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AccountColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AccountEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AccountEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AccountEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Account"/> object.
	/// </remarks>
	public class AccountEventArgs : System.EventArgs
	{
		private AccountColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AccountEventArgs class.
		///</summary>
		public AccountEventArgs(AccountColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AccountEventArgs class.
		///</summary>
		public AccountEventArgs(AccountColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AccountColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AccountColumn" />
		public AccountColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Account related events.
	///</summary>
	public delegate void AccountEventHandler(object sender, AccountEventArgs e);
	
	#region AccountComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AccountComparer : System.Collections.Generic.IComparer<Account>
	{
		AccountColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AccountComparer"/> class.
        /// </summary>
		public AccountComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AccountComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AccountComparer(AccountColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Account"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Account"/> to compare.</param>
        /// <param name="b">The second <c>Account</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Account a, Account b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Account entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Account a, Account b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AccountColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AccountKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Account"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AccountKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AccountKey class.
		/// </summary>
		public AccountKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AccountKey class.
		/// </summary>
		public AccountKey(AccountBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AccountId = entity.AccountId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AccountKey class.
		/// </summary>
		public AccountKey(int _accountId)
		{
			#region Init Properties

			this.AccountId = _accountId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AccountBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AccountBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AccountId property
		private int _accountId;
		
		/// <summary>
		/// Gets or sets the AccountId property.
		/// </summary>
		public int AccountId
		{
			get { return _accountId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AccountId = value;
				
				_accountId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AccountId = ( values["AccountId"] != null ) ? (int) EntityUtil.ChangeType(values["AccountId"], typeof(int)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AccountId", AccountId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AccountId: {0}{1}",
								AccountId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AccountColumn Enum
	
	/// <summary>
	/// Enumerate the Account columns.
	/// </summary>
	[Serializable]
	public enum AccountColumn : int
	{
		/// <summary>
		/// AccountId : 
		/// </summary>
		[EnumTextValue("AccountId")]
		[ColumnEnum("AccountId", typeof(int), System.Data.DbType.Int32, true, true, false)]
		AccountId = 1,
		/// <summary>
		/// UniqueId : 
		/// </summary>
		[EnumTextValue("UniqueID")]
		[ColumnEnum("UniqueID", typeof(int), System.Data.DbType.Int32, false, false, false)]
		UniqueId = 2,
		/// <summary>
		/// Email : 
		/// </summary>
		[EnumTextValue("Email")]
		[ColumnEnum("Email", typeof(string), System.Data.DbType.AnsiString, false, false, false, 80)]
		Email = 3,
		/// <summary>
		/// FirstName : 
		/// </summary>
		[EnumTextValue("FirstName")]
		[ColumnEnum("FirstName", typeof(string), System.Data.DbType.AnsiString, false, false, false, 80)]
		FirstName = 4,
		/// <summary>
		/// LastName : 
		/// </summary>
		[EnumTextValue("LastName")]
		[ColumnEnum("LastName", typeof(string), System.Data.DbType.AnsiString, false, false, false, 80)]
		LastName = 5,
		/// <summary>
		/// Address1 : 
		/// </summary>
		[EnumTextValue("Address1")]
		[ColumnEnum("Address1", typeof(string), System.Data.DbType.AnsiString, false, false, false, 80)]
		Address1 = 6,
		/// <summary>
		/// Address2 : 
		/// </summary>
		[EnumTextValue("Address2")]
		[ColumnEnum("Address2", typeof(string), System.Data.DbType.AnsiString, false, false, true, 80)]
		Address2 = 7,
		/// <summary>
		/// City : 
		/// </summary>
		[EnumTextValue("City")]
		[ColumnEnum("City", typeof(string), System.Data.DbType.AnsiString, false, false, false, 80)]
		City = 8,
		/// <summary>
		/// State : 
		/// </summary>
		[EnumTextValue("State")]
		[ColumnEnum("State", typeof(string), System.Data.DbType.AnsiString, false, false, false, 80)]
		State = 9,
		/// <summary>
		/// Zip : 
		/// </summary>
		[EnumTextValue("Zip")]
		[ColumnEnum("Zip", typeof(string), System.Data.DbType.AnsiString, false, false, false, 20)]
		Zip = 10,
		/// <summary>
		/// Country : 
		/// </summary>
		[EnumTextValue("Country")]
		[ColumnEnum("Country", typeof(string), System.Data.DbType.AnsiString, false, false, false, 20)]
		Country = 11,
		/// <summary>
		/// Phone : 
		/// </summary>
		[EnumTextValue("Phone")]
		[ColumnEnum("Phone", typeof(string), System.Data.DbType.AnsiString, false, false, true, 20)]
		Phone = 12
	}//End enum

	#endregion AccountColumn Enum

} // end namespace
