
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Order.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using PetShop.Business.Validation;
#endregion

namespace PetShop.Business
{
	///<summary>
	/// An object representation of the 'Orders' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class OrderBase : EntityBase, IOrder, IEntityId<OrderKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private OrderEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private OrderEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private OrderEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Order> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event OrderEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event OrderEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="OrderBase"/> instance.
		///</summary>
		public OrderBase()
		{
			this.entityData = new OrderEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="OrderBase"/> instance.
		///</summary>
		///<param name="_userId"></param>
		///<param name="_orderDate"></param>
		///<param name="_shipAddr1"></param>
		///<param name="_shipAddr2"></param>
		///<param name="_shipCity"></param>
		///<param name="_shipState"></param>
		///<param name="_shipZip"></param>
		///<param name="_shipCountry"></param>
		///<param name="_billAddr1"></param>
		///<param name="_billAddr2"></param>
		///<param name="_billCity"></param>
		///<param name="_billState"></param>
		///<param name="_billZip"></param>
		///<param name="_billCountry"></param>
		///<param name="_courier"></param>
		///<param name="_totalPrice"></param>
		///<param name="_billToFirstName"></param>
		///<param name="_billToLastName"></param>
		///<param name="_shipToFirstName"></param>
		///<param name="_shipToLastName"></param>
		///<param name="_authorizationNumber"></param>
		///<param name="_locale"></param>
		public OrderBase(string _userId, System.DateTime _orderDate, string _shipAddr1, string _shipAddr2, 
			string _shipCity, string _shipState, string _shipZip, string _shipCountry, string _billAddr1, 
			string _billAddr2, string _billCity, string _billState, string _billZip, string _billCountry, 
			string _courier, decimal _totalPrice, string _billToFirstName, string _billToLastName, string _shipToFirstName, 
			string _shipToLastName, int _authorizationNumber, string _locale)
		{
			this.entityData = new OrderEntityData();
			this.backupData = null;

			this.UserId = _userId;
			this.OrderDate = _orderDate;
			this.ShipAddr1 = _shipAddr1;
			this.ShipAddr2 = _shipAddr2;
			this.ShipCity = _shipCity;
			this.ShipState = _shipState;
			this.ShipZip = _shipZip;
			this.ShipCountry = _shipCountry;
			this.BillAddr1 = _billAddr1;
			this.BillAddr2 = _billAddr2;
			this.BillCity = _billCity;
			this.BillState = _billState;
			this.BillZip = _billZip;
			this.BillCountry = _billCountry;
			this.Courier = _courier;
			this.TotalPrice = _totalPrice;
			this.BillToFirstName = _billToFirstName;
			this.BillToLastName = _billToLastName;
			this.ShipToFirstName = _shipToFirstName;
			this.ShipToLastName = _shipToLastName;
			this.AuthorizationNumber = _authorizationNumber;
			this.Locale = _locale;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Order"/> instance.
		///</summary>
		///<param name="_userId"></param>
		///<param name="_orderDate"></param>
		///<param name="_shipAddr1"></param>
		///<param name="_shipAddr2"></param>
		///<param name="_shipCity"></param>
		///<param name="_shipState"></param>
		///<param name="_shipZip"></param>
		///<param name="_shipCountry"></param>
		///<param name="_billAddr1"></param>
		///<param name="_billAddr2"></param>
		///<param name="_billCity"></param>
		///<param name="_billState"></param>
		///<param name="_billZip"></param>
		///<param name="_billCountry"></param>
		///<param name="_courier"></param>
		///<param name="_totalPrice"></param>
		///<param name="_billToFirstName"></param>
		///<param name="_billToLastName"></param>
		///<param name="_shipToFirstName"></param>
		///<param name="_shipToLastName"></param>
		///<param name="_authorizationNumber"></param>
		///<param name="_locale"></param>
		public static Order CreateOrder(string _userId, System.DateTime _orderDate, string _shipAddr1, string _shipAddr2, 
			string _shipCity, string _shipState, string _shipZip, string _shipCountry, string _billAddr1, 
			string _billAddr2, string _billCity, string _billState, string _billZip, string _billCountry, 
			string _courier, decimal _totalPrice, string _billToFirstName, string _billToLastName, string _shipToFirstName, 
			string _shipToLastName, int _authorizationNumber, string _locale)
		{
			Order newOrder = new Order();
			newOrder.UserId = _userId;
			newOrder.OrderDate = _orderDate;
			newOrder.ShipAddr1 = _shipAddr1;
			newOrder.ShipAddr2 = _shipAddr2;
			newOrder.ShipCity = _shipCity;
			newOrder.ShipState = _shipState;
			newOrder.ShipZip = _shipZip;
			newOrder.ShipCountry = _shipCountry;
			newOrder.BillAddr1 = _billAddr1;
			newOrder.BillAddr2 = _billAddr2;
			newOrder.BillCity = _billCity;
			newOrder.BillState = _billState;
			newOrder.BillZip = _billZip;
			newOrder.BillCountry = _billCountry;
			newOrder.Courier = _courier;
			newOrder.TotalPrice = _totalPrice;
			newOrder.BillToFirstName = _billToFirstName;
			newOrder.BillToLastName = _billToLastName;
			newOrder.ShipToFirstName = _shipToFirstName;
			newOrder.ShipToLastName = _shipToLastName;
			newOrder.AuthorizationNumber = _authorizationNumber;
			newOrder.Locale = _locale;
			return newOrder;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the OrderId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual int OrderId
		{
			get
			{
				return this.entityData.OrderId; 
			}
			
			set
			{
				if (this.entityData.OrderId == value)
					return;
					
				OnColumnChanging(OrderColumn.OrderId, this.entityData.OrderId);
				this.entityData.OrderId = value;
				this.EntityId.OrderId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrderColumn.OrderId, this.entityData.OrderId);
				OnPropertyChanged("OrderId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual string UserId
		{
			get
			{
				return this.entityData.UserId; 
			}
			
			set
			{
				if (this.entityData.UserId == value)
					return;
					
				OnColumnChanging(OrderColumn.UserId, this.entityData.UserId);
				this.entityData.UserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrderColumn.UserId, this.entityData.UserId);
				OnPropertyChanged("UserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrderDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime OrderDate
		{
			get
			{
				return this.entityData.OrderDate; 
			}
			
			set
			{
				if (this.entityData.OrderDate == value)
					return;
					
				OnColumnChanging(OrderColumn.OrderDate, this.entityData.OrderDate);
				this.entityData.OrderDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrderColumn.OrderDate, this.entityData.OrderDate);
				OnPropertyChanged("OrderDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipAddr1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 80)]
		public virtual string ShipAddr1
		{
			get
			{
				return this.entityData.ShipAddr1; 
			}
			
			set
			{
				if (this.entityData.ShipAddr1 == value)
					return;
					
				OnColumnChanging(OrderColumn.ShipAddr1, this.entityData.ShipAddr1);
				this.entityData.ShipAddr1 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrderColumn.ShipAddr1, this.entityData.ShipAddr1);
				OnPropertyChanged("ShipAddr1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipAddr2 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 80)]
		public virtual string ShipAddr2
		{
			get
			{
				return this.entityData.ShipAddr2; 
			}
			
			set
			{
				if (this.entityData.ShipAddr2 == value)
					return;
					
				OnColumnChanging(OrderColumn.ShipAddr2, this.entityData.ShipAddr2);
				this.entityData.ShipAddr2 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrderColumn.ShipAddr2, this.entityData.ShipAddr2);
				OnPropertyChanged("ShipAddr2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipCity property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 80)]
		public virtual string ShipCity
		{
			get
			{
				return this.entityData.ShipCity; 
			}
			
			set
			{
				if (this.entityData.ShipCity == value)
					return;
					
				OnColumnChanging(OrderColumn.ShipCity, this.entityData.ShipCity);
				this.entityData.ShipCity = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrderColumn.ShipCity, this.entityData.ShipCity);
				OnPropertyChanged("ShipCity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipState property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 80)]
		public virtual string ShipState
		{
			get
			{
				return this.entityData.ShipState; 
			}
			
			set
			{
				if (this.entityData.ShipState == value)
					return;
					
				OnColumnChanging(OrderColumn.ShipState, this.entityData.ShipState);
				this.entityData.ShipState = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrderColumn.ShipState, this.entityData.ShipState);
				OnPropertyChanged("ShipState");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipZip property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual string ShipZip
		{
			get
			{
				return this.entityData.ShipZip; 
			}
			
			set
			{
				if (this.entityData.ShipZip == value)
					return;
					
				OnColumnChanging(OrderColumn.ShipZip, this.entityData.ShipZip);
				this.entityData.ShipZip = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrderColumn.ShipZip, this.entityData.ShipZip);
				OnPropertyChanged("ShipZip");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipCountry property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual string ShipCountry
		{
			get
			{
				return this.entityData.ShipCountry; 
			}
			
			set
			{
				if (this.entityData.ShipCountry == value)
					return;
					
				OnColumnChanging(OrderColumn.ShipCountry, this.entityData.ShipCountry);
				this.entityData.ShipCountry = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrderColumn.ShipCountry, this.entityData.ShipCountry);
				OnPropertyChanged("ShipCountry");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillAddr1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 80)]
		public virtual string BillAddr1
		{
			get
			{
				return this.entityData.BillAddr1; 
			}
			
			set
			{
				if (this.entityData.BillAddr1 == value)
					return;
					
				OnColumnChanging(OrderColumn.BillAddr1, this.entityData.BillAddr1);
				this.entityData.BillAddr1 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrderColumn.BillAddr1, this.entityData.BillAddr1);
				OnPropertyChanged("BillAddr1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillAddr2 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 80)]
		public virtual string BillAddr2
		{
			get
			{
				return this.entityData.BillAddr2; 
			}
			
			set
			{
				if (this.entityData.BillAddr2 == value)
					return;
					
				OnColumnChanging(OrderColumn.BillAddr2, this.entityData.BillAddr2);
				this.entityData.BillAddr2 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrderColumn.BillAddr2, this.entityData.BillAddr2);
				OnPropertyChanged("BillAddr2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillCity property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 80)]
		public virtual string BillCity
		{
			get
			{
				return this.entityData.BillCity; 
			}
			
			set
			{
				if (this.entityData.BillCity == value)
					return;
					
				OnColumnChanging(OrderColumn.BillCity, this.entityData.BillCity);
				this.entityData.BillCity = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrderColumn.BillCity, this.entityData.BillCity);
				OnPropertyChanged("BillCity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillState property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 80)]
		public virtual string BillState
		{
			get
			{
				return this.entityData.BillState; 
			}
			
			set
			{
				if (this.entityData.BillState == value)
					return;
					
				OnColumnChanging(OrderColumn.BillState, this.entityData.BillState);
				this.entityData.BillState = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrderColumn.BillState, this.entityData.BillState);
				OnPropertyChanged("BillState");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillZip property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual string BillZip
		{
			get
			{
				return this.entityData.BillZip; 
			}
			
			set
			{
				if (this.entityData.BillZip == value)
					return;
					
				OnColumnChanging(OrderColumn.BillZip, this.entityData.BillZip);
				this.entityData.BillZip = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrderColumn.BillZip, this.entityData.BillZip);
				OnPropertyChanged("BillZip");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillCountry property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual string BillCountry
		{
			get
			{
				return this.entityData.BillCountry; 
			}
			
			set
			{
				if (this.entityData.BillCountry == value)
					return;
					
				OnColumnChanging(OrderColumn.BillCountry, this.entityData.BillCountry);
				this.entityData.BillCountry = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrderColumn.BillCountry, this.entityData.BillCountry);
				OnPropertyChanged("BillCountry");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Courier property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 80)]
		public virtual string Courier
		{
			get
			{
				return this.entityData.Courier; 
			}
			
			set
			{
				if (this.entityData.Courier == value)
					return;
					
				OnColumnChanging(OrderColumn.Courier, this.entityData.Courier);
				this.entityData.Courier = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrderColumn.Courier, this.entityData.Courier);
				OnPropertyChanged("Courier");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalPrice property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual decimal TotalPrice
		{
			get
			{
				return this.entityData.TotalPrice; 
			}
			
			set
			{
				if (this.entityData.TotalPrice == value)
					return;
					
				OnColumnChanging(OrderColumn.TotalPrice, this.entityData.TotalPrice);
				this.entityData.TotalPrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrderColumn.TotalPrice, this.entityData.TotalPrice);
				OnPropertyChanged("TotalPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillToFirstName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 80)]
		public virtual string BillToFirstName
		{
			get
			{
				return this.entityData.BillToFirstName; 
			}
			
			set
			{
				if (this.entityData.BillToFirstName == value)
					return;
					
				OnColumnChanging(OrderColumn.BillToFirstName, this.entityData.BillToFirstName);
				this.entityData.BillToFirstName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrderColumn.BillToFirstName, this.entityData.BillToFirstName);
				OnPropertyChanged("BillToFirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillToLastName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 80)]
		public virtual string BillToLastName
		{
			get
			{
				return this.entityData.BillToLastName; 
			}
			
			set
			{
				if (this.entityData.BillToLastName == value)
					return;
					
				OnColumnChanging(OrderColumn.BillToLastName, this.entityData.BillToLastName);
				this.entityData.BillToLastName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrderColumn.BillToLastName, this.entityData.BillToLastName);
				OnPropertyChanged("BillToLastName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipToFirstName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 80)]
		public virtual string ShipToFirstName
		{
			get
			{
				return this.entityData.ShipToFirstName; 
			}
			
			set
			{
				if (this.entityData.ShipToFirstName == value)
					return;
					
				OnColumnChanging(OrderColumn.ShipToFirstName, this.entityData.ShipToFirstName);
				this.entityData.ShipToFirstName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrderColumn.ShipToFirstName, this.entityData.ShipToFirstName);
				OnPropertyChanged("ShipToFirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipToLastName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 80)]
		public virtual string ShipToLastName
		{
			get
			{
				return this.entityData.ShipToLastName; 
			}
			
			set
			{
				if (this.entityData.ShipToLastName == value)
					return;
					
				OnColumnChanging(OrderColumn.ShipToLastName, this.entityData.ShipToLastName);
				this.entityData.ShipToLastName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrderColumn.ShipToLastName, this.entityData.ShipToLastName);
				OnPropertyChanged("ShipToLastName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AuthorizationNumber property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual int AuthorizationNumber
		{
			get
			{
				return this.entityData.AuthorizationNumber; 
			}
			
			set
			{
				if (this.entityData.AuthorizationNumber == value)
					return;
					
				OnColumnChanging(OrderColumn.AuthorizationNumber, this.entityData.AuthorizationNumber);
				this.entityData.AuthorizationNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrderColumn.AuthorizationNumber, this.entityData.AuthorizationNumber);
				OnPropertyChanged("AuthorizationNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Locale property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual string Locale
		{
			get
			{
				return this.entityData.Locale; 
			}
			
			set
			{
				if (this.entityData.Locale == value)
					return;
					
				OnColumnChanging(OrderColumn.Locale, this.entityData.Locale);
				this.entityData.Locale = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrderColumn.Locale, this.entityData.Locale);
				OnPropertyChanged("Locale");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of LineItem objects
		///	which are related to this object through the relation FK__LineItem__OrderI__03317E3D
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<LineItem> LineItemCollection
		{
			get { return entityData.LineItemCollection; }
			set { entityData.LineItemCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of OrderStatus objects
		///	which are related to this object through the relation FK__OrderStat__Order__060DEAE8
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<OrderStatus> OrderStatusCollection
		{
			get { return entityData.OrderStatusCollection; }
			set { entityData.OrderStatusCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("UserId", "User Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UserId", "User Id", 20));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ShipAddr1", "Ship Addr1"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ShipAddr1", "Ship Addr1", 80));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ShipAddr2", "Ship Addr2", 80));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ShipCity", "Ship City"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ShipCity", "Ship City", 80));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ShipState", "Ship State"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ShipState", "Ship State", 80));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ShipZip", "Ship Zip"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ShipZip", "Ship Zip", 20));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ShipCountry", "Ship Country"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ShipCountry", "Ship Country", 20));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("BillAddr1", "Bill Addr1"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BillAddr1", "Bill Addr1", 80));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BillAddr2", "Bill Addr2", 80));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("BillCity", "Bill City"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BillCity", "Bill City", 80));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("BillState", "Bill State"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BillState", "Bill State", 80));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("BillZip", "Bill Zip"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BillZip", "Bill Zip", 20));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("BillCountry", "Bill Country"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BillCountry", "Bill Country", 20));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Courier", "Courier"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Courier", "Courier", 80));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("BillToFirstName", "Bill To First Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BillToFirstName", "Bill To First Name", 80));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("BillToLastName", "Bill To Last Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BillToLastName", "Bill To Last Name", 80));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ShipToFirstName", "Ship To First Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ShipToFirstName", "Ship To First Name", 80));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ShipToLastName", "Ship To Last Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ShipToLastName", "Ship To Last Name", 80));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Locale", "Locale"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Locale", "Locale", 20));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Orders"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"OrderId", "UserId", "OrderDate", "ShipAddr1", "ShipAddr2", "ShipCity", "ShipState", "ShipZip", "ShipCountry", "BillAddr1", "BillAddr2", "BillCity", "BillState", "BillZip", "BillCountry", "Courier", "TotalPrice", "BillToFirstName", "BillToLastName", "ShipToFirstName", "ShipToLastName", "AuthorizationNumber", "Locale"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as OrderEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Order) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Order>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Order);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Order Entity 
		///</summary>
		protected virtual Order Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Order copy = new Order();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.OrderId = this.OrderId;
				copy.UserId = this.UserId;
				copy.OrderDate = this.OrderDate;
				copy.ShipAddr1 = this.ShipAddr1;
				copy.ShipAddr2 = this.ShipAddr2;
				copy.ShipCity = this.ShipCity;
				copy.ShipState = this.ShipState;
				copy.ShipZip = this.ShipZip;
				copy.ShipCountry = this.ShipCountry;
				copy.BillAddr1 = this.BillAddr1;
				copy.BillAddr2 = this.BillAddr2;
				copy.BillCity = this.BillCity;
				copy.BillState = this.BillState;
				copy.BillZip = this.BillZip;
				copy.BillCountry = this.BillCountry;
				copy.Courier = this.Courier;
				copy.TotalPrice = this.TotalPrice;
				copy.BillToFirstName = this.BillToFirstName;
				copy.BillToLastName = this.BillToLastName;
				copy.ShipToFirstName = this.ShipToFirstName;
				copy.ShipToLastName = this.ShipToLastName;
				copy.AuthorizationNumber = this.AuthorizationNumber;
				copy.Locale = this.Locale;
			
		
			//deep copy nested objects
			copy.LineItemCollection = (TList<LineItem>) MakeCopyOf(this.LineItemCollection, existingCopies); 
			copy.OrderStatusCollection = (TList<OrderStatus>) MakeCopyOf(this.OrderStatusCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Order Entity 
		///</summary>
		public virtual Order Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Order Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Order DeepCopy()
		{
			return EntityHelper.Clone<Order>(this as Order);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as OrderEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new OrderEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as OrderEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(OrderColumn column)
		{
			switch(column)
			{
					case OrderColumn.OrderId:
					return entityData.OrderId != _originalData.OrderId;
					case OrderColumn.UserId:
					return entityData.UserId != _originalData.UserId;
					case OrderColumn.OrderDate:
					return entityData.OrderDate != _originalData.OrderDate;
					case OrderColumn.ShipAddr1:
					return entityData.ShipAddr1 != _originalData.ShipAddr1;
					case OrderColumn.ShipAddr2:
					return entityData.ShipAddr2 != _originalData.ShipAddr2;
					case OrderColumn.ShipCity:
					return entityData.ShipCity != _originalData.ShipCity;
					case OrderColumn.ShipState:
					return entityData.ShipState != _originalData.ShipState;
					case OrderColumn.ShipZip:
					return entityData.ShipZip != _originalData.ShipZip;
					case OrderColumn.ShipCountry:
					return entityData.ShipCountry != _originalData.ShipCountry;
					case OrderColumn.BillAddr1:
					return entityData.BillAddr1 != _originalData.BillAddr1;
					case OrderColumn.BillAddr2:
					return entityData.BillAddr2 != _originalData.BillAddr2;
					case OrderColumn.BillCity:
					return entityData.BillCity != _originalData.BillCity;
					case OrderColumn.BillState:
					return entityData.BillState != _originalData.BillState;
					case OrderColumn.BillZip:
					return entityData.BillZip != _originalData.BillZip;
					case OrderColumn.BillCountry:
					return entityData.BillCountry != _originalData.BillCountry;
					case OrderColumn.Courier:
					return entityData.Courier != _originalData.Courier;
					case OrderColumn.TotalPrice:
					return entityData.TotalPrice != _originalData.TotalPrice;
					case OrderColumn.BillToFirstName:
					return entityData.BillToFirstName != _originalData.BillToFirstName;
					case OrderColumn.BillToLastName:
					return entityData.BillToLastName != _originalData.BillToLastName;
					case OrderColumn.ShipToFirstName:
					return entityData.ShipToFirstName != _originalData.ShipToFirstName;
					case OrderColumn.ShipToLastName:
					return entityData.ShipToLastName != _originalData.ShipToLastName;
					case OrderColumn.AuthorizationNumber:
					return entityData.AuthorizationNumber != _originalData.AuthorizationNumber;
					case OrderColumn.Locale:
					return entityData.Locale != _originalData.Locale;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< OrderColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.OrderId != _originalData.OrderId;
			result = result || entityData.UserId != _originalData.UserId;
			result = result || entityData.OrderDate != _originalData.OrderDate;
			result = result || entityData.ShipAddr1 != _originalData.ShipAddr1;
			result = result || entityData.ShipAddr2 != _originalData.ShipAddr2;
			result = result || entityData.ShipCity != _originalData.ShipCity;
			result = result || entityData.ShipState != _originalData.ShipState;
			result = result || entityData.ShipZip != _originalData.ShipZip;
			result = result || entityData.ShipCountry != _originalData.ShipCountry;
			result = result || entityData.BillAddr1 != _originalData.BillAddr1;
			result = result || entityData.BillAddr2 != _originalData.BillAddr2;
			result = result || entityData.BillCity != _originalData.BillCity;
			result = result || entityData.BillState != _originalData.BillState;
			result = result || entityData.BillZip != _originalData.BillZip;
			result = result || entityData.BillCountry != _originalData.BillCountry;
			result = result || entityData.Courier != _originalData.Courier;
			result = result || entityData.TotalPrice != _originalData.TotalPrice;
			result = result || entityData.BillToFirstName != _originalData.BillToFirstName;
			result = result || entityData.BillToLastName != _originalData.BillToLastName;
			result = result || entityData.ShipToFirstName != _originalData.ShipToFirstName;
			result = result || entityData.ShipToLastName != _originalData.ShipToLastName;
			result = result || entityData.AuthorizationNumber != _originalData.AuthorizationNumber;
			result = result || entityData.Locale != _originalData.Locale;
			return result;
		}	
		
		///<summary>
		///  Returns a Order Entity with the original data.
		///</summary>
		public Order GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateOrder(
				_originalData.UserId,
				_originalData.OrderDate,
				_originalData.ShipAddr1,
				_originalData.ShipAddr2,
				_originalData.ShipCity,
				_originalData.ShipState,
				_originalData.ShipZip,
				_originalData.ShipCountry,
				_originalData.BillAddr1,
				_originalData.BillAddr2,
				_originalData.BillCity,
				_originalData.BillState,
				_originalData.BillZip,
				_originalData.BillCountry,
				_originalData.Courier,
				_originalData.TotalPrice,
				_originalData.BillToFirstName,
				_originalData.BillToLastName,
				_originalData.ShipToFirstName,
				_originalData.ShipToLastName,
				_originalData.AuthorizationNumber,
				_originalData.Locale
				);
				
			return (Order)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="OrderBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is OrderBase)
				return ValueEquals(this, (OrderBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="OrderBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.OrderId.GetHashCode() ^ 
					this.UserId.GetHashCode() ^ 
					this.OrderDate.GetHashCode() ^ 
					this.ShipAddr1.GetHashCode() ^ 
					((this.ShipAddr2 == null) ? string.Empty : this.ShipAddr2.ToString()).GetHashCode() ^ 
					this.ShipCity.GetHashCode() ^ 
					this.ShipState.GetHashCode() ^ 
					this.ShipZip.GetHashCode() ^ 
					this.ShipCountry.GetHashCode() ^ 
					this.BillAddr1.GetHashCode() ^ 
					((this.BillAddr2 == null) ? string.Empty : this.BillAddr2.ToString()).GetHashCode() ^ 
					this.BillCity.GetHashCode() ^ 
					this.BillState.GetHashCode() ^ 
					this.BillZip.GetHashCode() ^ 
					this.BillCountry.GetHashCode() ^ 
					this.Courier.GetHashCode() ^ 
					this.TotalPrice.GetHashCode() ^ 
					this.BillToFirstName.GetHashCode() ^ 
					this.BillToLastName.GetHashCode() ^ 
					this.ShipToFirstName.GetHashCode() ^ 
					this.ShipToLastName.GetHashCode() ^ 
					this.AuthorizationNumber.GetHashCode() ^ 
					this.Locale.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="OrderBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(OrderBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="OrderBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="OrderBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="OrderBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(OrderBase Object1, OrderBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.OrderId != Object2.OrderId)
				equal = false;
			if (Object1.UserId != Object2.UserId)
				equal = false;
			if (Object1.OrderDate != Object2.OrderDate)
				equal = false;
			if (Object1.ShipAddr1 != Object2.ShipAddr1)
				equal = false;
			if ( Object1.ShipAddr2 != null && Object2.ShipAddr2 != null )
			{
				if (Object1.ShipAddr2 != Object2.ShipAddr2)
					equal = false;
			}
			else if (Object1.ShipAddr2 == null ^ Object2.ShipAddr2 == null )
			{
				equal = false;
			}
			if (Object1.ShipCity != Object2.ShipCity)
				equal = false;
			if (Object1.ShipState != Object2.ShipState)
				equal = false;
			if (Object1.ShipZip != Object2.ShipZip)
				equal = false;
			if (Object1.ShipCountry != Object2.ShipCountry)
				equal = false;
			if (Object1.BillAddr1 != Object2.BillAddr1)
				equal = false;
			if ( Object1.BillAddr2 != null && Object2.BillAddr2 != null )
			{
				if (Object1.BillAddr2 != Object2.BillAddr2)
					equal = false;
			}
			else if (Object1.BillAddr2 == null ^ Object2.BillAddr2 == null )
			{
				equal = false;
			}
			if (Object1.BillCity != Object2.BillCity)
				equal = false;
			if (Object1.BillState != Object2.BillState)
				equal = false;
			if (Object1.BillZip != Object2.BillZip)
				equal = false;
			if (Object1.BillCountry != Object2.BillCountry)
				equal = false;
			if (Object1.Courier != Object2.Courier)
				equal = false;
			if (Object1.TotalPrice != Object2.TotalPrice)
				equal = false;
			if (Object1.BillToFirstName != Object2.BillToFirstName)
				equal = false;
			if (Object1.BillToLastName != Object2.BillToLastName)
				equal = false;
			if (Object1.ShipToFirstName != Object2.ShipToFirstName)
				equal = false;
			if (Object1.ShipToLastName != Object2.ShipToLastName)
				equal = false;
			if (Object1.AuthorizationNumber != Object2.AuthorizationNumber)
				equal = false;
			if (Object1.Locale != Object2.Locale)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((OrderBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static OrderComparer GetComparer()
        {
            return new OrderComparer();
        }
        */

        // Comparer delegates back to Order
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Order rhs, OrderColumn which)
        {
            switch (which)
            {
            	
            	
            	case OrderColumn.OrderId:
            		return this.OrderId.CompareTo(rhs.OrderId);
            		
            		                 
            	
            	
            	case OrderColumn.UserId:
            		return this.UserId.CompareTo(rhs.UserId);
            		
            		                 
            	
            	
            	case OrderColumn.OrderDate:
            		return this.OrderDate.CompareTo(rhs.OrderDate);
            		
            		                 
            	
            	
            	case OrderColumn.ShipAddr1:
            		return this.ShipAddr1.CompareTo(rhs.ShipAddr1);
            		
            		                 
            	
            	
            	case OrderColumn.ShipAddr2:
            		return this.ShipAddr2.CompareTo(rhs.ShipAddr2);
            		
            		                 
            	
            	
            	case OrderColumn.ShipCity:
            		return this.ShipCity.CompareTo(rhs.ShipCity);
            		
            		                 
            	
            	
            	case OrderColumn.ShipState:
            		return this.ShipState.CompareTo(rhs.ShipState);
            		
            		                 
            	
            	
            	case OrderColumn.ShipZip:
            		return this.ShipZip.CompareTo(rhs.ShipZip);
            		
            		                 
            	
            	
            	case OrderColumn.ShipCountry:
            		return this.ShipCountry.CompareTo(rhs.ShipCountry);
            		
            		                 
            	
            	
            	case OrderColumn.BillAddr1:
            		return this.BillAddr1.CompareTo(rhs.BillAddr1);
            		
            		                 
            	
            	
            	case OrderColumn.BillAddr2:
            		return this.BillAddr2.CompareTo(rhs.BillAddr2);
            		
            		                 
            	
            	
            	case OrderColumn.BillCity:
            		return this.BillCity.CompareTo(rhs.BillCity);
            		
            		                 
            	
            	
            	case OrderColumn.BillState:
            		return this.BillState.CompareTo(rhs.BillState);
            		
            		                 
            	
            	
            	case OrderColumn.BillZip:
            		return this.BillZip.CompareTo(rhs.BillZip);
            		
            		                 
            	
            	
            	case OrderColumn.BillCountry:
            		return this.BillCountry.CompareTo(rhs.BillCountry);
            		
            		                 
            	
            	
            	case OrderColumn.Courier:
            		return this.Courier.CompareTo(rhs.Courier);
            		
            		                 
            	
            	
            	case OrderColumn.TotalPrice:
            		return this.TotalPrice.CompareTo(rhs.TotalPrice);
            		
            		                 
            	
            	
            	case OrderColumn.BillToFirstName:
            		return this.BillToFirstName.CompareTo(rhs.BillToFirstName);
            		
            		                 
            	
            	
            	case OrderColumn.BillToLastName:
            		return this.BillToLastName.CompareTo(rhs.BillToLastName);
            		
            		                 
            	
            	
            	case OrderColumn.ShipToFirstName:
            		return this.ShipToFirstName.CompareTo(rhs.ShipToFirstName);
            		
            		                 
            	
            	
            	case OrderColumn.ShipToLastName:
            		return this.ShipToLastName.CompareTo(rhs.ShipToLastName);
            		
            		                 
            	
            	
            	case OrderColumn.AuthorizationNumber:
            		return this.AuthorizationNumber.CompareTo(rhs.AuthorizationNumber);
            		
            		                 
            	
            	
            	case OrderColumn.Locale:
            		return this.Locale.CompareTo(rhs.Locale);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<OrderKey> Members
		
		// member variable for the EntityId property
		private OrderKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual OrderKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new OrderKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Order")
					.Append("|").Append( this.OrderId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{24}{23}- OrderId: {0}{23}- UserId: {1}{23}- OrderDate: {2}{23}- ShipAddr1: {3}{23}- ShipAddr2: {4}{23}- ShipCity: {5}{23}- ShipState: {6}{23}- ShipZip: {7}{23}- ShipCountry: {8}{23}- BillAddr1: {9}{23}- BillAddr2: {10}{23}- BillCity: {11}{23}- BillState: {12}{23}- BillZip: {13}{23}- BillCountry: {14}{23}- Courier: {15}{23}- TotalPrice: {16}{23}- BillToFirstName: {17}{23}- BillToLastName: {18}{23}- ShipToFirstName: {19}{23}- ShipToLastName: {20}{23}- AuthorizationNumber: {21}{23}- Locale: {22}{23}{25}", 
				this.OrderId,
				this.UserId,
				this.OrderDate,
				this.ShipAddr1,
				(this.ShipAddr2 == null) ? string.Empty : this.ShipAddr2.ToString(),
				this.ShipCity,
				this.ShipState,
				this.ShipZip,
				this.ShipCountry,
				this.BillAddr1,
				(this.BillAddr2 == null) ? string.Empty : this.BillAddr2.ToString(),
				this.BillCity,
				this.BillState,
				this.BillZip,
				this.BillCountry,
				this.Courier,
				this.TotalPrice,
				this.BillToFirstName,
				this.BillToLastName,
				this.ShipToFirstName,
				this.ShipToLastName,
				this.AuthorizationNumber,
				this.Locale,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Orders' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class OrderEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// OrderId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Orders"</remarks>
		public int OrderId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// UserId : 
		/// </summary>
		public string		  UserId = string.Empty;
		
		/// <summary>
		/// OrderDate : 
		/// </summary>
		public System.DateTime		  OrderDate = DateTime.MinValue;
		
		/// <summary>
		/// ShipAddr1 : 
		/// </summary>
		public string		  ShipAddr1 = string.Empty;
		
		/// <summary>
		/// ShipAddr2 : 
		/// </summary>
		public string		  ShipAddr2 = null;
		
		/// <summary>
		/// ShipCity : 
		/// </summary>
		public string		  ShipCity = string.Empty;
		
		/// <summary>
		/// ShipState : 
		/// </summary>
		public string		  ShipState = string.Empty;
		
		/// <summary>
		/// ShipZip : 
		/// </summary>
		public string		  ShipZip = string.Empty;
		
		/// <summary>
		/// ShipCountry : 
		/// </summary>
		public string		  ShipCountry = string.Empty;
		
		/// <summary>
		/// BillAddr1 : 
		/// </summary>
		public string		  BillAddr1 = string.Empty;
		
		/// <summary>
		/// BillAddr2 : 
		/// </summary>
		public string		  BillAddr2 = null;
		
		/// <summary>
		/// BillCity : 
		/// </summary>
		public string		  BillCity = string.Empty;
		
		/// <summary>
		/// BillState : 
		/// </summary>
		public string		  BillState = string.Empty;
		
		/// <summary>
		/// BillZip : 
		/// </summary>
		public string		  BillZip = string.Empty;
		
		/// <summary>
		/// BillCountry : 
		/// </summary>
		public string		  BillCountry = string.Empty;
		
		/// <summary>
		/// Courier : 
		/// </summary>
		public string		  Courier = string.Empty;
		
		/// <summary>
		/// TotalPrice : 
		/// </summary>
		public decimal		  TotalPrice = 0.0m;
		
		/// <summary>
		/// BillToFirstName : 
		/// </summary>
		public string		  BillToFirstName = string.Empty;
		
		/// <summary>
		/// BillToLastName : 
		/// </summary>
		public string		  BillToLastName = string.Empty;
		
		/// <summary>
		/// ShipToFirstName : 
		/// </summary>
		public string		  ShipToFirstName = string.Empty;
		
		/// <summary>
		/// ShipToLastName : 
		/// </summary>
		public string		  ShipToLastName = string.Empty;
		
		/// <summary>
		/// AuthorizationNumber : 
		/// </summary>
		public int		  AuthorizationNumber = (int)0;
		
		/// <summary>
		/// Locale : 
		/// </summary>
		public string		  Locale = string.Empty;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region LineItemCollection
		
		private TList<LineItem> _lineItemOrderId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _lineItemOrderId
		/// </summary>
		
		public TList<LineItem> LineItemCollection
		{
			get
			{
				if (_lineItemOrderId == null)
				{
				_lineItemOrderId = new TList<LineItem>();
				}
	
				return _lineItemOrderId;
			}
			set { _lineItemOrderId = value; }
		}
		
		#endregion

		#region OrderStatusCollection
		
		private TList<OrderStatus> _orderStatusOrderId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _orderStatusOrderId
		/// </summary>
		
		public TList<OrderStatus> OrderStatusCollection
		{
			get
			{
				if (_orderStatusOrderId == null)
				{
				_orderStatusOrderId = new TList<OrderStatus>();
				}
	
				return _orderStatusOrderId;
			}
			set { _orderStatusOrderId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			OrderEntityData _tmp = new OrderEntityData();
						
			_tmp.OrderId = this.OrderId;
			
			_tmp.UserId = this.UserId;
			_tmp.OrderDate = this.OrderDate;
			_tmp.ShipAddr1 = this.ShipAddr1;
			_tmp.ShipAddr2 = this.ShipAddr2;
			_tmp.ShipCity = this.ShipCity;
			_tmp.ShipState = this.ShipState;
			_tmp.ShipZip = this.ShipZip;
			_tmp.ShipCountry = this.ShipCountry;
			_tmp.BillAddr1 = this.BillAddr1;
			_tmp.BillAddr2 = this.BillAddr2;
			_tmp.BillCity = this.BillCity;
			_tmp.BillState = this.BillState;
			_tmp.BillZip = this.BillZip;
			_tmp.BillCountry = this.BillCountry;
			_tmp.Courier = this.Courier;
			_tmp.TotalPrice = this.TotalPrice;
			_tmp.BillToFirstName = this.BillToFirstName;
			_tmp.BillToLastName = this.BillToLastName;
			_tmp.ShipToFirstName = this.ShipToFirstName;
			_tmp.ShipToLastName = this.ShipToLastName;
			_tmp.AuthorizationNumber = this.AuthorizationNumber;
			_tmp.Locale = this.Locale;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._lineItemOrderId != null)
				_tmp.LineItemCollection = (TList<LineItem>) MakeCopyOf(this.LineItemCollection); 
			if (this._orderStatusOrderId != null)
				_tmp.OrderStatusCollection = (TList<OrderStatus>) MakeCopyOf(this.OrderStatusCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			OrderEntityData _tmp = new OrderEntityData();
						
			_tmp.OrderId = this.OrderId;
			
			_tmp.UserId = this.UserId;
			_tmp.OrderDate = this.OrderDate;
			_tmp.ShipAddr1 = this.ShipAddr1;
			_tmp.ShipAddr2 = this.ShipAddr2;
			_tmp.ShipCity = this.ShipCity;
			_tmp.ShipState = this.ShipState;
			_tmp.ShipZip = this.ShipZip;
			_tmp.ShipCountry = this.ShipCountry;
			_tmp.BillAddr1 = this.BillAddr1;
			_tmp.BillAddr2 = this.BillAddr2;
			_tmp.BillCity = this.BillCity;
			_tmp.BillState = this.BillState;
			_tmp.BillZip = this.BillZip;
			_tmp.BillCountry = this.BillCountry;
			_tmp.Courier = this.Courier;
			_tmp.TotalPrice = this.TotalPrice;
			_tmp.BillToFirstName = this.BillToFirstName;
			_tmp.BillToLastName = this.BillToLastName;
			_tmp.ShipToFirstName = this.ShipToFirstName;
			_tmp.ShipToLastName = this.ShipToLastName;
			_tmp.AuthorizationNumber = this.AuthorizationNumber;
			_tmp.Locale = this.Locale;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.LineItemCollection = (TList<LineItem>) MakeCopyOf(this.LineItemCollection, existingCopies); 
			_tmp.OrderStatusCollection = (TList<OrderStatus>) MakeCopyOf(this.OrderStatusCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OrderColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(OrderColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OrderColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(OrderColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OrderColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(OrderColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				OrderEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new OrderEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OrderColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(OrderColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				OrderEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new OrderEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region OrderEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Order"/> object.
	/// </remarks>
	public class OrderEventArgs : System.EventArgs
	{
		private OrderColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the OrderEventArgs class.
		///</summary>
		public OrderEventArgs(OrderColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the OrderEventArgs class.
		///</summary>
		public OrderEventArgs(OrderColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The OrderColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="OrderColumn" />
		public OrderColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Order related events.
	///</summary>
	public delegate void OrderEventHandler(object sender, OrderEventArgs e);
	
	#region OrderComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class OrderComparer : System.Collections.Generic.IComparer<Order>
	{
		OrderColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:OrderComparer"/> class.
        /// </summary>
		public OrderComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:OrderComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public OrderComparer(OrderColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Order"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Order"/> to compare.</param>
        /// <param name="b">The second <c>Order</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Order a, Order b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Order entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Order a, Order b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public OrderColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region OrderKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Order"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class OrderKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the OrderKey class.
		/// </summary>
		public OrderKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the OrderKey class.
		/// </summary>
		public OrderKey(OrderBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.OrderId = entity.OrderId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the OrderKey class.
		/// </summary>
		public OrderKey(int _orderId)
		{
			#region Init Properties

			this.OrderId = _orderId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private OrderBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public OrderBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the OrderId property
		private int _orderId;
		
		/// <summary>
		/// Gets or sets the OrderId property.
		/// </summary>
		public int OrderId
		{
			get { return _orderId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.OrderId = value;
				
				_orderId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				OrderId = ( values["OrderId"] != null ) ? (int) EntityUtil.ChangeType(values["OrderId"], typeof(int)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("OrderId", OrderId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("OrderId: {0}{1}",
								OrderId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region OrderColumn Enum
	
	/// <summary>
	/// Enumerate the Order columns.
	/// </summary>
	[Serializable]
	public enum OrderColumn : int
	{
		/// <summary>
		/// OrderId : 
		/// </summary>
		[EnumTextValue("OrderId")]
		[ColumnEnum("OrderId", typeof(int), System.Data.DbType.Int32, true, true, false)]
		OrderId = 1,
		/// <summary>
		/// UserId : 
		/// </summary>
		[EnumTextValue("UserId")]
		[ColumnEnum("UserId", typeof(string), System.Data.DbType.AnsiString, false, false, false, 20)]
		UserId = 2,
		/// <summary>
		/// OrderDate : 
		/// </summary>
		[EnumTextValue("OrderDate")]
		[ColumnEnum("OrderDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		OrderDate = 3,
		/// <summary>
		/// ShipAddr1 : 
		/// </summary>
		[EnumTextValue("ShipAddr1")]
		[ColumnEnum("ShipAddr1", typeof(string), System.Data.DbType.AnsiString, false, false, false, 80)]
		ShipAddr1 = 4,
		/// <summary>
		/// ShipAddr2 : 
		/// </summary>
		[EnumTextValue("ShipAddr2")]
		[ColumnEnum("ShipAddr2", typeof(string), System.Data.DbType.AnsiString, false, false, true, 80)]
		ShipAddr2 = 5,
		/// <summary>
		/// ShipCity : 
		/// </summary>
		[EnumTextValue("ShipCity")]
		[ColumnEnum("ShipCity", typeof(string), System.Data.DbType.AnsiString, false, false, false, 80)]
		ShipCity = 6,
		/// <summary>
		/// ShipState : 
		/// </summary>
		[EnumTextValue("ShipState")]
		[ColumnEnum("ShipState", typeof(string), System.Data.DbType.AnsiString, false, false, false, 80)]
		ShipState = 7,
		/// <summary>
		/// ShipZip : 
		/// </summary>
		[EnumTextValue("ShipZip")]
		[ColumnEnum("ShipZip", typeof(string), System.Data.DbType.AnsiString, false, false, false, 20)]
		ShipZip = 8,
		/// <summary>
		/// ShipCountry : 
		/// </summary>
		[EnumTextValue("ShipCountry")]
		[ColumnEnum("ShipCountry", typeof(string), System.Data.DbType.AnsiString, false, false, false, 20)]
		ShipCountry = 9,
		/// <summary>
		/// BillAddr1 : 
		/// </summary>
		[EnumTextValue("BillAddr1")]
		[ColumnEnum("BillAddr1", typeof(string), System.Data.DbType.AnsiString, false, false, false, 80)]
		BillAddr1 = 10,
		/// <summary>
		/// BillAddr2 : 
		/// </summary>
		[EnumTextValue("BillAddr2")]
		[ColumnEnum("BillAddr2", typeof(string), System.Data.DbType.AnsiString, false, false, true, 80)]
		BillAddr2 = 11,
		/// <summary>
		/// BillCity : 
		/// </summary>
		[EnumTextValue("BillCity")]
		[ColumnEnum("BillCity", typeof(string), System.Data.DbType.AnsiString, false, false, false, 80)]
		BillCity = 12,
		/// <summary>
		/// BillState : 
		/// </summary>
		[EnumTextValue("BillState")]
		[ColumnEnum("BillState", typeof(string), System.Data.DbType.AnsiString, false, false, false, 80)]
		BillState = 13,
		/// <summary>
		/// BillZip : 
		/// </summary>
		[EnumTextValue("BillZip")]
		[ColumnEnum("BillZip", typeof(string), System.Data.DbType.AnsiString, false, false, false, 20)]
		BillZip = 14,
		/// <summary>
		/// BillCountry : 
		/// </summary>
		[EnumTextValue("BillCountry")]
		[ColumnEnum("BillCountry", typeof(string), System.Data.DbType.AnsiString, false, false, false, 20)]
		BillCountry = 15,
		/// <summary>
		/// Courier : 
		/// </summary>
		[EnumTextValue("Courier")]
		[ColumnEnum("Courier", typeof(string), System.Data.DbType.AnsiString, false, false, false, 80)]
		Courier = 16,
		/// <summary>
		/// TotalPrice : 
		/// </summary>
		[EnumTextValue("TotalPrice")]
		[ColumnEnum("TotalPrice", typeof(decimal), System.Data.DbType.Decimal, false, false, false)]
		TotalPrice = 17,
		/// <summary>
		/// BillToFirstName : 
		/// </summary>
		[EnumTextValue("BillToFirstName")]
		[ColumnEnum("BillToFirstName", typeof(string), System.Data.DbType.AnsiString, false, false, false, 80)]
		BillToFirstName = 18,
		/// <summary>
		/// BillToLastName : 
		/// </summary>
		[EnumTextValue("BillToLastName")]
		[ColumnEnum("BillToLastName", typeof(string), System.Data.DbType.AnsiString, false, false, false, 80)]
		BillToLastName = 19,
		/// <summary>
		/// ShipToFirstName : 
		/// </summary>
		[EnumTextValue("ShipToFirstName")]
		[ColumnEnum("ShipToFirstName", typeof(string), System.Data.DbType.AnsiString, false, false, false, 80)]
		ShipToFirstName = 20,
		/// <summary>
		/// ShipToLastName : 
		/// </summary>
		[EnumTextValue("ShipToLastName")]
		[ColumnEnum("ShipToLastName", typeof(string), System.Data.DbType.AnsiString, false, false, false, 80)]
		ShipToLastName = 21,
		/// <summary>
		/// AuthorizationNumber : 
		/// </summary>
		[EnumTextValue("AuthorizationNumber")]
		[ColumnEnum("AuthorizationNumber", typeof(int), System.Data.DbType.Int32, false, false, false)]
		AuthorizationNumber = 22,
		/// <summary>
		/// Locale : 
		/// </summary>
		[EnumTextValue("Locale")]
		[ColumnEnum("Locale", typeof(string), System.Data.DbType.AnsiString, false, false, false, 20)]
		Locale = 23
	}//End enum

	#endregion OrderColumn Enum

} // end namespace
