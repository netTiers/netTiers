//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CSLA 3.6.x CodeSmith Templates.
//	   Changes to this template will not be lost.
//
//     Template: ParameterizedSQLBase.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region using declarations

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;

using Csla;
using Csla.Data;

#endregion

namespace PetShop.Data
{
	[Serializable]
	public class DataAccessLayerBase : BusinessBase< DataAccessLayerBase >
	{
		#region Instance
		
		public static DataAccessLayerBase Instance
        {
            get { return Nested.Current; }
        }
		
		private class Nested
        {
            static Nested()
            {
                Current = new DataAccessLayerBase();
            }

            /// <summary>
            /// Current singleton instance.
            /// </summary>
            internal readonly static DataAccessLayerBase Current;
        }
		
		#endregion
		
        #region Methods

        private string _connectionString = string.Empty;

        /// <summary>
        /// Returns the Connection String.
        /// </summary>
	    public virtual string ConnectionString
	    {
	        get
	        {
                if(string.IsNullOrEmpty(_connectionString))
                {
                    _connectionString = System.Configuration.ConfigurationManager.ConnectionStrings["PetShopConnectionString"].ConnectionString;
                }
                
                return _connectionString;
	        }    
	    }

        private SqlConnection _sqlConnection;
        
        /// <summary>
        /// Returns an opened SQLConnection.
        /// </summary>
        /// <returns>Returns an opened SQLConnection.</returns>
        public virtual SqlConnection GetSqlConnection()
        {
            if (_sqlConnection == null)
            {
                _sqlConnection = new SqlConnection(ConnectionString);
                _sqlConnection.Open();
            }

            return _sqlConnection;
        }
        
        /// <summary>
        /// Returns an array of SqlParameters
        /// </summary>
        public virtual SqlParameter[] SqlParameters(Dictionary<string, object> bag)
        {
            List<SqlParameter> parameters = new List<SqlParameter>(bag.Keys.Count);

            foreach (KeyValuePair<string, object> pair in bag)
            {
                parameters.Add(new SqlParameter(string.Format("@p_{0}", pair.Key), pair.Value));
            }

            return parameters.ToArray();
        }
        
        /// <summary>
        /// Returns a where clause for the current Criteria object.
        /// </summary>
        /// <returns>Returns a where clause for the current Criteria object.</returns>
        public virtual string BuildWhereStatement(Dictionary<string, object> bag)
        {
            if (bag.Count == 0)
                return string.Empty;
            
            string columnNames = string.Empty;

            foreach (string columnName in bag.Keys)
            {
                columnNames += string.Format("[{0}] = @p_{0} AND ", columnName);
            }

            return string.Format("WHERE {0}", columnNames.Remove(columnNames.Length - 5, 5));
        }

        #endregion
        
		#region Data Access
        
		#region Account
		
		#region Insert
		
		public virtual SafeDataReader AccountInsert(string email, string firstName, string lastName, string address1, string address2, string city, string state, string zip, string country, string phone, int uniqueID)
		{
			const string commandText = "INSERT INTO [dbo].[Account] ([Email], [FirstName], [LastName], [Address1], [Address2], [City], [State], [Zip], [Country], [Phone], [UniqueID]) VALUES (@p_Email, @p_FirstName, @p_LastName, @p_Address1, @p_Address2, @p_City, @p_State, @p_Zip, @p_Country, @p_Phone, @p_UniqueID); SELECT [AccountId] FROM [dbo].[Account] WHERE AccountId = SCOPE_IDENTITY()";
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddWithValue("@p_Email", email);
				command.Parameters.AddWithValue("@p_FirstName", firstName);
				command.Parameters.AddWithValue("@p_LastName", lastName);
				command.Parameters.AddWithValue("@p_Address1", address1);
				command.Parameters.AddWithValue("@p_Address2", address2);
				command.Parameters.AddWithValue("@p_City", city);
				command.Parameters.AddWithValue("@p_State", state);
				command.Parameters.AddWithValue("@p_Zip", zip);
				command.Parameters.AddWithValue("@p_Country", country);
				command.Parameters.AddWithValue("@p_Phone", phone);
				command.Parameters.AddWithValue("@p_UniqueID", uniqueID);
				
				return new SafeDataReader(command.ExecuteReader());
			}
		}
		
		#endregion

		#region Update

        public virtual SafeDataReader AccountUpdate(int accountId, string email, string firstName, string lastName, string address1, string address2, string city, string state, string zip, string country, string phone, int uniqueID)
		{
			const string commandText = "UPDATE [dbo].[Account]  SET [Email] = @p_Email, [FirstName] = @p_FirstName, [LastName] = @p_LastName, [Address1] = @p_Address1, [Address2] = @p_Address2, [City] = @p_City, [State] = @p_State, [Zip] = @p_Zip, [Country] = @p_Country, [Phone] = @p_Phone, [UniqueID] = @p_UniqueID WHERE [AccountId] = @p_AccountId";
            using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddWithValue("@p_AccountId", accountId);
				command.Parameters.AddWithValue("@p_Email", email);
				command.Parameters.AddWithValue("@p_FirstName", firstName);
				command.Parameters.AddWithValue("@p_LastName", lastName);
				command.Parameters.AddWithValue("@p_Address1", address1);
				command.Parameters.AddWithValue("@p_Address2", address2);
				command.Parameters.AddWithValue("@p_City", city);
				command.Parameters.AddWithValue("@p_State", state);
				command.Parameters.AddWithValue("@p_Zip", zip);
				command.Parameters.AddWithValue("@p_Country", country);
				command.Parameters.AddWithValue("@p_Phone", phone);
				command.Parameters.AddWithValue("@p_UniqueID", uniqueID);

				SafeDataReader reader = new SafeDataReader(command.ExecuteReader());

                //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                if(reader.RecordsAffected == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

			    return reader;
			}
		}
		
		#endregion
		
		#region Fetch
		
		public virtual SafeDataReader AccountFetch(Dictionary<string, object> bag)
		{
            string commandText = string.Format("SELECT [AccountId], [Email], [FirstName], [LastName], [Address1], [Address2], [City], [State], [Zip], [Country], [Phone], [UniqueID] FROM [dbo].[Account] {0}", BuildWhereStatement(bag));
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddRange(SqlParameters(bag));
				
				return new SafeDataReader(command.ExecuteReader());
			}
		}
     	
		#endregion
		
		#region Delete
		
		public virtual SafeDataReader AccountDelete(Dictionary<string, object> bag)
		{
			string commandText = string.Format("DELETE FROM [dbo].[Account] {0}", BuildWhereStatement(bag));
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddRange(SqlParameters(bag));
				
				SafeDataReader reader = new SafeDataReader(command.ExecuteReader());

                //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                if(reader.RecordsAffected == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

			    return reader;
			}
		}
		
		#endregion
		
		#endregion
				
		#region Cart
		
		#region Insert
		
		public virtual SafeDataReader CartInsert(string itemId, string name, string type, decimal price, string categoryId, string productId, bool isShoppingCart, int quantity, int uniqueID)
		{
			const string commandText = "INSERT INTO [dbo].[Cart] ([ItemId], [Name], [Type], [Price], [CategoryId], [ProductId], [IsShoppingCart], [Quantity], [UniqueID]) VALUES (@p_ItemId, @p_Name, @p_Type, @p_Price, @p_CategoryId, @p_ProductId, @p_IsShoppingCart, @p_Quantity, @p_UniqueID); SELECT [CartId] FROM [dbo].[Cart] WHERE CartId = SCOPE_IDENTITY()";
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddWithValue("@p_ItemId", itemId);
				command.Parameters.AddWithValue("@p_Name", name);
				command.Parameters.AddWithValue("@p_Type", type);
				command.Parameters.AddWithValue("@p_Price", price);
				command.Parameters.AddWithValue("@p_CategoryId", categoryId);
				command.Parameters.AddWithValue("@p_ProductId", productId);
				command.Parameters.AddWithValue("@p_IsShoppingCart", isShoppingCart);
				command.Parameters.AddWithValue("@p_Quantity", quantity);
				command.Parameters.AddWithValue("@p_UniqueID", uniqueID);
				
				return new SafeDataReader(command.ExecuteReader());
			}
		}
		
		#endregion

		#region Update

        public virtual SafeDataReader CartUpdate(int cartId, string itemId, string name, string type, decimal price, string categoryId, string productId, bool isShoppingCart, int quantity, int uniqueID)
		{
			const string commandText = "UPDATE [dbo].[Cart]  SET [ItemId] = @p_ItemId, [Name] = @p_Name, [Type] = @p_Type, [Price] = @p_Price, [CategoryId] = @p_CategoryId, [ProductId] = @p_ProductId, [IsShoppingCart] = @p_IsShoppingCart, [Quantity] = @p_Quantity, [UniqueID] = @p_UniqueID WHERE [CartId] = @p_CartId";
            using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddWithValue("@p_CartId", cartId);
				command.Parameters.AddWithValue("@p_ItemId", itemId);
				command.Parameters.AddWithValue("@p_Name", name);
				command.Parameters.AddWithValue("@p_Type", type);
				command.Parameters.AddWithValue("@p_Price", price);
				command.Parameters.AddWithValue("@p_CategoryId", categoryId);
				command.Parameters.AddWithValue("@p_ProductId", productId);
				command.Parameters.AddWithValue("@p_IsShoppingCart", isShoppingCart);
				command.Parameters.AddWithValue("@p_Quantity", quantity);
				command.Parameters.AddWithValue("@p_UniqueID", uniqueID);

				SafeDataReader reader = new SafeDataReader(command.ExecuteReader());

                //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                if(reader.RecordsAffected == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

			    return reader;
			}
		}
		
		#endregion
		
		#region Fetch
		
		public virtual SafeDataReader CartFetch(Dictionary<string, object> bag)
		{
            string commandText = string.Format("SELECT [CartId], [ItemId], [Name], [Type], [Price], [CategoryId], [ProductId], [IsShoppingCart], [Quantity], [UniqueID] FROM [dbo].[Cart] {0}", BuildWhereStatement(bag));
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddRange(SqlParameters(bag));
				
				return new SafeDataReader(command.ExecuteReader());
			}
		}
     	
		#endregion
		
		#region Delete
		
		public virtual SafeDataReader CartDelete(Dictionary<string, object> bag)
		{
			string commandText = string.Format("DELETE FROM [dbo].[Cart] {0}", BuildWhereStatement(bag));
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddRange(SqlParameters(bag));
				
				SafeDataReader reader = new SafeDataReader(command.ExecuteReader());

                //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                if(reader.RecordsAffected == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

			    return reader;
			}
		}
		
		#endregion
		
		#endregion
				
		#region Category
		
		#region Insert
		
		public virtual SafeDataReader CategoryInsert(string categoryId, string name, string descn)
		{
			const string commandText = "INSERT INTO [dbo].[Category] ([CategoryId], [Name], [Descn]) VALUES (@p_CategoryId, @p_Name, @p_Descn)";
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddWithValue("@p_CategoryId", categoryId);
				command.Parameters.AddWithValue("@p_Name", name);
				command.Parameters.AddWithValue("@p_Descn", descn);
				
				return new SafeDataReader(command.ExecuteReader());
			}
		}
		
		#endregion

		#region Update

        public virtual SafeDataReader CategoryUpdate(string categoryId, string name, string descn)
		{
			const string commandText = "UPDATE [dbo].[Category]  SET [Name] = @p_Name, [Descn] = @p_Descn WHERE [CategoryId] = @p_CategoryId";
            using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddWithValue("@p_CategoryId", categoryId);
				command.Parameters.AddWithValue("@p_Name", name);
				command.Parameters.AddWithValue("@p_Descn", descn);

				SafeDataReader reader = new SafeDataReader(command.ExecuteReader());

                //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                if(reader.RecordsAffected == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

			    return reader;
			}
		}
		
		#endregion
		
		#region Fetch
		
		public virtual SafeDataReader CategoryFetch(Dictionary<string, object> bag)
		{
            string commandText = string.Format("SELECT [CategoryId], [Name], [Descn] FROM [dbo].[Category] {0}", BuildWhereStatement(bag));
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddRange(SqlParameters(bag));
				
				return new SafeDataReader(command.ExecuteReader());
			}
		}
     	
		#endregion
		
		#region Delete
		
		public virtual SafeDataReader CategoryDelete(Dictionary<string, object> bag)
		{
			string commandText = string.Format("DELETE FROM [dbo].[Category] {0}", BuildWhereStatement(bag));
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddRange(SqlParameters(bag));
				
				SafeDataReader reader = new SafeDataReader(command.ExecuteReader());

                //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                if(reader.RecordsAffected == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

			    return reader;
			}
		}
		
		#endregion
		
		#endregion
				
		#region Inventory
		
		#region Insert
		
		public virtual SafeDataReader InventoryInsert(string itemId, int qty)
		{
			const string commandText = "INSERT INTO [dbo].[Inventory] ([ItemId], [Qty]) VALUES (@p_ItemId, @p_Qty)";
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddWithValue("@p_ItemId", itemId);
				command.Parameters.AddWithValue("@p_Qty", qty);
				
				return new SafeDataReader(command.ExecuteReader());
			}
		}
		
		#endregion

		#region Update

        public virtual SafeDataReader InventoryUpdate(string itemId, int qty)
		{
			const string commandText = "UPDATE [dbo].[Inventory]  SET [Qty] = @p_Qty WHERE [ItemId] = @p_ItemId";
            using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddWithValue("@p_ItemId", itemId);
				command.Parameters.AddWithValue("@p_Qty", qty);

				SafeDataReader reader = new SafeDataReader(command.ExecuteReader());

                //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                if(reader.RecordsAffected == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

			    return reader;
			}
		}
		
		#endregion
		
		#region Fetch
		
		public virtual SafeDataReader InventoryFetch(Dictionary<string, object> bag)
		{
            string commandText = string.Format("SELECT [ItemId], [Qty] FROM [dbo].[Inventory] {0}", BuildWhereStatement(bag));
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddRange(SqlParameters(bag));
				
				return new SafeDataReader(command.ExecuteReader());
			}
		}
     	
		#endregion
		
		#region Delete
		
		public virtual SafeDataReader InventoryDelete(Dictionary<string, object> bag)
		{
			string commandText = string.Format("DELETE FROM [dbo].[Inventory] {0}", BuildWhereStatement(bag));
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddRange(SqlParameters(bag));
				
				SafeDataReader reader = new SafeDataReader(command.ExecuteReader());

                //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                if(reader.RecordsAffected == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

			    return reader;
			}
		}
		
		#endregion
		
		#endregion
				
		#region Item
		
		#region Insert
		
		public virtual SafeDataReader ItemInsert(string itemId, decimal? listPrice, decimal? unitCost, string status, string name, string image, string productId, int supplier)
		{
			const string commandText = "INSERT INTO [dbo].[Item] ([ItemId], [ListPrice], [UnitCost], [Status], [Name], [Image], [ProductId], [Supplier]) VALUES (@p_ItemId, @p_ListPrice, @p_UnitCost, @p_Status, @p_Name, @p_Image, @p_ProductId, @p_Supplier)";
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddWithValue("@p_ItemId", itemId);
				command.Parameters.AddWithValue("@p_ListPrice", listPrice);
				command.Parameters.AddWithValue("@p_UnitCost", unitCost);
				command.Parameters.AddWithValue("@p_Status", status);
				command.Parameters.AddWithValue("@p_Name", name);
				command.Parameters.AddWithValue("@p_Image", image);
				command.Parameters.AddWithValue("@p_ProductId", productId);
				command.Parameters.AddWithValue("@p_Supplier", supplier);
				
				return new SafeDataReader(command.ExecuteReader());
			}
		}
		
		#endregion

		#region Update

        public virtual SafeDataReader ItemUpdate(string itemId, decimal? listPrice, decimal? unitCost, string status, string name, string image, string productId, int supplier)
		{
			const string commandText = "UPDATE [dbo].[Item]  SET [ListPrice] = @p_ListPrice, [UnitCost] = @p_UnitCost, [Status] = @p_Status, [Name] = @p_Name, [Image] = @p_Image, [ProductId] = @p_ProductId, [Supplier] = @p_Supplier WHERE [ItemId] = @p_ItemId";
            using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddWithValue("@p_ItemId", itemId);
				command.Parameters.AddWithValue("@p_ListPrice", listPrice);
				command.Parameters.AddWithValue("@p_UnitCost", unitCost);
				command.Parameters.AddWithValue("@p_Status", status);
				command.Parameters.AddWithValue("@p_Name", name);
				command.Parameters.AddWithValue("@p_Image", image);
				command.Parameters.AddWithValue("@p_ProductId", productId);
				command.Parameters.AddWithValue("@p_Supplier", supplier);

				SafeDataReader reader = new SafeDataReader(command.ExecuteReader());

                //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                if(reader.RecordsAffected == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

			    return reader;
			}
		}
		
		#endregion
		
		#region Fetch
		
		public virtual SafeDataReader ItemFetch(Dictionary<string, object> bag)
		{
            string commandText = string.Format("SELECT [ItemId], [ListPrice], [UnitCost], [Status], [Name], [Image], [ProductId], [Supplier] FROM [dbo].[Item] {0}", BuildWhereStatement(bag));
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddRange(SqlParameters(bag));
				
				return new SafeDataReader(command.ExecuteReader());
			}
		}
     	
		#endregion
		
		#region Delete
		
		public virtual SafeDataReader ItemDelete(Dictionary<string, object> bag)
		{
			string commandText = string.Format("DELETE FROM [dbo].[Item] {0}", BuildWhereStatement(bag));
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddRange(SqlParameters(bag));
				
				SafeDataReader reader = new SafeDataReader(command.ExecuteReader());

                //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                if(reader.RecordsAffected == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

			    return reader;
			}
		}
		
		#endregion
		
		#endregion
				
		#region LineItem
		
		#region Insert
		
		public virtual SafeDataReader LineItemInsert(int orderId, int lineNum, string itemId, int quantity, decimal unitPrice)
		{
			const string commandText = "INSERT INTO [dbo].[LineItem] ([OrderId], [LineNum], [ItemId], [Quantity], [UnitPrice]) VALUES (@p_OrderId, @p_LineNum, @p_ItemId, @p_Quantity, @p_UnitPrice)";
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddWithValue("@p_OrderId", orderId);
				command.Parameters.AddWithValue("@p_LineNum", lineNum);
				command.Parameters.AddWithValue("@p_ItemId", itemId);
				command.Parameters.AddWithValue("@p_Quantity", quantity);
				command.Parameters.AddWithValue("@p_UnitPrice", unitPrice);
				
				return new SafeDataReader(command.ExecuteReader());
			}
		}
		
		#endregion

		#region Update

        public virtual SafeDataReader LineItemUpdate(int orderId, int lineNum, string itemId, int quantity, decimal unitPrice)
		{
			const string commandText = "UPDATE [dbo].[LineItem]  SET [ItemId] = @p_ItemId, [Quantity] = @p_Quantity, [UnitPrice] = @p_UnitPrice WHERE [OrderId] = @p_OrderId AND [LineNum] = @p_LineNum";
            using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddWithValue("@p_OrderId", orderId);
				command.Parameters.AddWithValue("@p_LineNum", lineNum);
				command.Parameters.AddWithValue("@p_ItemId", itemId);
				command.Parameters.AddWithValue("@p_Quantity", quantity);
				command.Parameters.AddWithValue("@p_UnitPrice", unitPrice);

				SafeDataReader reader = new SafeDataReader(command.ExecuteReader());

                //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                if(reader.RecordsAffected == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

			    return reader;
			}
		}
		
		#endregion
		
		#region Fetch
		
		public virtual SafeDataReader LineItemFetch(Dictionary<string, object> bag)
		{
            string commandText = string.Format("SELECT [OrderId], [LineNum], [ItemId], [Quantity], [UnitPrice] FROM [dbo].[LineItem] {0}", BuildWhereStatement(bag));
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddRange(SqlParameters(bag));
				
				return new SafeDataReader(command.ExecuteReader());
			}
		}
     	
		#endregion
		
		#region Delete
		
		public virtual SafeDataReader LineItemDelete(Dictionary<string, object> bag)
		{
			string commandText = string.Format("DELETE FROM [dbo].[LineItem] {0}", BuildWhereStatement(bag));
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddRange(SqlParameters(bag));
				
				SafeDataReader reader = new SafeDataReader(command.ExecuteReader());

                //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                if(reader.RecordsAffected == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

			    return reader;
			}
		}
		
		#endregion
		
		#endregion
				
		#region Order
		
		#region Insert
		
		public virtual SafeDataReader OrderInsert(string userId, SmartDate orderDate, string shipAddr1, string shipAddr2, string shipCity, string shipState, string shipZip, string shipCountry, string billAddr1, string billAddr2, string billCity, string billState, string billZip, string billCountry, string courier, decimal totalPrice, string billToFirstName, string billToLastName, string shipToFirstName, string shipToLastName, int authorizationNumber, string locale)
		{
			const string commandText = "INSERT INTO [dbo].[Orders] ([UserId], [OrderDate], [ShipAddr1], [ShipAddr2], [ShipCity], [ShipState], [ShipZip], [ShipCountry], [BillAddr1], [BillAddr2], [BillCity], [BillState], [BillZip], [BillCountry], [Courier], [TotalPrice], [BillToFirstName], [BillToLastName], [ShipToFirstName], [ShipToLastName], [AuthorizationNumber], [Locale]) VALUES (@p_UserId, @p_OrderDate, @p_ShipAddr1, @p_ShipAddr2, @p_ShipCity, @p_ShipState, @p_ShipZip, @p_ShipCountry, @p_BillAddr1, @p_BillAddr2, @p_BillCity, @p_BillState, @p_BillZip, @p_BillCountry, @p_Courier, @p_TotalPrice, @p_BillToFirstName, @p_BillToLastName, @p_ShipToFirstName, @p_ShipToLastName, @p_AuthorizationNumber, @p_Locale); SELECT [OrderId] FROM [dbo].[Orders] WHERE OrderId = SCOPE_IDENTITY()";
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddWithValue("@p_UserId", userId);
				command.Parameters.AddWithValue("@p_OrderDate", (DateTime)orderDate);
				command.Parameters.AddWithValue("@p_ShipAddr1", shipAddr1);
				command.Parameters.AddWithValue("@p_ShipAddr2", shipAddr2);
				command.Parameters.AddWithValue("@p_ShipCity", shipCity);
				command.Parameters.AddWithValue("@p_ShipState", shipState);
				command.Parameters.AddWithValue("@p_ShipZip", shipZip);
				command.Parameters.AddWithValue("@p_ShipCountry", shipCountry);
				command.Parameters.AddWithValue("@p_BillAddr1", billAddr1);
				command.Parameters.AddWithValue("@p_BillAddr2", billAddr2);
				command.Parameters.AddWithValue("@p_BillCity", billCity);
				command.Parameters.AddWithValue("@p_BillState", billState);
				command.Parameters.AddWithValue("@p_BillZip", billZip);
				command.Parameters.AddWithValue("@p_BillCountry", billCountry);
				command.Parameters.AddWithValue("@p_Courier", courier);
				command.Parameters.AddWithValue("@p_TotalPrice", totalPrice);
				command.Parameters.AddWithValue("@p_BillToFirstName", billToFirstName);
				command.Parameters.AddWithValue("@p_BillToLastName", billToLastName);
				command.Parameters.AddWithValue("@p_ShipToFirstName", shipToFirstName);
				command.Parameters.AddWithValue("@p_ShipToLastName", shipToLastName);
				command.Parameters.AddWithValue("@p_AuthorizationNumber", authorizationNumber);
				command.Parameters.AddWithValue("@p_Locale", locale);
				
				return new SafeDataReader(command.ExecuteReader());
			}
		}
		
		#endregion

		#region Update

        public virtual SafeDataReader OrderUpdate(int orderId, string userId, SmartDate orderDate, string shipAddr1, string shipAddr2, string shipCity, string shipState, string shipZip, string shipCountry, string billAddr1, string billAddr2, string billCity, string billState, string billZip, string billCountry, string courier, decimal totalPrice, string billToFirstName, string billToLastName, string shipToFirstName, string shipToLastName, int authorizationNumber, string locale)
		{
			const string commandText = "UPDATE [dbo].[Orders]  SET [UserId] = @p_UserId, [OrderDate] = @p_OrderDate, [ShipAddr1] = @p_ShipAddr1, [ShipAddr2] = @p_ShipAddr2, [ShipCity] = @p_ShipCity, [ShipState] = @p_ShipState, [ShipZip] = @p_ShipZip, [ShipCountry] = @p_ShipCountry, [BillAddr1] = @p_BillAddr1, [BillAddr2] = @p_BillAddr2, [BillCity] = @p_BillCity, [BillState] = @p_BillState, [BillZip] = @p_BillZip, [BillCountry] = @p_BillCountry, [Courier] = @p_Courier, [TotalPrice] = @p_TotalPrice, [BillToFirstName] = @p_BillToFirstName, [BillToLastName] = @p_BillToLastName, [ShipToFirstName] = @p_ShipToFirstName, [ShipToLastName] = @p_ShipToLastName, [AuthorizationNumber] = @p_AuthorizationNumber, [Locale] = @p_Locale WHERE [OrderId] = @p_OrderId";
            using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddWithValue("@p_OrderId", orderId);
				command.Parameters.AddWithValue("@p_UserId", userId);
				command.Parameters.AddWithValue("@p_OrderDate", (DateTime)orderDate);
				command.Parameters.AddWithValue("@p_ShipAddr1", shipAddr1);
				command.Parameters.AddWithValue("@p_ShipAddr2", shipAddr2);
				command.Parameters.AddWithValue("@p_ShipCity", shipCity);
				command.Parameters.AddWithValue("@p_ShipState", shipState);
				command.Parameters.AddWithValue("@p_ShipZip", shipZip);
				command.Parameters.AddWithValue("@p_ShipCountry", shipCountry);
				command.Parameters.AddWithValue("@p_BillAddr1", billAddr1);
				command.Parameters.AddWithValue("@p_BillAddr2", billAddr2);
				command.Parameters.AddWithValue("@p_BillCity", billCity);
				command.Parameters.AddWithValue("@p_BillState", billState);
				command.Parameters.AddWithValue("@p_BillZip", billZip);
				command.Parameters.AddWithValue("@p_BillCountry", billCountry);
				command.Parameters.AddWithValue("@p_Courier", courier);
				command.Parameters.AddWithValue("@p_TotalPrice", totalPrice);
				command.Parameters.AddWithValue("@p_BillToFirstName", billToFirstName);
				command.Parameters.AddWithValue("@p_BillToLastName", billToLastName);
				command.Parameters.AddWithValue("@p_ShipToFirstName", shipToFirstName);
				command.Parameters.AddWithValue("@p_ShipToLastName", shipToLastName);
				command.Parameters.AddWithValue("@p_AuthorizationNumber", authorizationNumber);
				command.Parameters.AddWithValue("@p_Locale", locale);

				SafeDataReader reader = new SafeDataReader(command.ExecuteReader());

                //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                if(reader.RecordsAffected == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

			    return reader;
			}
		}
		
		#endregion
		
		#region Fetch
		
		public virtual SafeDataReader OrderFetch(Dictionary<string, object> bag)
		{
            string commandText = string.Format("SELECT [OrderId], [UserId], [OrderDate], [ShipAddr1], [ShipAddr2], [ShipCity], [ShipState], [ShipZip], [ShipCountry], [BillAddr1], [BillAddr2], [BillCity], [BillState], [BillZip], [BillCountry], [Courier], [TotalPrice], [BillToFirstName], [BillToLastName], [ShipToFirstName], [ShipToLastName], [AuthorizationNumber], [Locale] FROM [dbo].[Orders] {0}", BuildWhereStatement(bag));
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddRange(SqlParameters(bag));
				
				return new SafeDataReader(command.ExecuteReader());
			}
		}
     	
		#endregion
		
		#region Delete
		
		public virtual SafeDataReader OrderDelete(Dictionary<string, object> bag)
		{
			string commandText = string.Format("DELETE FROM [dbo].[Orders] {0}", BuildWhereStatement(bag));
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddRange(SqlParameters(bag));
				
				SafeDataReader reader = new SafeDataReader(command.ExecuteReader());

                //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                if(reader.RecordsAffected == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

			    return reader;
			}
		}
		
		#endregion
		
		#endregion
				
		#region OrderStatus
		
		#region Insert
		
		public virtual SafeDataReader OrderStatusInsert(int orderId, int lineNum, SmartDate timestamp, string status)
		{
			const string commandText = "INSERT INTO [dbo].[OrderStatus] ([OrderId], [LineNum], [Timestamp], [Status]) VALUES (@p_OrderId, @p_LineNum, @p_Timestamp, @p_Status)";
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddWithValue("@p_OrderId", orderId);
				command.Parameters.AddWithValue("@p_LineNum", lineNum);
				command.Parameters.AddWithValue("@p_Timestamp", (DateTime)timestamp);
				command.Parameters.AddWithValue("@p_Status", status);
				
				return new SafeDataReader(command.ExecuteReader());
			}
		}
		
		#endregion

		#region Update

        public virtual SafeDataReader OrderStatusUpdate(int orderId, int lineNum, SmartDate timestamp, string status)
		{
			const string commandText = "UPDATE [dbo].[OrderStatus]  SET [Timestamp] = @p_Timestamp, [Status] = @p_Status WHERE [OrderId] = @p_OrderId AND [LineNum] = @p_LineNum";
            using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddWithValue("@p_OrderId", orderId);
				command.Parameters.AddWithValue("@p_LineNum", lineNum);
				command.Parameters.AddWithValue("@p_Timestamp", (DateTime)timestamp);
				command.Parameters.AddWithValue("@p_Status", status);

				SafeDataReader reader = new SafeDataReader(command.ExecuteReader());

                //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                if(reader.RecordsAffected == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

			    return reader;
			}
		}
		
		#endregion
		
		#region Fetch
		
		public virtual SafeDataReader OrderStatusFetch(Dictionary<string, object> bag)
		{
            string commandText = string.Format("SELECT [OrderId], [LineNum], [Timestamp], [Status] FROM [dbo].[OrderStatus] {0}", BuildWhereStatement(bag));
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddRange(SqlParameters(bag));
				
				return new SafeDataReader(command.ExecuteReader());
			}
		}
     	
		#endregion
		
		#region Delete
		
		public virtual SafeDataReader OrderStatusDelete(Dictionary<string, object> bag)
		{
			string commandText = string.Format("DELETE FROM [dbo].[OrderStatus] {0}", BuildWhereStatement(bag));
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddRange(SqlParameters(bag));
				
				SafeDataReader reader = new SafeDataReader(command.ExecuteReader());

                //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                if(reader.RecordsAffected == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

			    return reader;
			}
		}
		
		#endregion
		
		#endregion
				
		#region Product
		
		#region Insert
		
		public virtual SafeDataReader ProductInsert(string productId, string name, string descn, string image, string categoryId)
		{
			const string commandText = "INSERT INTO [dbo].[Product] ([ProductId], [Name], [Descn], [Image], [CategoryId]) VALUES (@p_ProductId, @p_Name, @p_Descn, @p_Image, @p_CategoryId)";
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddWithValue("@p_ProductId", productId);
				command.Parameters.AddWithValue("@p_Name", name);
				command.Parameters.AddWithValue("@p_Descn", descn);
				command.Parameters.AddWithValue("@p_Image", image);
				command.Parameters.AddWithValue("@p_CategoryId", categoryId);
				
				return new SafeDataReader(command.ExecuteReader());
			}
		}
		
		#endregion

		#region Update

        public virtual SafeDataReader ProductUpdate(string productId, string name, string descn, string image, string categoryId)
		{
			const string commandText = "UPDATE [dbo].[Product]  SET [Name] = @p_Name, [Descn] = @p_Descn, [Image] = @p_Image, [CategoryId] = @p_CategoryId, [ProductId] = @p_ProductId WHERE [ProductId] = @p_ProductId";
            using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddWithValue("@p_ProductId", productId);
				command.Parameters.AddWithValue("@p_Name", name);
				command.Parameters.AddWithValue("@p_Descn", descn);
				command.Parameters.AddWithValue("@p_Image", image);
				command.Parameters.AddWithValue("@p_CategoryId", categoryId);

				SafeDataReader reader = new SafeDataReader(command.ExecuteReader());

                //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                if(reader.RecordsAffected == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

			    return reader;
			}
		}
		
		#endregion
		
		#region Fetch
		
		public virtual SafeDataReader ProductFetch(Dictionary<string, object> bag)
		{
            string commandText = string.Format("SELECT [ProductId], [Name], [Descn], [Image], [CategoryId], [ProductId] FROM [dbo].[Product] {0}", BuildWhereStatement(bag));
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddRange(SqlParameters(bag));
				
				return new SafeDataReader(command.ExecuteReader());
			}
		}
     	
		#endregion
		
		#region Delete
		
		public virtual SafeDataReader ProductDelete(Dictionary<string, object> bag)
		{
			string commandText = string.Format("DELETE FROM [dbo].[Product] {0}", BuildWhereStatement(bag));
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddRange(SqlParameters(bag));
				
				SafeDataReader reader = new SafeDataReader(command.ExecuteReader());

                //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                if(reader.RecordsAffected == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

			    return reader;
			}
		}
		
		#endregion
		
		#endregion
				
		#region Profile
		
		#region Insert
		
		public virtual SafeDataReader ProfileInsert(string username, string applicationName, bool? isAnonymous, SmartDate? lastActivityDate, SmartDate? lastUpdatedDate)
		{
			const string commandText = "INSERT INTO [dbo].[Profiles] ([Username], [ApplicationName], [IsAnonymous], [LastActivityDate], [LastUpdatedDate]) VALUES (@p_Username, @p_ApplicationName, @p_IsAnonymous, @p_LastActivityDate, @p_LastUpdatedDate); SELECT [UniqueID] FROM [dbo].[Profiles] WHERE UniqueID = SCOPE_IDENTITY()";
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddWithValue("@p_Username", username);
				command.Parameters.AddWithValue("@p_ApplicationName", applicationName);
				command.Parameters.AddWithValue("@p_IsAnonymous", isAnonymous);
				command.Parameters.AddWithValue("@p_LastActivityDate", (DateTime?)lastActivityDate);
				command.Parameters.AddWithValue("@p_LastUpdatedDate", (DateTime?)lastUpdatedDate);
				
				return new SafeDataReader(command.ExecuteReader());
			}
		}
		
		#endregion

		#region Update

        public virtual SafeDataReader ProfileUpdate(int uniqueID, string username, string applicationName, bool? isAnonymous, SmartDate? lastActivityDate, SmartDate? lastUpdatedDate)
		{
			const string commandText = "UPDATE [dbo].[Profiles]  SET [Username] = @p_Username, [ApplicationName] = @p_ApplicationName, [IsAnonymous] = @p_IsAnonymous, [LastActivityDate] = @p_LastActivityDate, [LastUpdatedDate] = @p_LastUpdatedDate WHERE [UniqueID] = @p_UniqueID";
            using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddWithValue("@p_UniqueID", uniqueID);
				command.Parameters.AddWithValue("@p_Username", username);
				command.Parameters.AddWithValue("@p_ApplicationName", applicationName);
				command.Parameters.AddWithValue("@p_IsAnonymous", isAnonymous);
				command.Parameters.AddWithValue("@p_LastActivityDate", (DateTime?)lastActivityDate);
				command.Parameters.AddWithValue("@p_LastUpdatedDate", (DateTime?)lastUpdatedDate);

				SafeDataReader reader = new SafeDataReader(command.ExecuteReader());

                //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                if(reader.RecordsAffected == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

			    return reader;
			}
		}
		
		#endregion
		
		#region Fetch
		
		public virtual SafeDataReader ProfileFetch(Dictionary<string, object> bag)
		{
            string commandText = string.Format("SELECT [UniqueID], [Username], [ApplicationName], [IsAnonymous], [LastActivityDate], [LastUpdatedDate] FROM [dbo].[Profiles] {0}", BuildWhereStatement(bag));
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddRange(SqlParameters(bag));
				
				return new SafeDataReader(command.ExecuteReader());
			}
		}
     	
		#endregion
		
		#region Delete
		
		public virtual SafeDataReader ProfileDelete(Dictionary<string, object> bag)
		{
			string commandText = string.Format("DELETE FROM [dbo].[Profiles] {0}", BuildWhereStatement(bag));
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddRange(SqlParameters(bag));
				
				SafeDataReader reader = new SafeDataReader(command.ExecuteReader());

                //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                if(reader.RecordsAffected == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

			    return reader;
			}
		}
		
		#endregion
		
		#endregion
				
		#region Supplier
		
		#region Insert
		
		public virtual SafeDataReader SupplierInsert(int suppId, string name, string status, string addr1, string addr2, string city, string state, string zip, string phone)
		{
			const string commandText = "INSERT INTO [dbo].[Supplier] ([SuppId], [Name], [Status], [Addr1], [Addr2], [City], [State], [Zip], [Phone]) VALUES (@p_SuppId, @p_Name, @p_Status, @p_Addr1, @p_Addr2, @p_City, @p_State, @p_Zip, @p_Phone)";
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddWithValue("@p_SuppId", suppId);
				command.Parameters.AddWithValue("@p_Name", name);
				command.Parameters.AddWithValue("@p_Status", status);
				command.Parameters.AddWithValue("@p_Addr1", addr1);
				command.Parameters.AddWithValue("@p_Addr2", addr2);
				command.Parameters.AddWithValue("@p_City", city);
				command.Parameters.AddWithValue("@p_State", state);
				command.Parameters.AddWithValue("@p_Zip", zip);
				command.Parameters.AddWithValue("@p_Phone", phone);
				
				return new SafeDataReader(command.ExecuteReader());
			}
		}
		
		#endregion

		#region Update

        public virtual SafeDataReader SupplierUpdate(int suppId, string name, string status, string addr1, string addr2, string city, string state, string zip, string phone)
		{
			const string commandText = "UPDATE [dbo].[Supplier]  SET [Name] = @p_Name, [Status] = @p_Status, [Addr1] = @p_Addr1, [Addr2] = @p_Addr2, [City] = @p_City, [State] = @p_State, [Zip] = @p_Zip, [Phone] = @p_Phone WHERE [SuppId] = @p_SuppId";
            using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddWithValue("@p_SuppId", suppId);
				command.Parameters.AddWithValue("@p_Name", name);
				command.Parameters.AddWithValue("@p_Status", status);
				command.Parameters.AddWithValue("@p_Addr1", addr1);
				command.Parameters.AddWithValue("@p_Addr2", addr2);
				command.Parameters.AddWithValue("@p_City", city);
				command.Parameters.AddWithValue("@p_State", state);
				command.Parameters.AddWithValue("@p_Zip", zip);
				command.Parameters.AddWithValue("@p_Phone", phone);

				SafeDataReader reader = new SafeDataReader(command.ExecuteReader());

                //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                if(reader.RecordsAffected == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

			    return reader;
			}
		}
		
		#endregion
		
		#region Fetch
		
		public virtual SafeDataReader SupplierFetch(Dictionary<string, object> bag)
		{
            string commandText = string.Format("SELECT [SuppId], [Name], [Status], [Addr1], [Addr2], [City], [State], [Zip], [Phone] FROM [dbo].[Supplier] {0}", BuildWhereStatement(bag));
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddRange(SqlParameters(bag));
				
				return new SafeDataReader(command.ExecuteReader());
			}
		}
     	
		#endregion
		
		#region Delete
		
		public virtual SafeDataReader SupplierDelete(Dictionary<string, object> bag)
		{
			string commandText = string.Format("DELETE FROM [dbo].[Supplier] {0}", BuildWhereStatement(bag));
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddRange(SqlParameters(bag));
				
				SafeDataReader reader = new SafeDataReader(command.ExecuteReader());

                //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                if(reader.RecordsAffected == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

			    return reader;
			}
		}
		
		#endregion
		
		#endregion
				
		#endregion
    }
}
