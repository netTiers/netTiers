<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PetShop.Data.SqlClient</name>
    </assembly>
    <members>
        <member name="T:PetShop.Data.SqlClient.SqlLineItemProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PetShop.Business.LineItem"/> entity.
            </summary>
        </member>
        <member name="T:PetShop.Data.SqlClient.SqlLineItemProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PetShop.Business.LineItem"/> entity.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlLineItemProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlLineItemProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlLineItemProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlLineItemProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlLineItemProviderBase.Delete(PetShop.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_orderId">. Primary Key.</param>	
            <param name="_lineNum">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlLineItemProviderBase.Find(PetShop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PetShop.Business.LineItem objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlLineItemProviderBase.Find(PetShop.Data.TransactionManager,PetShop.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PetShop.Business.LineItem objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlLineItemProviderBase.GetAll(PetShop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PetShop.Business.LineItem objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlLineItemProviderBase.GetPaged(PetShop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PetShop.Business.LineItem objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlLineItemProviderBase.GetByOrderId(PetShop.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK__LineItem__OrderI__03317E3D key.
            	FK__LineItem__OrderI__03317E3D Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="_orderId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PetShop.Business.LineItem objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlLineItemProviderBase.GetByOrderIdLineNum(PetShop.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PkLineItem index.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="_orderId"></param>
            <param name="_lineNum"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.LineItem"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlLineItemProviderBase.BulkInsert(PetShop.Data.TransactionManager,PetShop.Business.TList{PetShop.Business.LineItem})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PetShop.Business.LineItem object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlLineItemProviderBase.Insert(PetShop.Data.TransactionManager,PetShop.Business.LineItem)">
            <summary>
            	Inserts a PetShop.Business.LineItem object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="entity">PetShop.Business.LineItem object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PetShop.Business.LineItem object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlLineItemProviderBase.Update(PetShop.Data.TransactionManager,PetShop.Business.LineItem)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="entity">PetShop.Business.LineItem object to update.</param>
            <remarks>
            	After updating the datasource, the PetShop.Business.LineItem object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlLineItemProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlLineItemProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlLineItemProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlLineItemProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlLineItemProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PetShop.Data.SqlClient.SqlOrderStatusProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PetShop.Business.OrderStatus"/> entity.
            </summary>
        </member>
        <member name="T:PetShop.Data.SqlClient.SqlOrderStatusProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PetShop.Business.OrderStatus"/> entity.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlOrderStatusProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlOrderStatusProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlOrderStatusProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlOrderStatusProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlOrderStatusProviderBase.Delete(PetShop.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_orderId">. Primary Key.</param>	
            <param name="_lineNum">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlOrderStatusProviderBase.Find(PetShop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PetShop.Business.OrderStatus objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlOrderStatusProviderBase.Find(PetShop.Data.TransactionManager,PetShop.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PetShop.Business.OrderStatus objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlOrderStatusProviderBase.GetAll(PetShop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PetShop.Business.OrderStatus objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlOrderStatusProviderBase.GetPaged(PetShop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PetShop.Business.OrderStatus objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlOrderStatusProviderBase.GetByOrderId(PetShop.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK__OrderStat__Order__060DEAE8 key.
            	FK__OrderStat__Order__060DEAE8 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="_orderId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PetShop.Business.OrderStatus objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlOrderStatusProviderBase.GetByOrderIdLineNum(PetShop.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PkOrderStatus index.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="_orderId"></param>
            <param name="_lineNum"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.OrderStatus"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlOrderStatusProviderBase.BulkInsert(PetShop.Data.TransactionManager,PetShop.Business.TList{PetShop.Business.OrderStatus})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PetShop.Business.OrderStatus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlOrderStatusProviderBase.Insert(PetShop.Data.TransactionManager,PetShop.Business.OrderStatus)">
            <summary>
            	Inserts a PetShop.Business.OrderStatus object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="entity">PetShop.Business.OrderStatus object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PetShop.Business.OrderStatus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlOrderStatusProviderBase.Update(PetShop.Data.TransactionManager,PetShop.Business.OrderStatus)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="entity">PetShop.Business.OrderStatus object to update.</param>
            <remarks>
            	After updating the datasource, the PetShop.Business.OrderStatus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlOrderStatusProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlOrderStatusProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlOrderStatusProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlOrderStatusProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlOrderStatusProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PetShop.Data.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:PetShop.Data.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <c cref="T:PetShop.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(PetShop.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(PetShop.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(PetShop.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(PetShop.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(PetShop.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(PetShop.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(PetShop.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(PetShop.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(PetShop.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(PetShop.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(PetShop.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(PetShop.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <c cref="T:PetShop.Data.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlNetTiersProvider.OrderStatusProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PetShop.Business.OrderStatus"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlNetTiersProvider.SqlOrderStatusProvider">
            <summary>
            Gets the current <c cref="P:PetShop.Data.SqlClient.SqlNetTiersProvider.SqlOrderStatusProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlNetTiersProvider.CartProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PetShop.Business.Cart"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlNetTiersProvider.SqlCartProvider">
            <summary>
            Gets the current <c cref="P:PetShop.Data.SqlClient.SqlNetTiersProvider.SqlCartProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlNetTiersProvider.OrderProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PetShop.Business.Order"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlNetTiersProvider.SqlOrderProvider">
            <summary>
            Gets the current <c cref="P:PetShop.Data.SqlClient.SqlNetTiersProvider.SqlOrderProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlNetTiersProvider.InventoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PetShop.Business.Inventory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlNetTiersProvider.SqlInventoryProvider">
            <summary>
            Gets the current <c cref="P:PetShop.Data.SqlClient.SqlNetTiersProvider.SqlInventoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlNetTiersProvider.SupplierProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PetShop.Business.Supplier"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlNetTiersProvider.SqlSupplierProvider">
            <summary>
            Gets the current <c cref="P:PetShop.Data.SqlClient.SqlNetTiersProvider.SqlSupplierProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlNetTiersProvider.CategoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PetShop.Business.Category"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlNetTiersProvider.SqlCategoryProvider">
            <summary>
            Gets the current <c cref="P:PetShop.Data.SqlClient.SqlNetTiersProvider.SqlCategoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlNetTiersProvider.ProductProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PetShop.Business.Product"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlNetTiersProvider.SqlProductProvider">
            <summary>
            Gets the current <c cref="P:PetShop.Data.SqlClient.SqlNetTiersProvider.SqlProductProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlNetTiersProvider.LineItemProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PetShop.Business.LineItem"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlNetTiersProvider.SqlLineItemProvider">
            <summary>
            Gets the current <c cref="P:PetShop.Data.SqlClient.SqlNetTiersProvider.SqlLineItemProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlNetTiersProvider.AccountProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PetShop.Business.Account"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlNetTiersProvider.SqlAccountProvider">
            <summary>
            Gets the current <c cref="P:PetShop.Data.SqlClient.SqlNetTiersProvider.SqlAccountProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlNetTiersProvider.ProfileProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PetShop.Business.Profile"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlNetTiersProvider.SqlProfileProvider">
            <summary>
            Gets the current <c cref="P:PetShop.Data.SqlClient.SqlNetTiersProvider.SqlProfileProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlNetTiersProvider.ItemProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PetShop.Business.Item"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlNetTiersProvider.SqlItemProvider">
            <summary>
            Gets the current <c cref="P:PetShop.Data.SqlClient.SqlNetTiersProvider.SqlItemProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:PetShop.Data.SqlClient.SqlAccountProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PetShop.Business.Account"/> entity.
            </summary>
        </member>
        <member name="T:PetShop.Data.SqlClient.SqlAccountProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PetShop.Business.Account"/> entity.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlAccountProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlAccountProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlAccountProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlAccountProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlAccountProviderBase.Delete(PetShop.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_accountId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlAccountProviderBase.Find(PetShop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PetShop.Business.Account objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlAccountProviderBase.Find(PetShop.Data.TransactionManager,PetShop.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PetShop.Business.Account objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlAccountProviderBase.GetAll(PetShop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PetShop.Business.Account objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlAccountProviderBase.GetPaged(PetShop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PetShop.Business.Account objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlAccountProviderBase.GetByUniqueId(PetShop.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Account_UniqueID index.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="_uniqueId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlAccountProviderBase.GetByAccountId(PetShop.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Account index.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="_accountId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Account"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlAccountProviderBase.BulkInsert(PetShop.Data.TransactionManager,PetShop.Business.TList{PetShop.Business.Account})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PetShop.Business.Account object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlAccountProviderBase.Insert(PetShop.Data.TransactionManager,PetShop.Business.Account)">
            <summary>
            	Inserts a PetShop.Business.Account object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="entity">PetShop.Business.Account object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PetShop.Business.Account object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlAccountProviderBase.Update(PetShop.Data.TransactionManager,PetShop.Business.Account)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="entity">PetShop.Business.Account object to update.</param>
            <remarks>
            	After updating the datasource, the PetShop.Business.Account object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlAccountProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlAccountProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlAccountProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlAccountProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlAccountProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PetShop.Data.SqlClient.SqlCategoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PetShop.Business.Category"/> entity.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlCategoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlCategoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlCategoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlCategoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlCategoryProviderBase.Delete(PetShop.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_categoryId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlCategoryProviderBase.Find(PetShop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PetShop.Business.Category objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlCategoryProviderBase.Find(PetShop.Data.TransactionManager,PetShop.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PetShop.Business.Category objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlCategoryProviderBase.GetAll(PetShop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PetShop.Business.Category objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlCategoryProviderBase.GetPaged(PetShop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PetShop.Business.Category objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlCategoryProviderBase.GetByCategoryId(PetShop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__Category__19093A0B7F60ED59 index.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="_categoryId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Category"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlCategoryProviderBase.BulkInsert(PetShop.Data.TransactionManager,PetShop.Business.TList{PetShop.Business.Category})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PetShop.Business.Category object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlCategoryProviderBase.Insert(PetShop.Data.TransactionManager,PetShop.Business.Category)">
            <summary>
            	Inserts a PetShop.Business.Category object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="entity">PetShop.Business.Category object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PetShop.Business.Category object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlCategoryProviderBase.Update(PetShop.Data.TransactionManager,PetShop.Business.Category)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="entity">PetShop.Business.Category object to update.</param>
            <remarks>
            	After updating the datasource, the PetShop.Business.Category object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlCategoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlCategoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlCategoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PetShop.Data.SqlClient.SqlSupplierProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PetShop.Business.Supplier"/> entity.
            </summary>
        </member>
        <member name="T:PetShop.Data.SqlClient.SqlSupplierProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PetShop.Business.Supplier"/> entity.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlSupplierProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlSupplierProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlSupplierProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlSupplierProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlSupplierProviderBase.Delete(PetShop.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_suppId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlSupplierProviderBase.Find(PetShop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PetShop.Business.Supplier objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlSupplierProviderBase.Find(PetShop.Data.TransactionManager,PetShop.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PetShop.Business.Supplier objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlSupplierProviderBase.GetAll(PetShop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PetShop.Business.Supplier objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlSupplierProviderBase.GetPaged(PetShop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PetShop.Business.Supplier objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlSupplierProviderBase.GetBySuppId(PetShop.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__Supplier__F099B03F07020F21 index.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="_suppId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Supplier"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlSupplierProviderBase.BulkInsert(PetShop.Data.TransactionManager,PetShop.Business.TList{PetShop.Business.Supplier})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PetShop.Business.Supplier object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlSupplierProviderBase.Insert(PetShop.Data.TransactionManager,PetShop.Business.Supplier)">
            <summary>
            	Inserts a PetShop.Business.Supplier object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="entity">PetShop.Business.Supplier object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PetShop.Business.Supplier object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlSupplierProviderBase.Update(PetShop.Data.TransactionManager,PetShop.Business.Supplier)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="entity">PetShop.Business.Supplier object to update.</param>
            <remarks>
            	After updating the datasource, the PetShop.Business.Supplier object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlSupplierProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlSupplierProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlSupplierProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlSupplierProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlSupplierProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PetShop.Data.SqlClient.SqlCartProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PetShop.Business.Cart"/> entity.
            </summary>
        </member>
        <member name="T:PetShop.Data.SqlClient.SqlCartProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PetShop.Business.Cart"/> entity.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlCartProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlCartProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlCartProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlCartProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlCartProviderBase.Delete(PetShop.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_cartId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlCartProviderBase.Find(PetShop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PetShop.Business.Cart objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlCartProviderBase.Find(PetShop.Data.TransactionManager,PetShop.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PetShop.Business.Cart objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlCartProviderBase.GetAll(PetShop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PetShop.Business.Cart objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlCartProviderBase.GetPaged(PetShop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PetShop.Business.Cart objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlCartProviderBase.GetByUniqueId(PetShop.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Cart_UniqueID index.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="_uniqueId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlCartProviderBase.GetByIsShoppingCart(PetShop.Data.TransactionManager,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SHOPPINGCART index.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="_isShoppingCart"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlCartProviderBase.GetByCartId(PetShop.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Cart index.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="_cartId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Cart"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlCartProviderBase.BulkInsert(PetShop.Data.TransactionManager,PetShop.Business.TList{PetShop.Business.Cart})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PetShop.Business.Cart object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlCartProviderBase.Insert(PetShop.Data.TransactionManager,PetShop.Business.Cart)">
            <summary>
            	Inserts a PetShop.Business.Cart object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="entity">PetShop.Business.Cart object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PetShop.Business.Cart object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlCartProviderBase.Update(PetShop.Data.TransactionManager,PetShop.Business.Cart)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="entity">PetShop.Business.Cart object to update.</param>
            <remarks>
            	After updating the datasource, the PetShop.Business.Cart object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlCartProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlCartProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlCartProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlCartProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlCartProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PetShop.Data.SqlClient.SqlItemProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PetShop.Business.Item"/> entity.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlItemProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlItemProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlItemProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlItemProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlItemProviderBase.Delete(PetShop.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_itemId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlItemProviderBase.Find(PetShop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PetShop.Business.Item objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlItemProviderBase.Find(PetShop.Data.TransactionManager,PetShop.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PetShop.Business.Item objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlItemProviderBase.GetAll(PetShop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PetShop.Business.Item objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlItemProviderBase.GetPaged(PetShop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PetShop.Business.Item objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlItemProviderBase.GetByProductId(PetShop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK__Item__ProductId__117F9D94 key.
            	FK__Item__ProductId__117F9D94 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PetShop.Business.Item objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlItemProviderBase.GetBySupplier(PetShop.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK__Item__Supplier__1273C1CD key.
            	FK__Item__Supplier__1273C1CD Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="_supplier"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PetShop.Business.Item objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlItemProviderBase.GetByProductIdItemIdListPriceName(PetShop.Data.TransactionManager,System.String,System.String,System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IxItem index.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <param name="_itemId"></param>
            <param name="_listPrice"></param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlItemProviderBase.GetByItemId(PetShop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__Item__727E838B0F975522 index.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="_itemId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Item"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlItemProviderBase.BulkInsert(PetShop.Data.TransactionManager,PetShop.Business.TList{PetShop.Business.Item})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PetShop.Business.Item object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlItemProviderBase.Insert(PetShop.Data.TransactionManager,PetShop.Business.Item)">
            <summary>
            	Inserts a PetShop.Business.Item object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="entity">PetShop.Business.Item object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PetShop.Business.Item object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlItemProviderBase.Update(PetShop.Data.TransactionManager,PetShop.Business.Item)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="entity">PetShop.Business.Item object to update.</param>
            <remarks>
            	After updating the datasource, the PetShop.Business.Item object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlItemProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlItemProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlItemProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PetShop.Data.SqlClient.SqlInventoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PetShop.Business.Inventory"/> entity.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlInventoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlInventoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlInventoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlInventoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlInventoryProviderBase.Delete(PetShop.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_itemId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlInventoryProviderBase.Find(PetShop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PetShop.Business.Inventory objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlInventoryProviderBase.Find(PetShop.Data.TransactionManager,PetShop.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PetShop.Business.Inventory objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlInventoryProviderBase.GetAll(PetShop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PetShop.Business.Inventory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlInventoryProviderBase.GetPaged(PetShop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PetShop.Business.Inventory objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlInventoryProviderBase.GetByItemId(PetShop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__Inventor__727E838B03317E3D index.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="_itemId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Inventory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlInventoryProviderBase.BulkInsert(PetShop.Data.TransactionManager,PetShop.Business.TList{PetShop.Business.Inventory})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PetShop.Business.Inventory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlInventoryProviderBase.Insert(PetShop.Data.TransactionManager,PetShop.Business.Inventory)">
            <summary>
            	Inserts a PetShop.Business.Inventory object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="entity">PetShop.Business.Inventory object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PetShop.Business.Inventory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlInventoryProviderBase.Update(PetShop.Data.TransactionManager,PetShop.Business.Inventory)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="entity">PetShop.Business.Inventory object to update.</param>
            <remarks>
            	After updating the datasource, the PetShop.Business.Inventory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlInventoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlInventoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlInventoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PetShop.Data.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:PetShop.Data.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,PetShop.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="P:PetShop.Data.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:PetShop.Data.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:PetShop.Data.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:PetShop.Data.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:PetShop.Data.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:PetShop.Data.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:PetShop.Data.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:PetShop.Data.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="T:PetShop.Data.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="P:PetShop.Data.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="T:PetShop.Data.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:PetShop.Data.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:PetShop.Data.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
        <member name="T:PetShop.Data.SqlClient.SqlProductProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PetShop.Business.Product"/> entity.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProductProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlProductProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProductProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlProductProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProductProviderBase.Delete(PetShop.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_productId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProductProviderBase.Find(PetShop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PetShop.Business.Product objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProductProviderBase.Find(PetShop.Data.TransactionManager,PetShop.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PetShop.Business.Product objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProductProviderBase.GetAll(PetShop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PetShop.Business.Product objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProductProviderBase.GetPaged(PetShop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PetShop.Business.Product objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProductProviderBase.GetByName(PetShop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IxProduct1 index.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProductProviderBase.GetByCategoryId(PetShop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IxProduct2 index.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="_categoryId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProductProviderBase.GetByCategoryIdName(PetShop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IxProduct3 index.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="_categoryId"></param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProductProviderBase.GetByCategoryIdProductIdName(PetShop.Data.TransactionManager,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IxProduct4 index.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="_categoryId"></param>
            <param name="_productId"></param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProductProviderBase.GetByProductId(PetShop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__Product__B40CC6CD0AD2A005 index.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Product"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProductProviderBase.BulkInsert(PetShop.Data.TransactionManager,PetShop.Business.TList{PetShop.Business.Product})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PetShop.Business.Product object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProductProviderBase.Insert(PetShop.Data.TransactionManager,PetShop.Business.Product)">
            <summary>
            	Inserts a PetShop.Business.Product object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="entity">PetShop.Business.Product object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PetShop.Business.Product object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProductProviderBase.Update(PetShop.Data.TransactionManager,PetShop.Business.Product)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="entity">PetShop.Business.Product object to update.</param>
            <remarks>
            	After updating the datasource, the PetShop.Business.Product object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlProductProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlProductProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlProductProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PetShop.Data.SqlClient.SqlOrderProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PetShop.Business.Order"/> entity.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlOrderProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlOrderProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlOrderProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlOrderProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlOrderProviderBase.Delete(PetShop.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_orderId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlOrderProviderBase.Find(PetShop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PetShop.Business.Order objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlOrderProviderBase.Find(PetShop.Data.TransactionManager,PetShop.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PetShop.Business.Order objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlOrderProviderBase.GetAll(PetShop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PetShop.Business.Order objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlOrderProviderBase.GetPaged(PetShop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PetShop.Business.Order objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlOrderProviderBase.GetByOrderId(PetShop.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__Orders__C3905BCF7F60ED59 index.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="_orderId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Order"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlOrderProviderBase.BulkInsert(PetShop.Data.TransactionManager,PetShop.Business.TList{PetShop.Business.Order})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PetShop.Business.Order object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlOrderProviderBase.Insert(PetShop.Data.TransactionManager,PetShop.Business.Order)">
            <summary>
            	Inserts a PetShop.Business.Order object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="entity">PetShop.Business.Order object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PetShop.Business.Order object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlOrderProviderBase.Update(PetShop.Data.TransactionManager,PetShop.Business.Order)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="entity">PetShop.Business.Order object to update.</param>
            <remarks>
            	After updating the datasource, the PetShop.Business.Order object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlOrderProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlOrderProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlOrderProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PetShop.Data.SqlClient.SqlCategoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PetShop.Business.Category"/> entity.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlCategoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlCategoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PetShop.Data.SqlClient.SqlProfileProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PetShop.Business.Profile"/> entity.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProfileProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlProfileProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProfileProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlProfileProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProfileProviderBase.Delete(PetShop.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_uniqueId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProfileProviderBase.Find(PetShop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PetShop.Business.Profile objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProfileProviderBase.Find(PetShop.Data.TransactionManager,PetShop.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PetShop.Business.Profile objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProfileProviderBase.GetAll(PetShop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PetShop.Business.Profile objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProfileProviderBase.GetPaged(PetShop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PetShop.Business.Profile objects.</returns>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProfileProviderBase.GetByUsernameApplicationName(PetShop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Profiles index.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="_username"></param>
            <param name="_applicationName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Profile"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProfileProviderBase.GetByUniqueId(PetShop.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Profiles_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="_uniqueId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Profile"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProfileProviderBase.BulkInsert(PetShop.Data.TransactionManager,PetShop.Business.TList{PetShop.Business.Profile})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PetShop.Business.Profile object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProfileProviderBase.Insert(PetShop.Data.TransactionManager,PetShop.Business.Profile)">
            <summary>
            	Inserts a PetShop.Business.Profile object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="entity">PetShop.Business.Profile object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PetShop.Business.Profile object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProfileProviderBase.Update(PetShop.Data.TransactionManager,PetShop.Business.Profile)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PetShop.Data.TransactionManager"/> object</param>
            <param name="entity">PetShop.Business.Profile object to update.</param>
            <remarks>
            	After updating the datasource, the PetShop.Business.Profile object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlProfileProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlProfileProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PetShop.Data.SqlClient.SqlProfileProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PetShop.Data.SqlClient.SqlItemProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PetShop.Business.Item"/> entity.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlItemProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlItemProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PetShop.Data.SqlClient.SqlProductProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PetShop.Business.Product"/> entity.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProductProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlProductProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PetShop.Data.SqlClient.SqlInventoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PetShop.Business.Inventory"/> entity.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlInventoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlInventoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PetShop.Data.SqlClient.SqlOrderProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PetShop.Business.Order"/> entity.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlOrderProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlOrderProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PetShop.Data.SqlClient.SqlProfileProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PetShop.Business.Profile"/> entity.
            </summary>
        </member>
        <member name="M:PetShop.Data.SqlClient.SqlProfileProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PetShop.Data.SqlClient.SqlProfileProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
    </members>
</doc>
