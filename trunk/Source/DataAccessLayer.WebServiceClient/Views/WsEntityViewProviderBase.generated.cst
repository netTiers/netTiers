<%--
 * $Id: WsEntityViewProvider.generated.cst
--%>
<%@ CodeTemplate Src="..\..\TemplateLib\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Template description here." ResponseEncoding="UTF-8" NoWarn="0108,0618,1572,1573,1574,0162,2002"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections" %>

<%@ Property Name="SourceView" Type="SchemaExplorer.ViewSchema" Category="Connection" Description="Table that the data access class should be based on." %>

<%@ Property Name="IncludeCustoms" Type="System.Boolean" Default="True" Category="Options" Description="If true customs stored procedures will be generated as functions." %>
<%@ Property Name="CustomNonMatchingReturnType" Type="CustomNonMatchingReturnType" Default="DataSet" Category="Options" Description="When using custom stored procedures, if the returned rows do not match the fields in an entity, a DataSet or IDataReader will be returned. Choose One.  This is useful if you've returned more than one resultset in a custom procedure; you can use a ConvertToDataSet(IDataReader) method in the Utility class to convert that to a DataSet." %>
<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeGetListByFK" Type="System.Boolean" Default="True" Category="Options" Description="If true get functions will be generated." %>
<%@ Property Name="IncludeGetListByIX" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeFind" Type="System.Boolean" Default="False" Category="Options" Description="If true find functions will be generated." %>
<%@ Property Name="SelectSuffix" Type="System.String" Default="_Get" Category="Style" Description="Suffix to use for all generated SELECT functions." %>
<%@ Property Name="SelectAllSuffix" Type="System.String" Default="List" Category="Style" Description="Suffix to use for all generated SELECT functions." %>
<%@ Property Name="FindSuffix" Type="System.String" Default="_Find" Category="Style" Description="Suffix to use for all generated SELECT functions." %>
<%@ Property Name="NameSpace" Type="System.String" Category="Style" Description="Class Namespace." %>
<%@ Property Name="DALNameSpace" Type="System.String" Category="Style" Description="Class Namespace." %>
<%@ Property Name="WebReferenceName" Type="System.String" Default="" Category="Decoration" Description="The WebService Proxy Class Name." %>
<%@ Property Name="ProxyClassName" Type="System.String" Default="WsProxy" Optional="True" Category="Decoration" Description="The WebService Proxy Class Name." %>

<%
	// Name of the table being worked on.
	string name = SourceView.Name;
		
	
	string className = GetClassName(SourceView);
	string abstractRepositoryClassName = "Ws" + GetClassName(SourceView, ClassNameFormat.ProviderBase);
	string providerName = GetClassName(SourceView, ClassNameFormat.Provider);
	string providerBaseName = GetClassName(SourceView, ClassNameFormat.ProviderBase);
	string collectionClassName = GetClassName(SourceView, ClassNameFormat.ViewCollection);
		
	// this array store each Get BY MemberColumns in order to avoid to create doublon Get methods
	System.Collections.ArrayList getbyKeys = new System.Collections.ArrayList();
%>
/*
	File Generated by NetTiers templates [www.nettiers.com]
	<%
	if( IncludeGeneratedDate)
	{
	%>
	Generated on : <%=DateTime.Now.ToLongDateString()%>
	<%
	}
	%>
	Important: Do not modify this file. Edit the file <%=className%>.cs instead.
*/

#region Using directives

using System;
using System.Data;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using <%=NameSpace%>;
using <%=DALNameSpace%>.Bases;

#endregion

namespace <%=DALNameSpace%>.WebServiceClient
{

	/// <summary>
	///	This class is the base repository for the CRUD operations on the <%=className%> objects.
	/// </summary>
	public partial class <%=abstractRepositoryClassName%> : <%=providerBaseName%>
	{
		#region Declarations	
			
		/// <summary>
		/// the Url of the webservice.
		/// </summary>
		private string url;
			
		#endregion 
		
		#region Constructors
	
		/// <summary>
		/// Creates a new <see cref="<%=abstractRepositoryClassName%>"/> instance.
		/// Uses connection string to connect to datasource.
		/// </summary>
		public <%=abstractRepositoryClassName%>()
		{		
		}
		
		/// <summary>
		/// Creates a new <see cref="<%=abstractRepositoryClassName%>"/> instance.
		/// Uses connection string to connect to datasource.
		/// </summary>
		/// <param name="url">The url to the webservice.</param>
		public <%=abstractRepositoryClassName%>(string url)
		{
			this.url = url;
		}
			
		#endregion Constructors
		
		#region Url
		///<summary>
		/// Current URL for webservice endpoint. 
		///</summary>
		public string Url
        {
        	get {return this.url;}
        	set {this.url = value;}
        }
		#endregion 
	
		#region Convertion utility
		
		/// <summary>
		/// Convert a collection from the ws proxy to a nettiers collection.
		/// </summary>
		public static <%=collectionClassName%> Convert(<%=WebReferenceName + "." + GetClassName(SourceView) %>[] items)
		{
			<%=collectionClassName%> outItems = new <%=collectionClassName%>();
			foreach(<%=WebReferenceName + "." + GetClassName(SourceView)%> item in items)
			{
				outItems.Add(Convert(item));
			}
			return outItems;
		}
		
		/// <summary>
		/// Convert a nettiers collection to the ws proxy collection.
		/// </summary>
		public static <%=className%> Convert(<%=WebReferenceName+"."+GetClassName(SourceView)%> item)
		{			
			<%=className%> outItem = new <%=className%>();			
			<% for(int i=0; i<SourceView.Columns.Count; i++) { %>
			outItem.<%= GetPropertyName(SourceView.Columns[i]) %> = item.<%= GetPropertyName(SourceView.Columns[i]) %>;
			<% } %>				
							
			outItem.AcceptChanges();			
			return outItem;
		}
		
		/// <summary>
		/// Convert a nettiers entity to the ws proxy entity.
		/// </summary>
		public static <%=WebReferenceName+"."+GetClassName(SourceView)%> Convert(<%=className%> item)
		{			
			<%=WebReferenceName+"."+GetClassName(SourceView)%> outItem = new <%=WebReferenceName+"."+GetClassName(SourceView)%>();			
			<% for(int i=0; i<SourceView.Columns.Count; i++) { %>
			outItem.<%= GetPropertyName(SourceView.Columns[i]) %> = item.<%= GetPropertyName(SourceView.Columns[i]) %>;
			<% } %>				
							
			return outItem;
		}
		
		#endregion
	
		<% if (IncludeGetList) { %>
		#region <%= MethodNames.Get %> Methods
		/// <summary>
		/// 	Gets All rows from the DataSource by a specific predicate filter.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of total rows.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <%=className%> objects.</returns>
		public override <%=collectionClassName%> <%= MethodNames.Get %>(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			<%=WebReferenceName%>.<%=ProxyClassName%> proxy = new <%=WebReferenceName%>.<%=ProxyClassName%>();
			proxy.Url = this.url;
				
			<%=WebReferenceName%>.<%=GetClassName(SourceView)%>[] items = proxy.<%=providerName%>_<%= MethodNames.Get %>(whereClause, orderBy, start, pageLength, out count);
			
			return Convert(items);
		}
		#endregion <%= MethodNames.Get %> Methods
		
		#region <%= MethodNames.GetAll %> Methods
						
		/// <summary>
		/// 	Gets All rows from the DataSource a specific predicate filter.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <%=className%> objects.</returns>
		public override <%=collectionClassName%> <%= MethodNames.GetAll %>(TransactionManager transactionManager, int start, int pageLength)
		{
			<%=WebReferenceName%>.<%=ProxyClassName%> proxy = new <%=WebReferenceName%>.<%=ProxyClassName%>();
			proxy.Url = this.url;
				
			<%=WebReferenceName%>.<%=GetClassName(SourceView)%>[] items = proxy.<%=providerName%>_<%= MethodNames.GetAll %>(start, pageLength);			
			return Convert(items); 
		}
		
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">count of records returned</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <%=className%> objects.</returns>
		public override <%=collectionClassName%> <%= MethodNames.GetAll %>(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			<%=WebReferenceName%>.<%=ProxyClassName%> proxy = new <%=WebReferenceName%>.<%=ProxyClassName%>();
			proxy.Url = this.url;
				
			<%=WebReferenceName%>.<%=GetClassName(SourceView)%>[] items = proxy.<%=providerName%>_<%= MethodNames.GetAll %>(start, pageLength);   
			
			count = items.Length;
			return Convert(items);
		}
		
		#endregion <%= MethodNames.GetAll %> Methods
	
		#region <%= MethodNames.Get %> Methods
			
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <%=className%> objects.</returns>
		public override <%=collectionClassName%> <%= MethodNames.Get %>(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength)
		{
			<%=WebReferenceName%>.<%=ProxyClassName%> proxy = new <%=WebReferenceName%>.<%=ProxyClassName%>();
			proxy.Url = this.url;
					
			int count;
			<%=WebReferenceName%>.<%=GetClassName(SourceView)%>[] items = proxy.<%=providerName%>_<%= MethodNames.Get %>(whereClause, orderBy, start, pageLength, out count);
				
			return Convert(items); 
		}
		
		#endregion <%= MethodNames.Get %> Methods
	
<%
 	} //end IncludeGetList
%>
<%/*---------------------------------------------------------------------------------
							CUSTOM STORED PROCEDURES
  -------------------------------------------------------------------------------*/%>
<% if (IncludeCustoms) { %>
	#region Custom Methods
	
<% 
	System.Collections.IDictionary procs = GetCustomProcedures(SourceView);
	
	foreach(DictionaryEntry item in procs)
	{
		SchemaExplorer.CommandSchema command = (SchemaExplorer.CommandSchema) item.Value;
		string methodName  = item.Key.ToString();
		//if (methodName == "Get" || methodName == "GetAll")
			//methodName += "Custom";
		
		string returnType = GetReturnCustomProcReturnType(CustomNonMatchingReturnType, SourceView, command);
		
		if (returnType == "IDataReader")
			returnType = "DataSet"; 
			
		string returnTypeForComment = returnType.Replace("<", "&lt;").Replace(">", "&gt;");		
		
		string returnCommand;
		
		switch(returnType)
		{
			case "DataSet":
				returnCommand = "return {0};";
				break;
			case "void":
				returnCommand = "{0};";
				break;
			default:
				returnCommand = "return Convert({0});";
				break;
		}
		
		
		string executeCommand = string.Format("proxy.{0}_{1}(start, pageLength{2})",
			providerName, //0
			methodName, //1
			TransformStoredProcedureInputsToDataAccess(true, command.InputParameters)//2
			);
		
			
%>
	#region <%=command.Name%>

	/// <summary>
	///	This method wrap the '<%=command.Name%>' stored procedure. 
	/// </summary><%=TransformStoredProcedureInputsToMethodComments(command.InputParameters)%>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <remark>This method is generate from a stored procedure.</remark><% if (returnType != "void") {%>
		/// <returns>A <see cref="<%=returnTypeForComment%>"/> instance.</returns><%}%>
	public override <%=returnType%> <%=methodName%>(TransactionManager transactionManager, int start, int pageLength <%=TransformStoredProcedureInputsToMethod(true, command.InputParameters)%>)
	{
		<%=WebReferenceName%>.<%=ProxyClassName%> proxy = new <%=WebReferenceName%>.<%=ProxyClassName%>();
		proxy.Url = this.url;
		
		
		<%=string.Format(returnCommand,executeCommand)%>
	}	
	
	#endregion	
	
<%	} 	%>

	#endregion

<% } // endif IncludeCustoms %>
	
	
	}//end class
} // end namespace
