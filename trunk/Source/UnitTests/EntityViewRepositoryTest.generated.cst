<%--
 * $Id: EntityViewRepositoryTest.cst,v 1.2 2005/12/14 10:04:23 jroland Exp $
 * Last modified by $Author: jroland $
 * Last modified at $Date: 2006-03-16 23:53:08 +0100 (jeu., 16 mars 2006) $
 * $Revision: 62 $
--%>
<%@ CodeTemplate Src="..\TemplateLib\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Generate nUnit test for the entity." Debug="False"  ResponseEncoding="UTF-8" NoWarn="0108,0618,1572,1573,1574,0162,2002" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>

<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Optional="True"  Category="DataSource" Description="Tables that the stored procedures should be based on." %>
<%@ Property Name="SourceView" Type="SchemaExplorer.ViewSchema" Category="Connection" Description="Table that the data access class should be based on." %>
<%@ Property Name="NameSpace" Type="System.String" Category="Data" Description="Project root Namespace." %>
<%@ Property Name="DALNameSpace" Type="System.String" Category="Data" Description="Project root Namespace." %>
<%@ Property Name="UTNameSpace" Type="System.String" Category="Data" Description="Project root Namespace." %>

<%@ Property Name="IncludeCustoms" Type="System.Boolean" Default="True" Category="Options" Description="If true customs stored procedures will be generated as functions." %>
<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeFind" Type="System.Boolean" Default="True" Category="Options" Description="If true find statements will be generated." %>

<%@ Property Name="IncludeUnitTest" Type="MoM.Templates.UnitTestStyle" Default="NUnit" Category="General" Description="Indicates type of Unit tests to be generated." %>

<%
	string className = GetClassName(SourceView);
	string collectionClassName = GetClassName(SourceView, ClassNameFormat.ViewCollection);
	string providerName = GetClassName(SourceView, ClassNameFormat.Provider);
	string unitTestClassName = GetClassName(SourceView, ClassNameFormat.UnitTest);
	string TestAssemblyNameSpace = (IncludeUnitTest == MoM.Templates.UnitTestStyle.NUnit) ? "NUnit.Framework" : "Microsoft.VisualStudio.TestTools.UnitTesting";
%>
/*
	File Generated by NetTiers templates [www.nettiers.com]
	<%
	if( IncludeGeneratedDate)
	{
	%>
	Generated on : <%=DateTime.Now.ToLongDateString()%>
	<%
	}
	%>
	Important: Do not modify this file. Edit the file <%=unitTestClassName%>.cs instead.
*/
#region Using directives

using System;
using System.Xml;
using System.Xml.Serialization;
using <%=TestAssemblyNameSpace%>;
using <%=NameSpace%>;
using <%=DALNameSpace%>;

#endregion

namespace <%=UTNameSpace%>
{
    /// <summary>
    /// Provides tests for the and <see cref="<%=className%>"/> objects (entity, collection and repository).
    /// </summary>
    public partial class <%=unitTestClassName%>
    {
    	// the <%=className%> instance used to test the repository.
		private <%=className%> mock;
		
		// the <%=collectionClassName%> instance used to test the repository.
		private <%=collectionClassName%> mockCollection;		
        
        /// <summary>
		/// This method is used to construct the test environment prior to running the tests.
		/// </summary>
        static private void Init_Generated()
        {
			System.Console.WriteLine(new String('-', 75));
			System.Console.WriteLine("-- Testing the <%=className%> Entity with the {0} --", <%=DALNameSpace%>.DataRepository.Provider.Name);
			System.Console.WriteLine(new String('-', 75));
        }
    
    	/// <summary>
		/// This method is used to restore the environment after the tests are completed.
		/// </summary>
        static private void CleanUp_Generated()
        {       	
			System.Console.WriteLine();
			System.Console.WriteLine();
        }
		
		<% if (IncludeGetList) { %>
		/// <summary>
		/// Selects a page of <%=className%> objects from the database.
		/// </summary>
		private void Step_1_SelectAll_Generated()
		{
			int count = -1;
			mockCollection = DataRepository.<%=providerName%>.<%= MethodNames.GetPaged %>(null, 0, 10, out count);
			Assert.IsTrue(count >= 0, "Select Query Failed with GetPaged");
			System.Console.WriteLine("DataRepository.<%=providerName%>.<%= MethodNames.GetPaged %>():");			
			System.Console.WriteLine(mockCollection);			
		}
		
		<% if (IncludeFind) { %>
		/// <summary>
		/// Searches some <%=className%> objects from the database.
		/// </summary>
		private void Step_2_Search_Generated()
		{
			int count = -1;
			mockCollection = DataRepository.<%=providerName%>.<%= MethodNames.Find %>(null, null, "", 0, 10, out count);
			Assert.IsTrue(count >= 0 && mockCollection != null, "Query Failed to issue Find Command.");
			
			System.Console.WriteLine("DataRepository.<%=providerName%>.<%= MethodNames.Find%>():");			
			System.Console.WriteLine(mockCollection);
					
		}
		<% } %> //Find
		<% } %>
			
		
		#region Serialization tests
		
		/// <summary>
		/// Serialize the mock <%=className%> entity into a temporary file.
		/// </summary>
		private void Step_6_SerializeEntity_Generated()
		{
			string fileName = "temp_<%=className%>.xml";
		
			XmlSerializer mySerializer = new XmlSerializer(typeof(<%=className%>)); 
			System.IO.StreamWriter myWriter = new System.IO.StreamWriter(fileName); 
			mySerializer.Serialize(myWriter, mock); 
			myWriter.Close();
			System.Console.WriteLine("mock correctly serialized to a temporary file.");			
		}
		
		/// <summary>
		/// Deserialize the mock <%=className%> entity from a temporary file.
		/// </summary>
		private void Step_7_DeserializeEntity_Generated()
		{
			string fileName = "temp_<%=className%>.xml";
		
			XmlSerializer mySerializer = new XmlSerializer(typeof(<%=className%>)); 
			System.IO.FileStream myFileStream = new System.IO.FileStream(fileName,  System.IO.FileMode.Open); 
			mock = (<%=className%>) mySerializer.Deserialize(myFileStream);
			myFileStream.Close();
			System.IO.File.Delete(fileName);
			
			System.Console.WriteLine("mock correctly deserialized from a temporary file.");
		}
		
		/// <summary>
		/// Serialize a <%=className%> collection into a temporary file.
		/// </summary>
		private void Step_8_SerializeCollection_Generated()
		{
			string fileName = "temp_<%=GetClassName(SourceView, ClassNameFormat.CollectionProperty)%>.xml";
		
			<%=collectionClassName%> mockCollection = new <%=collectionClassName%>();
			mockCollection.Add(mock);
		
			XmlSerializer mySerializer = new XmlSerializer(typeof(<%=collectionClassName%>)); 
			System.IO.StreamWriter myWriter = new System.IO.StreamWriter(fileName); 
			mySerializer.Serialize(myWriter, mockCollection); 
			myWriter.Close();
			
			System.Console.WriteLine("<%=collectionClassName%> correctly serialized to a temporary file.");					
		}
		
		
		/// <summary>
		/// Deserialize a <%=className%> collection from a temporary file.
		/// </summary>
		private void Step_9_DeserializeCollection_Generated()
		{
			string fileName = "temp_<%=GetClassName(SourceView, ClassNameFormat.CollectionProperty)%>.xml";
		
			XmlSerializer mySerializer = new XmlSerializer(typeof(<%=collectionClassName%>)); 
			System.IO.FileStream myFileStream = new System.IO.FileStream(fileName,  System.IO.FileMode.Open); 
			<%=collectionClassName%> mockCollection = (<%=collectionClassName%>) mySerializer.Deserialize(myFileStream);
			myFileStream.Close();
			System.IO.File.Delete(fileName);
			System.Console.WriteLine("<%=collectionClassName%> correctly deserialized from a temporary file.");	
		}
		#endregion
		
		#region Mock Instance
		///<summary>
		///  Returns a Typed <%=className%> Entity with mock values.
		///</summary>
		static public <%=className%> CreateMockInstance()
		{		
			<%=className%> mock = new <%=className%>();
						
			<% for (int x=0; x < SourceView.Columns.Count; x++) {%>
			mock.<%= GetPropertyName(SourceView.Columns[x]) %> = <%= GetCSMockValueByType(SourceView.Columns[x], RandomString(SourceView.Columns[x], false), false, Guid.NewGuid(), RandomNumber(1, 250), DateTime.Now) %>;
			<% } %>			
		   return (<%=className%>)mock;
		}
		

		#endregion
    }
}
