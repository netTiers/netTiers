<%--
 * $Id: EntityRepositoryTest.cst,v 1.3 2006/02/09 23:35:11 bgjohnso Exp $
 * Last modified by $Author: jroland $
 * Last modified at $Date: 2006-03-16 23:53:08 +0100 (jeu., 16 mars 2006) $
 * $Revision: 62 $
--%>
<%@ CodeTemplate Src="..\TemplateLib\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Generate nUnit test for the entity." Debug="False"  ResponseEncoding="UTF-8" NoWarn="0108,0618,1572,1573,1574,0162,2002"%>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>

<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Optional="True"  Category="DataSource" Description="Tables that the stored procedures should be based on." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Connection" Description="Table that the data access class should be based on." %>
<%@ Property Name="NameSpace" Type="System.String" Category="Data" Description="Project root Namespace." %>
<%@ Property Name="DALNameSpace" Type="System.String" Category="Data" Description="Project root Namespace." %>
<%@ Property Name="UTNameSpace" Type="System.String" Category="Data" Description="Project root Namespace." %>

<%@ Property Name="IncludeInsert" Type="System.Boolean" Default="True" Category="Options" Description="If true insert functions will be generated." %>
<%@ Property Name="IncludeUpdate" Type="System.Boolean" Default="True" Category="Options" Description="If true update functions will be generated." %>
<%@ Property Name="IncludeSave" Type="System.Boolean" Default="True" Category="Options" Description="If true combined insert/update functions will be generated." %>
<%@ Property Name="IncludeDelete" Type="System.Boolean" Default="True" Category="Options" Description="If true delete functions will be generated." %>
<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeManyToMany" Type="System.Boolean" Default="True" Category="Options" Description="If true many2many functions will be generated." %>
<%@ Property Name="IncludeGetListByFK" Type="System.Boolean" Default="True" Category="CRUD Options" Description="If true get statements will be generated." %>
<%@ Property Name="IncludeGetListByIX" Type="System.Boolean" Default="True" Category="CRUD Options" Description="If true get statements will be generated." %>
<%@ Property Name="IncludeRelations" Type="System.Boolean" Default="True" Category="CRUD Options" Description="If true deep load will be tested" %>
<%@ Property Name="IncludeFind" Type="System.Boolean" Default="True" Category="Options" Description="If true find statements will be generated." %>

<%@ Property Name="IncludeUnitTest" Type="MoM.Templates.UnitTestStyle" Default="NUnit" Category="General" Description="Indicates type of Unit tests to be generated." %>

<%
	string className = GetClassName(SourceTable);
	string collectionClassName = GetClassName(SourceTable, ClassNameFormat.Collection);
	string providerName = GetClassName(SourceTable, ClassNameFormat.Provider);
	string keyName = GetClassName(SourceTable, ClassNameFormat.Key);
	string unitTestClassName = GetClassName(SourceTable, ClassNameFormat.UnitTest);
	string TestAssemblyNameSpace = (IncludeUnitTest == MoM.Templates.UnitTestStyle.NUnit) ? "NUnit.Framework" : "Microsoft.VisualStudio.TestTools.UnitTesting";
%>

<%
	// Collection of all columns in the table.
	ColumnSchemaCollection cols = SourceTable.Columns;
	
	// Collection of all columns in the table that are not primary keys.
	ColumnSchemaCollection nonKeys = SourceTable.NonPrimaryKeyColumns;
	
	bool isJunctionTable = IsJunctionTable(SourceTable);
		
	// Collection of all primary key columns.
	ColumnSchemaCollection keys = SourceTable.PrimaryKey.MemberColumns;
	
	// Collection of ForeignKeys. Provides information about the foreign keys 
	//(keys where the current table is the foreign table) contained in the table. 
	TableKeySchemaCollection fkeys = SourceTable.ForeignKeys;
	
	//Provides information about the primary keys 
	//(keys where the current table is the primary table) contained in the table. 
	TableKeySchemaCollection pkeys = SourceTable.PrimaryKeys;
	
	//Provides information about the indexes contained in the table. 
	IndexSchemaCollection indexes = SourceTable.Indexes;
	
	// this array store each Get BY MemberColumns in order to avoid to create doublon Get methods
	System.Collections.ArrayList getbyKeys = new System.Collections.ArrayList();
%>
/*
	File Generated by NetTiers templates [www.nettiers.net]
	<%
	if( IncludeGeneratedDate)
	{
	%>
	Generated on : <%=DateTime.Now.ToLongDateString()%>
	<%
	}
	%>
	Important: Do not modify this file. Edit the file <%=unitTestClassName%>.cs instead.
*/

#region Using directives

using System;
using System.Xml;
using System.Xml.Serialization;
using <%=TestAssemblyNameSpace%>;
using <%=NameSpace%>;
using <%=DALNameSpace%>;
using <%=DALNameSpace%>.Bases;

#endregion

namespace <%=UTNameSpace%>
{
    /// <summary>
    /// Provides tests for the and <see cref="<%=className%>"/> objects (entity, collection and repository).
    /// </summary>
   public partial class <%=unitTestClassName%>
    {
    	// the <%=className%> instance used to test the repository.
		protected <%=className%> mock;
		
		// the <%=collectionClassName%> instance used to test the repository.
		protected <%=collectionClassName%> mockCollection;
		
		protected static TransactionManager CreateTransaction()
		{
			TransactionManager transactionManager = null;
			if (DataRepository.Provider.IsTransactionSupported)
			{
				transactionManager = DataRepository.Provider.CreateTransaction();
				transactionManager.BeginTransaction(System.Data.IsolationLevel.ReadCommitted);
			}			
			return transactionManager;
		}
		       
        /// <summary>
		/// This method is used to construct the test environment prior to running the tests.
		/// </summary>        
        static public void Init_Generated()
        {		
        	System.Console.WriteLine(new String('-', 75));
			System.Console.WriteLine("-- Testing the <%=className%> Entity with the {0} --", <%=DALNameSpace%>.DataRepository.Provider.Name);
			System.Console.WriteLine(new String('-', 75));
        }
    
    	/// <summary>
		/// This method is used to restore the environment after the tests are completed.
		/// </summary>
		static public void CleanUp_Generated()
        {   		
			System.Console.WriteLine("All Tests Completed");
			System.Console.WriteLine();
        }
    
    
		<% if (IncludeInsert && !isJunctionTable) { %>
		/// <summary>
		/// Inserts a mock <%=className%> entity into the database.
		/// </summary>
		private void Step_01_Insert_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock = CreateMockInstance(tm);
				Assert.IsTrue(DataRepository.<%=providerName%>.<%= MethodNames.Insert %>(tm, mock), "Insert failed");
										
				System.Console.WriteLine("DataRepository.<%=providerName%>.<%= MethodNames.Insert %>(mock):");			
				System.Console.WriteLine(mock);			
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		<% } %>
		
		
		<% if (IncludeGetList) { %>
		/// <summary>
		/// Selects all <%=className%> objects of the database.
		/// </summary>
		private void Step_02_SelectAll_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				//Find
				int count = -1;
				
				<% if (IncludeFind) { %>
				mockCollection = DataRepository.<%=providerName%>.<%= MethodNames.Find %>(tm, null, "", 0, 10, out count );
				Assert.IsTrue(count >= 0 && mockCollection != null, "Query Failed to issue Find Command.");
				
				System.Console.WriteLine("DataRepository.<%=providerName%>.<%= MethodNames.Find %>():");			
				System.Console.WriteLine(mockCollection);
				<% } %>	
				
				// GetPaged
				count = -1;
				
				mockCollection = DataRepository.<%=providerName%>.<%= MethodNames.GetPaged %>(tm, 0, 10, out count);
				Assert.IsTrue(count >= 0 && mockCollection != null, "Query Failed to issue GetPaged Command.");
				System.Console.WriteLine("#get paged count: " + count.ToString());
			}
		}
		<% } %>
		
		
		
		<% if (IncludeRelations && IncludeGetListByFK) { %>
		
		/// <summary>
		/// Deep load all <%=className%> children.
		/// </summary>
		private void Step_03_DeepLoad_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				int count = -1;
				mock =  CreateMockInstance(tm);
				mockCollection = DataRepository.<%=providerName%>.<%= MethodNames.GetPaged %>(tm, 0, 10, out count);
			
				DataRepository.<%=providerName%>.DeepLoading += new EntityProviderBaseCore<<%=className%>, <%=keyName%>>.DeepLoadingEventHandler(
						delegate(object sender, DeepSessionEventArgs e)
						{
							if (e.DeepSession.Count > 3)
								e.Cancel = true;
						}
					);

				if (mockCollection.Count > 0)
				{
					
					DataRepository.<%=providerName%>.<%= MethodNames.DeepLoad %>(tm, mockCollection[0]);
					System.Console.WriteLine("<%=className%> instance correctly deep loaded at 1 level.");
									
					mockCollection.Add(mock);
					<% if (IncludeSave)
					{ %>
					// DataRepository.<%=providerName%>.<%= MethodNames.DeepSave %>(tm, mockCollection);
					<% } %>
				}
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		<% } %>
		
		<% if (IncludeUpdate && !isJunctionTable) { %>
		/// <summary>
		/// Updates a mock <%=className%> entity into the database.
		/// </summary>
		private void Step_04_Update_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				<%=className%> mock = CreateMockInstance(tm);
				Assert.IsTrue(DataRepository.<%=providerName%>.<%= MethodNames.Insert %>(tm, mock), "Insert failed");
				
				UpdateMockInstance(tm, mock);
				Assert.IsTrue(DataRepository.<%=providerName%>.<%= MethodNames.Update %>(tm, mock), "Update failed.");			
				
				System.Console.WriteLine("DataRepository.<%=providerName%>.<%= MethodNames.Update %>(mock):");			
				System.Console.WriteLine(mock);
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		<% } %>
		
		
		<% if (IncludeDelete && !isJunctionTable) { %>
		/// <summary>
		/// Delete the mock <%=className%> entity into the database.
		/// </summary>
		private void Step_05_Delete_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock =  (<%=className%>)CreateMockInstance(tm);
				DataRepository.<%=providerName%>.<%= MethodNames.Insert %>(tm, mock);
			
				Assert.IsTrue(DataRepository.<%=providerName%>.<%= MethodNames.Delete %>(tm, mock), "Delete failed.");
				System.Console.WriteLine("DataRepository.<%=providerName%>.<%= MethodNames.Delete %>(mock):");			
				System.Console.WriteLine(mock);
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		<% } %>
		
		#region Serialization tests
		
		/// <summary>
		/// Serialize the mock <%=className%> entity into a temporary file.
		/// </summary>
		private void Step_06_SerializeEntity_Generated()
		{	
			using (TransactionManager tm = CreateTransaction())
			{
				mock =  CreateMockInstance(tm);
				string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_<%=className%>.xml");
			
				EntityHelper.SerializeXml(mock, fileName);
				Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock not found");
					
				System.Console.WriteLine("mock correctly serialized to a temporary file.");			
			}
		}
		
		/// <summary>
		/// Deserialize the mock <%=className%> entity from a temporary file.
		/// </summary>
		private void Step_07_DeserializeEntity_Generated()
		{
			string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_<%=className%>.xml");
			Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock file not found to deserialize");
			
			using (System.IO.StreamReader sr = System.IO.File.OpenText(fileName))
			{
				object item = EntityHelper.DeserializeEntityXml<<%=className%>>(sr.ReadToEnd());
				sr.Close();
			}
			System.IO.File.Delete(fileName);
			
			System.Console.WriteLine("mock correctly deserialized from a temporary file.");
		}
		
		/// <summary>
		/// Serialize a <%=className%> collection into a temporary file.
		/// </summary>
		private void Step_08_SerializeCollection_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_<%=GetClassName(SourceTable, ClassNameFormat.CollectionProperty)%>.xml");
				
				mock = CreateMockInstance(tm);
				<%=collectionClassName%> mockCollection = new <%=collectionClassName%>();
				mockCollection.Add(mock);
			
				EntityHelper.SerializeXml(mockCollection, fileName);
				
				Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock collection not found");
				System.Console.WriteLine("<%=collectionClassName%> correctly serialized to a temporary file.");					
			}
		}
		
		
		/// <summary>
		/// Deserialize a <%=className%> collection from a temporary file.
		/// </summary>
		private void Step_09_DeserializeCollection_Generated()
		{
			string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_<%=GetClassName(SourceTable, ClassNameFormat.CollectionProperty)%>.xml");
			Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock file not found to deserialize");
			
			XmlSerializer mySerializer = new XmlSerializer(typeof(<%=collectionClassName%>)); 
			using (System.IO.FileStream myFileStream = new System.IO.FileStream(fileName,  System.IO.FileMode.Open))
			{
				<%=collectionClassName%> mockCollection = (<%=collectionClassName%>) mySerializer.Deserialize(myFileStream);
				myFileStream.Close();
			}
			
			System.IO.File.Delete(fileName);
			System.Console.WriteLine("<%=collectionClassName%> correctly deserialized from a temporary file.");	
		}
		#endregion
		
		
		<% if (IncludeGetListByFK && !isJunctionTable) { %>
		
		/// <summary>
		/// Check the foreign key dal methods.
		/// </summary>
		private void Step_10_FK_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				<%=className%> entity = CreateMockInstance(tm);
				bool result = DataRepository.<%=providerName%>.<%= MethodNames.Insert %>(tm, entity);
				
				Assert.IsTrue(result, "Could Not Test FK, Insert Failed");
				
				<% for (int j=0; j < fkeys.Count;j++)
				{
					if(IsForeignKeyCoveredByIndex(fkeys[j]))
						continue;
						
					getbyKeys.Add(GetKeysName(fkeys[j].ForeignKeyMemberColumns));
				%>
				<%=collectionClassName%> t<%=j%> = DataRepository.<%=providerName%>.GetBy<%=GetKeysName( fkeys[j].ForeignKeyMemberColumns)%>(tm, <%= GetFunctionEntityParameters(fkeys[j].ForeignKeyMemberColumns) %>, 0, 10);
				<% } // endfor %>	
			}
		}
		<% } %>
		
		<% if (IncludeGetListByIX && !isJunctionTable) { %>
		
		/// <summary>
		/// Check the indexes dal methods.
		/// </summary>
		private void Step_11_IX_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				<%=className%> entity = CreateMockInstance(tm);
				bool result = DataRepository.<%=providerName%>.<%= MethodNames.Insert %>(tm, entity);
				
				Assert.IsTrue(result, "Could Not Test IX, Insert Failed");

			
				<%	
				/// this array store each Get BY index
				/// The goal is to avoid to create double bet by index function
				//System.Collections.ArrayList indexKeys = new System.Collections.ArrayList();
				
				for (int j=0; j < indexes.Count; j++)
				{
					//if(indexes[j].IsPrimaryKey)
						//continue;
					
					// Check if this key is not already generated
					if(getbyKeys.IndexOf(GetKeysName(indexes[j].MemberColumns)) >=0 )
					{
						continue;
					}
					else
					{
						// add this key to the index list
						getbyKeys.Add(GetKeysName(indexes[j].MemberColumns));
					}
					
					string returnType = collectionClassName;
					//bool isUnique = false;
						
					//if (IsPrimaryKey(indexes[j]))
					if (indexes[j].IsUnique || indexes[j].IsPrimaryKey)
					{
						returnType = className;
						//isUnique = true;
					}
			%>
				<%=returnType%> t<%=j%> = DataRepository.<%=providerName%>.GetBy<%=GetKeysName(indexes[j].MemberColumns)%>(tm, <%= GetFunctionEntityParameters(indexes[j].MemberColumns) %>);
			<% } //end for %>
			}
		}
		<% } %>
		
		/// <summary>
		/// Test methods exposed by the EntityHelper class.
		/// </summary>
		private void Step_20_TestEntityHelper_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock = CreateMockInstance(tm);
				
				<%=className%> entity = mock.Copy() as <%=className%>;
				entity = (<%=className%>)mock.Clone();
				Assert.IsTrue(<%=className%>.ValueEquals(entity, mock), "Clone is not working");
			}
		}
		
		<% if (IncludeFind) { %>
		/// <summary>
		/// Test Find using the Query class
		/// </summary>
		private void Step_30_TestFindByQuery_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				//Insert Mock Instance
				<%=className%> mock = CreateMockInstance(tm);
				bool result = DataRepository.<%=providerName%>.<%= MethodNames.Insert %>(tm, mock);
				
				Assert.IsTrue(result, "Could Not Test FindByQuery, Insert Failed");

				<%=className%>Query query = new <%=className%>Query();
			
				<% for (int x=0; x < cols.Count; x++)
				{ %>
				<% if ( !IsComputed(cols[x]) && IsColumnFindable(cols[x]) )
				{ %>
				<% if(cols[x].AllowDBNull) {%>
				if(mock.<%= GetPropertyName(cols[x]) %> != null)
					query.AppendEquals(<%=className%>Column.<%= GetPropertyName(cols[x]) %>, mock.<%= GetPropertyName(cols[x]) %>.ToString());
				<% } else { %>
				query.AppendEquals(<%=className%>Column.<%= GetPropertyName(cols[x]) %>, mock.<%= GetPropertyName(cols[x]) %>.ToString());
				<% } %>
				<% } %>
				<% } %>
				
				<%=collectionClassName%> results = DataRepository.<%=providerName%>.<%= MethodNames.Find %>(tm, query);
				
				Assert.IsTrue(results.Count == 1, "Find is not working correctly.  Failed to find the mock instance");
			}
		}
		<% } %>
						
		#region Mock Instance
		///<summary>
		///  Returns a Typed <%=className%> Entity with mock values.
		///</summary>
		static public <%=className%> CreateMockInstance_Generated(TransactionManager tm)
		{		
			<%=className%> mock = new <%=className%>();
						
			<% for (int x=0; x < cols.Count; x++)
			{ %>
			<% if ( !cols[x].IsForeignKeyMember && !IsIdentityColumn(cols[x]) && !IsComputed(cols[x]) )
			{ %>
			mock.<%= GetPropertyName(cols[x]) %> = <%= GetCSMockValueByType(cols[x]) %>;
			<% } %>
			<% } %>
			
			<% if (IncludeGetList) { %>
			<% for (int x=0; x < fkeys.Count; x++){ 
				if (SourceTables.Contains(fkeys[x].PrimaryKeyTable)) { 
					bool OneToOneRelationship = true;
					if(pkeys.Count>0 && fkeys[x].ForeignKeyMemberColumns.Count == pkeys[0].PrimaryKeyMemberColumns.Count)
					{
						for(int keyIndex=0;keyIndex<fkeys[x].ForeignKeyMemberColumns.Count;keyIndex++)
						{
							if(keyIndex>pkeys[0].PrimaryKeyMemberColumns.Count || fkeys[x].ForeignKeyMemberColumns[keyIndex].Name != pkeys[0].PrimaryKeyMemberColumns[keyIndex].Name)
							{
								OneToOneRelationship = false;
								break;
							}
						}
					}
					if(OneToOneRelationship)
					{
						string pkClassName = GetClassName(fkeys[x].PrimaryKeyTable);
						string fkKeysName = GetKeysName(fkeys[x].ForeignKeyMemberColumns);
						string mockOneToOne = string.Format("mock{0}By{1}",pkClassName,fkKeysName);
					%>
			//OneToOneRelationship
			<%= GetClassName(fkeys[x].PrimaryKeyTable)%> <%=mockOneToOne%> = <%= GetClassName(fkeys[x].PrimaryKeyTable, ClassNameFormat.UnitTest)%>.CreateMockInstance(tm);
			DataRepository.<%=GetClassName(fkeys[x].PrimaryKeyTable, ClassNameFormat.Provider)%>.<%= MethodNames.Insert %>(tm, <%=mockOneToOne%>);
					<% for (int y=0;y<fkeys[x].ForeignKeyMemberColumns.Count; y++) { %>
			mock.<%= GetPropertyName(fkeys[x].ForeignKeyMemberColumns[y])%> = <%=mockOneToOne%>.<%=GetPropertyName(fkeys[x].PrimaryKeyMemberColumns[y])%>;
					<% }
					} 
					else
					{%>
			int count<%= x %> = 0;
			<%=GetClassName(fkeys[x].PrimaryKeyTable, ClassNameFormat.Collection) %> _collection<%=x%> = DataRepository.<%=GetClassName(fkeys[x].PrimaryKeyTable, ClassNameFormat.Provider)%>.<%= MethodNames.GetPaged %>(tm, 0, 10, out count<%= x %>);
			//_collection<%=x%>.Shuffle();
			if (_collection<%=x%>.Count > 0)
			{
						<% for (int y=0;y < fkeys[x].ForeignKeyMemberColumns.Count; y++) { %>
				mock.<%= GetPropertyName(fkeys[x].ForeignKeyMemberColumns[y]) %> = _collection<%=x%>[0].<%=GetPropertyName(fkeys[x].PrimaryKeyMemberColumns[y])%>;
						<% } %>
						
			}
					<% } //OneToOneRelationship
				} //end if 
			} // end for fkeys
			} // end if ( IncludeGetList ) %>
		
			// create a temporary collection and add the item to it
			<%=collectionClassName%> tempMockCollection = new <%=collectionClassName%>();
			tempMockCollection.Add(mock);
			tempMockCollection.Remove(mock);
			
		
		   return (<%=className%>)mock;
		}
		
		
		///<summary>
		///  Update the Typed <%=className%> Entity with modified mock values.
		///</summary>
		static public void UpdateMockInstance_Generated(TransactionManager tm, <%=className%> mock)
		{
			<% for (int x=0; x < cols.Count; x++)
			{ %>
			<% 
			if ( !cols[x].IsPrimaryKeyMember && !cols[x].IsForeignKeyMember && !IsIdentityColumn(cols[x]) && !IsComputed(cols[x]) )
			{ %>
			mock.<%= GetPropertyName(cols[x]) %> = <%= GetCSMockValueByType(cols[x]) %>;
			<% } %>
			<% } %>
			
			<% if (IncludeGetList) { %>
			<% for (int x=0; x < fkeys.Count; x++){ 
				if (SourceTables.Contains(fkeys[x].PrimaryKeyTable)) 
				{ 
					bool OneToOneRelationship = true;
					if(pkeys.Count>0 && fkeys[x].ForeignKeyMemberColumns.Count == pkeys[0].PrimaryKeyMemberColumns.Count)
					{
						for(int keyIndex=0;keyIndex<fkeys[x].ForeignKeyMemberColumns.Count;keyIndex++)
						{
							if(fkeys[x].ForeignKeyMemberColumns[keyIndex].Name != pkeys[0].PrimaryKeyMemberColumns[keyIndex].Name)
							{
								OneToOneRelationship = false;
								break;
							}
						}
					}
					if(OneToOneRelationship)
					{
						string pkClassName = GetClassName(fkeys[x].PrimaryKeyTable);
						string fkKeysName = GetKeysName(fkeys[x].ForeignKeyMemberColumns);
						string mockOneToOne = string.Format("mock{0}By{1}",pkClassName,fkKeysName);
					%>
			//OneToOneRelationship
			<%= GetClassName(fkeys[x].PrimaryKeyTable)%> <%=mockOneToOne%> = <%= GetClassName(fkeys[x].PrimaryKeyTable, ClassNameFormat.UnitTest)%>.CreateMockInstance(tm);
			DataRepository.<%=GetClassName(fkeys[x].PrimaryKeyTable, ClassNameFormat.Provider)%>.<%= MethodNames.Insert %>(tm, <%=mockOneToOne%>);
					<% for (int y=0;y<fkeys[x].ForeignKeyMemberColumns.Count; y++) 
					{ %>
			mock.<%= GetPropertyName(fkeys[x].ForeignKeyMemberColumns[y])%> = <%=mockOneToOne%>.<%=GetPropertyName(fkeys[x].PrimaryKeyMemberColumns[y])%>;
					<% }%>
					
					<%}
					else
					{%>
			int count<%= x %> = 0;
			<%=GetClassName(fkeys[x].PrimaryKeyTable, ClassNameFormat.Collection) %> _collection<%=x%> = DataRepository.<%=GetClassName(fkeys[x].PrimaryKeyTable, ClassNameFormat.Provider)%>.<%= MethodNames.GetPaged %>(tm, 0, 10, out count<%= x %>);
			//_collection<%=x%>.Shuffle();
			if (_collection<%=x%>.Count > 0)
			{
				<% for (int y=0;y<fkeys[x].ForeignKeyMemberColumns.Count; y++) { %>
				mock.<%= GetPropertyName(fkeys[x].ForeignKeyMemberColumns[y]) %> = _collection<%=x%>[0].<%=GetPropertyName(fkeys[x].PrimaryKeyMemberColumns[y])%>;
						<% } %>
			}
			<% 	} //OneToOneRelationship
			  } // end if in tables
			} // end for
			} // end if ( IncludeGetList ) 
		%>
		}
		#endregion
    }
}
