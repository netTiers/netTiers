<%--
 * $Id: OracleEntityViewProviderBase.cst,v 2.3 2008/09/10 13:08:04 bniemyjski Exp $
 * Last modified by $Author: bniemyjski $
 * Last modified at $Date: 2008-09-10 16:01:56 -0600 (Wed, 10 Sep 2008) $
 * $Revision: 787 $
--%>
<%@ CodeTemplate Src="..\..\TemplateLib\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Template description here." Debug="True"  ResponseEncoding="UTF-8" NoWarn="0108,0618,1572,1573,1574,0162,2002"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Text" %>

<%@ Property Name="SourceView" Type="SchemaExplorer.ViewSchema" Category="Connection" Description="Table that the data access class should be based on." %>

<%@ Property Name="IncludeCustoms" Type="System.Boolean" Default="True" Category="Options" Description="If true customs stored procedures will be generated as functions." %>
<%@ Property Name="CustomNonMatchingReturnType" Type="CustomNonMatchingReturnType" Default="DataSet" Category="Options" Description="When using custom stored procedures, if the returned rows do not match the fields in an entity, a DataSet or IDataReader will be returned. Choose One.  This is useful if you've returned more than one resultset in a custom procedure; you can use a ConvertToDataSet(IDataReader) method in the Utility class to convert that to a DataSet." %>
<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeGetListByFK" Type="System.Boolean" Default="True" Category="Options" Description="If true get functions will be generated." %>
<%@ Property Name="IncludeGetListByIX" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeFind" Type="System.Boolean" Default="False" Category="Options" Description="If true find functions will be generated." %>
<%@ Property Name="SelectSuffix" Type="System.String" Default="_Get" Category="Style" Description="Suffix to use for all generated SELECT functions." %>
<%@ Property Name="SelectAllSuffix" Type="System.String" Default="List" Category="Style" Description="Suffix to use for all generated SELECT functions." %>
<%@ Property Name="FindSuffix" Type="System.String" Default="_Find" Category="Style" Description="Suffix to use for all generated SELECT functions." %>
<%@ Property Name="NameSpace" Type="System.String" Category="Style" Description="Class Namespace." %>
<%@ Property Name="DALNameSpace" Type="System.String" Category="Data" Description="DAL Namespace." %>
<%
	// Name of the table being worked on.
	string name = SourceView.Name;

	// Get the owner of the table
	string owner = GetOwnerName(SourceView, true);		
		
	string className = GetClassName(SourceView);
	string abstractRepositoryClassName = "Oracle" + GetClassName(SourceView, ClassNameFormat.ProviderBase);
	string providerName = GetClassName(SourceView, ClassNameFormat.Provider);
	string providerBaseName = "Oracle" + GetClassName(SourceView, ClassNameFormat.ProviderBase);
	string collectionClassName = GetClassName(SourceView, ClassNameFormat.ViewCollection);
		
	// This array store each Get BY MemberColumns in order to avoid to create doublon Get methods
	System.Collections.ArrayList getbyKeys = new System.Collections.ArrayList();
%>
/*
	File Generated by NetTiers templates [www.nettiers.com]
	<%
	if( IncludeGeneratedDate)
	{
	%>
	Generated on : <%=DateTime.Now.ToLongDateString()%>
	<%
	}
	%>
	Important: Do not modify this file. Edit the file <%=className%>.cs instead.
*/

#region Using directives

using System;
using System.Data;
using System.Data.Common;

using Microsoft.Practices.EnterpriseLibrary.Data.Oracle;

using <%=NameSpace%>;
using <%=DALNameSpace%>.Bases;

#endregion

namespace <%=DALNameSpace%>.OracleClient
{
/// <summary>
///	This class is the base repository for the CRUD operations on the <%=className%> objects.
/// </summary>
public abstract partial class <%=providerBaseName%> : <%=GetClassName(SourceView, ClassNameFormat.ProviderBase)%>
{
	
	string _connectionString;
    bool _useStoredProcedure;
    string _providerInvariantName;
	DbProviderFactory _providerFactory;
		
	#region Constructors
	
	/// <summary>
	/// Creates a new <see cref="<%=providerBaseName%>"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	protected <%=providerBaseName%>()
	{		
	}
	
	/// <summary>
	/// Creates a new <see cref="<%=providerBaseName%>"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public <%=providerBaseName%>(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
		this._providerFactory = DbProviderFactories.GetFactory(this._providerInvariantName);
	}
			
	#endregion 
	
	#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
		
	
	<%/*	
		-------------------------------
		GET LIST FUNCTIONS
		-------------------------------
	*/%>
<% if (IncludeGetList) { %>
	#region <%= MethodNames.GetAll %> Methods
	
	/// <summary>
	/// Gets All rows from the DataSource.
	/// </summary>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="count">The total number of rows in the data source.</param>
	/// <remarks></remarks>
	/// <returns>Returns a typed collection of <%=className%> objects.</returns>
	public override <%=collectionClassName%> <%= MethodNames.GetAll %>(TransactionManager transactionManager, int start, int pageLength, out int count)
	{
		OracleDatabase database = new OracleDatabase(this._connectionString);
		DbCommand command = database.GetStoredProcCommand("<%=owner + ProcedurePrefix + GetCleanName(name) + SelectSuffix + SelectAllSuffix%>");
		
		IDataReader reader = null;
		//Create Collection
		<%=collectionClassName%> rows = new <%=collectionClassName%>();
		
		try
		{
			if (transactionManager != null)
			{
				reader = Utility.ExecuteReader(transactionManager, command);
			}
			else
			{
				reader = Utility.ExecuteReader(database, command);
			}
		
			Fill(reader, rows, start, pageLength);
			count = rows.Count;

			if(reader.NextResult())
			{
				if(reader.Read())
				{
					count = ( int )reader.GetDecimal(0);
				}
			}
		}
		finally
		{
			if (reader != null)
				reader.Close();
		}
		return rows;
	}//end getall
	
	#endregion
	
	#region <%= MethodNames.Get %> Methods
			
	/// <summary>
	/// Gets a page of rows from the DataSource.
	/// </summary>
	/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
	/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="count">The total number of rows in the data source.</param>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <remarks></remarks>
	/// <returns>Returns a typed collection of <%=className%> objects.</returns>
	public override <%=collectionClassName%> <%= MethodNames.Get %>(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
	{
		OracleDatabase database = new OracleDatabase(this._connectionString);
		DbCommand command = database.GetStoredProcCommand("<%=owner + ProcedurePrefix + GetCleanName(name) + SelectSuffix%>");
		
		database.AddInParameter(command, "@WhereClause", DbType.String, whereClause);
		database.AddInParameter(command, "@OrderBy", DbType.String, orderBy);
	
		IDataReader reader = null;
		//Create Collection
		<%=collectionClassName%> rows = new <%=collectionClassName%>();
		
		try
		{
			if (transactionManager != null)
			{
				reader = Utility.ExecuteReader(transactionManager,command);
			}
			else
			{
				reader = Utility.ExecuteReader(database, command);
			}

			Fill(reader, rows, start, pageLength);
			
			count = rows.Count;

			if(reader.NextResult())
			{
				if(reader.Read())
				{
					count = ( int )reader.GetDecimal(0);
				}
			}
		}
		finally
		{
		     if (reader != null)
		     	 reader.Close();
		}
		return rows;
	}
	
	#endregion
	
<% } //end IncludeGetList %>
<% if ( IncludeFind ) { %>
	#region <%= MethodNames.Find %> Methods
	
	#region Parameterized <%= MethodNames.Find %> Methods
	
	/// <summary>
	/// Returns rows from the DataSource that meet the parameter conditions.
	/// </summary>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
	/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="count">out. The number of rows that match this query.</param>
	/// <returns>Returns a typed collection of <%= className %> objects.</returns>
	public override <%=collectionClassName%> <%= MethodNames.Find %>(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
	{
		SqlFilterParameterCollection filter = null;
		
		if (parameters == null)
			filter = new SqlFilterParameterCollection();
		else 
			filter = parameters.GetParameters();
			
		OracleDatabase database = new OracleDatabase(this._connectionString);
		DbCommand command = database.GetStoredProcCommand("<%=owner + ProcedurePrefix + GetCleanName(name) + FindSuffix %>_Dynamic");
		
		SqlFilterParameter param;

		for ( int i = 0; i < filter.Count; i++ )
		{
			param = filter[i];
			database.AddInParameter(command, param.Name, param.DbType, param.GetValue());
		}

		<%= collectionClassName %> rows = new <%= collectionClassName %>();
		IDataReader reader = null;
		
		try
		{
			if ( transactionManager != null )
			{
				reader = Utility.ExecuteReader(transactionManager, command);
			}
			else
			{
				reader = Utility.ExecuteReader(database, command);
			}
			
			Fill(reader, rows, start, pageLength);

			count = rows.Count;
			
			if ( reader.NextResult() )
			{
				if ( reader.Read() )
				{
					count = ( int )reader.GetDecimal(0);
				}
			}
		}
		finally
		{
			if ( reader != null )
				reader.Close();
		}
		
		return rows;
	}
	
	#endregion Parameterized <%= MethodNames.Find %> Methods

	#endregion 

<% } // end if ( IncludeFind ) { %>
<%/*---------------------------------------------------------------------------------
							CUSTOM STORED PROCEDURES
  -------------------------------------------------------------------------------*/ %>
<% if (IncludeCustoms) { %>
	#region Custom Methods
	
<% 
		System.Collections.IDictionary procs = GetCustomProcedures(SourceView);
		foreach(System.Collections.DictionaryEntry item in procs)
		{
			CommandSchema command = (CommandSchema) item.Value;
			string methodName  = item.Key.ToString();		
			string returnType = GetReturnCustomProcReturnType(CustomNonMatchingReturnType, SourceView, command);
			string returnTypeForComment = returnType.Replace("<", "&lt;").Replace(">", "&gt;");
			
			// Go ahead and gather the strings necessary for Input / Output Parms.  These are used in multiple places
			// and cuts down on the number of times these items have to be transformed
			string parmsMethodComment = TransformStoredProcedureInputsToMethodComments(command.InputParameters) + 
										TransformStoredProcedureOutputsToMethodComments(command.AllOutputParameters);

			string methodParms = TransformStoredProcedureInputsToMethod(false, command.InputParameters) + 
								 TransformStoredProcedureOutputsToMethod(command.InputParameters.Count > 0, command.AllOutputParameters);			
			// Only append a comma if we got parameters back.
			if(methodParms.Length > 0)
			{
				methodParms = ", " + methodParms;	
			}
%>

	#region <%=command.Name%>
	
	/// <summary>
	///	This method wraps the '<%=command.Name%>' stored procedure. 
	/// </summary><%=parmsMethodComment%>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <remark>This method is generated from a stored procedure.</remark><% if (returnType != "void") {%>
	/// <returns>A <see cref="<%=returnTypeForComment%>"/> instance.</returns><%}%>
	public override <%=returnType%> <%=methodName%>(TransactionManager transactionManager, int start, int pageLength<%=methodParms%>)
	{
		OracleDatabase database = new OracleDatabase(this._connectionString);
		DbCommand command = database.GetStoredProcCommand("<%= GetOwnerName(command, true) %><%=GetSafeName(command.Name)%>");
		
		<% foreach(ParameterSchema col in command.InputParameters)	{ %>
		database.AddInParameter(command, "<%=col.Name%>", <%=GetDbType(col)%>,  <%=GetFieldName(col)%> );
		<%}%>
		
		<% foreach(SchemaExplorer.ParameterSchema col in command.AllOutputParameters)	{ %>
		database.AddParameter(command, "<%=col.Name%>", DbType.<%=col.DataType.ToString()%>, <%= col.Size %>, ParameterDirection.InputOutput, <%= col.AllowDBNull.ToString().ToLower() %>, <%= col.Precision %>, <%= col.Scale %>, string.Empty, DataRowVersion.Current, <%=GetFieldName(col)%>);
		<%}%>

		try
		{
			<%			
			//Set up the output params
			StringBuilder outputValues = new StringBuilder();

			foreach(ParameterSchema outParam in command.AllOutputParameters)
			{
				outputValues.AppendFormat("{0} =  Utility.GetParameterValue<{1}>(command.Parameters[\"{2}\"]);\n",GetFieldName(outParam), GetCSType(outParam), outParam.Name); 
			}
			%>
			
			<% if (returnType == "DataSet") { %>
			DataSet ds = null;
			
			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, command);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, command);
			}
			
			<%=outputValues.ToString()%>
			
			return ds;	
			<% } else if (returnType == "IDataReader") { %>
			IDataReader dr = null;
			
			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,command);
			}
			else
			{
				dr = Utility.ExecuteReader(database, command);
			}
			
			<%=outputValues.ToString()%>
			
			return dr;
			<% } else if (returnType == "void") { %>
			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, command);
			}
			else
			{
				Utility.ExecuteNonQuery(database, command);
			}
			
			<%=outputValues.ToString()%>
			
			return;
			<% } else if 	(returnType == collectionClassName) { %>
			IDataReader reader = null;

			if (transactionManager != null)
			{	
				reader = Utility.ExecuteReader(transactionManager, command);
			}
			else
			{
				reader = Utility.ExecuteReader(database, command);
			}			
			
			// Create Collection
			<% if (returnType == collectionClassName) {%>
				<%=collectionClassName%> rows = new <%=collectionClassName%>();
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				<%=outputValues.ToString()%>
				
				return rows;
				<%} else if (returnType != "void"){%>
				<%=returnType%> tmp = null;
				try
				{
					reader.Read();
					tmp = (<%=returnType%>)reader[0];
				} finally {reader.Close();}
				
				<%=outputValues.ToString()%>
				
				return tmp;
				<% } %>		
			<% } %>
		}
		catch(SqlException ex)
		{
			throw new DataException("A data access error occured, please check inner SqlException.", ex);
		}
	}
	#endregion
<%
	}
%>

	#endregion

<% } // endif IncludeCustoms %>

	}//end class
} // end namespace
