<%@ CodeTemplate Src="..\TemplateLib\CommonSqlCode.cs" Debug="true" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="XML"
	Description="Generates SELECT/INSERT/UPDATE/DELETE stored procedures based on one or more selected tables, or an entire database schema." ResponseEncoding="UTF-8"%>

<%@ Property Name="CompanyName" Optional="True" Type="System.String" Category="General" Description="The name of your company." %>
<%@ Property Name="CompanyURL" Optional="True" Type="System.String" Category="General" Description="The URL of your company." %>

<%@ Property Name="SourceViews" Type="SchemaExplorer.ViewSchemaCollection" Optional="True" Category="Context" Description="Views that the stored procedures should be based on." %>
<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Context" Description="Tables that the stored procedures should be based on." %>
<%@ Property Name="IncludeInsert" Type="System.Boolean" Default="True" Category="Options" Description="If true insert procedures will be generated." %>
<%@ Property Name="IncludeUpdate" Type="System.Boolean" Default="True" Category="Options" Description="If true update procedures will be generated." %>
<%@ Property Name="IncludeDelete" Type="System.Boolean" Default="True" Category="Options" Description="If true delete procedures will be generated." %>

<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist procedures will be generated." %>
	
<%@ Property Name="IncludeGetListByFK" Type="System.Boolean" Default="True" Category="Options" Description="If true get statements will be generated." %>
<%@ Property Name="IncludeGetListByIX" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist statements will be generated." %>
<%@ Property Name="IncludeFind" Type="System.Boolean" Default="True" Category="Options" Description="If true find statements will be generated." %>
<%@ Property Name="IncludeManyToMany" Type="System.Boolean" Default="True" Category="Options" Description="If true select statements will be generated for any many to many relationship." %>

<%@ Property Name="IsolationLevel" Type="TransactionIsolationLevelEnum" Default="None" Category="Options" Description="Isolation level to use in generated procedures." %>
<%@ Property Name="ExcludeFields" Type="System.String[]" Optional="True" Category="Options" Description="Enter a list of fields to exclude from parameter generation" %>

<%@ Property Name="InsertSuffix" Type="System.String" Default="_Insert" Category="Style" Description="Suffix to use for all generated INSERT stored procedures." %>
<%@ Property Name="UpdateSuffix" Type="System.String" Default="_Update" Category="Style" Description="Suffix to use for all generated UPDATE stored procedures." %>
<%@ Property Name="DeleteSuffix" Type="System.String" Default="_Delete" Category="Style" Description="Suffix to use for all generated DELETE stored procedures." %>
<%@ Property Name="SelectSuffix" Type="System.String" Default="_Get" Category="Style" Description="Suffix to use for all generated SELECT stored procedures." %>
<%@ Property Name="SelectAllSuffix" Type="System.String" Default="List" Category="Style" Description="Suffix to use for all generated SELECT stored procedures." %>
<%@ Property Name="FindSuffix" Type="System.String" Default="_Find" Category="Style" Description="Suffix to use for all generated selective SELECT stored procedures." %>

<%-- Not Used --%>
<%@ Property Name="IncludeDrop" Type="System.Boolean" Default="False" Category="07. CRUD - Advanced" Description="If True then drop statements will be generated in accordance with the DropStyle. If False then no procedures will be droppped" %>
<%@ Property Name="DropStyle" Type="DropStyleEnum" Default="Entity" Category="07. CRUD - Advanced" Description="If Entity then drop statements will be generated to drop existing stored procedures for procedures being generated. If All then all existing netTiers procedures that match the ProcedurePrefix (one must be specified) and do not match the CustomProceduresStartsWith will be droppped." %>
<%@ Property Name="GrantReadUser" Type="System.String" Category="Style" Description="Optional user or role to GRANT EXEC Procedure permissions to" Default="" Optional="True" %>
<%@ Property Name="GrantWriteUser" Type="System.String" Category="Style" Description="Optional user or role to GRANT EXEC Procedure permissions to" Default="" Optional="True" %>
<%-- END Not Used --%>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Collections" %>

<%-- 

NEED TO RUN THE FOLLOWING SQL FIRST!!!!!!!!

create or replace package types 
as 
	type cursorType is ref cursor; 
end; 

 --%>
<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet type='text/xsl' href="ScriptOracleSql.xsl"?>
<root xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<database><%=(SourceTables.Count > 0 ? SourceTables[0].Database.Name : SourceViews[0].Database.Name)%></database>
<procedures>
<%
	for (int st = 0; st < SourceTables.Count; st++)
	{
		TableSchema SourceTable = SourceTables[st];
		//Set table properties
		string owner = GetOwnerName(SourceTable);
		string name = GetSafeName(SourceTable);
		string commandStem = GetCleanName(SourceTable);
		string tableComment = SourceTable.Description;
		
		
		// Collection of all columns in the table.
		ColumnSchemaCollection cols = SourceTable.Columns;
		
		// Collection of all columns in the table that are not primary keys.
		ColumnSchemaCollection nonKeys = SourceTable.NonPrimaryKeyColumns;
		
		// Collection of all primary key columns.
		//ColumnSchemaCollection keys = SourceTable.PrimaryKey.MemberColumns;
				
		// Collection of ForeignKeys. Provides information about the foreign keys 
		//(keys where the current table is the foreign table) contained in the table. 
		TableKeySchemaCollection fkeys = SourceTable.ForeignKeys;
				
		//Provides information about the primary keys 
		//(keys where the current table is the primary table) contained in the table. 
		TableKeySchemaCollection pkeys = SourceTable.PrimaryKeys;
		
		//Provides information about the indexes contained in the table. 
		IndexSchemaCollection indexes = SourceTable.Indexes;
		
		//ColumnSchema primaryKey = SourceTable.PrimaryKey.MemberColumns[0];
		
		// [ab 012605] nonKeys/cols sans computed/read-only columns. This is for Insert/Update operations
		ColumnSchemaCollection colsUpdatable = new ColumnSchemaCollection(cols.Count);
		ColumnSchemaCollection nonKeysUpdatable = new ColumnSchemaCollection(nonKeys.Count);
		
		ColumnSchemaCollection colsIdentityRowGuids = new ColumnSchemaCollection();

		// Holds the RowVersion column is there's any
		ColumnSchema RowVersion = null;
		
		foreach (ColumnSchema column in cols)
		{
			if ( ! IsIdentityColumn(column) && ! IsComputed(column) && ! IsRowGuidColumn(column) )
				colsUpdatable.Add(column);
				
			if (column.NativeType.ToLower() == "timestamp")
				RowVersion = column;

			if (IsIdentityRowGuidColumn(column))
				colsIdentityRowGuids.Add(column);
		}
		
		foreach (ColumnSchema column in nonKeys)
		{
			if ( ! IsIdentityColumn(column) && ! IsComputed(column) )
				nonKeysUpdatable.Add(column);
		}
		
		bool JunctionTable = IsJunctionTable(SourceTable);

		// this array store each Get BY MemberColumns in order to avoid to create doublon Get methods
		System.Collections.ArrayList getbyKeys = new System.Collections.ArrayList();

		// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
		// GetList
		if (IncludeGetList)
		{%>
		
		<procedure owner="<%=owner%>" name="<%= ProcedurePrefix + commandStem + SelectSuffix + SelectAllSuffix %>" >
			<comment><![CDATA[<%= GetProcSqlComment(string.Format("Gets all records from the {0} table", name), tableComment) %>]]></comment>
			<parameters>
				<parameter name="cur_OUT" type="types.cursorType" direction="InputOutput" />
			</parameters>
			<body><![CDATA[
				IS
				BEGIN
				
				open cur_OUT for

				<%= GetSetTransactionIsolationLevelStatement() %>
				SELECT
					<% for (int i = 0; i < cols.Count; i++) { %>
					<%= cols[i].Name %><% if (i < cols.Count - 1) { %>,<% } %>
					<% } %>
				FROM
					<%=owner%>.<%= SourceTable.Name %>;
			]]></body>
		</procedure>
		
		<% 
		if (SourceTable.PrimaryKey != null) {
		%>
		
		//GetPaged
		<procedure owner="<%=owner%>" name="<%= ProcedurePrefix + commandStem + SelectSuffix + "Paged" %>" >
			<comment><![CDATA[<%= GetProcSqlComment(string.Format("Gets records from the {0} table passing page index and page count parameters", name), tableComment) %>]]></comment>
			<parameters>
				<parameter name="WhereClause" type="varchar2" direction="Input" precision="0" scale="0" />
				<parameter name="OrderBy" type="varchar2" direction="Input" precision="0" scale="0" />				
				<parameter name="PageIndex" type="NUMBER" direction="Input" precision="10" scale="0" />
				<parameter name="PageSize" type="NUMBER" direction="Input" precision="10" scale="0" /> 
				<parameter name="cur_OUT" type="types.cursorType" direction="InputOutput" />
			</parameters>
			<body><![CDATA[
				IS
				
				dynamicSQL varchar2(8000);
				
				BEGIN
				
				dynamicSQL := 'SELECT <% for (int i = 0; i < cols.Count; i++) { %><%= cols[i].Name %><% if (i < cols.Count - 1) { %>,<% } %><% } %>';
				dynamicSQL := dynamicSQL || ' FROM (';
				dynamicSQL := dynamicSQL || ' 	SELECT <% for (int i = 0; i < cols.Count; i++) { %>x.<%= cols[i].Name %>,<% } %> rownum as r';
				dynamicSQL := dynamicSQL || ' 	FROM (';
				dynamicSQL := dynamicSQL || '     SELECT <% for (int i = 0; i < cols.Count; i++) { %> <%= cols[i].Name %><% if (i < cols.Count - 1) { %>,<% } %><% } %>';
				dynamicSQL := dynamicSQL || '     FROM <%=owner%>.<%= SourceTable.Name %> ';
				IF length(WhereClause) > 0 THEN
					dynamicSQL := dynamicSQL || ' WHERE ' || WhereClause;
				END IF;
				IF length(OrderBy) > 0 THEN
					dynamicSQL := dynamicSQL || ' ORDER BY ' || OrderBy;
				END IF;
				
				dynamicSQL := dynamicSQL || ') x ) WHERE r BETWEEN (:PageSize * :PageIndex) AND (:PageSize * :PageIndex + :PageSize)';
				
				-- Execution the query
				OPEN cur_OUT FOR dynamicSQL USING PageSize, PageIndex, PageSize, PageIndex, PageSize;
				
			]]></body>
		</procedure>
		
		<procedure owner="<%=owner%>" name="<%= ProcedurePrefix + commandStem + SelectSuffix + "PagedCount" %>" >
			<parameters>
				<parameter name="WhereClause" type="varchar2" direction="Input" precision="0" scale="0" />
				<parameter name="OrderBy" type="varchar2" direction="Input" precision="0" scale="0" />
				<parameter name="cur_OUT" type="types.cursorType" direction="InputOutput" />
			</parameters>
			<body><![CDATA[
				IS
				
				dynamicSQL varchar2(4000);
				
				BEGIN
				
		        dynamicSQL := 'SELECT COUNT(1) FROM <%=owner%>.<%= SourceTable.Name %>';
			
				IF length(WhereClause) > 0 THEN
					dynamicSQL := dynamicSQL || ' WHERE ' || WhereClause;
				END IF;
				IF length(OrderBy) > 0 THEN
					dynamicSQL := dynamicSQL || ' ORDER BY ' || OrderBy;
				END IF;
				
				-- Execution the query
				OPEN cur_OUT FOR dynamicSQL;
				
			]]></body>
		</procedure>
		
		<%
		} // end if (paged)
		} // end if (IncludeGetList) 
		
		// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
		// Insert
		if (IncludeInsert)
		{%>
		<procedure owner="<%=owner%>" name="<%= ProcedurePrefix + commandStem + InsertSuffix %>" >
			<comment><![CDATA[<%= GetProcSqlComment(string.Format("Inserts a record into the {0} table", name), tableComment) %>]]></comment>
			<parameters>
				<% 
				int countComputedColumns = 0;
				for (int i = 0; i < cols.Count; i++)
				{
					Response.Write("\t\t\t\t" + GetSqlParameterXmlNode(cols[i], IsComputed(cols[i]) || IsIdentityColumn(cols[i])) + Environment.NewLine);
					if (IsComputed(cols[i]))
						countComputedColumns++;
				}%>
			</parameters>
			<body><![CDATA[
				IS
				BEGIN
				
				<%= GetSetTransactionIsolationLevelStatement() %>
				INSERT INTO <%=owner%>.<%= SourceTable.Name %>
					(
					<% for (int i = 0; i < colsUpdatable.Count; i++) { %><%= colsUpdatable[i].Name %><% if (i < colsUpdatable.Count - 1) { %>
					,<% } } %>
					)		
				VALUES
					(
					<% for (int i = 0; i < colsUpdatable.Count; i++) { %><%= GetPropertyName(colsUpdatable[i]) %><% if (i < colsUpdatable.Count - 1) { %>
					,<% } } %>
					);
				
				<% for (int i = 0; i < cols.Count; i++) { if (IsIdentityColumn(cols[i]) && !(IsIdentityRowGuidColumn(cols[i]))) { %>
				-- Get the identity value
				--TODO FIX THIS
				<%= GetPropertyName(cols[i]) %> := <%=owner%>.<%= SourceTable.Name %>.seq.CURRVAL
				<% } } %>
									
				<% if (countComputedColumns > 0) {%>
				-- Select computed columns into output parameters
				SELECT
				<%
					string tempParams = string.Empty;
					for (int i = 0; i < cols.Count; i++)
					{
						if (IsComputed(cols[i]))
						{
							tempParams += string.Format(", {0} = {1}{2}", GetPropertyName(cols[i]), cols[i].Name, Environment.NewLine) ;
						}
					}
					Response.Write(tempParams.TrimStart(','));
				%>
				FROM
					<%=owner%>.<%= SourceTable.Name %>
				WHERE
				<%
					tempParams = string.Empty;
					for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++)
					{
						//if (IsIdentityColumn(SourceTable.PrimaryKey.MemberColumns[i]) || IsComputed(SourceTable.PrimaryKey.MemberColumns[i]))
						//{
							tempParams += string.Format("AND {1} = {0} {2}", GetPropertyName(SourceTable.PrimaryKey.MemberColumns[i]), SourceTable.PrimaryKey.MemberColumns[i].Name, Environment.NewLine) ;
						//}
					}
					if(tempParams.Length > 4)
					{
						Response.Write(tempParams.Substring(4));
					}
				%>
				<% } // endif countComputedColumns > 0 %>
							
			]]></body>
		</procedure>
		<%} // end if (IncludeInsert) 
		
		
		// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
		if (IncludeUpdate) 
		{%>
		<procedure owner="<%=owner%>" name="<%= ProcedurePrefix + commandStem + UpdateSuffix %>" >
			<comment><![CDATA[<%= GetProcSqlComment(string.Format("Updates a record in the {0} table", name), tableComment) %>]]></comment>
			<parameters>
				<% 
				int countComputedColumns = 0;
				for (int i = 0; i < cols.Count; i++)
				{
					Response.Write("\t\t\t\t" + GetSqlParameterXmlNode(cols[i], IsComputed(cols[i]) && cols[i] != RowVersion) + Environment.NewLine);
					
					if (cols[i].IsPrimaryKeyMember && !IsComputed(cols[i]) && !IsIdentityColumn(cols[i]) && cols[i] != RowVersion)
					{
						Response.Write("\t\t\t\t" + GetSqlParameterXmlNode(cols[i], "Original" + GetPropertyName(cols[i]), false) + Environment.NewLine);
					}
		
					if (IsComputed(cols[i]))
						countComputedColumns++;
				
				}
				if (RowVersion != null)
				{
					Response.Write("\t\t\t\t" + GetSqlParameterXmlNode(RowVersion, "Returned" + GetPropertyName(RowVersion), true) + Environment.NewLine);
				}
				%>
			</parameters>
			<body><![CDATA[
				IS
				BEGIN
				
				<%= GetSetTransactionIsolationLevelStatement() %>
				
				-- Modify the updatable columns
				UPDATE <%=owner%>.<%= SourceTable.Name %>
				SET <% for (int i = 0; i < colsUpdatable.Count; i++) { %><%= colsUpdatable[i].Name %> = <%= GetPropertyName(colsUpdatable[i]) %><% if (i < colsUpdatable.Count - 1) { %>
					,<% } } %>
				WHERE
				<%
					string tempParams = string.Empty;
					for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++)
					{
						string prefix = string.Empty;
						
						if (!IsComputed(SourceTable.PrimaryKey.MemberColumns[i]) && !IsIdentityColumn(SourceTable.PrimaryKey.MemberColumns[i]) && SourceTable.PrimaryKey.MemberColumns[i] != RowVersion)
							prefix = "Original";
						
						tempParams += string.Format("AND {1} = {0}{2}", prefix + GetPropertyName(SourceTable.PrimaryKey.MemberColumns[i]), SourceTable.PrimaryKey.MemberColumns[i].Name, Environment.NewLine) ;
					}
					if(tempParams.Length > 4)
					{
						Response.Write(tempParams.Substring(4));
					}
					if (RowVersion != null)
					{
						Response.Write("AND " + RowVersion.Name + " = " + GetPropertyName(RowVersion) );
					} 
				%>;
				
				<% if (countComputedColumns > 0) {%>
				
				-- Select computed columns into output parameters
				SELECT
				<%
					tempParams = string.Empty;
					for (int i = 0; i < cols.Count; i++)
					{
						if (IsComputed(cols[i]) && cols[i] != RowVersion)
						{
							tempParams += string.Format(", {0} = {1}{2}", GetPropertyName(cols[i]), cols[i].Name, Environment.NewLine) ;
						}
					}
					if (RowVersion != null)
					{
						tempParams += string.Format(", Returned{0} = {1}{2}", 
						GetPropertyName(RowVersion), RowVersion.Name, Environment.NewLine);
					} 
					
					Response.Write(tempParams.TrimStart(','));
					
				%>
				FROM
					<%=owner%>.<%= SourceTable.Name %>
				WHERE
				<%
					tempParams = string.Empty;
					for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++)
					{
						tempParams += string.Format("AND {1} = {0}{2}", GetPropertyName(SourceTable.PrimaryKey.MemberColumns[i]), SourceTable.PrimaryKey.MemberColumns[i].Name, Environment.NewLine) ;
					}
					if(tempParams.Length > 4)
					{
						Response.Write(tempParams.Substring(4));
					}
				%>;
				<% } // endif countComputedColumns > 0 %>
			]]></body>
		</procedure>
		<%} // end if (IncludeUpdate) 
		
		
		// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
		if (IncludeDelete && SourceTable.PrimaryKey != null) 
		{%>
		<procedure owner="<%=owner%>" name="<%= ProcedurePrefix + commandStem + DeleteSuffix %>" >
			<comment><![CDATA[<%= GetProcSqlComment(string.Format("Deletes a record in the {0} table", name), tableComment) %>]]></comment>
			<parameters>
			<% 
				string tempParams = string.Empty;
				for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++)
				{
					Response.Write("\t\t\t\t" + GetSqlParameterXmlNode(SourceTable.PrimaryKey.MemberColumns[i], false) + Environment.NewLine);
				}
				if (RowVersion != null)
				{
					Response.Write("\t\t\t\t" + GetSqlParameterXmlNode(RowVersion, false) + Environment.NewLine);
				}				
			%>
			</parameters>
			<body><![CDATA[
				IS
				BEGIN
				
				DELETE FROM <%=owner%>.<%= SourceTable.Name %> 
				WHERE
					<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>			
					<% if (i > 0) { %>AND <% } %><%= SourceTable.PrimaryKey.MemberColumns[i].Name %> = <%= GetPropertyName(SourceTable.PrimaryKey.MemberColumns[i]) %>
					<% } 
					if (RowVersion != null)
					{
						Response.Write("\tAND " + RowVersion.Name + " = " + GetPropertyName(RowVersion) );
					} %>;
					
			]]></body>
		</procedure>
		<%} // end if (IncludeDelete) 
		
		// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
		if (IncludeGetListByFK)
		{ 
			for (int j=0; j < fkeys.Count;j++)
			{	
				if(IsForeignKeyCoveredByIndex(fkeys[j]) && IncludeGetListByIX)
					continue;
					
				getbyKeys.Add(GetKeysName(fkeys[j].ForeignKeyMemberColumns));
%>
		<procedure owner="<%=owner%>" name="<%= GetProcNameForGetByIX(ProcedurePrefix + commandStem + SelectSuffix + "By", fkeys[j].ForeignKeyMemberColumns) %>" >
			<comment><![CDATA[<%= GetProcSqlComment(string.Format("Select records from the {0} table through a foreign key", SourceTable.Name), "") %>]]></comment>
			<parameters>
			<% 
				for (int i = 0; i < fkeys[j].ForeignKeyMemberColumns.Count; i++) 
  				{
  					Response.Write("\t\t\t\t" + GetSqlParameterXmlNode(fkeys[j].ForeignKeyMemberColumns[i], false) + Environment.NewLine);
  				}
  			%>
				<parameter name="cur_OUT" type="types.cursorType" direction="InputOutput" />
			</parameters>
			<body><![CDATA[
				IS
				BEGIN
				
				open cur_OUT for

				<%= GetSetTransactionIsolationLevelStatement() %>
				SELECT
					<% for (int i = 0; i < cols.Count; i++) { %>
					<%= cols[i].Name %><% if (i < cols.Count - 1) { %>,<% } %>
					<% } %>
				FROM
					<%=owner%>.<%= SourceTable.Name %>
				WHERE
					<% for (int i = 0; i < fkeys[j].ForeignKeyMemberColumns.Count; i++) { %>
					<% if (i > 0) { %>AND <% } %><%= fkeys[j].ForeignKeyMemberColumns[i].Name %> = <%= GetPropertyName(fkeys[j].ForeignKeyMemberColumns[i]) %>
					<% } %>;
				
				
			]]></body>
		</procedure>
<%
			} // end for (each foreign key)
		} // end if (IncludeGetListByFK) 
		
		
		// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
		if (IncludeGetListByIX)
		{
			for (int j=0; j < indexes.Count; j++) 
			{ 
				// Check if this key is not already generated
				if(getbyKeys.IndexOf(GetKeysName(indexes[j].MemberColumns)) >=0 )
				{
					continue;
				}
				else
				{
					// add this key to the index list
					getbyKeys.Add(GetKeysName(indexes[j].MemberColumns));
				}
%>
		<procedure owner="<%=owner%>" name="<%= GetProcNameForGetByIX(ProcedurePrefix + commandStem + SelectSuffix + "By", indexes[j].MemberColumns) %>" >
			<comment><![CDATA[<%= GetProcSqlComment(string.Format("Select records from the {0} table through an index", SourceTable.Name), "") %>]]></comment>
			<parameters>
			<%	for (int i = 0; i < indexes[j].MemberColumns.Count; i++) 
  				{
  					Response.Write("\t\t\t\t" + GetSqlParameterXmlNode(indexes[j].MemberColumns[i], false) + Environment.NewLine);
  				}%>
				<parameter name="cur_OUT" type="types.cursorType" direction="InputOutput" />
			</parameters>
			<body><![CDATA[
				IS
				BEGIN
				
				open cur_OUT for

				SELECT
					<% for (int i = 0; i < cols.Count; i++) { %>
					<%= cols[i].Name %><% if (i < cols.Count - 1) { %>,<% } %>
					<% } %>
				FROM
					<%=owner%>.<%= SourceTable.Name %>
				WHERE
					<% for (int i = 0; i < indexes[j].MemberColumns.Count; i++) { %>
					<% if (i > 0) { %>AND <% } %><%= indexes[j].MemberColumns[i].Name %> = <%= GetPropertyName(indexes[j].MemberColumns[i]) %>
					<% } %>;
				
					
			]]></body>
			
		</procedure>
<%			
			} // end for (each index)
		} // end if (IncludeGetListByFK) 
		
		// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
		if(IncludeManyToMany)
		{
			TableSchema primaryTable = SourceTable;
			foreach(TableKeySchema key in SourceTable.PrimaryKeys)
			{
				// Check that the key is related to a junction table
				if ( IsJunctionTable(key.ForeignKeyTable) )
				{
					TableSchema junctionTable = key.ForeignKeyTable;
					string junctionOwner = GetOwnerName(junctionTable, true);
					
					// Search for the other(s) key(s) of the junction table' primary key
					foreach(TableKeySchema junctionTableKey in junctionTable.ForeignKeys)
					{				
						if ( IsJunctionKey(junctionTableKey) && junctionTableKey.Name != key.Name )
						{
							TableSchema secondaryTable = junctionTableKey.PrimaryKeyTable;
																			
							string functionname = GetManyToManyName(junctionTableKey, junctionTable);
			%>
			<procedure owner="<%=owner%>" name="<%= ProcedurePrefix + commandStem + SelectSuffix + "By" + functionname %>" >
			<comment><![CDATA[<%= GetProcSqlComment("Gets records through a junction table", "") %>]]></comment>
			<parameters>
			<% 
				for (int i = 0; i < junctionTableKey.ForeignKeyMemberColumns.Count; i++) 
  				{
  					Response.Write("\t\t\t\t" + GetSqlParameterXmlNode(junctionTableKey.ForeignKeyMemberColumns[i], false) + Environment.NewLine);
  				}
  			%>
				<parameter name="cur_OUT" type="types.cursorType" direction="InputOutput" />
			</parameters>
			<body><![CDATA[
				IS
				BEGIN
					
				open cur_OUT for

SELECT <% for (int i = 0; i < primaryTable.Columns.Count; i++)
          { if (i > 0) { %>
       ,<% } %><%=GetOwnerName(primaryTable, true)%><%=primaryTable.Name%>.<%= primaryTable.Columns[i].Name %><%
          } // for %>
  FROM <%=GetOwnerName(primaryTable, true)%><%=primaryTable.Name%>
 WHERE EXISTS (SELECT 1
                 FROM <%= junctionOwner %><%=junctionTable.Name%> 
                WHERE <% 
				for (int i = 0; i < junctionTableKey.ForeignKeyMemberColumns.Count; i++) {
					%><%=junctionOwner%><%=junctionTable.Name%>.<%=junctionTableKey.ForeignKeyMemberColumns[i].Name%> = <%=GetPropertyName(junctionTableKey.ForeignKeyMemberColumns[i])%>
                  <%if(i < junctionTableKey.ForeignKeyMemberColumns.Count-1) {%>AND <%}
				} // for
				// find the ForeignKey that points to the current table
				foreach(TableKeySchema primaryTableKey in junctionTable.ForeignKeys)
				{				
					if ( IsJunctionKey(primaryTableKey) && primaryTableKey.Name == key.Name )
					{
						%>AND <%
						for (int i = 0; i < primaryTableKey.ForeignKeyMemberColumns.Count; i++) {
							%><%=junctionOwner%><%=primaryTableKey.ForeignKeyTable.Name%>.<%=primaryTableKey.ForeignKeyMemberColumns[i].Name%> = <%=GetOwnerName(primaryTableKey.PrimaryKeyTable, true)%><%=primaryTableKey.PrimaryKeyTable.Name %>.<%=primaryTableKey.PrimaryKeyMemberColumns[i].Name%>
                  <%if(i < primaryTableKey.ForeignKeyMemberColumns.Count-1) {%>AND <%}
						} // for
					} // if
				} // foreach
				
				%>)		
				]]></body>
		</procedure>
<%						
						}// //end if there is many to many relationship.
					} //end foreach		
				} // end if(IsJunctionTable(junctionTableKey.ForeignKeyTable))
			} //end foreach pkey
		} //end if(IncludeManyToMany)
		// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
		if(IncludeFind)
		{%>
		<procedure owner="<%=owner%>" name="<%= ProcedurePrefix + commandStem + FindSuffix %>" >
			<comment><![CDATA[<%= GetProcSqlComment(string.Format("Finds records in the {0} table passing nullable parameters", name), tableComment) %>]]></comment>
			<parameters>
				<parameter name="SearchUsingOR" type="NUMBER" direction="Input" />
				<% 
				for (int i = 0; i < cols.Count; i++)
				{
					Response.Write("\t\t\t\t" + GetSqlParameterXmlNode(cols[i], GetPropertyName(cols[i]), false, false) + Environment.NewLine);
				}%>
				<parameter name="cur_OUT" type="types.cursorType" direction="InputOutput" />
			</parameters>
			<body><![CDATA[
				IS
				BEGIN
				
				open cur_OUT for
				
				SELECT
				<%= BuildColList(SourceTable) %>
				FROM
				<%=owner%>.<%= SourceTable.Name %>
				WHERE 
					<% 
					string tmpWhere = "\t";
					for (int i = 0; i < cols.Count; i++)
					{
						if (IsColumnFindable(cols[i]))
						{ 
							tmpWhere  += string.Format("\tAND {0} = {2} OR {2} is null {1}", cols[i].Name, Environment.NewLine, GetPropertyName(cols[i])) ;
						}
					}
					if (tmpWhere.Length > 5)
						{
						Response.Write(tmpWhere.Remove(0,5) + "AND SearchUsingOR = 0");
						}
					%>					
									
				UNION
					SELECT
					<%= BuildColList(SourceTable) %>
					FROM
					<%=owner%>.<%= SourceTable.Name %>
					WHERE 
						<% 
						tmpWhere = "\t";
							
						for (int i = 0; i < cols.Count; i++)
						{
							if (IsColumnFindable(cols[i]))
							{ 
							tmpWhere  += string.Format("\tOR {0} = {2} AND {2} is not null {1}", cols[i].Name, Environment.NewLine, GetPropertyName(cols[i]));
							}
						}					
						if (tmpWhere.Length > 4)
						{
							Response.Write(tmpWhere.Remove(0,4)+ "AND SearchUsingOR = 1;");
						}
						else
						{
							Response.Write(";");
						}
						%>					
			]]></body>
		</procedure>

		<% if ( SourceTable.PrimaryKey != null ) { %>
		
		<procedure owner="<%=owner%>" name="<%= ProcedurePrefix + commandStem + FindSuffix + "_Dynamic" %>" >
			<comment><![CDATA[<%= GetProcSqlComment(string.Format("Gets records from the {0} table using a dynamically generated query.", name), tableComment) %>]]></comment>
			<parameters>
				<parameter name="cur_OUT" type="types.cursorType" direction="InputOutput" />
			</parameters>
			<body><![CDATA[
				IS
				BEGIN
				
				open cur_OUT for
				
				select
				<% for (int i = 0; i < cols.Count; i++) { %>
				       <%= cols[i].Name %><% if (i < cols.Count - 1) { %>,<% } %>
				<% } %>
				  from <%=owner%>.<%= SourceTable.Name %>;
			]]></body>
		</procedure>
		
		<% } // end if HasPrimaryKey %>
		<%} //end if(IncludeFind)

	} // end for each Table
	// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
	// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
	// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
	// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
	
	// Sql views management
	for (int vi = 0; vi < SourceViews.Count; vi++)
	{
		ViewSchema SourceView = SourceViews[vi];
		ViewColumnSchemaCollection cols = SourceView.Columns;
		
		string owner = GetOwnerName(SourceView);
		string name = GetSafeName(SourceView);
		string commandStem = GetCleanName(SourceView);
		string tableComment = SourceView.Description;
		
		if (IncludeGetList) 
		{%>
		<procedure owner="<%=owner%>" name="<%= ProcedurePrefix + commandStem + SelectSuffix + SelectAllSuffix %>" >
			<comment><![CDATA[<%= GetProcSqlComment(string.Format("Gets all records from the {0} view", name), tableComment) %>]]></comment>
			<parameters>
				<parameter name="cur_OUT" type="types.cursorType" direction="InputOutput" />
			</parameters>
			<body><![CDATA[
				IS
				BEGIN
				
				open cur_OUT for
				
				<%= GetSetTransactionIsolationLevelStatement() %>
				SELECT
					<% for (int i = 0; i < SourceView.Columns.Count; i++) { %>
					<%= SourceView.Columns[i].Name %><% if (i < SourceView.Columns.Count - 1) { %>,<% } %>
					<% } %>
				FROM
					<%=owner%>.<%= SourceView.Name %>;
					
						
			]]></body>
		</procedure>
		
		<procedure owner="<%=owner%>" name="<%= ProcedurePrefix + commandStem + SelectSuffix %>" >
			<comment><![CDATA[<%= GetProcSqlComment(string.Format("Gets records from the {0} view passing page index and page count parameters", name), tableComment) %>]]></comment>
			<parameters>
				<parameter name="WhereClause" type="varchar2" direction="Input" precision="0" scale="0"  />
				<parameter name="OrderBy" type="varchar2" direction="Input" precision="0" scale="0" />
				<parameter name="cur_OUT" type="types.cursorType" direction="InputOutput" />
			</parameters>
			<body><![CDATA[
				IS
				
				dynamicSQL nvarchar2(8000);
				
				BEGIN
			
				<%= GetSetTransactionIsolationLevelStatement() %>
				-- Build the sql query
				IF length(WhereClause) > 0 THEN
					dynamicSQL := dynamicSQL || ' WHERE ' || WhereClause;
				END IF;
				IF length(OrderBy) > 0 THEN
					dynamicSQL := dynamicSQL || ' ORDER BY ' || OrderBy;
				END IF;
				
				-- Execution the query
				OPEN cur_OUT FOR 'SELECT * FROM <%=owner%><%= SourceView.Name %>' using dynamicSQL;
			]]></body>
		</procedure>
		
		<%} //end if(IncludeGetList)
		
		if ( IncludeFind ) { %>
		
		<procedure owner="<%=owner%>" name="<%= ProcedurePrefix + commandStem + FindSuffix %>_Dynamic" skip="true">
			<comment><![CDATA[<%= GetProcSqlComment(string.Format("Gets records from the {0} table using a dynamically generated query.", name), tableComment) %>]]></comment>
			<parameters>
				<parameter name="cur_OUT" type="types.cursorType" direction="InputOutput" />
			</parameters>
			<body><![CDATA[
				IS
				BEGIN
				
				open cur_OUT for
				
				<%= GetSetTransactionIsolationLevelStatement() %>
				SELECT * FROM <%=owner%>.<%= SourceView.Name %> {0}
				ORDER BY {1};
				
			]]></body>
		</procedure>
		
		<% } // end if ( IncludeFind ) {
		
	} // end for each View
%>
</procedures>
</root>
<script runat="template">

public enum TransactionIsolationLevelEnum
{
	None,
	ReadCommitted,
	ReadOnly,
	Serializable
}

// Used to determine the style of drop statement to be used (if any)
public enum DropStyleEnum
{
	Entity,
	All
}
	
public string GetSetTransactionIsolationLevelStatement()
{
	switch (IsolationLevel)
	{
		case TransactionIsolationLevelEnum.None:
			return "";
		case TransactionIsolationLevelEnum.ReadOnly:
			return "SET TRANSACTION READ ONLY";
		case TransactionIsolationLevelEnum.ReadCommitted:
			return "SET TRANSACTION ISOLATION LEVEL READ COMMITTED";
		case TransactionIsolationLevelEnum.Serializable:
			return "SET TRANSACTION ISOLATION LEVEL SERIALIZABLE";
		default:
			return "SET TRANSACTION ISOLATION LEVEL READ COMMITTED";
	}
}

//Build the SQL comment header for the procedure
public string GetProcSqlComment(string purpose, string tableComment)
{
	StringBuilder sqlComment = new StringBuilder();
	sqlComment.AppendFormat("/*{0}", Environment.NewLine);
	sqlComment.AppendFormat("{0}{1}", new String('-', 100), Environment.NewLine); 
	if (IncludeGeneratedDate)
	{
		sqlComment.AppendFormat("-- Date Created: {0}{1}", DateTime.Now.ToLongDateString(), Environment.NewLine);
	}
	sqlComment.AppendFormat("\r\n-- Created By: " + CompanyName + " (" + CompanyURL + ")" + Environment.NewLine);
	sqlComment.AppendFormat("-- Purpose: {0}{1}", purpose, Environment.NewLine);
	//if the tableComment is not empty, prefix it with a label
	if (!tableComment.Equals(string.Empty))
		sqlComment.AppendFormat("-- Table Comment: {0}{1}", tableComment,  Environment.NewLine);
	sqlComment.Append(new String('-', 100) + Environment.NewLine);
	sqlComment.AppendFormat("*/{0}", Environment.NewLine);
	return sqlComment.ToString();
}

public string BuildColList(TableSchema table)
{
	string prefix = "";
	string retVal = "";
	for (int i = 0; i < table.Columns.Count; i++) { 
		if (i > 0) prefix = "\r\n\t";
		retVal += prefix + GetComma(i) +  table.Columns[i].Name;
	}
	return retVal;
}
public string GetComma()
{
	return ", ";
}
public string GetComma(int i)
{
	string retVal = "  ";
 	if (i > 0) {
		retVal = ", ";
	}
	return retVal;
}

public string GetPagedHelper(ColumnSchemaCollection columns)
{
	string result = string.Empty;
	for(int i=0; i< columns.Count; i++)
	{
		result += GetPagedHelper(columns[i]);
		if (i < columns.Count-1)
		{
			result += ", "; 
		}
	}
	return result;
}

/// <summary>
/// Get a SqlParameter statement for a column
/// </summary>
/// <param name="column">Column for which to get the Sql parameter statement</param>
/// <returns>Sql Parameter statement</returns>
public string GetPagedHelper(ColumnSchema column)
{
	string param = column.Name + " " + column.NativeType;
	
	// user defined data types do not need size components
	if ( ! IsUserDefinedType(column) )
	{
	switch (column.DataType)
	{
		case DbType.Decimal:
		{
			param += "(" + column.Precision + ", " + column.Scale + ")";
			break;
		}
		case DbType.AnsiString:
		case DbType.AnsiStringFixedLength:
		case DbType.String:
		case DbType.StringFixedLength:
		{
			if (column.NativeType != "text" && column.NativeType != "ntext")
			{
				if (column.Size > 0)
				{
					param += "(" + column.Size + ") COLLATE database_default ";
				}
			}
			break;
		}
	}	
	}
	return param;
}
</script>
