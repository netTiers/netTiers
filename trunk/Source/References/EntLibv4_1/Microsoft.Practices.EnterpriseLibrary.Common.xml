<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Practices.EnterpriseLibrary.Common</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AppDomainNameFormatter">
            <summary>
            Provides the friendly name of the app domain as the prefix in formatting a 
            particular instance of a performance counter.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter">
            <summary>
            Provides a pluggable way to format the name given to a particular instance of a performance counter.
            Each instance of a performance counter in Enterprise Library is given a name of the format
            "Name prefix - counter name"
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter.CreateName(System.String)">
            <summary>
            Creates the formatted instance name for a performance counter, providing the prefix for the
            instance.
            </summary>
            <param name="nameSuffix">Performance counter name, as defined during installation of the counter</param>
            <returns>Formatted instance name in form of "prefix - nameSuffix"</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AppDomainNameFormatter.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AppDomainNameFormatter"/>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AppDomainNameFormatter.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AppDomainNameFormatter"/> with an Application Instance Name
            </summary>
            <param name="applicationInstanceName"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AppDomainNameFormatter.CreateName(System.String)">
            <summary>
            Creates the formatted instance name for a performance counter, providing the Application
            Domain friendly name for the prefix for the instance.
            </summary>
            <param name="nameSuffix">Performance counter name, as defined during installation of the counter</param>
            <returns>Formatted instance name in form of "appDomainFriendlyName - nameSuffix"</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter">
            <summary>
            Provides a virtual PerformanceCounter interface that allows an application to maintain both individually 
            named counter instances and a single counter total instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.#ctor(System.String,System.String)">
            <summary>
            Initializes a single performance counter instance named "Total"
            </summary>
            <param name="counterCategoryName">Performance counter category name, as defined during installation</param>
            <param name="counterName">Performance counter name, as defined during installation</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.#ctor(System.String,System.String,System.String[])">
            <summary>
            Initializes multiple instances of performance counters to be managed by this object. 
            </summary>
            <param name="counterCategoryName">Performance counter category name, as defined during installation</param>
            <param name="counterName">Performance counter name, as defined during installation</param>
            <param name="instanceNames">Param array of instance names to be managed</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.#ctor(System.Diagnostics.PerformanceCounter[])">
            <summary>
            Initializes this object with performance counters created externally. It is the responsibility of the external
            counter factory to create an instance for the "Total" counter.
            </summary>
            <param name="counters">Param array of already initialized <see cref="T:System.Diagnostics.PerformanceCounter"></see>s to be managed 
            by this instance.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.Clear">
            <summary>
            Clears the raw count associated with all managed performance counters
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.Increment">
            <summary>
            Increments each performance counter managed by this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.IncrementBy(System.Int64)">
            <summary>
            Increments by the given <paramref name="value"></paramref> each performance counter managed by this instance.
            </summary>
            <param name="value">Amount by which to increment each counter</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.GetValueFor(System.String)">
            <summary>
            Gets the current value of the given performance counter instance.
            </summary>
            <param name="instanceName">Instance name of counter for which to get value.</param>
            <returns>Value of the given performance counter.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.SetValueFor(System.String,System.Int64)">
            <summary>
            Sets the value of the given performance counter instance.
            </summary>
            <param name="instanceName">Instance name of counter for which to set the value.</param>
            <param name="value">Value to which the given instance should be set.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.InstantiateCounter(System.String)">
            <summary>
            Instantiates a performance counter, giving it the specified <paramref name="instanceName"></paramref>.
            </summary>
            <param name="instanceName">Instance name to be given to the instantiated <see cref="T:System.Diagnostics.PerformanceCounter"></see></param>.
            <returns>Initialized <see cref="T:System.Diagnostics.PerformanceCounter"></see></returns>.
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.Counters">
            <summary>
            Gets the list of performance counter instances managed by this object.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.Value">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventBinder">
            <summary>
            Binds an event source to an event handler.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventBinder.#ctor(System.Object,System.Object)">
            <summary>
            Initializes this object with the source and listener objects to be bound together.
            </summary>
            <param name="source">Object owning the event that will be bound to</param>
            <param name="listener">Object owning the method that will be added as a handler for specified event.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventBinder.Bind(System.Reflection.EventInfo,System.Reflection.MethodInfo)">
            <summary>
            Adds specified <paramref name="listenerMethod"></paramref> as an event handler for 
            the <paramref name="sourceEvent"></paramref>.
            </summary>
            <param name="sourceEvent">Event on source object to which <paramref name="listenerMethod"></paramref> will be added.</param>
            <param name="listenerMethod">Method to be added as event handler for <paramref name="listenerMethod"></paramref>.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationBaseAttribute">
            <summary>
            Base class for attributes used to identify instrumentation producers or consumers.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationBaseAttribute.#ctor(System.String)">
            <summary>
            Initializes this instance with the instrumentation subject name.
            </summary>
            <param name="subjectName">Subject name being produced or consumed</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationBaseAttribute.SubjectName">
            <summary>
            Gets the subject name
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationConsumerAttribute">
            <summary>
            Defines methods that are consuming instrumentation events.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationConsumerAttribute.#ctor(System.String)">
            <summary>
            Initializes this instance with the instrumentation subject name being consumed.
            </summary>
            <param name="subjectName">Subject name of the event being consumed.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListenerAttribute">
            <summary>
            Defines a class that will listen for instrumentation events broadcast by other classes
            and report them to system services. This attribute is placed on the class that is to be
            listened to to define the class that will listen to it.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListenerAttribute.#ctor(System.Type)">
            <overloads>
            Initializes attribute with given <paramref name="listenerType"></paramref>. 
            </overloads>
            <summary>
            Initializes attribute with given <paramref name="listenerType"></paramref>. 
            </summary>
            <param name="listenerType">Instrumentation listener type to instantiate.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListenerAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes attribute with given <paramref name="listenerType"></paramref>. Use when
            you need to specify an explicit binder class.
            </summary>
            <param name="listenerType">Instrumentation listener type to instantiate.</param>
            <param name="listenerBinderType">Instrumentation binder listener type to instantiate.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListenerAttribute.ListenerType">
            <summary>
            Gets type of class to instantiate to listen for events.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListenerAttribute.ListenerBinderType">
            <summary>
            Gets type of class to use to bind an instance of the attributed class to 
            an instance of the listener class
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationProviderAttribute">
            <summary>
            Defines events that are producing instrumentation events.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationProviderAttribute.#ctor(System.String)">
            <summary>
            Initializes this object with the instrumentation subject name being produced.
            </summary>
            <param name="subjectName">Subect name of event being produced.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.HasInstallableResourcesAttribute">
            <summary>
            Defines those classes and structs that have some sort of resources that need to be installed.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute">
            <summary>
            Defines a <see cref="T:System.Diagnostics.PerformanceCounter"></see>. Used by the reflection-based installers to 
            prepare a performance counter for installation.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.#ctor(System.String,System.String,System.Diagnostics.PerformanceCounterType)">
            <summary>
            Initializes this object with all data needed to install a <see cref="T:System.Diagnostics.PerformanceCounter"></see>.
            </summary>
            <param name="counterName">Performance counter name.</param>
            <param name="counterHelp">Name of Help resource string. This is not the help text itself, 
            but is the resource name used to look up the internationalized help text at install-time.</param>
            <param name="counterType">Performance Counter type.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.HasBaseCounter">
            <summary>
            Used to determine if the counter being installed has a base counter associated with it.
            </summary>
            <returns>True if counter being installed has a base counter associated with it.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.CounterType">
            <summary>
            Gets the <see cref="T:System.Diagnostics.PerformanceCounter"></see> type.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.CounterHelp">
            <summary>
            Get the name of Help resource string. This is not the help text itself, 
            but is the resource name used to look up the internationalized help text at install-time.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.CounterName">
            <summary>
            Gets the <see cref="T:System.Diagnostics.PerformanceCounter"></see> name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.BaseCounterType">
            <summary>
            Gets and sets the base <see cref="T:System.Diagnostics.PerformanceCounter"></see> type. This is an optional 
            property used when the counter being defined requires a base counter to operate, such as for 
            averages, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.BaseCounterHelp">
            <summary>
            Gets and sets the base <see cref="T:System.Diagnostics.PerformanceCounter"></see> help resource name. 
            This is not the help text itself, 
            but is the resource name used to look up the internationalized help text at install-time.
            This is an optional 
            property used when the counter being defined requires a base counter to operate, such as for 
            averages, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.BaseCounterName">
            <summary>
            Gets and sets the base <see cref="T:System.Diagnostics.PerformanceCounter"></see> name. This is an optional 
            property used when the counter being defined requires a base counter to operate, such as for 
            averages, etc.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ReflectionInstrumentationBinder">
            <summary>
            Binds together source events and listener handler methods through reflection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ReflectionInstrumentationBinder.Bind(System.Object,System.Object)">
            <summary>
            Binds together source events and listener handler methods through reflection.
            </summary>
            <param name="eventSource">Object containing events attributed with <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationProviderAttribute"></see>.</param>
            <param name="eventListener">Object containing handler methods attribute with <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationConsumerAttribute"></see>.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.NoPrefixNameFormatter">
            <summary>
            Provides a pluggable way to format the name given to a particular instance of a performance counter.
            This class does no formatting, returning the provided name suffix as the counter name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.NoPrefixNameFormatter.CreateName(System.String)">
            <summary>
            Returns the given <paramref name="nameSuffix"></paramref> as the created name.
            </summary>
            <param name="nameSuffix">Performance counter name, as defined during installation of the counter</param>
            <returns>Formatted instance name in form of "nameSuffix"</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.EventLogEntryExceptionTemplate">
            <summary>
              Looks up a localized string similar to The exception that occured was: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.EventLogEntryHeaderTemplate">
            <summary>
              Looks up a localized string similar to An error occurred in application {0} in the {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionArgumentShouldDeriveFromIDictionary">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; does not derive from IDictionary..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionArgumentShouldDeriveFromIList">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; does not derive from IList..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionAssemblerAttributeNotSet">
            <summary>
              Looks up a localized string similar to The [Assembler] attribute is not set in the configuration object type {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionAssemblerTypeNotCompatible">
            <summary>
              Looks up a localized string similar to The assembler configured for type {0} has type {2} which is not compatible with type {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionBaseConfigurationSourceElementIsInvalid">
            <summary>
              Looks up a localized string similar to The base ConfigurationSourceElement configuration type can not be used as a concrete configuration element..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionCannotAddParametersAfterDispose">
            <summary>
              Looks up a localized string similar to Cannot add new paramters after Finish() or Dispose()..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionCanNotConvertType">
            <summary>
              Looks up a localized string similar to The AssemblyQualifiedTypeNameConverter can only convert values of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionCannotFinish">
            <summary>
              Looks up a localized string similar to Builder has already added policies..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionConfigurationFileNotFound">
            <summary>
              Looks up a localized string similar to The section {0} could not be saved because the file does not exist..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionConfigurationLoadFileNotFound">
            <summary>
              Looks up a localized string similar to The configuration file {0} could not be found..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionConfigurationObjectIsNotCustomProviderData">
            <summary>
              Looks up a localized string similar to The configuration object for type &apos;{0}&apos; with name &apos;{1}&apos; has type &apos;{2}&apos; which is does not implement ICustomProviderData..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionConfigurationObjectWithTypeDoesNotHaveTypeSet">
            <summary>
              Looks up a localized string similar to The concrete type for polymorphic object named &apos;{1}&apos; in hierarchy {2} is not defined in configuration object {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionConfigurationSourceSectionNotFound">
            <summary>
              Looks up a localized string similar to The configuration source section is not found in the application configuration file..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionContainerPolicyCreatorAttributeNotPresent">
            <summary>
              Looks up a localized string similar to The required &quot;ContainerPolicyCreatorAttribute&quot; is not present in the supplied type &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionCustomFactoryAttributeNotFound">
            <summary>
              Looks up a localized string similar to The [CustomFactory] attribute was not found on type {0} while processing request for id &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionCustomProviderTypeDoesNotHaveTheRequiredConstructor">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; specified as a custom provider does not have the required public constructor with a single NameValueCollection parameter..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionEventRaisingFailed">
            <summary>
              Looks up a localized string similar to There was an error raising an event in .
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionFactoryMethodHasInvalidReturnType">
            <summary>
              Looks up a localized string similar to The method with signature {0} is not a valid factory method to build type {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionInvalidType">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; cannot be resolved. Please verify the spelling is correct or that the full type name is provided..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionMustBeNameTypeConfigurationElement">
            <summary>
              Looks up a localized string similar to The supplied configuration object has type &apos;{0}&apos;, which is not a descendant of &apos;NameTypeConfigurationElement&apos; as required..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionMustHaveNoArgsConstructor">
            <summary>
              Looks up a localized string similar to The required zero argument constructor is not available for the supplied type &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionMustImplementIContainerPolicyCreator">
            <summary>
              Looks up a localized string similar to The required interface &quot;IContainerPolicyCreator&quot; is not implemented by the supplied type &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionNamedConfigurationNotFound">
            <summary>
              Looks up a localized string similar to The configuration could not be found for name &apos;{0}&apos; in factory {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionNoConfigurationElementAttribute">
            <summary>
              Looks up a localized string similar to The type {0} does not contain the ConfigurationElementTypeAttribute..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionNoConfigurationObjectPolicySet">
            <summary>
              Looks up a localized string similar to No policy specifying the configuration source for the container has been set. The EnterpriseLibraryCoreExtension is probably missing..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionNoMatchingConstructorFound">
            <summary>
              Looks up a localized string similar to No public constructor with {1} arguments was found for type &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionNoMethodAnnotatedForInjectionFound">
            <summary>
              Looks up a localized string similar to The type {0} does not have a public method annotated as an injection target as required by the use of injection..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionNoSuitableFactoryMethodFound">
            <summary>
              Looks up a localized string similar to The type {0} does not have a static method with a TargetConstructorAttribuite suitable to create an object of type {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionNoTypeAttribute">
            <summary>
              Looks up a localized string similar to The type attribute does not exist on the element {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionParameterNotAnnotatedForInjection">
            <summary>
              Looks up a localized string similar to The parameter &apos;{0}&apos; for injection target &apos;{1}&apos; in type &apos;{2}&apos; is missing the injection interpretation attribute..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionPerformanceCounterRedefined">
            <summary>
              Looks up a localized string similar to The performance counter &apos;{0}&apos; in category &apos;{1}&apos; is redefined in type {2} with a different configuration..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionPolicyBuilderFinished">
            <summary>
              Looks up a localized string similar to Attempt to continue working with a PolicyBuilder after the policies have been added to a policy list for type &apos;{1}&apos; with key &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionPolicyBuilderStillWaitingForPropertyPolicy">
            <summary>
              Looks up a localized string similar to The specified policies cannot be added: a property policy mapping is still taking place..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionPropertyAccessExpressionNotPropertyAccess">
            <summary>
              Looks up a localized string similar to The supplied expression is not a valid property access expression: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionPropertyNotFound">
            <summary>
              Looks up a localized string similar to e {2}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionRetrievalAttributeNotFound">
            <summary>
              Looks up a localized string similar to The type {0} does not contain the ConfigurationDataRetrievalAttribute required to resolve named references..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionSourcePropertyDoesNotExist">
            <summary>
              Looks up a localized string similar to Could not retrieve parameter value. The property {0} does not exist for type {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionStringNullOrEmpty">
            <summary>
              Looks up a localized string similar to The value can not be null or string or empty..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionSuppliedCreationExpressionIsNotNewExpression">
            <summary>
              Looks up a localized string similar to A creation expression must be a constructor call, but the supplied expression was &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionSystemSourceNotDefined">
            <summary>
              Looks up a localized string similar to The system configuration source is not defined in the configuration file..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionTheSpecifiedDefaultProviderDoesNotExistInConfiguration">
            <summary>
              Looks up a localized string similar to The configuration object for default provider named &apos;{0}&apos; for type &apos;{1}&apos; was not found in the supplied list..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionTypeCouldNotBeCreated">
            <summary>
              Looks up a localized string similar to The type {0} from configuration could not be created..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionTypeNotCustomFactory">
            <summary>
              Looks up a localized string similar to Type {0} is not an implementation of ICustomFactory for CustomFactoryAttribute..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionTypeNotNameMapper">
            <summary>
              Looks up a localized string similar to Type {0} is not an implementation of IConfigurationNameMapper for ConfigurationNameMapperAttribute..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionTypeNotRetriever">
            <summary>
              Looks up a localized string similar to Type {0} is not an implementation of IConfigurationDataRetriever for ConfigurationDataRetrievalAttribute..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionUnableToMatchConstructorToConfigurationObject">
            <summary>
              Looks up a localized string similar to Default policy creation failed: The properties in the supplied configuration object of type {0} cannot be matched to any constructor on type {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionUnexpectedType">
            <summary>
              Looks up a localized string similar to The expected type &apos;{0}&apos; was not provided..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionUnknownResolveMethod">
            <summary>
              Looks up a localized string similar to An call to an unknown method named &apos;{0}&apos; in the Resolve class was found in the supplied argument expression: &apos;{1}&apos;. Cannot create policies for this expression..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.FileConfigurationSourceName">
            <summary>
              Looks up a localized string similar to File Configuration Source.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.SystemConfigurationSourceName">
            <summary>
              Looks up a localized string similar to System Configuration Source.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.AssemblyQualifiedTypeNameConverter">
            <summary>
            Represents a configuration converter that converts a string to <see cref="T:System.Type"/> based on a fully qualified name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.AssemblyQualifiedTypeNameConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Returns the assembly qualified name for the passed in Type.
            </summary>
            <param name="context">The container representing this System.ComponentModel.TypeDescriptor.</param>
            <param name="culture">Culture info for assembly</param>
            <param name="value">Value to convert.</param>
            <param name="destinationType">Type to convert to.</param>
            <returns>Assembly Qualified Name as a string</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.AssemblyQualifiedTypeNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Returns a type based on the assembly qualified name passed in as data.
            </summary>
            <param name="context">The container representing this System.ComponentModel.TypeDescriptor.</param>
            <param name="culture">Culture info for assembly.</param>
            <param name="value">Data to convert.</param>
            <returns>Type of the data</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation">
            <summary>
            This type supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Represents the implementation details for file-based configuration sources.
            </summary>
            <remarks>
            This implementation deals with setting up the watcher over the configuration files to detect changes and update
            the configuration representation. It also manages the change notification features provided by the file based 
            configuration sources.
            </remarks>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.NullConfigSource">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.		
            ConfigSource value for sections that existed in configuration but were later removed.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.#ctor(System.String,System.Boolean)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceImplementation"/> class.
            </summary>
            <param name="configurationFilepath">The path for the main configuration file.</param>
            <param name="refresh"><b>true</b>if runtime changes should be refreshed, <b>false</b> otherwise.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.#ctor(System.String)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceImplementation"/> class.
            </summary>
            <param name="configurationFilepath">The path for the main configuration file.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.AddSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Adds a handler to be called when changes to section <code>sectionName</code> are detected.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.ConfigSourceChanged(System.String)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="configSource">The name of the updated configuration source.</param>
            <devdoc>
            Only needs to deal with concurrency to get the current sections and to update the watchers.
            
            Rationale:
            - Sections' are only added or updated.
            - For this notification, all sections in the config file must be updated, and sections in external 
            files must be refreshed only if the config source changed.
            - why not check after the original set of sections is retrieved?
            -- Sections might have been added to the listener set after the original set is retrieved, but...
            -- If they were added after the original set was retrieved, then they are up to date.
            --- For this to happen, they couldn't have been read before the o.s., otherwise they would be a listener for them.
            --- So, the retrieved information must be fresh (checked this with a test). 
            -- What about other changes?
            --- Erased sections: only tested in the config file watching thread, because the meta configuration 
            is kept in the configuration file.
            ---- Even if the external file an external is deleted because of the deletion, and this change is processed
            before the config file change, the refresh for the external section will refresh all the sections for the file and 
            notify a change, without need for checking the change. The change would later be picked up by the config file watcher 
            which will notify again. This shouldn't be a problem.
            --- External sections with changed sources. If they existed before, they must have been in the config file and there 
            was an entry in the bookeeping data structures.
            - Concurrent updates for sections values should be handled by the system.config fx
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.Dispose">
            <summary>
            Releases the resources used by the change watchers.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.ExternalConfigSourceChanged(System.String)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="configSource">The name of the updated configuration source.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.GetSection(System.String)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration file, and starts watching for 
            its changes if not watching already.
            </summary>
            <param name="sectionName">The section name.</param>
            <returns>The section, or <see langword="null"/> if it doesn't exist.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.RefreshAndValidateSections(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ICollection{System.String}@,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Refreshes the configuration sections from the main configuration file and determines which sections have suffered notifications
            and should be notified to registered handlers.
            </summary>
            <param name="localSectionsToRefresh">A dictionary with the configuration sections residing in the main configuration file that must be refreshed.</param>
            <param name="externalSectionsToRefresh">A dictionary with the configuration sections residing in external files that must be refreshed.</param>
            <param name="sectionsToNotify">A new collection with the names of the sections that suffered changes and should be notified.</param>
            <param name="sectionsWithChangedConfigSource">A new dictionary with the names and file names of the sections that have changed their location.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.RefreshExternalSections(System.String[])">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Refreshes the configuration sections from an external configuration file.
            </summary>
            <param name="sectionsToRefresh">A collection with the names of the sections that suffered changes and should be refreshed.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.RemoveSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Remove a handler to be called when changes to section <code>sectionName</code> are detected.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.SetConfigurationWatchers(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Sets up a watcher for <paramref name="configurationSection"/> under the name <paramref name="sectionName"/>.
            </summary>
            <remarks>
            A watcher will be created if the section is not already being watched. The watcher will be watching the file specified
            by <see cref="P:System.Configuration.ConfigurationSection.SectionInformation"/>.
            </remarks>
            <param name="sectionName">The name of the configuration section to watch.</param>
            <param name="configurationSection">The configuration section to watch.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.ConfigSourceWatcherMappings">
            <summary>
            Gets the configuration source watcher mappings.
            </summary>
            <value>
            The configuration source watcher mappings.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.SectionChangedHandlers">
            <summary>
            Gets the section changed handlers.
            </summary>
            <value>
            The section changed handlers.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.WatchedConfigSources">
            <summary>
            Gets the watched configuration sources.
            </summary>
            <value>
            A collection of watch configuration sources.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.WatchedSections">
            <summary>
            Gets a collection of the watched configuration section names.
            </summary>
            <value>
            A collection of the watched configuration section names.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ByteArrayTypeConverter">
            <summary>
            Represents a configuration converter that converts a byte array to and from a string representation by using base64 encoding.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ByteArrayTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> object.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. </param>
            <returns><see langword="true"/> if this converter can perform the conversion; otherwise, <see langword="falase"/>. </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ByteArrayTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> object.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> object.</param>
            <param name="value">An <see cref="T:System.Object"/> that represents the converted value. </param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value. </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ByteArrayTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> object.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to..</param>
            <returns><b>true</b> if the converter can convert to the specified type, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ByteArrayTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the arguments. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> object.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> object.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the value parameter to.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileSourceWatcher">
            <summary>
            Watcher for configuration sections in configuration files.
            </summary>
            <remarks>
            This implementation uses a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> to watch for changes 
            in the configuration files.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher">
            <summary>
            Reacts to changes on the medium on which a set of configuration sections are serialized.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher.configWatcher">
            <summary>
            The watcher on the underlying medium.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher.#ctor(System.String,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher"/> class.
            </summary>
            <param name="configSource">The identification of the medium.</param>
            <param name="refresh"><b>true</b> if changes should be notified, <b>false</b> otherwise.</param>
            <param name="changed">The callback for changes notification.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher.StartWatching">
            <summary>
            Starts watching for changes on the serialization medium.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher.StopWatching">
            <summary>
            Stops watching for changes on the serialization medium.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher.ConfigSource">
            <summary>
            Gets or sets the identification of the medium where the watched set of configuration sections is stored.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher.WatchedSections">
            <summary>
            Gets or sets the collection of watched sections.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher.Watcher">
            <summary>
            Gets the watcher over the serialization medium.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileSourceWatcher.#ctor(System.String,System.String,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileSourceWatcher"/> class.
            </summary>
            <param name="configurationFilepath">The path for the configuration file to watch.</param>
            <param name="configSource">The identification of the configuration source.</param>
            <param name="refresh"><b>true</b> if changes should be notified, <b>false</b> otherwise.</param>
            <param name="changed">The callback for changes notification.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileSourceWatcher.GetFullFileName(System.String,System.String)">
            <summary>
            Gets the full file name associated to the configuration source.
            </summary>
            <param name="configurationFilepath">The path for the main configuration file.</param>
            <param name="configSource">The configuration source to watch.</param>
            <returns>The path to the configuration file to watch. It will be the same as <paramref name="configurationFilePath"/>
            if <paramref name="configSource"/> is empty, or the full path for <paramref name="configSource"/> considered as a 
            file name relative to the main configuration file.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement">
            <summary>
            Represents the configuration settings that describe an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement">
            <summary>
            Represents a <see cref="T:System.Configuration.ConfigurationElement"/> that has a name and type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement">
            <summary>
            Represents a named <see cref="T:System.Configuration.ConfigurationElement"/> wher the name is the key to a collection.
            </summary>
            <remarks>
            This class is used in conjunction with a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithName">
            <summary>
            Represents the abstraction of an object with a name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithName.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.nameProperty">
            <summary>
            Name of the property that holds the name of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.#ctor">
            <summary>
            Initialize a new instance of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.#ctor(System.String)">
            <summary>
            Intialize a new instance of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> class with a name.
            </summary>
            <param name="name">The name of the element.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.DeserializeElement(System.Xml.XmlReader)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Updates the configuration properties of the receiver with the information in the current element in the <paramref name="reader"/>.
            </summary>
            <param name="reader">The reader over the configuration file.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.Name">
            <summary>
            Gets or sets the name of the element.
            </summary>
            <value>
            The name of the element.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithNameAndType">
            <summary>
            Represents the abstraction of an object with a name and a type.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithNameAndType.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.typeProperty">
            <summary>
            Name of the property that holds the type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.#ctor">
            <summary>
            Intialzie an instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.#ctor(System.String,System.Type)">
            <summary>
            Initialize an instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> class
            </summary>
            <param name="name">The name of the element.</param>
            <param name="type">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.Type"/> that this element is the configuration for.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.Type">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.Type"/> the element is the configuration for.
            </summary>
            <value>
            The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.Type"/> the element is the configuration for.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.TypeName">
            <summary>
            Gets or sets the fully qualified name of the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.Type"/> the element is the configuration for.
            </summary>
            <value>
            the fully qualified name of the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.Type"/> the element is the configuration for.
            </value>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement"/> class with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement"/> class with a name and an type.
            </summary>
            <param name="name">The instance name.</param>
            <param name="type">The type for the represented <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement.CreateSource">
            <summary>
            Returns a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> configured with the receiver's settings.
            </summary>
            <returns>A new configuration source.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceFactory">
            <summary>
            Contains factory methods to create configuration sources.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceFactory.Create(System.String)">
            <summary>
            Creates a new configuration sources based on the configuration information from the application's default
            configuration file.
            </summary>
            <param name="name">The name for the desired configuration source.</param>
            <returns>The new configuration source instance described in the configuration file.</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">when no configuration information is found for name <paramref name="name"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="name"/> is null or empty.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceFactory.Create">
            <summary>
            Creates a new configuration sources based on the default configuration information from the 
            application's default configuration file.
            </summary>
            <returns>The new configuration source instance described as the default in the configuration file,
            or a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/> if the is no configuration sources configuration.</returns>
            <exception cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection">when there is a configuration section but it does not define
            a default configurtion source, or when the configuration for the defined default configuration source is not found.</exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection">
            <summary>
            Configuration section for the configuration sources.
            </summary>
            <remarks>
            This configuration must reside in the application's default configuration file.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SerializableConfigurationSection">
            <summary>
            Represents a configuration section that can be serialized and deserialized to XML.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SerializableConfigurationSection.GetSchema">
            <summary>
            Returns the XML schema for the configuration section.
            </summary>
            <returns>A string with the XML schema, or <see langword="null"/> (<b>Nothing</b> 
            in Visual Basic) if there is no schema.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SerializableConfigurationSection.ReadXml(System.Xml.XmlReader)">
            <summary>
            Updates the configuration section with the values from an <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> that reads the configuration source located at the element that describes the configuration section.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SerializableConfigurationSection.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the configuration section values as an XML element to an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> that writes to the configuration source.</param>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection.SectionName">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection.GetConfigurationSourceSection">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection"/> from the application's default configuration file.
            </summary>
            <returns>The section from the configuration file, or <see langword="null"/> (<b>Nothing</b> in Visual Basic) if the section is not present in the configuration file.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection.SelectedSource">
            <summary>
            Gets or sets the name for the default configuration source.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection.Sources">
            <summary>
            Gets the collection of defined configuration sources.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler">
            <summary>
            Event handler called after a configuration has changed.
            </summary>
            <param name="sender">
            <para>The source of the event.</para>
            </param>
            <param name="e">
            <para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventArgs"/> that contains the event data.</para>
            </param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventArgs">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventArgs.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangingEventArgs"/> class with the section name</para>
            </summary>
            <param name="sectionName"><para>The section name of the changes.</para></param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventArgs.SectionName">
            <summary>
            <para>Gets the section name where the changes occurred.</para>
            </summary>
            <value>
            <para>The section name where the changes occurred.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangingEventArgs">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangingEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangingEventArgs"/> class with the configuration file, the section name, the old value, and the new value of the changes.</para>
            </summary>
            <param name="sectionName"><para>The section name of the changes.</para></param>
            <param name="oldValue"><para>The old value.</para></param>
            <param name="newValue"><para>The new value.</para></param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangingEventArgs.OldValue">
            <summary>
            <para>Gets the old value.</para>
            </summary>
            <value>
            <para>The old value.</para>
            </value>
            <remarks>
            <value>If no old value existed this value will be <see langword="null"/>.</value>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangingEventArgs.NewValue">
            <summary>
            <para>Gets the new value.</para>
            </summary>
            <value>
            <para>The new value.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangingEventArgs.Cancel">
            <summary>
            <para>Determines if the changes should be cancled.</para>
            </summary>
            <value>
            <para><see langword="true"/> if the changes should be cancled; otherwise, <see langword="false"/>.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangingEventHandler">
            <summary>
            Event handler called before the configuration is changed. 
            </summary>
            <param name="sender">
            <para>The source of the event.</para>
            </param>
            <param name="e">
            <para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangingEventArgs"/> that contains the event data.</para>
            </param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute">
            <summary>
            Indicates the configuration object type that is used for the attributed object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute.#ctor(System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute"/> class with the configuration object type.
            </summary>
            <param name="configurationType">The <see cref="T:System.Type"/> of the configuration object.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute.ConfigurationType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the configuration object.
            </summary>
            <value>
            The <see cref="T:System.Type"/> of the configuration object.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileChangedEventArgs">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileChangedEventArgs.#ctor(System.String,System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangingEventArgs"/> class with the configuration file, the section name, the old value, and the new value of the changes.</para>
            </summary>
            <param name="configurationFile"><para>The configuration file where the change occured.</para></param>
            <param name="sectionName"><para>The section name of the changes.</para></param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileChangedEventArgs.ConfigurationFile">
            <summary>
            <para>Gets the configuration file of the data that is changing.</para>
            </summary>
            <value>
            <para>The configuration file of the data that is changing.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileChangingEventArgs">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileChangingEventArgs.#ctor(System.String,System.String,System.Object,System.Object)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangingEventArgs"/> class with the configuration file, the section name, the old value, and the new value of the changes.</para>
            </summary>
            <param name="configurationFile"><para>The configuration file where the change occured.</para></param>
            <param name="sectionName"><para>The section name of the changes.</para></param>
            <param name="oldValue"><para>The old value.</para></param>
            <param name="newValue"><para>The new value.</para></param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileChangingEventArgs.ConfigurationFile">
            <summary>
            <para>Gets the configuration file of the data that is changing.</para>
            </summary>
            <value>
            <para>The configuration file of the data that is changing.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1">
            <summary>
            Generic helper class for custom provider configuration objects.
            </summary>
            <remarks>
            The helper class encapsulates the logic to manage an unknown set of properties in <see cref="T:System.Configuration.ConfigurationElement"/>s.
            This logic cannot be inherited by the configuration objects because these objects must inherit from the base configuration 
            object type for the hierarchy of providers the configuration object represents.
            </remarks>
            <typeparam name="T">The type of the custom provider configuration object.</typeparam>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.propertiesCollection">
            <summary>
            Collection of managed properties
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1"/> class for a configuration object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.HandleIsModified">
            <summary>
            Concrete implementation of <see cref="M:System.Configuration.ConfigurationElement.IsModified"/>.
            </summary>
            <returns><b>true</b> if the managed element has been modified.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.HandleOnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Concrete implementation of <see cref="M:System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)"/>.
            </summary>
            <param name="name">The name of the unrecognized attribute.</param>
            <param name="value">The value of the unrecognized attribute.</param>
            <returns><code>true</code> when an unknown attribute is encountered while deserializing.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.HandleReset(System.Configuration.ConfigurationElement)">
            <summary>
            Concrete implementation of <see cref="M:System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)"/>.
            </summary>
            <param name="parentElement">The parent node of the configuration element.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.HandleSetAttributeValue(System.String,System.String)">
            <summary>
            Sets the value to the specified attribute and updates the properties collection.
            </summary>
            <param name="key">The key of the attribute to set.</param>
            <param name="value">The value to set for the attribute.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.HandleUnmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Concrete implementation of <see cref="M:System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)"/>.
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">The parent <see cref="T:System.Configuration.ConfigurationElement"/> object, or a <see langword="null"/> reference if this is the top level.</param>
            <param name="saveMode">A <see cref="T:System.Configuration.ConfigurationSaveMode"/> object that determines which property values to include.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.IsKnownPropertyName(System.String)">
            <summary>
            Returns whether the property name is known in advance, i.e. it is not a dynamic property.
            </summary>
            <param name="propertyName">The property name.</param>
            <returns><b>true</b> if the property is known in advance, <b>false</b> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.Attributes">
            <summary>
            Gets the collection of custom attributes.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.Properties">
            <summary>
            Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for this configuration element when implemented in a derived class. 
            </summary>
            <value>
            A <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for this configuration element when implemented in a derived class. 
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource">
            <summary>
            Represents a configuration source that is backed by a dictionary of named objects.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource">
            <summary>
            Represents a source for getting configuration information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.GetSection(System.String)">
            <summary>
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/>.
            </summary>
            <param name="sectionName">The name of the section to be retrieved.</param>
            <returns>The specified <see cref="T:System.Configuration.ConfigurationSection"/>, or <see langword="null"/> (<b>Nothing</b> in Visual Basic)
            if a section by that name is not found.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Add(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration source location specified by 
            <paramref name="saveParameter"/> and saves the configuration source.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists in the location specified by 
            <paramref name="saveParameter"/> it will be replaced.
            </remarks>
            <param name="saveParameter">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter"/> that represents the location where 
            to save the updated configuration.</param>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Remove(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String)">
            <summary>
            Removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration source location specified by 
            <paramref name="removeParameter"/> and saves the configuration source.
            </summary>
            <param name="removeParameter">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter"/> that represents the location where 
            to save the updated configuration.</param>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.AddSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Adds a handler to be called when changes to the section named <paramref name="sectionName"/> are detected.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler for the change event to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.RemoveSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Removes a handler to be called when changes to section <code>sectionName</code> are detected.
            </summary>
            <param name="sectionName">The name of the watched section.</param>
            <param name="handler">The handler for the change event to remove.</param>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.sections">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.eventHandlers">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.GetSection(System.String)">
            <summary>
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/>.
            </summary>
            <param name="sectionName">The name of the section to be retrieved.</param>
            <returns>The specified <see cref="T:System.Configuration.ConfigurationSection"/>, or <see langword="null"/> (<b>Nothing</b> in Visual Basic)
            if a section by that name is not found.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration source.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists it will be replaced.
            </remarks>
            <param name="name">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="section">The configuration section to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.Remove(System.String)">
            <summary>
            Removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration source.
            </summary>
            <param name="name">The name of the section to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.Remove(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String)">
            <summary>
            Removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration source.
            </summary>
            <param name="removeParameter">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter"/> that represents the location where 
            to save the updated configuration. It is ignored in by implementation.</param>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.Contains(System.String)">
            <summary>
            Determines if a section name exists in the source.
            </summary>
            <param name="name">The section name to find.</param>
            <returns><b>true</b> if the section exists; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.Add(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration source.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists it will be replaced.
            </remarks>
            <param name="saveParameter">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter"/> that represents the location where 
            to save the updated configuration. It is ignored in by implementation.</param>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.AddSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Adds a handler to be called when changes to the section named <paramref name="sectionName"/> are detected.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler for the change event to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.RemoveSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Removes a handler to be called when changes to section <code>sectionName</code> are detected.
            </summary>
            <param name="sectionName">The name of the watched section.</param>
            <param name="handler">The handler for the change event to remove.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationParameter">
            <summary>
            Configuration parameter for file-based configuration sources.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter">
            <summary>
            Represents a configuration parameter for an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            </summary>
            <remarks>
            Configuration parameters represent the configuration of a configuration source.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationParameter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationParameter"/> class with a file name.
            </summary>
            <param name="fileName">The file name.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationParameter.FileName">
            <summary>
            Gets the file name.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource">
            <summary>
            Represents a configuration source that retrieves configuration information from an arbitrary file.
            </summary>
            <remarks>
            This configuration source uses a <see cref="T:System.Configuration.Configuration"/> object to deserialize configuration, so 
            the configuration file must be a valid .NET Framework configuration file.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IProtectedConfigurationSource">
            <summary>
            TODO: Add Comment
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IProtectedConfigurationSource.Add(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String,System.Configuration.ConfigurationSection,System.String)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="saveParameter"></param>
            <param name="sectionName"></param>
            <param name="configurationSection"></param>
            <param name="protectionProviderName"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource"/> class with a configuration file path.
            </summary>
            <param name="configurationFilepath">The configuration file path. The path can be absolute or relative.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.GetSection(System.String)">
            <summary>
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/>.
            </summary>
            <param name="sectionName">The name of the section to be retrieved.</param>
            <returns>The specified <see cref="T:System.Configuration.ConfigurationSection"/>, or <see langword="null"/> (<b>Nothing</b> in Visual Basic)
            if a section by that name is not found.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.AddSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Adds a handler to be called when changes to section <code>sectionName</code> are detected.
            This call should always be followed by a <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.RemoveSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)"/>. Failure to remove change
            handlers will result in .Net resource leaks.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.RemoveSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Remove a handler to be called when changes to section <code>sectionName</code> are detected.
            This class should always follow a call to <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.AddSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)"/>. Failure
            to call these methods in pairs will result in .Net resource leaks.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.Save(System.String,System.String,System.Configuration.ConfigurationSection)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Adds or replaces <paramref name="configurationSection"/> under name <paramref name="section"/> in the configuration 
            file named <paramref name="fileName" /> and saves the configuration file.
            </summary>
            <param name="fileName">The name of the configuration file.</param>
            <param name="section">The name for the section.</param>
            <param name="configurationSection">The configuration section to add or replace.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.Save(System.String,System.String,System.Configuration.ConfigurationSection,System.String)">
            <summary>
            TODO: add comment
            </summary>
            <param name="fileName"></param>
            <param name="section"></param>
            <param name="configurationSection"></param>
            <param name="protectionProvider"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.Remove(System.String,System.String)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Removes the configuration section named <paramref name="section"/> from the configuration file named
            <paramref name="fileName"/> and saves the configuration file.
            </summary>
            <param name="fileName">The name of the configuration file.</param>
            <param name="section">The name for the section.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.Add(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration source location specified by 
            <paramref name="saveParameter"/> and saves the configuration source.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists in the location specified by 
            <paramref name="saveParameter"/> it will be replaced.
            </remarks>
            <param name="saveParameter">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter"/> that represents the location where 
            to save the updated configuration. Must be an instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationParameter"/>.</param>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.Add(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String,System.Configuration.ConfigurationSection,System.String)">
            <summary>
            TODO: add comment
            </summary>
            <param name="saveParameter"></param>
            <param name="sectionName"></param>
            <param name="configurationSection"></param>
            <param name="protectionProviderName"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.Remove(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String)">
            <summary>
            Removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration source location specified by 
            <paramref name="removeParameter"/> and saves the configuration source.
            </summary>
            <param name="removeParameter">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter"/> that represents the location where 
            to save the updated configuration. Must be an instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationParameter"/>.</param>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.ResetImplementation(System.String,System.Boolean)">
            <summary>
            Flushes the internal cache of the FileConfigurationSource.
            </summary>
            <param name="configurationFilepath">The path to the configuration that should have its caches flushed.</param>
            <param name="refreshing">tue if a ConfigurationFileWatcher should be setup to monitor changes to the configuration file, otherwise false.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.GetImplementation(System.String)">
            <summary>
            Get the implemenation for the configuration file.
            </summary>
            <param name="configurationFilepath">The path of the configuration file.</param>
            <returns>A file configuration source implmentation.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.Implementation">
            <summary>
            Gets the implemenation of the source.
            </summary>
            <value>
            The implemenation of the source.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement">
            <summary>
            Represents the configuration settings that describe a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement"/> class with a default name and an empty path.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement"/> class with a name and an path.
            </summary>
            <param name="name">The instance name.</param>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement.CreateSource">
            <summary>
            Returns a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource"/> configured with the receiver's settings.
            </summary>
            <returns>A new configuration source.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement.FilePath">
            <summary>
            Gets or sets the file path. This is a required field.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceImplementation">
            <summary>
            This type supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Represents the implementation details for configuration sources over arbitrary files.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceImplementation.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceImplementation"/>.
            </summary>
            <param name="configurationFilepath">The path for the main configuration file.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceImplementation.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceImplementation"/>.
            </summary>
            <param name="refresh">A bool indicating if runtime changes should be refreshed or not.</param>
            <param name="configurationFilepath">The path for the main configuration file.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceImplementation.GetSection(System.String)">
            <summary>
            Retrieves a section from System.Configuration, and starts watching for 
            its changes if not watching already.
            </summary>
            <param name="sectionName">The section name.</param>
            <returns>The section, or null if it doesn't exist.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceImplementation.RefreshAndValidateSections(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ICollection{System.String}@,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Refreshes the configuration sections from the main configuration file and determines which sections have suffered notifications
            and should be notified to registered handlers.
            </summary>
            <param name="localSectionsToRefresh">A dictionary with the configuration sections residing in the main configuration file that must be refreshed.</param>
            <param name="externalSectionsToRefresh">A dictionary with the configuration sections residing in external files that must be refreshed.</param>
            <param name="sectionsToNotify">A new collection with the names of the sections that suffered changes and should be notified.</param>
            <param name="sectionsWithChangedConfigSource">A new dictionary with the names and file names of the sections that have changed their location.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceImplementation.RefreshExternalSections(System.String[])">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Refreshes the configuration sections from an external configuration file.
            </summary>
            <param name="sectionsToRefresh">A collection with the names of the sections that suffered changes and should be refreshed.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.GenericEnumeratorWrapper`1">
            <devdoc>
            Represents a genereic enumerator for the NamedElementCollection.
            </devdoc>	
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICustomProviderData">
            <summary>
            Represents the configuration settings for a custom provider.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICustomProviderData.Name">
            <summary>
            Gets the name for the represented provider.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICustomProviderData.Attributes">
            <summary>
            Gets the attributes for the represented provider.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1">
            <summary>
            This interface must be implemented by configuration objects for custom providers that rely
            on a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1"/> to perform the dynamic properties management.
            </summary>
            <remarks>
            This interface is generic so that the helper can be strongly typed.
            </remarks>
            <typeparam name="T">The configuration object type. It must match the type implementing the interface.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1.BaseGetPropertyValue(System.Configuration.ConfigurationProperty)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Returns the value for the specified property using the inherited implementation.
            </summary>
            <param name="property">The property to get the value from.</param>
            <returns>The value for the property.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1.BaseIsModified">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Returns the modification status using the inherited implementation.
            </summary>
            <returns><b>true</b> if the configuration element has been modified, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1.BaseReset(System.Configuration.ConfigurationElement)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Resets the internal state of the configuration object using the inherited implementation.
            </summary>
            <param name="parentElement">The parent node of the configuration element.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1.BaseSetPropertyValue(System.Configuration.ConfigurationProperty,System.Object)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Sets the value for the specified property using the inherited implementation.
            </summary>
            <param name="property">The property to set the value to.</param>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1.BaseUnmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Modifies the <b>ConfigurationElement</b> object to remove all values that should not be saved using the inherited implementation.
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">The parent <b>ConfigurationElement</b> object, or a null reference (Nothing in Visual Basic) if this is the top level.</param>
            <param name="saveMode">A <see cref="T:System.Configuration.ConfigurationSaveMode"/> object that determines which property values to include.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1.Helper">
            <summary>
            Gets the helper that manages the configuration information.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCategory">
            <summary>
            Represents a category on an ADM template file.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCategory.#ctor(System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCategory"/> class.
            </summary>
            <param name="categoryName">
            The categor name.
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCategory.Categories">
            <summary>
            Gest the list of sub categories.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCategory.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCategory.Policies">
            <summary>
            Gets the list of policies in a category.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCheckboxPart">
            <summary>
            Represents a CHECKBOX part on an ADM template.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart">
            <summary>
            Represents a part in an ADM template.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.PartStartTemplate">
            <summary>
            The part start template.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.PartEndTemplate">
            <summary>
            The part end template.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.ValueNameTemplate">
            <summary>
            The part value name.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.KeyNameTemplate">
            <summary>
            The part key name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart"/> class.
            </summary>
            <param name="partName">The name for the part.</param>
            <param name="keyName">The registry key for part, or <see langword="null"/> 
            if no key name is required for the part.</param>
            <param name="valueName">The name for the registry value for the part.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.Write(System.IO.TextWriter)">
            <summary>
            Writes the part the <paramref name="writer"/>.
            </summary>
            <param name="writer">
            The <see cref="T:System.IO.TextWriter"/> to write.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.WritePart(System.IO.TextWriter)">
            <summary>
            Writes the text representing the part to the <paramref name="writer"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to where the text for the part should be written to.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.KeyName">
            <summary>
            Gets the registry key for the part, or <see langword="null"/> if no key name is required for the part.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.PartName">
            <summary>
            Gets the name for the part.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.ValueName">
            <summary>
            Gets the name for the registry value for the part.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.PartTypeTemplate">
            <summary>
            Gest the template representing the type of the part.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCheckboxPart.WritePart(System.IO.TextWriter)">
            <summary>
            Writes the text representing the part to the <paramref name="writer"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to where the text for the part should be written to.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCheckboxPart.CheckedByDefault">
            <summary>
            Gets the indication of whether the checkbox should be checked by default.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCheckboxPart.ValueForOn">
            <summary>
            Gets the indication of whether a value for the checked state should be added.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCheckboxPart.ValueForOff">
            <summary>
            Gets the indication of whether a value for the unchecked state should be added.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCheckboxPart.PartTypeTemplate">
            <summary>
            Gest the template representing the type of the part.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmComboBoxPart">
            <summary>
            Represents a COMBOBOX part on an ADM template.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmEditTextPart">
            <summary>
            Represents an EDITTEXT part on an ADM template.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmEditTextPart.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmEditTextPart"/> class.
            </summary>
            <param name="partName">The name for the part.</param>
            <param name="keyName">The registry key for part, or <see langword="null"/> 
            if no key name is required for the part.</param>
            <param name="valueName">The name for the registry value for the part.</param>
            <param name="defaultValue">The default value for the part, or <see langword="null"/> 
            if no default value is available.</param>
            <param name="maxlen">The maximum length for the part's value.</param>
            <param name="required">The indication of whether values for the part are required.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmEditTextPart.WritePart(System.IO.TextWriter)">
            <summary>
            Writes the text representing the part to the <paramref name="writer"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to where the text for the part should be written to.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmEditTextPart.DefaultValue">
            <summary>
            Gets the default value for the part, or <see langword="null"/> 
            if no default value is available.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmEditTextPart.Maxlen">
            <summary>
            Gets the maximum length for the part's value.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmEditTextPart.Required">
            <summary>
            Gets the indication of whether values for the part are required.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmEditTextPart.PartTypeTemplate">
            <summary>
            Gest the template representing the type of the part.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmComboBoxPart.WritePart(System.IO.TextWriter)">
            <summary>
            Writes the text representing the part to the <paramref name="writer"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to where the text for the part should be written to.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmComboBoxPart.Suggestions">
            <summary>
            Gets the list of suggested values for the part.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmComboBoxPart.PartTypeTemplate">
            <summary>
            Gest the template representing the type of the part.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContent">
            <summary>
            Represents the contents of an ADM template file.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContent.#ctor">
            <summary>
            Initializes a new empty instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContent.AddCategory(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCategory)">
            <summary>
            Add a category to the content
            </summary>
            <param name="category">The category to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContent.Write(System.IO.TextWriter)">
            <summary>
            Writes the contents represented by the receiver to <paramref name="writer"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to where the contents should be written.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContent.Categories">
            <summary>
            Gets the categories.
            </summary>
            <value>
            The categories.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder">
            <summary>
            Represents the process of building the contents of an ADM file.
            </summary>
            <remarks>
            During the building process categories and policies are started and ended: several levels of nested categories
            can be started, but only one level of policies are allowed. When a category or policy is started, it becomes the current
            until it is ended.
            Parts are added to the current policy; parts are not started and stopped.
            </remarks>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AvailableValueName">
            <summary>
            String representing the name of the registry value that represents the availability of a configuration element.
            </summary>
            <remarks>
            The value names for policies are set to this name.
            </remarks>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.NoneListItem">
            <summary>
            String representing the value for a <see langword="null"/> value in a drop down list. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> class.
            </summary>
            <param name="content">The content that will be built.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddCheckboxPart(System.String,System.String,System.Boolean)">
            <summary>
            Adds a checkbox part to the current policy, with values for "on" and "off" states.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="checkedByDefault">Whether the new part should be checked by default.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddCheckboxPart(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a checkbox part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="checkedByDefault">Whether the new part should be checked by default.</param>
            <param name="valueForOn">Whether a value should be set for the checked state.</param>
            <param name="valueForOff">Whether a value should be set for the unchecked state.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddCheckboxPart(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a checkbox part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="keyName">The registry key for the part, to override its policy's key.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="checkedByDefault">Whether the new part should be checked by default.</param>
            <param name="valueForOn">Whether a value should be set for the checked state.</param>
            <param name="valueForOff">Whether a value should be set for the unchecked state.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddComboBoxPart(System.String,System.String,System.String,System.Int32,System.Boolean,System.String[])">
            <summary>
            Adds a combo box part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/> if there is no such default value.</param>
            <param name="maxlen">The max length for the new part's values</param>
            <param name="required">Whether values for the new part are mandatory.</param>
            <param name="suggestions">The suggested values for the new part.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddComboBoxPart(System.String,System.String,System.String,System.String,System.Int32,System.Boolean,System.String[])">
            <summary>
            Adds a combo box part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="keyName">The registry key for the part, to override its policy's key.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/> if there is no such default value.</param>
            <param name="maxlen">The max length for the new part's values</param>
            <param name="required">Whether values for the new part are mandatory.</param>
            <param name="suggestions">The suggested values for the new part.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddDropDownListPart(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListItem},System.String)">
            <summary>
            Adds a new drop down list part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="items">The list of items to include in the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/> if there is no such default value.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddDropDownListPart(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListItem},System.String)">
            <summary>
            Adds a new drop down list part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="keyName">The registry key for the part, to override its policy's key.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="items">The list of items to include in the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/> if there is no such default value.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddDropDownListPartForEnumeration``1(System.String,System.String,``0)">
            <summary>
            Adds a new drop down list part to the current policy with items representing an enumeration's values.
            </summary>
            <typeparam name="T">The enumeration type.</typeparam>
            <param name="partName">The name for the new part.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddDropDownListPartForEnumeration``1(System.String,System.String,System.String,``0)">
            <summary>
            Adds a new drop down list part to the current policy with items representing an enumeration's values.
            </summary>
            <typeparam name="T">The enumeration type.</typeparam>
            <param name="partName">The name for the new part.</param>
            <param name="keyName">The registry key for the part, to override its policy's key.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddDropDownListPartForNamedElementCollection``1(System.String,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection{``0},System.String,System.Boolean)">
            <summary>
            Adds a new drop down list part to the current policy with items representing the elements in a configuration 
            elements collection.
            </summary>
            <typeparam name="T">The base class for the configuration elements in the collection.</typeparam>
            <param name="partName">The name for the new part.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="elements">The collection of configuration elements.</param>
            <param name="defaultElementName">The name for the default element, or <see langword="null"/> if there is no such default name.</param>
            <param name="allowNone">Whether an additional entry to represent that no element is selected should be added.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
            <devdoc>
            FxCop message CA1004 is supressed because it seems like the rule does not detect the
            existing 'elements' method parameter that uses the generic parameter T.
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddDropDownListPartForNamedElementCollection``1(System.String,System.String,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection{``0},System.String,System.Boolean)">
            <summary>
            Adds a new drop down list part to the current policy with items representing the elements in a configuration 
            elements collection.
            </summary>
            <typeparam name="T">The base class for the configuration elements in the collection.</typeparam>
            <param name="partName">The name for the new part.</param>
            <param name="keyName">The registry key for the part, to override its policy's key.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="elements">The collection of configuration elements.</param>
            <param name="defaultElementName">The name for the default element, or <see langword="null"/> if there is no such default name.</param>
            <param name="allowNone">Whether an additional entry to represent that no element is selected should be added.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
            <devdoc>
            FxCop message CA1004 is supressed because it seems like the rule does not detect the
            existing 'elements' method parameter that uses the generic parameter T.
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddEditTextPart(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Adds a new edit text part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/> if there is no such default value.</param>
            <param name="maxlen">The max length for the new part's values</param>
            <param name="required">Whether values for the new part are mandatory.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddEditTextPart(System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Adds a new edit text part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="keyName">The registry key for the part, to override its policy's key.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/> if there is no such default value.</param>
            <param name="maxlen">The max length for the new part's values</param>
            <param name="required">Whether values for the new part are mandatory.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddNumericPart(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Adds a new numeric part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/> if there is no such default value.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddNumericPart(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Adds a new numeric part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="keyName">The registry key for the part, to override its policy's key.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/> if there is no such default value.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddNumericPart(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Adds a new numeric part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="keyName">The registry key for the part, to override its policy's key.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/>
            if there is no such default value.</param>
            <param name="minValue">The minimum value, or <see langword="null"/>
            if there is no minimum value.</param>
            <param name="maxValue">The maximum value, or <see langword="null"/>
            if there is no maximum value.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddPart(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart)">
            <summary>
            Add a part to the builder.
            </summary>
            <param name="part">
            The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart"/> to add.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddTextPart(System.String)">
            <summary>
            Adds a new text part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.EndCategory">
            <summary>
            Ends the current category.
            </summary>
            <remarks>
            If the current category has a parent category, the parent category is made the current category.
            </remarks>
            <exception cref="T:System.InvalidOperationException">when there is no current category.</exception>
            <exception cref="T:System.InvalidOperationException">when there is an unfinished policy being built.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.EndPolicy">
            <summary>
            Ends the current policy.
            </summary>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.GetContent">
            <summary>
            Gets the content for the builder.
            </summary>
            <returns>
            A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContent"/> object.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.StartCategory(System.String)">
            <summary>
            Starts a new category in the built content and makes it the current category.
            </summary>
            <param name="categoryName">The name for the new category</param>
            <remarks>
            The category is created as a child of the current category, or as a top level category if there is
            no such current category.
            </remarks>
            <exception cref="T:System.InvalidOperationException">when there is an unfinished policy being built.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.StartPolicy(System.String,System.String)">
            <summary>
            Starts a new policy on the current category.
            </summary>
            <param name="policyName">The name for the new policy.</param>
            <param name="policyKey">The registry key for the new policy.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current category.</exception>
            <exception cref="T:System.InvalidOperationException">when there is an unfinished policy being built.</exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListItem">
            <summary>
            Represents an item in a drop down list.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListItem"/> class.
            </summary>
            <param name="name">The item name.</param>
            <param name="value">The item value.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListItem.Name">
            <summary>
            Gets the name of the item.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListItem.Value">
            <summary>
            Gets the value of the item.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart">
            <summary>
            Represents a DROPDOWNLIST part on an ADM template.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.DropDownListTemplate">
            <summary>
            The drop down list template.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.ItemListStartTemplate">
            <summary>
            The item list start template.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.ListItemTemplate">
            <summary>
            The list item template.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.DefaultListItemTemplate">
            <summary>
            The default list item template.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.ItemListEndTemplate">
            <summary>
            The end list template.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListItem},System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart"/> class.
            </summary>
            <param name="partName">The part name.</param>
            <param name="keyName">The key name.</param>
            <param name="valueName">The value name.</param>
            <param name="items">The items.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.WritePart(System.IO.TextWriter)">
            <summary>
            Writes the text representing the part to the <paramref name="writer"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to where the text for the part should be written to.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.DefaultValue">
            <summary>
            Gets the default value for the part.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.Items">
            <summary>
            Gets the list of name/value pairs for the part.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.PartTypeTemplate">
            <summary>
            Gest the template representing the type of the part.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdministrativeTemplateGenerator">
            <summary>
            Encapsulates the process to generate the ADM template contents to represent the configuration 
            information contained in a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>, delegating to registered
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> instances the generation of the
            specific contents for each section.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdministrativeTemplateGenerator.GenerateAdministrativeTemplateContent(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider})">
            <summary>
            Generates the ADM template contents that represent the configuration information in 
            <paramref name="configurationSource"/> 
            </summary>
            <param name="configurationSource">The configuration source holding the configuration sections.</param>
            <param name="applicationName">The ApplicationName to be used when generating the ADM policy keys.</param>
            <param name="manageabilityProviders">The mapping from section names to the
            <returns>The generated content.</returns>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> instances that generate the ADM contents.</param>
            <remarks>Both MACHINE and USER policies are generated.</remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmNumericPart">
            <summary>
            Represents a NUMERIC part in an ADM template.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmNumericPart.WritePart(System.IO.TextWriter)">
            <summary>
            Writes the text representing the part to the <paramref name="writer"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to where the text for the part should be written to.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmNumericPart.DefaultValue">
            <summary>
            Gets the default value for the part, or <see langword="null"/> 
            if no default value is available.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmNumericPart.MaxValue">
            <summary>
            Gets the maximum value for the part, or <see langword="null"/> 
            if no maximum value is available.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmNumericPart.MinValue">
            <summary>
            Gets the minimum value for the part, or <see langword="null"/> 
            if no minimum value is available.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmNumericPart.PartTypeTemplate">
            <summary>
            Gest the template representing the type of the part.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPolicy">
            <summary>
            Represents a policy in an ADM template.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPolicy.KeyName">
            <summary>
            Gets the registry key for the policy.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPolicy.Parts">
            <summary>
            Gets the parts for the policy.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPolicy.Name">
            <summary>
            Gets the name for the policy.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPolicy.ValueName">
            <summary>
            Gets the registry value name for the policy, or <see langword="null"/> if no value name is required for the policy.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmTextPart">
            <summary>
            Represents a TEXT part in an ADM template.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmTextPart.#ctor(System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmTextPart"/> class.
            </summary>
            <param name="partName">
            The name of the part.
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmTextPart.PartTypeTemplate">
            <summary>
            Gest the template representing the type of the part.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeNotificationCoordinator">
            <summary>
            Represents a coordinator for configuration change notifications.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeNotificationCoordinator.AddSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Add a section handler for a section.
            </summary>
            <param name="sectionName">
            The name of the section.
            </param>
            <param name="handler">
            The handler to add.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeNotificationCoordinator.NotifyUpdatedSections(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Notify updated configuration sections.
            </summary>
            <param name="sectionsToNotify">
            The name of the sections to notify.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeNotificationCoordinator.RemoveSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Remove a section change handler.
            </summary>
            <param name="sectionName">
            The section to remove the handler.
            </param>
            <param name="handler">
            The handler to remove.
            </param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator">
            <summary>
            Manages the configuration file watchers for a collection of configuration sections.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.MainConfigurationFileSource">
            <summary>
            The main configuration file source.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.#ctor(System.String,System.Boolean)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeNotificationCoordinator"/> class.
            </summary>
            <param name="mainConfigurationFileName">The main configuration file.</param>
            <param name="refresh">true to refresh configuration; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.Dispose">
            <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.IsWatchingConfigSource(System.String)">
            <summary>
             Determines if the configuration source is being watched.
            </summary>
            <param name="configSource">
             The configuration source.
             </param>
            <returns>
             true if the source is being watched; otherwise, false.
             </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.OnConfigurationChanged(System.Object,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.ConfigurationChanged"/> event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.RemoveWatcherForConfigSource(System.String)">
            <summary>
            Removes a watcher for the configuration source.
            </summary>
            <param name="configSource">
            The source to remove the watcher.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.SetWatcherForConfigSource(System.String)">
            <summary>
            Sets a watcher for a configuration source.
            </summary>
            <param name="configSource">
            The configuration source to watch.
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.WatchedConfigSources">
            <summary>
            Gets a collection of watch configuration sources.
            </summary>
            <value>
            A collection of watch configuration sources.
            </value>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.ConfigurationChanged">
            <summary>
            Event to notify when configuration changes.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider">
            <summary>
            Represents the behavior required to provide Group Policy updates and to publish the 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> instances associated to a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/>.
            </summary>
            <remarks>
            Subclasses define the implementation necessary to provide manageability for a specific type of configuration
            element.
            Element providers are usually necessary when dealing with collections of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/>,
            as the concrete type of the elements in the collections is only known at runtime, and it is possible that 
            the elements are defined in 'extension' assemblies.
            Element providers are registered with the configuration element types they provide manageability to using 
            the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute"/> attribute, which is bound to assemblies.
            Element providers are also responsible for generating the ADM instructions that describe the policies that can be
            used to override the values in the configuration elements. Usually the ADM instructions generated by element providers
            consist of a single policy with parts that map to the specific configuration element instance of the type the provider 
            manages. This is not mandatory, however, and the ADM instructions generated by element providers must be consistent 
            with the ADM structure determined by the section provider that interacts with them.
            ADM instructions must be generated for each element instance in a given context, using the elements' names to build
            each instruction key.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute"/>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider.PolicyValueName">
            <summary>
            The name of the value used to hold policy enablement status.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,System.Configuration.ConfigurationElement,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="parentKey">The key path for which the generated instructions' keys must be subKeys of.</param>
            <remarks>
            ADM instructions are generated on a per-instance basis.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider.OverrideWithGroupPoliciesAndGenerateWmiObjects(System.Configuration.ConfigurationElement,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,System.Boolean,System.Collections.Generic.ICollection{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting})">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry, if any, and creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> instances that describe the 
            configurationObject.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="generateWmiObjects"><see langword="true"/> if WMI objects must be generated; otherwise, 
            <see langword="false"/>.</param>
            <param name="wmiSettings">A collection to where the generated WMI objects are to be added.</param>
            <returns><see langword="true"/> if the policy settings do not disable the configuration element, otherwise
            <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException">when the type of <paramref name="configurationObject"/> is not 
            the type.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider.LogExceptionWhileOverriding(System.Exception)">
            <summary>
            Logs an error detected while overriding a configuration object with policy values.
            </summary>
            <param name="exception">The exception representing the error.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute">
            <summary>
            Specifies which <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> must be used to provide manageability
            for instances a given <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> subclass.
            </summary>
            <remarks>
            Manageability providers for configuration elements are registered both to the configuration element type 
            and the manageability provider for the configuration section where the configuration element resides.
            The attribute is bound to assemblies.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute.#ctor(System.Type,System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute"/> class.
            </summary>
            <param name="manageabilityProviderType">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> type.</param>
            <param name="targetType">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> type.
            </param>
            <param name="sectionManageabilityProviderType">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> type.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute.ManageabilityProviderType">
            <summary>
            Gets the registered <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> type.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute.TargetType">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> type 
            for which the registered <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> type provides manageability.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute.SectionManageabilityProviderType">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> registered to manage the 
            section where the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> 
            instances managed by the registered <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> type reside.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1">
            <summary>
            Provides a default implementation for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> that
            splits policy overrides processing and WMI objects generation, performing approriate logging of 
            policy processing errors.
            </summary>
            <typeparam name="T">The managed configuration element type. Must inherit from <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/>.
            </typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.#ctor">
            <summary>
            
            </summary>
            <remarks>Default to ReadOnly</remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,System.Configuration.ConfigurationElement,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="parentKey">The key path for which the generated instructions' keys must be subKeys of.</param>
            <remarks>
            Class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1"/> provides a default implementation for this method that
            calls the strongly typed 
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            method.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            The default implementation for this method creates a policy, using 
            <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.ElementPolicyNameTemplate"/> to create the policy name and invoking
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddElementAdministrativeTemplateParts(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to add the policy parts.
            Subclasses managing objects that must not create a policy must override this method to just add the parts.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddElementAdministrativeTemplateParts(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses managing objects that must not create a policy will likely need to include the elements' keys when creating the parts.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.OverrideWithGroupPoliciesAndGenerateWmiObjects(System.Configuration.ConfigurationElement,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,System.Boolean,System.Collections.Generic.ICollection{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting})">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry, if any, and creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> instances that describe the 
            configurationObject.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="generateWmiObjects"><see langword="true"/> if WMI objects must be generated; otherwise, 
            <see langword="false"/>.</param>
            <param name="wmiSettings">A collection to where the generated WMI objects are to be added.</param>
            <returns><see langword="true"/> if the policy settings do not disable the configuration element, otherwise
            <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException">when the type of <paramref name="configurationObject"/> is not 
            the type <typeparamref name="T"/>.</exception>
            <remarks>
            Provides a default implementation that performs appropriate logging of errors when processing
            policy overrides.
            </remarks>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider.OverrideWithGroupPoliciesAndGenerateWmiObjects(System.Configuration.ConfigurationElement,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,System.Boolean,System.Collections.Generic.ICollection{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting})">ConfigurationElementManageabilityProvider.OverrideWithGroupPoliciesAndGenerateWmiObjects</seealso>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.OverrideWithGroupPolicies(`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)"/>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.GenerateWmiObjects(`0,System.Collections.Generic.ICollection{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting})"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.OverrideWithGroupPolicies(`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationObject"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.GenerateWmiObjects(`0,System.Collections.Generic.ICollection{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting})">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> instances that describe the 
            configurationObject.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="wmiSettings">A collection to where the generated WMI objects are to be added.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.ElementPolicyNameTemplate">
            <summary>
            Gets the template for the name of the policy associated to the object.
            </summary>
            <remarks>
            Elements that override 
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to avoid creating a policy must still override this property.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationInstanceConfigurationAccessor">
            <summary>
            Represents a configuration accessor for system configuration (.NET configuration).
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IConfigurationAccessor">
            <summary>
            Defines an accessor for configuraiton.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IConfigurationAccessor.GetSection(System.String)">
            <summary>
            Get a configuration section based on name.
            </summary>
            <param name="sectionName">The name of the configuration section.</param>
            <returns>The <see cref="T:System.Configuration.ConfigurationSection"/> for the name.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IConfigurationAccessor.RemoveSection(System.String)">
            <summary>
            Remove a configuration section.
            </summary>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IConfigurationAccessor.GetRequestedSectionNames">
            <summary>
            Gets the section names for the requested configuration.
            </summary>
            <returns>
            A collection of configuration names.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationInstanceConfigurationAccessor.#ctor(System.Configuration.Configuration)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationInstanceConfigurationAccessor"/> with the configuration to access.
            </summary>
            <param name="configuration">
            The configuration to access.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationInstanceConfigurationAccessor.GetRequestedSectionNames">
            <summary>
            Gets the section names for the requested configuration.
            </summary>
            <returns>
            A collection of configuration names.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationInstanceConfigurationAccessor.GetSection(System.String)">
            <summary>
            Get a configuration section based on name.
            </summary>
            <param name="sectionName">The name of the configuration section.</param>
            <returns>The <see cref="T:System.Configuration.ConfigurationSection"/> for the name.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationInstanceConfigurationAccessor.RemoveSection(System.String)">
            <summary>
            Remove a configuration section.
            </summary>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider">
            <summary>
            Represents the behavior required to provide Group Policy updates and to publish the 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> instances associated to a <see cref="T:System.Configuration.ConfigurationSection"/>.
            </summary>
            <remarks>
            Subclasses define the implementation necessary to provide manageability for a specific type of configuration
            section.
            Section providers delegate the manageability support for internal configuration elements to registered instances
            of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> when collections of heterogeneous elements are involved 
            and the concrete type of the configuration elements is unknown in advance. 
            Section providers are registered with the configuration section name they provide manageability to using 
            the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderAttribute"/> attribute, which is bound to assemblies.
            Section providers are also responsible for generating the ADM instructions that describe the policies that can be
            used to override the values for all the configuration settings in the section. Usually the ADM instructions generated 
            for a section consist of a policy for block-wide settings and one policy for each configuration element in a collection; 
            however some sections might require a different structure. Manageability providers for elements in a section must be 
            consistent with the ADM structure defined by the section's manageability provider.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderAttribute"/>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.PolicyValueName">
            <summary>
            The name of the value used to hold policy enablement status.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.#ctor(System.Collections.Generic.IDictionary{System.Type,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> class with a 
            given set of manageability providers for the elements in the section's collections.
            </summary>
            <param name="providers">The mapping from configuration element type to
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,System.Configuration.ConfigurationSection,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the configuration
            information represented by a configuration section.
            </summary>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration section instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="applicationName">The key path for which the generated instructions' keys must be sub keys of.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.AddAdministrativeTemplateDirectivesForElement``1(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,``0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the configuration
            information for the element using the supplied element manageability provider.
            </summary>
            <typeparam name="T">The base type for the configuration element.</typeparam>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="element">The configuration element.</param>
            <param name="subProvider">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> used to append the ADM instructions
            for the element.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="parentKey">The key path for which the generated instructions' keys must be sub keys of.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.AddElementsPolicies``1(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection{``0},Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the configuration
            information for the elements in a collection of configuration elements, using the registered element 
            manageability providers for each element.
            </summary>
            <remarks>
            A new category and one policy for each element in the collection are generated; the element manageability
            providers are responsible for generating the policies.
            Elements for which no manageability provider is registered are ignored.
            </remarks>
            <typeparam name="T">The base type for the configuration elements collection.</typeparam>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="elements">The collection of configuration elements.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="parentKey">The key path for which the generated instructions' keys must be sub keys of.</param>
            <param name="categoryName">The name for the category where the generated policies will be created.</param>
            <devdoc>
            FxCop message CA1004 is supressed because it seems like the rule does not detect the
            existing 'elements' method parameter that uses the generic parameter T.
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.GetPolicyKey(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Returns the registry key that represents a policy.
            </summary>
            <param name="machineKey">The key for the policy on the machine tree.</param>
            <param name="userKey">The key for the policy on the user tree.</param>
            <returns>The <paramref name="machineKey"/> if it is not <see langword="null"/> and
            it represents a policy; otherwise the <paramref name="machineKey"/> if it is not 
            <see langword="null"/> and it represents a policy, otherwise <see langword="null"/>.</returns>
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.IsPolicyKey">IRegistryKey.IsPolicyKey</seealso>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.GetSubProvider(System.Type)">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> instance registered 
            for type <paramref name="configurationObjectType"/>.
            </summary>
            <param name="configurationObjectType">The configuration element type of the instance needing management.</param>
            <returns>The manageability provider registered to manage the type, or <see langword="null"/> 
            if no provider is registered for the type.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.LoadRegistrySubKeys(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey@,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey@)">
            <summary>
            Utility method that loads sub keys at the machine and user level.
            </summary>
            <param name="subKeyName">The name of the required sub key.</param>
            <param name="machineKey">The parent key at the machine level, or <see langword="null"/> 
            if there is no registry key.</param>
            <param name="userKey">The parent key at the user level, or <see langword="null"/> 
            if there is no registry key.</param>
            <param name="machineSubKey">When this method returns, contains a reference to the sub key of
            <paramref name="machineKey"/> named <paramref name="subKeyName"/>, or <see langword="null"/> 
            if either machineKey is <see langword="null"/> or it does not have a sub key with
            the requested name.</param>
            <param name="userSubKey">When this method returns, contains a reference to the sub key of
            <paramref name="userKey"/> named <paramref name="subKeyName"/>, or <see langword="null"/> 
            if either userKey is <see langword="null"/> or it does not have a sub key with
            the requested name.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.LogExceptionWhileOverriding(System.Exception)">
            <summary>
            Logs an error detected while overriding a configuration object with policy values.
            </summary>
            <param name="exception">The exception representing the error.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.OverrideWithGroupPoliciesAndGenerateWmiObjects(System.Configuration.ConfigurationSection,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,System.Boolean,System.Collections.Generic.ICollection{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting})">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s and its internal configuration elements' properties 
            with the Group Policy values from the registry, if any, and creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> 
            instances that describe the configuration.
            </summary>
            <param name="configurationObject">The configuration section that must be managed.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="generateWmiObjects"><see langword="true"/> if WMI objects must be generated; otherwise, 
            <see langword="false"/>.</param>
            <param name="wmiSettings">A collection to where the generated WMI objects are to be added.</param>
            <returns><see langword="true"/> if the policy settings do not disable the configuration section, otherwise
            <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException">when the type of <paramref name="configurationObject"/> is not 
            the type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.OverrideWithGroupPoliciesAndGenerateWmiObjectsForElement``1(``0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,System.Boolean,System.Collections.Generic.ICollection{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting})">
            <summary>
            Overrides the properties for the configuration element and creates the 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> instances that describe it.
            </summary>
            <typeparam name="T">The base type for the configuration elements collection.</typeparam>
            <param name="element">The configuration element.</param>
            <param name="subProvider">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> used to override the element's
            properties and create the wmi objects.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="generateWmiObjects"><see langword="true"/> if WMI objects must be generated; otherwise, 
            <see langword="false"/>.</param>
            <param name="wmiSettings">A collection to where the generated WMI objects are to be added.</param>
            <returns><see langword="true"/> if the policy settings do not disable the configuration element, otherwise
            <see langword="false"/>.</returns>
            <remarks>
            This method assumes a specific layout for the policy values: there is a registry key representing the collection
            of elements, and a sub key with the policy values for each element. An element's sub key may also contains a value
            stating whether the policy for an element is disabled; in that case the element is removed from the collection.
            Such a layout for the policy values can be constructed manually, or method 
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.AddElementsPolicies``1(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection{``0},Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String,System.String)"/> can be invoked during the construction
            of the ADM template to generate it.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.OverrideWithGroupPoliciesAndGenerateWmiObjectsForElementCollection``1(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection{``0},System.String,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,System.Boolean,System.Collections.Generic.ICollection{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting})">
            <summary>
            Overrides the properties for the configuration elements in the given collection, and creates the 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> instances that describe each element.
            </summary>
            <typeparam name="T">The base type for the configuration elements collection.</typeparam>
            <param name="elements">The collection of configuration elements.</param>
            <param name="keyName">The name of the sub key where the policy values for the elements in the collection
            reside.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="generateWmiObjects"><see langword="true"/> if WMI objects must be generated; otherwise, 
            <see langword="false"/>.</param>
            <param name="wmiSettings">A collection to where the generated WMI objects are to be added.</param>
            <remarks>
            This method assumes a specific layout for the policy values: there is a registry key representing the collection
            of elements, and a sub key with the policy values for each element. An element's sub key may also contains a value
            stating whether the policy for an element is disabled; in that case the element is removed from the collection.
            Such a layout for the policy values can be constructed manually, or method 
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.AddElementsPolicies``1(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection{``0},Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String,System.String)"/> can be invoked during the construction
            of the ADM template to generate it.
            </remarks>
            <devdoc>
            FxCop message CA1004 is supressed because it seems like the rule does not detect the
            existing 'elements' method parameter that uses the generic parameter T.
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.ReleaseRegistryKeys(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey[])">
            <summary>
            Utility method that closes registry keys.
            </summary>
            <param name="keys">The registry keys to close.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.Providers">
            <summary>
            Gets the mapping from configuration element type to
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>
            </summary>
            <value>
            The mapping from configuration element type to
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderAttribute">
            <summary>
            Specifies which <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> must be used to provide manageability
            for a configuration section.
            </summary>
            <remarks>
            Manageability providers for configuration sections are registered to configuration section name.
            The attribute is bound to assemblies.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute"/> class.
            </summary>
            <param name="sectionName">The name of the section that needs manageability.</param>
            <param name="manageabilityProviderType">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> type.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderAttribute.SectionName">
            <summary>
            Gets the name of the <see cref="T:System.Configuration.ConfigurationSection"/> for which the registered 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> type provides manageability.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderAttribute.ManageabilityProviderType">
            <summary>
            Gets the registered <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1">
            <summary>
            Provides a default base implementation for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> that splits
            policy override processing and WMI object generation for the section, performing appropriate logging of
            policy processing errors, from policy override processing and WMI object generation for configuration objects
            contained by the section.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1.#ctor(System.Collections.Generic.IDictionary{System.Type,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1"/> class with a 
            given set of manageability providers for the elements in the section's collections.
            </summary>
            <param name="subProviders">The mapping from configuration element type to
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,System.Configuration.ConfigurationSection,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the configuration
            information represented by a configuration section.
            </summary>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration section instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="applicationName">The key path for which the generated instructions' keys must be sub keys of.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the configuration
            information represented by a configuration section.
            </summary>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationSection">The configuration section instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="sectionKey">The root key for the section's policies.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1.OverrideWithGroupPoliciesAndGenerateWmiObjects(System.Configuration.ConfigurationSection,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,System.Boolean,System.Collections.Generic.ICollection{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting})">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s and its internal configuration elements' properties 
            with the Group Policy values from the registry, if any, and creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> 
            instances that describe the configuration.
            </summary>
            <param name="configurationObject">The configuration section that must be managed.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="generateWmiObjects"><see langword="true"/> if WMI objects must be generated; otherwise, 
            <see langword="false"/>.</param>
            <param name="wmiSettings">A collection to where the generated WMI objects are to be added.</param>
            <returns><see langword="true"/> if the policy settings do not disable the configuration section, otherwise
            <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException">when the type of <paramref name="configurationObject"/> is not 
            the type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1.OverrideWithGroupPoliciesForConfigurationSection(`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s properties with the Group Policy values from 
            the registry.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="policyKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationSection"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1.GenerateWmiObjectsForConfigurationSection(`0,System.Collections.Generic.ICollection{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting})">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> instances that describe the <paramref name="configurationSection"/>.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="wmiSettings">A collection to where the generated WMI objects are to be added.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1.OverrideWithGroupPoliciesAndGenerateWmiObjectsForConfigurationElements(`0,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,System.Boolean,System.Collections.Generic.ICollection{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting})">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s configuration elements' properties 
            with the Group Policy values from the registry, if any, and creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> 
            instances that describe these configuration elements.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="generateWmiObjects"><see langword="true"/> if WMI objects must be generated; otherwise, 
            <see langword="false"/>.</param>
            <param name="wmiSettings">A collection to where the generated WMI objects are to be added.</param>
            <remarks>Errors detected while processing policy overrides for the configuration elements in the section 
            must be logged but processing for other objects must not be interrupted.</remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1.SectionCategoryName">
            <summary>
            Gets the name of the category that represents the whole configuration section.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1.SectionName">
            <summary>
            Gets the name of the managed configuration section.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSettingChangedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSettingChangedEventArgs.SectionName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData">
            <summary>
            Represents the configuration settings that describe an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData"/> class with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData.#ctor(System.String,System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData"/> class.
            </summary>
            <param name="name">The name of the configuration element.</param>
            <param name="providerType">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> type.</param>
            <param name="targetType">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> type that is managed by the provider type.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData.TargetType">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> type that is managed by the provider type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationSectionManageabilityProviderData">
            <summary>
            Represents the configuration settings that describe an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationSectionManageabilityProviderData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationSectionManageabilityProviderData"/> class with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationSectionManageabilityProviderData.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData"/> class.
            </summary>
            <param name="sectionName">The name for the configuration section that is managed by the provider type.</param>
            <param name="providerType">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> type.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationSectionManageabilityProviderData.ManageabilityProviders">
            <summary>
            Gets the collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData"/> that represent
            the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> instances that the 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> instance represented by the receiver might require
            to provide manageability to configuration elements.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement">
            <summary>
            Represents the configuration settings that describe a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.MinimumApplicationNameLength">
            <summary>
            Represents the minimum application name length allowed.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.MaximumApplicationNameLength">
            <summary>
            Represents the maximumapplication name length allowed.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement"/> class with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement"/> class.
            </summary>
            <param name="name">The instance name.</param>
            <param name="filePath">The path to the configuration file.</param>
            <param name="applicationName">The name that identifies the application consuming the configuration information.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement"/> class.
            </summary>
            <param name="name">The instance name.</param>
            <param name="filePath">The path to the configuration file.</param>
            <param name="applicationName">The name that identifies the application consuming the configuration information.</param>
            <param name="enableGroupPolicies"><see langword="true"/> if Group Policy overrides must be appliedby the represented 
            configuration source; otherwise, <see langword="false"/>.</param>
            <param name="enableWmi"><see langword="true"/> if Wmi objects must be generated by the represented configuration 
            source; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.CreateSource">
            <summary>
            Returns a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource"/> configured with the receiver's settings.
            </summary>
            <returns>A new configuration source.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.FilePath">
            <summary>
            Gets or sets the file path.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.ApplicationName">
            <summary>
            Gets or sets the application. This is a required field.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.EnableWmi">
            <summary>
            Gets or sets the value for Wmi enablement.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.EnableGroupPolicies">
            <summary>
            Gets or sets the value for GP enablement.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.ConfigurationManageabilityProviders">
            <summary>
            Gets the collection of registered <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> types
            necessary to provide manageability by the represented configuration source.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1">
            <summary>
            Base class for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> implementations that provide manageability
            support for custom provider's configuration.
            </summary>
            <typeparam name="T">The custon provider's configuration element type.</typeparam>
            <remarks>
            The basic configuration for a custom provider includes the provider type and a collection of attributes.
            </remarks>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1.AttributesPropertyName">
            <summary>
            Name for the value holding the policy overrides for the custom provider's attributes.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1.ProviderTypePropertyName">
            <summary>
            Name for the value holding the policy overrides for the custom provider's type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1"/> class with a 
            policy name template.
            </summary>
            <param name="policyTemplate">The template to use when generating the policy associated to a custom provider
            configuration instance.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1.AddElementAdministrativeTemplateParts(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses that manage custom provider's configuration objects with additional properties may
            override this method to add the corresponding parts.
            </remarks>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1.GenerateAttributesString(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns a string with the encoded key/value pairs that represent the <paramref name="attributes"/> collection.
            </summary>
            <param name="attributes">The collection of attributes.</param>
            <returns>The encoded representation of the attributes collection.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1.OverrideWithGroupPolicies(`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses that manage custom provider's configuration objects with additional properties may
            override this method to override these properties.</remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1.ElementPolicyNameTemplate">
            <summary>
            Gets the template for the name of the policy associated to the object.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistration">
            <summary>
            Represents a group policy notification registration to watch group policy notifications.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistration.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistration"/> object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistration.Dispose">
            <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistration.MachinePolicyEvent">
            <summary>
            Gets the machine policy event.
            </summary>
            <value>
            An <see cref="T:System.Threading.AutoResetEvent"/> for the machine policy.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistration.UserPolicyEvent">
            <summary>
            Gets the user policy event.
            </summary>
            <value>
            An <see cref="T:System.Threading.AutoResetEvent"/> for the user policy.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistrationBuilder">
            <summary>
            Represents a builder for group policy notification registration.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistrationBuilder.CreateRegistration">
            <summary>
            Creates the registration.
            </summary>
            <returns>
            A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistration"/> object.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher">
            <summary>
            The policy watcher can be started and stopped many times. To deal with this, when a watcher thread is started
            it is given an 'exit' event that will be signaled when the thread needs to be stopped. Once the thread is started
            it own the exit event, and will release it when it terminates. More than one watching thread may be active at the
            same time, having different exit events, if the old watching thread doesn't get processing time before the new 
            thread is started; when the old thread gets to run it will consume the signaled exit event and finish.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IGroupPolicyWatcher">
            <summary>
            Defines a watcher for group policy.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IGroupPolicyWatcher.StartWatching">
            <summary>
            Starts watching group policy.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IGroupPolicyWatcher.StopWatching">
            <summary>
            Stops watching group policy.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IGroupPolicyWatcher.GroupPolicyUpdated">
            <summary>
            The event to update the policy.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistrationBuilder)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher"/> class with a registration builder.
            </summary>
            <param name="registrationBuilder">
            The builder used to create the registration for group policy.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher.Dispose">
            <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher.Finalize">
            <summary>
            Allows an <see cref="T:System.Object"></see> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object"></see> is reclaimed by garbage collection.
            </summary>\
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher.StartWatching">
            <summary>
            Starts watching group policy.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher.StopWatching">
            <summary>
            Stops watching group policy.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher.GroupPolicyUpdated">
            <summary>
            The event to update the policy.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyUpdateDelegate">
            <summary>
            The delegate used to update the group policy based on machine.
            </summary>
            <param name="machine">The machine where group policy is updated.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IManageabilityHelper">
            <summary>
            Defines a helper for managability configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IManageabilityHelper.UpdateConfigurationManageability(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IConfigurationAccessor)">
            <summary>
            Updates configuration management from the given configuration.
            </summary>
            <param name="configurationAccessor">
            The accessor for the configuration.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IManageabilityHelper.UpdateConfigurationSectionManageability(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IConfigurationAccessor,System.String)">
            <summary>
            Updates configuration management from the given configuration in the given section.
            </summary>
            <param name="configurationAccessor">
            The accessor for the configuration.
            </param>
            <param name="sectionName">
            The section to update.
            </param>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IManageabilityHelper.ConfigurationSettingChanged">
            <summary>
            The event that is notified when a configuration setting is changed.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey">
            <summary>
            Represents a key for manageability configuration implemenation.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey.ApplicationName">
            <summary>
            Gets or sets the application name.
            </summary>
            <value>
            The application name.
            </value>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey.EnableGroupPolicies">
            <summary>
            Gets or sets weather to enable group policies.
            </summary>
            <value>
            true to enable group policies; otherwise false.
            </value>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey.FileName">
            <summary>
            Gets or sets the configuration file name.
            </summary>
            <value>
            The configuration file name.
            </value>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey"/> struct.
            </summary>
            <param name="fileName">The configuraiton file name.</param>
            <param name="applicationName">The application name.</param>
            <param name="enableGroupPolicies">true to enable group policy; otherwise, false.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKeyComparer">
            <summary>
            A comparer for an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKeyComparer.Equals(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            
            <param name="y">The second object of type T to compare.</param>
            <param name="x">The first object of type T to compare.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKeyComparer.GetHashCode(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            
            <returns>
            A hash code for the specified object.
            </returns>
            
            <param name="obj">The <see cref="T:System.Object"></see> for which a hash code is to be returned.</param>
            <exception cref="T:System.ArgumentNullException">The type of obj is a reference type and obj is null.</exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Installer">
            <summary>
            Installer for the WMI objects defined in the assembly.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.CommonWmiInstaller">
            <summary>
            This member supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Provides the installer for the Core library, installing WMI Events and event log sources defined for this library.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.CommonWmiInstaller.#ctor">
            <summary>
            Initializes the installer.
            This member supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.CommonWmiInstaller.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.CommonWmiInstaller.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.CommonWmiInstaller.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider">
            <summary>
            Represents a instrumentation configuration section provider.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider.EventLoggingEnabledPropertyName">
            <summary>
            The name of the property to determine if event logging is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider.PerformanceCountersEnabledPropertyName">
            <summary>
            The name of the property to determine if performance counters is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider.WmiEnabledPropertyName">
            <summary>
            The name of the property to determine if wmi is enabled is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider.#ctor(System.Collections.Generic.IDictionary{System.Type,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider})">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider"/> class.
            </summary>
            <param name="subProviders">The sub providers.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the configuration
            information represented by a configuration section.
            </summary>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationSection">The configuration section instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="sectionKey">The root key for the section's policies.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider.GenerateWmiObjectsForConfigurationSection(Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection,System.Collections.Generic.ICollection{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting})">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> instances that describe the <paramref name="configurationSection"/>.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="wmiSettings">A collection to where the generated WMI objects are to be added.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider.OverrideWithGroupPoliciesAndGenerateWmiObjectsForConfigurationElements(Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,System.Boolean,System.Collections.Generic.ICollection{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting})">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s configuration elements' properties 
            with the Group Policy values from the registry, if any, and creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> 
            instances that describe these configuration elements.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="generateWmiObjects"><see langword="true"/> if WMI objects must be generated; otherwise, 
            <see langword="false"/>.</param>
            <param name="wmiSettings">A collection to where the generated WMI objects are to be added.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider.OverrideWithGroupPoliciesForConfigurationSection(Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s properties with the Group Policy values from 
            the registry.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="policyKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider.SectionCategoryName">
            <summary>
            Gets the name of the category that represents the whole configuration section.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider.SectionName">
            <summary>
            Gets the name of the managed configuration section.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IWmiPublisher">
            <summary>
            Provides a way to publish and revoke WMI objects.
            </summary>
            <remarks>
            This interface allows for unit testing without actually publishing the WMI objects.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IWmiPublisher.Publish(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting)">
            <summary>
            Makes an instance visible through management instrumentation.
            </summary>
            <param name="instance">The object that is to be visible through management instrumentation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IWmiPublisher.Revoke(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting)">
            <summary>
            Makes an instance that was previously published through the Publish method no longer visible 
            through management instrumentation. 
            </summary>
            <param name="instance">The object to remove from visibility for management instrumentation.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryAccessor">
            <summary>
            Provides access to the registry.
            </summary>
            <remarks>
            This interface allows for unit testing without requiring access to the machine's registry.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryAccessor.CurrentUser">
            <summary>
            Gets registry key HKCU.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryAccessor.LocalMachine">
            <summary>
            Gets registry key HKLM.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey">
            <summary>
            Provides access to a registry key sub keys and values.
            </summary>
            <remarks>
            This interface allows for unit testing without requiring access to the machine's registry.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.Close">
            <summary>
            Closes the registry key.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.GetBoolValue(System.String)">
            <summary>
            Gets the boolean value represented by the value for requested name in the registry key.
            </summary>
            <remarks>
            An integer value of 1 is considered <langword>true</langword>, any other 
            value is considered <langword>false</langword>.
            </remarks>
            <param name="valueName">The name of the value to get.</param>
            <returns>The boolean value for the requested name in the registry key.</returns>
            <exception cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not an integer representing a boolean.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.GetEnumValue``1(System.String)">
            <summary>
            Gets the enum value for the given name.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The enum value of type  <typeparamref name="T"/> represented by the value
            for the requested name in the registry key.</returns>
            <exception cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not an string, or it is a string value but it is not a 
            valid value name for enum type <typeparamref name="T"/>.</exception>
            <typeparam name="T">The enum type.</typeparam>
            <devdoc>
            FxCop message CA1004 is supressed because the T parameter is used to drive the
            type of the method return value, so it is not possible to provide a method
            parameter that enables generic parameter inference.
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.GetIntValue(System.String)">
            <summary>
            Gets the integer value for the given name.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The integer value for the requested name in the registry key.</returns>
            <exception cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not an integer.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.GetStringValue(System.String)">
            <summary>
            Gets the string value for the given name.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The string value for the requested name in the registry key.</returns>
            <exception cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not a string.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.GetTypeValue(System.String)">
            <summary>
            Gets the <see cref="T:System.Type"/> value for the given name.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The instance of <see cref="T:System.Type"/> represented by the value for
            the requested name in the registry key.</returns>
            <exception cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not an string, or it is a string value but it is not a 
            valid type name.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.GetValueNames">
            <summary>
            Gets the names for the values.
            </summary>
            <returns>The value names.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.OpenSubKey(System.String)">
            <summary>
            Gets the sub key for the given key name.
            </summary>
            <param name="name">The name fo the key to get.</param>
            <returns>The sub key with the requested name if it exists; otherwise <see langword="null"/>.
            </returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.IsPolicyKey">
            <summary>
            Gets the indication of whether the registry key represents a policy.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.Name">
            <summary>
            Gets the full name of the registry key.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairEncoder">
            <summary>
            Represents the logic to encode key/value pairs into a string of semicolon separated entries.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairEncoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairEncoder"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairEncoder.AppendKeyValuePair(System.String,System.String)">
            <summary>
            Adds a key/value pair to the encoded string being built.
            </summary>
            <param name="key">The key of the pair.</param>
            <param name="value">The value of the pair.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairEncoder.GetEncodedKeyValuePairs">
            <summary>
            Gets the encoded key/value pairs string built.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairEncoder.EncodeKeyValuePair(System.String,System.String)">
            <summary>
            Returns a string representing a single encoded key/value pair.
            </summary>
            <param name="key">The key of the pair.</param>
            <param name="value">The value of the pair.</param>
            <returns>The encoded key/value pair.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairEncoder.EncodeKeyValuePair(System.String,System.String,System.Boolean)">
            <summary>
            Returns a string representing a single encoded key/value pair with semicolons escaped if
            appropriate.
            </summary>
            <param name="key">The key of the pair.</param>
            <param name="value">The value of the pair.</param>
            <param name="escapeSemicolons"><see langword="true"/> if semicolons should be escaped;
            otherwise <see langword="false"/>.</param>
            <returns>The encoded key/value pair.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairParser">
            <summary>
            Helper class to extract a key/value pair collection from an encoded string of semicolon
            separated key/value pairs.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairEncoder"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairParser.ExtractKeyValueEntries(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Extracts the key/value pairs encoded in <paramref name="attributes"/>,
            adding them to <paramref name="attributesDictionary"/>.
            </summary>
            <param name="attributes">The string where the key/value pairs are encoded.</param>
            <param name="attributesDictionary">The dictionary where the extracted key/value pairs should be added.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairParser.DecodeKeyValuePair(System.String,System.String@,System.String@)">
            <summary>
            
            </summary>
            <param name="keyValue"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityExtensionsLogger">
            <summary>
            Provides logging services to the Enterprise Library Manageability Extensions.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityExtensionsLogger.LogExceptionWhileOverriding(System.Exception)">
            <summary>
            Logs an error detected while overriding a configuration object with policy values.
            </summary>
            <param name="exception">The exception representing the error.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityExtensionsLogger.LogException(System.Exception,System.String)">
            <summary>
            Logs an error.
            </summary>
            <param name="exception">The exception representing the error.</param>
            <param name="title">The title that describes the error.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper">
            <summary>
            Represents a manageability configuration helper.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper.#ctor(System.Collections.Generic.IDictionary{System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider},System.Boolean,System.Boolean,System.String)">
            <summary>
             Initialize a new instance of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper"/> class.
            </summary>
            <param name="manageabilityProviders">The manageability propvodiers.</param>
            <param name="readGroupPolicies">true to read group policies; otherwise, false.</param>
            <param name="generateWmiObjects">true to generate wmi objects; othrewise, false.</param>
            <param name="applicationName">The application name.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper.#ctor(System.Collections.Generic.IDictionary{System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider},System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryAccessor,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IWmiPublisher,System.String)">
            <summary>
             Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper"/> class.
            </summary>
            <param name="manageabilityProviders">The manageability providers.</param>
            <param name="readGroupPolicies">true to read group policies; otherwise, false.</param>
            <param name="registryAccessor">A registry accessor.</param>
            <param name="generateWmiObjects">true to generate wmi objects; othrewise, false.</param>
            <param name="wmiPublisher">The wmi publisher.</param>
            <param name="applicationName">The application name.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper.BuildSectionKeyName(System.String,System.String)">
            <summary>
            Builds the section key name.
            </summary>
            <param name="applicationName">
            The application name.
            </param>
            <param name="sectionName">
            The section name.
            </param>
            <returns>
            The section key name.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper.RevokeAll(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting})">
            <summary>
            Revoke all instances from WMI.
            </summary>
            <param name="instances">
            The instances to revoke.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper.UpdateConfigurationManageability(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IConfigurationAccessor)">
            <summary>
            Updates configuration management from the given configuration.
            </summary>
            <param name="configurationAccessor">
            The accessor for the configuration.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper.UpdateConfigurationSectionManageability(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IConfigurationAccessor,System.String)">
            <summary>
            Updates configuration management from the given configuration in the given section.
            </summary>
            <param name="configurationAccessor">
            The accessor for the configuration.
            </param>
            <param name="sectionName">
            The section to update.
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper.ManageabilityProviders">
            <summary>
            Gets the manageability providers.
            </summary>
            <value>
            The manageability providers.
            </value>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper.ConfigurationSettingChanged">
            <summary>
            The event that is notified when a configuration setting is changed.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource">
            <summary>
            Represents a configuration source that retrieves configuration information from an arbitrary file, overrides 
            the configuration information with values from the registry's group policy keys, and publishes WMI objects
            that represent the configuration information.
            </summary>
            <remarks>
            This configuration source uses a <see cref="T:System.Configuration.Configuration"/> object to deserialize configuration, so 
            the configuration file must be a valid .NET Framework configuration file.
            Multiple instances of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource"/> can be created with a given configuration; however 
            instances with the same configuration will share the same configuration objects, and WMI objects will be published 
            only once regardless of how many instances there are.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider},System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource"/> class.
            </summary>
            <param name="configurationFilePath">The configuration file path. The path can be absolute or relative.</param>
            <param name="manageabilityProviders">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> that will
            provide manageability for each configuration section.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="generateWmiObjects"><see langword="true"/> if WMI objects must be generated; otherwise, 
            <see langword="false"/>.</param>
            <param name="applicationName">The name of the running application. This name is used to look for policy overrides
            and to identify the published WMI objects.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource"/> class with the implementation.
            </summary>
            <param name="implementation">
            A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation"/> to use.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.Add(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration source location specified by 
            <paramref name="saveParameter"/> and saves the configuration source.
            </summary>
            <remarks>
            This operation is not implemented.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.AddSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Adds a handler to be called when changes to section <code>sectionName</code> are detected.
            This call should always be followed by a <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.RemoveSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)"/>. Failure to remove change
            handlers will result in .Net resource leaks.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.GetSection(System.String)">
            <summary>
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/>.
            </summary>
            <param name="sectionName">The name of the section to be retrieved.</param>
            <returns>The specified <see cref="T:System.Configuration.ConfigurationSection"/>, or <see langword="null"/>
            if a section by that name is not found.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.Remove(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String)">
            <summary>
            Removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration source location specified by 
            <paramref name="removeParameter"/> and saves the configuration source.
            </summary>
            <remarks>
            This operation is not implemented.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.RemoveSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Remove a handler to be called when changes to section <code>sectionName</code> are detected.
            This class should always follow a call to <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.AddSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)"/>. Failure
            to call these methods in pairs will result in .Net resource leaks.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.ResetAllImplementations">
            <summary>
            Public for testing purposes.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.Implementation">
            <summary>
            Gets the implementation for configuraiton source.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation">
            <summary>
            Representa a manageable configuration source (like group policy).
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation.#ctor(System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider},System.Boolean,System.Boolean,System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation"/> class.
            </summary>
            <param name="configurationFilePath">The path to the configuration file.</param>
            <param name="refresh">true to refresh configuration; otherwise, false.</param>
            <param name="manageabilityProviders">The providers used for managment.</param>
            <param name="readGroupPolicies">true to read group policy; otherwise, false.</param>
            <param name="generateWmiObjects">true to generate wmi objects; otherwise, false.</param>
            <param name="applicationName">The name of the application.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IManageabilityHelper,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IGroupPolicyWatcher,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeNotificationCoordinator)">
            <summary>
            Initialize a new instance o the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation"/> class.
            </summary>
            <param name="configurationFilePath">The configuration file path.</param>
            <param name="manageabilityHelper">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IManageabilityHelper"/> to use.</param>
            <param name="groupPolicyWatcher">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IGroupPolicyWatcher"/> to use.</param>
            <param name="watcherCoordinator">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator"/> to use.</param>
            <param name="notificationCoordinator">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeNotificationCoordinator"/> to use.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation.AddSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Adds a change handler for a section.
            </summary>
            <param name="sectionName">
            The section to add the handler.
            </param>
            <param name="handler">
            The handler to add.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation.Dispose">
            <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation.GetSection(System.String)">
            <summary>
             Get the configuration section.
            </summary>
            <param name="sectionName">The section name to get.</param>
            <returns>A <see cref="T:System.Configuration.ConfigurationSection"/> for the section name.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation.RemoveSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
             Removes a change handler from a section.
            </summary>
            <param name="sectionName">
             The section to remove the handler.
             </param>
            <param name="handler">
             The handler to remove.
             </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation.ManageabilityHelper">
            <summary>
            Gets the manageability helper for the source.
            </summary>
            <value>
            The manageability helper for the source.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceSingletonHelper">
            <summary>
            Manages the singleton <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation"/> instance for a given 
            file name, application name and group policy enablement combination.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceSingletonHelper.#ctor">
            <summary>
            Initialzie a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceSingletonHelper"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceSingletonHelper.#ctor(System.Boolean)">
            <summary>
            Initialize a new instace of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceSingletonHelper"/> class.
            </summary>
            <param name="refresh">
            true to support refreshing; otherwise, false.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceSingletonHelper.Dispose">
            <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceSingletonHelper.GetInstance(System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider},System.Boolean,System.Boolean,System.String)">
            <summary>
            Gets a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation"/> for a configuration.
            </summary>
            <param name="configurationFilePath">The path to a configuration file.</param>
            <param name="manageabilityProviders">The list of managment providers.</param>
            <param name="readGroupPolicies">true to read group policies; otherwise, false.</param>
            <param name="generateWmiObjects">true to generate wmi objects; otherwise, false.</param>
            <param name="applicationName">The name of the application.</param>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation"/> object.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ParseHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ParseHelper.ParseEnum``1(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="throwIfInvalid"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ParseHelper.TryParseEnum``1(System.String,``0@)">
            <summary>
            Attempt to parse a string into the given Enum type,
            returning whether conversion was successful.
            </summary>
            <typeparam name="T">Enum type to convert to.</typeparam>
            <param name="value">String to convert.</param>
            <param name="result">Converted result if successful.</param>
            <returns>true if conversion was successful, false if it failed.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ParseHelper.ParseType(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="throwIfInvalid"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ConfigurationElementNotInstrumentationConfigurationSection">
            <summary>
              Looks up a localized string similar to Expected an instance of InstrumentationConfigurationSection..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ConfigurationElementOfWrongType">
            <summary>
              Looks up a localized string similar to Expected and instance of &apos;{0}&apos; but got an instance of &apos;{1}&apos; instead..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.CustomProviderAttributesPartName">
            <summary>
              Looks up a localized string similar to Attributes.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.CustomProviderTypePartName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmBuildingNoCurrentCategory">
            <summary>
              Looks up a localized string similar to A started category is required to perform the operation..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmBuildingNoCurrentPolicy">
            <summary>
              Looks up a localized string similar to A started policy is required to perform the operation..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmBuildingPolicyNotFinished">
            <summary>
              Looks up a localized string similar to A policy construction is in process..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmBuildingProcessNotFinished">
            <summary>
              Looks up a localized string similar to The built content is requested but there are outstanding categories being built..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmDefaultValueAboveMaxValue">
            <summary>
              Looks up a localized string similar to The default value is above the max value for part &apos;{0}&apos; on policy &apos;{1}&apos;: {2} vs {3}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmDefaultValueBelowMinValue">
            <summary>
              Looks up a localized string similar to The default value is below the min value for part &apos;{0}&apos; on policy &apos;{1}&apos;: {2} vs {3}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmDefaultValueLongerThanMaxlen">
            <summary>
              Looks up a localized string similar to The default value for part &apos;{0}&apos; on policy &apos;{1}&apos; is longer than the max length {2}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmInvalidCharactersInRegistryKey">
            <summary>
              Looks up a localized string similar to Registry key path contains invalid characters or is missing parts: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmInvalidDefaultValue">
            <summary>
              Looks up a localized string similar to The default value is invalid: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmInvalidMaxlen">
            <summary>
              Looks up a localized string similar to The max len of {2} is invalid on part &apos;{0}&apos; for policy &apos;{1}&apos;. The allowed values are 0-1024..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmInvalidName">
            <summary>
              Looks up a localized string similar to String &apos;{0}&apos; is not a valid name on an ADM template..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmInvalidSuggestion">
            <summary>
              Looks up a localized string similar to The suggestion is invalid: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmMinValueLargerThanMaxValue">
            <summary>
              Looks up a localized string similar to Min value is larger than max value for part &apos;{0}&apos; on policy &apos;{1}&apos;: {2} vs {3}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmNumericConstraintOutsideRange">
            <summary>
              Looks up a localized string similar to The numeric constraint &apos;{2}&apos; for part &apos;{0}&apos; on policy &apos;{1}&apos; is outside the allowed range. The valued values are 0-999999999. .
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmRegistryKeyPathSegmentTooLong">
            <summary>
              Looks up a localized string similar to Path segment over 255 chars in length for registry key: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmRegistryValueNameTooLong">
            <summary>
              Looks up a localized string similar to Registry value name over 255 chars in length: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionApplicationNameTooLong">
            <summary>
              Looks up a localized string similar to The application name cannot be longer than 255 characters..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionArgumentEmpty">
            <summary>
              Looks up a localized string similar to The parameter is an empty string.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionCannotLockGroupPolicy">
            <summary>
              Looks up a localized string similar to Group policy processing could not be locked prior to reading the registry.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionConfigurationLoadFileNotFound">
            <summary>
              Looks up a localized string similar to The configuration file {0} could not be found..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionErrorOnCallbackForSectionUpdate">
            <summary>
              Looks up a localized string similar to Exception caught from callback for change on section &apos;{0}&apos; calling method &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionErrorWhileOverriding">
            <summary>
              Looks up a localized string similar to An error was detected while a configuration element&apos;s properties were being overriden with policy values..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionMissingRegistryValue">
            <summary>
              Looks up a localized string similar to There is no value with name &apos;{1}&apos; on key &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionRegistryValueNotEnumValue">
            <summary>
              Looks up a localized string similar to The value for &apos;{1}&apos; on key &apos;{0}&apos; is not a valid value name for enum type &apos;{2}&apos;: &apos;{3}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionRegistryValueNotTypeName">
            <summary>
              Looks up a localized string similar to The value for &apos;{1}&apos; on key &apos;{0}&apos; is not a valid assembly qualified type name: &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionRegistryValueOfWrongType">
             <summary>
               Looks up a localized string similar to The value for &apos;{1}&apos; on key &apos;{0}&apos; is not of the correct type:
            Expected {2} but got {3} instead..
             </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionStringNullOrEmpty">
            <summary>
              Looks up a localized string similar to The value can not be null or string or empty..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionUnexpectedErrorProcessingSection">
            <summary>
              Looks up a localized string similar to Unexpected error while processing section &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionUnexpectedType">
            <summary>
              Looks up a localized string similar to The expected type &apos;{0}&apos; was not provided..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionWmiImplementationAttributeNotFound">
            <summary>
              Looks up a localized string similar to No WmiImplementationAttribute was found for implementation &apos;{0}&apos; on type {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionWmiImplementationIncompatibleType">
            <summary>
              Looks up a localized string similar to The type specified in the WmiImplementationAttribute for implementation &apos;{0}&apos; on type {2} is incompatible with the requested type {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionWmiImplementationInvalidTypeName">
            <summary>
              Looks up a localized string similar to The type specified in the WmiImplementationAttribute for implementation &apos;{0}&apos; on type {1} is invalid or cannot be found..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.GroupPolicyWatcherThread">
            <summary>
              Looks up a localized string similar to Group policy notification thread.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.InstrumentationSectionCategoryName">
            <summary>
              Looks up a localized string similar to Instrumentation.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.InstrumentationSectionEventLoggingEnabledPartName">
            <summary>
              Looks up a localized string similar to Event logging enabled.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.InstrumentationSectionPerformanceCountersEnabledPartName">
            <summary>
              Looks up a localized string similar to Performance counters enabled.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.InstrumentationSectionPolicyName">
            <summary>
              Looks up a localized string similar to Specify settings for the instrumentation section.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.InstrumentationSectionWmiEnabledPartName">
            <summary>
              Looks up a localized string similar to WMI enabled.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ManageableConfigurationSourceName">
            <summary>
              Looks up a localized string similar to Manageable Configuration Source.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ManageableConfigurationSourceUpdateNotAvailable">
            <summary>
              Looks up a localized string similar to Updates to configuration through the ManageableConfigurationSource are not supported. Use the FileConfigurationSource instead..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.NoneListItem">
            <summary>
              Looks up a localized string similar to None.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">
            <summary>
            Represents an error that occurs while accessing the registry.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException"/> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The inner exception reference.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase">
            <summary>
            Provides access to a registry key sub keys and values.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.PolicyValueName">
            <summary>
            The name of the policy value.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.Close">
            <summary>
            Closes the registry key.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.DoGetValue(System.String)">
            <summary>
            Gets an actual value from the registry.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The value from the registry, or <see langword="null"/> if
            there is no such value.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.DoOpenSubKey(System.String)">
            <summary>
            Gets the sub key for the given key name.
            </summary>
            <param name="name">The name fo the key to get.</param>
            <returns>The sub key with the requested name if it exists; otherwise <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.GetBoolValue(System.String)">
            <summary>
            Gets the boolean value represented by the value for requested name in the registry key.
            </summary>
            <remarks>
            An integer value of 1 is considered <langword>true</langword>, any other 
            value is considered <langword>false</langword>.
            </remarks>
            <param name="valueName">The name of the value to get.</param>
            <returns>The boolean value for the requested name in the registry key.</returns>
            <exception cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not an integer representing a boolean.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.GetEnumValue``1(System.String)">
            <summary>
            Gets the enum value for the given name.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The enum value of type  <typeparamref name="T"/> represented by the value
            for the requested name in the registry key.</returns>
            <exception cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not an string, or it is a string value but it is not a 
            valid value name for enum type <typeparamref name="T"/>.</exception>
            <typeparam name="T">The enum type.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.GetIntValue(System.String)">
            <summary>
            Gets the integer value for the given name.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The integer value for the requested name in the registry key.</returns>
            <exception cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not an integer.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.GetStringValue(System.String)">
            <summary>
            Gets the string value for the given name.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The string value for the requested name in the registry key.</returns>
            <exception cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not a string.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.GetTypeValue(System.String)">
            <summary>
            Gets the <see cref="T:System.Type"/> value for the given name.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The instance of <see cref="T:System.Type"/> represented by the value for
            the requested name in the registry key.</returns>
            <exception cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not an string, or it is a string value but it is not a 
            valid type name.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.GetValueNames">
            <summary>
            Gets the names for the values.
            </summary>
            <returns>The value names.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.OpenSubKey(System.String)">
            <summary>
            Gets the sub key for the given key name.
            </summary>
            <param name="name">The name fo the key to get.</param>
            <returns>The sub key with the requested name if it exists; otherwise <see langword="null"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="name"/>is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="name"/>is not a valid name.</exception>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.IsPolicyKey">
            <summary>
            Gets the indication of whether the registry key represents a policy.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.Name">
            <summary>
            Gets the full name of the registry key.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageabilityProviderBuilder">
            <summary>
            Builder for manageability configuration providers.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageabilityProviderBuilder.CreateConfigurationElementManageabilityProvider(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData)">
            <summary>
            Create a manageability configuration provider.
            </summary>
            <param name="manageabilityProviderData">The provdier data.</param>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> object.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageabilityProviderBuilder.CreateConfigurationSectionManageabilityProvider(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationSectionManageabilityProviderData)">
            <summary>
            Create a manageability configuration provider.
            </summary>
            <param name="manageabilityProviderData">The provdier data.</param>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> object.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionSetting">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting">
            <summary>
            Represents a subset of a running application's configuration as an instrumentation instance class.
            </summary>
            <remarks>
            Class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> is the base of the hierarchy of classes that represent configuration
            information as WMI objects. It allows generic queries to be written to retrieve all the configuration 
            information published for a given application. Properties <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting.ApplicationName"/> and
            <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting.SectionName"/> provide a way to filter the required information to a single
            application or configuration section.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting.#ctor(System.Configuration.ConfigurationElement)">
            <summary>
            Initializes a new instance of class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/>
            </summary>
            <param name="sourceElement">The <see cref="T:System.Configuration.ConfigurationElement"/> the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> represents</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting.Publish">
            <summary>
            Makes the setting available for WMI clients.
            </summary>
            <remarks>Must be overridden by subclasses to perform the actual Publish.</remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting.Revoke">
            <summary>
            Makes the setting unavailable for WMI clients.
            </summary>
            <remarks>Must be overridden by subclasses to perform the actual Revoke.</remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting.Commit">
            <summary>
            Called by the WMI infrastructure when changes to properties on the setting have been posted.
            Changes the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting.SourceElement"/> and notifies of the changes.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting.SaveChanges(System.Configuration.ConfigurationElement)">
            <summary>
            Pushes the current property values to the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting.SourceElement"/>
            </summary>
            <remarks>Must be overridden by subclasses to perform the actual save.</remarks>
            <param name="sourceElement">The configuration object on which the changes must be saved.</param>
            <returns><see langword="true"/> if changes have been saved, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting.ApplicationName">
            <summary>
            Gets the name of the application to which the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> instance represents
            configuration information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting.SectionName">
            <summary>
            Gets the name of the section where the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> instance represented
            configuration information resides.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting.SourceElement">
            <summary>
            The <see cref="T:System.Configuration.ConfigurationElement"/> the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> represents
            </summary>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting.Changed">
            <summary>
            Ocurrs when a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> is changed.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionSetting.#ctor">
            <summary>
            Initializes a new instance of class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionSetting"/>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionSetting.#ctor(System.Configuration.ConfigurationElement)">
            <summary>
            Initializes a new instance of class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionSetting"/>
            </summary>
            <param name="sourceElement">The <see cref="T:System.Configuration.ConfigurationElement"/> the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionSetting"/> represents</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionSetting.Publish">
            <summary>
            Makes the setting available for WMI clients.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionSetting.Revoke">
            <summary>
            Makes the setting unavailable for WMI clients.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionSetting.ClearPublishedInstances">
            <summary>
            Clear collection of published instances.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionSetting.GetInstances``1">
            <summary>
            Returns an enumeration of the published <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionSetting"/> instances.
            </summary>
            <typeparam name="T">A valid <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionSetting"/> class.</typeparam>
            <returns><see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionSetting"/></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionSetting.BindInstance``1(System.String,System.String)">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionSetting"/> instance corresponding to the provided values for the key properties.
            </summary>
            <param name="applicationName">The value for the ApplicationName key property.</param>
            <param name="sectionName">The value for the SectionName key property.</param>
            <returns>The published <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionSetting"/> instance specified by the values for the key properties,
            or <see langword="null"/> if no such an instance is currently published.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionSetting.ApplicationName">
            <summary>
            Gets the name that identifies the represented configuration information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionSetting.SectionName">
            <summary>
            Get and set the application name.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomDataWmiMapperHelper">
            <summary>
            Custom WMI Mapper.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomDataWmiMapperHelper.GenerateAttributesArray(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Generates a string array filled with encoded kay/value pair.
            </summary>
            <param name="attributes"><see cref="T:System.Collections.Specialized.NameValueCollection"/> with attributes values.</param>
            <returns><see cref="T:System.Array"/></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomDataWmiMapperHelper.GenerateAttributesCollection(System.String[])">
            <summary>
            Creates a <see cref="T:System.Collections.Specialized.NameValueCollection"/> filled with provided attributes.
            </summary>
            <param name="attributes">Encoded key/value pair.</param>
            <returns><see cref="T:System.Collections.Specialized.NameValueCollection"/></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomDataWmiMapperHelper.UpdateAttributes(System.String[],System.Collections.Specialized.NameValueCollection)">
            <summary>
            Update the attributes array with the new values.
            </summary>
            <param name="encodedAttributes">Encoded key/value pair.</param>
            <param name="attributes">A <see cref="T:System.Collections.Specialized.NameValueCollection"/> with new attributes.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionWmiMapper">
            <summary>
             Represents a mapper for configuration to Wmi.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionWmiMapper.GenerateWmiObjects(Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection,System.Collections.Generic.ICollection{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting})">
            <summary>
            Generates Wmi objects for a configuration section.
            </summary>
            <param name="configurationObject">The configuraiton objects.</param>
            <param name="wmiSettings">The Wmi settings.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionWmiMapper.SaveChanges(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationSetting,System.Configuration.ConfigurationElement)">
            <summary>
            Save changes made to Wmi objects.
            </summary>
            <param name="instrumentationSetting">
            The instrumentaiton settings.
            </param>
            <param name="sourceElement">
            The element to save.
            </param>
            <returns>true if the changes were saved; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationSetting">
            <summary>
            Represents the configuration information for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection">Instrumentation</see>
            features provided by the Enterprise Library.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationSetting.#ctor(System.Configuration.ConfigurationElement,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationSetting"/> class.
            </summary>
            <param name="sourceElement">The configuraiton source element</param>
            <param name="eventLoggingEnabled">true if event logging is enabled;otherwise, false.</param>
            <param name="performanceCountersEnabled">true if performance counters are enabled; otherwise, false.</param>
            <param name="wmiEnabled">true if wmi is enabled; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationSetting.BindInstance(System.String,System.String)">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationSetting"/> instance corresponding to the provided values for the key properties.
            </summary>
            <param name="ApplicationName">The value for the ApplicationName key property.</param>
            <param name="SectionName">The value for the SectionName key property.</param>
            <returns>The published <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationSetting"/> instance specified by the values for the key properties,
            or <see langword="null"/> if no such an instance is currently published.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationSetting.GetInstances">
            <summary>
            Returns an enumeration of the published <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationSetting"/> instances.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationSetting.SaveChanges(System.Configuration.ConfigurationElement)">
            <summary>
            Saves the changes on the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationSetting"/> to its corresponding configuration object.
            </summary>
            <param name="sourceElement">The configuration object on which the changes must be saved.</param>
            <returns><see langword="true"/> if changes have been saved, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationSetting.EventLoggingEnabled">
            <summary>
            Gets the event logging enablement status on the represented instrumentation configuration.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationSetting.PerformanceCountersEnabled">
            <summary>
            Gets the performance counter enablement status on the represented instrumentation configuration.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationSetting.WmiEnabled">
            <summary>
            Gets the wmi enablement status on the represented instrumentation configuration.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManagementEntityTypesRegistrar">
            <summary>
            This class is used to work around some limitations in the InstrumentationManager handling
            of management types.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManagementEntityTypesRegistrar.SafelyRegisterTypes(System.Type[])">
            <summary>
            
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManagementEntityTypesRegistrar.SafelyUnregisterTypes(System.Type[])">
            <summary>
            
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManagementEntityTypesRegistrar.UnregisterAll">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.NamedConfigurationSetting">
            <summary>
            Represents a subset of a running application's configuration identifiable by name
            as an instrumentation instance class.
            </summary>
            <remarks>
            Class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.NamedConfigurationSetting"/> instances usually represent configuration information
            residing in instances of a subclass of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.NamedConfigurationSetting.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> class with 
            the given <paramref name="name"/>.
            </summary>
            <param name="name">The name that identifies the represented configuration information</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.NamedConfigurationSetting.#ctor(System.Configuration.ConfigurationElement,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> class with 
            the given <paramref name="name"/>.
            </summary>
            <param name="name">The name that identifies the represented configuration information</param>
            <param name="sourceElement"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.NamedConfigurationSetting.Publish">
            <summary>
            Makes the setting available for WMI clients.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.NamedConfigurationSetting.Revoke">
            <summary>
            Makes the setting unavailable for WMI clients.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.NamedConfigurationSetting.ClearPublishedInstances">
            <summary>
            Clear collection of published instances.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.NamedConfigurationSetting.GetInstances``1">
            <summary>
            Returns an enumeration of the published <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionSetting"/> instances.
            </summary>
            <typeparam name="T">A valid <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.NamedConfigurationSetting"/> class.</typeparam>
            <returns><see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.NamedConfigurationSetting"/></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.NamedConfigurationSetting.BindInstance``1(System.String,System.String,System.String)">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.NamedConfigurationSetting"/> instance corresponding to the provided values for the key properties.
            </summary>
            <param name="applicationName">The value for the ApplicationName key property.</param>
            <param name="sectionName">The value for the SectionName key property.</param>
            <param name="name">The value for the Name key property.</param>
            <returns>The published <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.NamedConfigurationSetting"/> instance specified by the values for the key properties,
            or <see langword="null"/> if no such an instance is currently published.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.NamedConfigurationSetting.Name">
            <summary>
            Gets the name that identifies the represented configuration information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.NamedConfigurationSetting.ApplicationName">
            <summary>
            Get and set the application name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.NamedConfigurationSetting.SectionName">
            <summary>
            Get and set the section name.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.PublishedInstancesManager`2">
            <summary>
             Manages publication of configuration settings.
            </summary>
            <typeparam name="TSetting">The settings base class that defines a key.</typeparam>
            <typeparam name="TKey">The publication key.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.PublishedInstancesManager`2.Publish(`0,`1)">
             <summary>
             Makes the setting available for WMI clients.
             </summary>
            <param name="setting">The setting to publish.</param>
            <param name="key">The key to use when publish the setting.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.PublishedInstancesManager`2.Revoke(`0,`1)">
             <summary>
             Makes the setting unavailable for WMI clients.
             </summary>
            <param name="setting">The setting to publish.</param>
            <param name="key">The key used to publish the setting.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.PublishedInstancesManager`2.ClearPublishedInstances">
            <summary>
            Clear collection of published instances.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.PublishedInstancesManager`2.GetInstances``1">
            <summary>
            Returns an enumeration of the published <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionSetting"/> instances.
            </summary>
            <typeparam name="T">A valid setting class.</typeparam>
            <returns>All the published instances for <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.PublishedInstancesManager`2.BindInstance``1(`1)">
            <summary>
            Returns the setting instance corresponding to the provided values for the key properties.
            </summary>
            <param name="key">The key to use for lookup.</param>
            <returns>The published setting instance specified by the values for the key properties,
            or <see langword="null"/> if no such an instance is currently published.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1">
            <summary>
            Represents a collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> objects.
            </summary>
            <typeparam name="T">A newable object that inherits from <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/>.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the collection.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.Get(System.Int32)">
            <summary>
            Gets the configuration element at the specified index location. 
            </summary>
            <param name="index">The index location of the <see name="T"/> to return. </param>
            <returns>The <see name="T"/> at the specified index. </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.Add(`0)">
            <summary>
            Add an instance of <typeparamref name="T"/> to the collection.
            </summary>
            <param name="element">An instance of <typeparamref name="T"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.Get(System.String)">
            <summary>
            Gets the named instance of <typeparamref name="T"/> from the collection.
            </summary>
            <param name="name">The name of the <typeparamref name="T"/> instance to retrieve.</param>
            <returns>The instance of <typeparamref name="T"/> with the specified key; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.Contains(System.String)">
            <summary>
            Determines if the name exists in the collection.
            </summary>
            <param name="name">The name to search.</param>
            <returns><see langword="true"/> if the name is contained in the collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.Remove(System.String)">
            <summary>
            Remove the named element from the collection.
            </summary>
            <param name="name">The name of the element to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.Clear">
            <summary>
            Clear the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection. 
            </summary>
            <returns>An enumerator that iterates through the collection.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.CreateNewElement">
            <summary>
            Creates a new instance of a <typeparamref name="T"/> object.
            </summary>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class. 
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. </param>
            <returns>An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElementCollection`2">
            <summary>
            Represesnts a collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> objects.
            </summary>
            <typeparam name="T">The type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> object this collection contains.</typeparam>
            <typeparam name="TCustomElementData">The type used for Custom configuration elements in this collection.</typeparam>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1">
            <summary>
            Represents the base class from which all implementations of polymorphic configuration collections must derive. 
            </summary>
            <typeparam name="T">The type contained in the collection.</typeparam>	
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1.Reset(System.Configuration.ConfigurationElement)">
            <summary>
            Resets the internal state of the <see cref="T:System.Configuration.ConfigurationElement"/> object, including the locks and the properties collections.
            </summary>
            <param name="parentElement">The parent node of the configuration element.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            Called when an unknown element is encountered while deserializing the <see cref="T:System.Configuration.ConfigurationElement"/> object.
            </summary>
            <param name="elementName">The name of the element.</param>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> used to deserialize the element.</param>
            <returns><see langword="true"/> if the element was handled; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1.RetrieveConfigurationElementType(System.Xml.XmlReader)">
            <summary>
            When overriden in a class, get the configuration object for each <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> object in the collection.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> that is deserializing the element.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1.CreateNewElement">
            <summary>
            Creates a new <see cref="T:System.Configuration.ConfigurationElement"/>. 
            </summary>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1.CreateNewElement(System.String)">
            <summary>
            Creates a new named <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <param name="elementName">The name of the element to create.</param>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Reverses the effect of merging configuration information from different levels of the configuration hierarchy.
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">The parent <see cref="T:System.Configuration.ConfigurationElement"/> object of the current element, or a <see langword="null"/> reference (Nothing in Visual Basic) if this is the top level.</param>		
            <param name="saveMode">One of the <see cref="T:System.Configuration.ConfigurationSaveMode"/> values.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElementCollection`2.RetrieveConfigurationElementType(System.Xml.XmlReader)">
            <summary>
            Get the configuration object for each <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> object in the collection.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> that is deserializing the element.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource">
            <summary>
            Represents a null configuration source that always returns null for a section.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource.GetSection(System.String)">
            <summary>
            Returns null for the section.
            </summary>
            <param name="sectionName">The section name to retrieve.</param>
            <returns>Always <see langword="null"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource.Add(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Null implementation of <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Add(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String,System.Configuration.ConfigurationSection)"/> that 
            ignores the request.
            </summary>
            <param name="saveParameter">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter"/> that represents the location where 
            to save the updated configuration.</param>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource.Remove(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String)">
            <summary>
            Null implementation of <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Remove(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String)"/> that 
            ignores the request.
            </summary>
            <param name="removeParameter">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter"/> that represents the location where 
            to save the updated configuration.</param>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource.AddSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Adds a handler to be called when changes to section <code>sectionName</code> are detected.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource.RemoveSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Remove a handler to be called when changes to section <code>sectionName</code> are detected.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerAttribute">
            <summary>
            Specifies what assembler type to use to build a concrete type in a polymorphic provider hierarchy for the type described by 
            the configuration object this attribute is bound to. This class cannot be inherited.
            The specified type must implement the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IAssembler`2"/> interface.
            </summary>
            <remarks>
            The attribute is used on configuration objects to specify the build process create a provider based on the information 
            in the configuration object.
            The attribute is used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerBasedCustomFactory`2"/> implementation of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ICustomFactory"/> interface,
            that provides a generic way to build polymorphic providers.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerAttribute"/> class.
            </summary>
            <param name="assemblerType">The type that implements the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IAssembler`2"/> interface.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerAttribute.AssemblerType">
            <summary>
            Returns the assembler type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerBasedCustomFactory`2">
            <summary>
            Represents a generic process to build objects of a polymorphic hierarchy based on a single configuration object.
            </summary>
            <remarks>
            This custom factory will rely assemblers to do the actual building out for a concrete type. Assemblers are implementations of the 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IAssembler`2"/> interface. Concrete configuration objects must have an 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerAttribute">Assembler</see> attribute to allow the factory to determine how the configuration should be interpreted.
            </remarks>
            <typeparam name="TObject">The interface or the base type to build.</typeparam>
            <typeparam name="TConfiguration">The base configuration object type.</typeparam>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerBasedObjectFactory`2">
            <summary>
            Represents a generic process to build objects of a polymorphic hierarchy based on a single configuration object.
            </summary>
            <remarks>
            This custom factory will rely assemblers to do the actual building out for a concrete type. Assemblers are implementations of the 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IAssembler`2"/> interface. Concrete configuration objects must have an 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerAttribute">Assembler</see> attribute to allow the factory to determine how the configuration should be interpreted.
            </remarks>
            <typeparam name="TObject">The interface or the base type to build.</typeparam>
            <typeparam name="TConfiguration">The base configuration object type.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerBasedObjectFactory`2.Create(Microsoft.Practices.ObjectBuilder2.IBuilderContext,`1,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Returns a new instance of a concrete subtype of <typeparamref name="TObject"/>, described by the matching configuration object 
            of a concrete subtype of <typeparamref name="TConfiguration"/> in <paramref name="objectConfiguration"/>.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext"/> that represents the current building process.</param>
            <param name="objectConfiguration">The configuration object that describes the object to build.</param>
            <param name="configurationSource">The source for configuration objects.</param>
            <param name="reflectionCache">The cache to use retrieving reflection information.</param>
            <returns>A new instance of the appropriate subtype of <typeparamref name="Tobject"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ICustomFactory">
            <summary>
            Represents the process to build instances of a type.
            </summary>
            <remarks>
            Custom factories are used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfiguredObjectStrategy"/> strategy to create Enterprise Library objects.
            Usually factories will query a configuration source for the configuration objects that describe the requested object, 
            and will perform the necessary conversions on the configuration information to create an instance of the type.
            The objects the factory can build can be part of a hierarchy. Type <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerBasedCustomFactory`2"/> provides 
            a generic implementation of a factory that builds polymorphic hierarchies.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfiguredObjectStrategy"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.CustomFactoryAttribute"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerBasedCustomFactory`2"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ICustomFactory.CreateObject(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            Returns an new instance of the type the receiver knows how to build.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext"/> that represents the current building process.</param>
            <param name="name">The name of the instance to build, or null.</param>
            <param name="configurationSource">The source for configuration objects.</param>
            <param name="reflectionCache">The cache to use retrieving reflection information.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerBasedCustomFactory`2.Create(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Returns a new instance of a concrete subtype of <typeparamref name="TObject"/>, described by the matching configuration object 
            of a concrete subtype of <typeparamref name="TConfiguration"/> found in the <paramref name="configurationSource"/> under 
            the name <paramref name="name"/>.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext"/> that represents the current building process.</param>
            <param name="name">The name of the instance to build, or null.</param>
            <param name="configurationSource">The source for configuration objects.</param>
            <param name="reflectionCache">The cache to use retrieving reflection information.</param>
            <returns>A new instance of the appropriate subtype of <typeparamref name="Tobject"/>.</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">when the configuration is invalid or <paramref name="name"/> cannot be found.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerBasedCustomFactory`2.CreateObject(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Returns a new instance of a concrete subtype of <typeparamref name="TObject"/>, described by the matching configuration object 
            of a concrete subtype of <typeparamref name="TConfiguration"/> found in the <paramref name="configurationSource"/> under 
            the name <paramref name="name"/>.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext"/> that represents the current building process.</param>
            <param name="name">The name of the instance to build, or null.</param>
            <param name="configurationSource">The source for configuration objects.</param>
            <param name="reflectionCache">The cache to use retrieving reflection information.</param>
            <returns>A new instance of the appropriate subtype of <typeparamref name="Tobject"/>.</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">when the configuration is invalid or <paramref name="name"/> cannot be found.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerBasedCustomFactory`2.GetConfiguration(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Returns the configuration object that represents the named <typeparamref name="TObject"/> instance in the configuration source.
            </summary>
            <param name="name">The name of the required instance.</param>
            <param name="configurationSource">The configuration source where to look for the configuration object.</param>
            <returns>The configuration object that represents the instance.</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">when the configuration is invalid or <paramref name="name"/> cannot be found.</exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache">
            <summary>
            Caches reflection information used by the building process.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache.GetCustomAttribute``1(System.Type)">
            <summary>
            Returns the attribute of type <typeparamref name="TAttribute"/> applied the given type.
            </summary>
            <remarks>
            The attribute will be retrieved from the cache, if it has been requested before.
            The query will not look for inherited attributes.
            </remarks>
            <typeparam name="TAttribute">The type of attribute required.</typeparam>
            <param name="type">The type to query for the attribute.</param>
            <returns>The attribute, or null if the attribute type is not applied to <paramref name="type"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache.HasCachedCustomAttribute``1(System.Type)">
            <summary>
            Returns true if there is a cached entry for the attribute type for the given type
            </summary>
            <remarks>
            A null cached entry will return true.
            </remarks>
            <typeparam name="TAttribute">The type of attribute required.</typeparam>
            <param name="type">The type to query for the attribute.</param>
            <returns>true if the result for the attribute query is in the cache.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache.GetCustomAttribute``1(System.Type,System.Boolean)">
            <summary>
            Returns the attribute of type <typeparamref name="TAttribute"/> applied the given type.
            </summary>
            <remarks>
            The attribute will be retrieved from the cache, if it has been requested before.
            </remarks>
            <typeparam name="TAttribute">The type of attribute required.</typeparam>
            <param name="type">The type to query for the attribute.</param>
            <param name="inherit">Specifies whether to search the inheritance chain of the type to find the attributes.</param>
            <returns>The attribute, or null if the attribute type is not applied to <paramref name="type"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache.GetCustomFactory(System.Type)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Returns the custom factory associated to <paramref name="type"/>.
            </summary>
            <param name="type">The type to query for the custom factory.</param>
            <returns>The custom factory for <paramref name="type"/>, or null if the type does not have an 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerAttribute">Assembler</see> attribute.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache.GetConfigurationNameMapper(System.Type)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Returns the name mapper associated to <paramref name="type"/>.
            </summary>
            <param name="type">The type to query for the name mapper.</param>
            <returns>The name mapper for <paramref name="type"/>, or null if the type does not have a 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameMapperAttribute">ConfigurationNameMapper</see> attribute.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.CustomProviderAssembler`3">
            <summary>
            Represents the process to build a custom provider for type <typeparamref name="TObject"/> described by an instance of <typeparamref name="TConcreteConfiguration"/> configuration object.
            </summary>
            <typeparam name="TObject">The abstract provider type.</typeparam>
            <typeparam name="TConfiguration">The base configuration type for providers of type <typeparamref name="TObject"/>.</typeparam>
            <typeparam name="TConcreteConfiguration">The concrete configuration type for custom providers of type <typeparamref name="TObject"/>.</typeparam>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IAssembler`2">
            <summary>
            Represents the process to build an instance of a specific subtype of <typeparamref name="TObject"/> described by a 
            matching specific subtype of <typeparamref name="TConfiguration"/>.
            </summary>
            <typeparam name="TObject">The interface or the base type to build.</typeparam>
            <typeparam name="TConfiguration">The base configuration object type.</typeparam>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerBasedCustomFactory`2"/>.
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IAssembler`2.Assemble(Microsoft.Practices.ObjectBuilder2.IBuilderContext,`1,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            Builds an instance of the subtype of <typeparamref name="TObject"/> type the receiver knows how to build,  based on 
            an a configuration object.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext"/> that represents the current building process.</param>
            <param name="objectConfiguration">The configuration object that describes the object to build.</param>
            <param name="configurationSource">The source for configuration objects.</param>
            <param name="reflectionCache">The cache to use retrieving reflection information.</param>
            <returns>A fully initialized instance of the <typeparamref name="TObject"/> subtype.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.CustomProviderAssembler`3.Assemble(Microsoft.Practices.ObjectBuilder2.IBuilderContext,`1,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Builds a custom provider for type <typeparamref name="TObject"/> based on an instance of <typeparamref name="TConcreteConfiguration"/>.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext"/> that represents the current building process.</param>
            <param name="objectConfiguration">The configuration object that describes the object to build. Must be an instance of <typeparamref name="TConcreteConfiguration"/>.</param>
            <param name="configurationSource">The source for configuration objects.</param>
            <param name="reflectionCache">The cache to use retrieving reflection information.</param>
            <returns>A fully initialized custom provider for type <typeparamref name="TObject"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.CustomFactoryAttribute">
            <summary>
            Specifies what type to use to build instances of the type this attribute is bound to. This class cannot be inherited.
            </summary>
            <remarks>
            This attribute is used when building objects through ObjectBuilder. The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfiguredObjectStrategy"/> will query 
            the requested type for this attribute, and will use an instance of the specified factory type to build the requested instance.
            The specified type must implement the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ICustomFactory"/> interface.
            The attribute needs to be bound only to the types that will be requested to ObjectBuilder; 
            it is not necessary to bind the attribute to subclasses or implementations of interfaces.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ICustomFactory"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfiguredObjectStrategy"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryFactory"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.CustomFactoryAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.CustomFactoryAttribute"/> class with a factory type.
            </summary>
            <param name="factoryType">The factory type. Must implement <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ICustomFactory"/>.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.CustomFactoryAttribute.FactoryType">
            <summary>
            Gets the factory type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ExplicitInstrumentationAttacher">
            <summary>
            Binds properly attributed events in source object to properly attributed handler methods in
            listener object using an explicit binding object.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IInstrumentationAttacher">
            <summary>
            Responsible for binding attributed events in a source object to attributed handler methods in 
            a listener object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IInstrumentationAttacher.BindInstrumentation">
            <summary>
            Binds events from source object to appropriate handler methods in listener object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ExplicitInstrumentationAttacher.#ctor(System.Object,System.Type,System.Object[],System.Type)">
            <summary>
            Initializes this object as needed to allow it to explicitly bind together events and handlers
            from source and listener objects.
            </summary>
            <param name="source">Source object containing events to be bound.</param>
            <param name="listenerType">Type of listener object to instantiate. Contains handler methods to be bound to.</param>
            <param name="listenerConstructorArguments">Constructor arguments used to instantiate object referred to by <see paramref="listenerType"></see>.</param>
            <param name="explicitBinderType">Type to be used in explicitly binding events to handlers.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ExplicitInstrumentationAttacher.BindInstrumentation">
            <summary>
            Binds events to handling methods.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.LocatorLookupStrategy">
            <summary>
            A small class that looks for the currently requested
            object in the locator, and if found, returns it,
            short circuiting the rest of the chain.
            </summary>
            <remarks>This is essentially the same as the
            old OB1 SingletonStrategy. Note that this
            strategy doesn't actually put anything in the
            locator, which is part of why the name changed.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.LocatorLookupStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Execute the pre-buildup operation. For this strategy,
            this means looking up the current build key in the locator.
            If found, abort the build.
            </summary>
            <param name="context">Current <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.LocatorLookupStrategy.PostBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
                        Called during the chain of responsibility for a build operation. The
                        PostBuildUp method is called when the chain has finished the PreBuildUp
                        phase and executes in reverse order from the PreBuildUp calls.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ReflectionInstrumentationAttacher">
            <summary>
            Binds properly attributed events in source object to properly attributed handler methods in
            listener object using reflection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ReflectionInstrumentationAttacher.#ctor(System.Object,System.Type,System.Object[])">
            <summary>
            Initializes this object as needed to allow it to explicitly bind together events and handlers
            from source and listener objects.
            </summary>
            <param name="source">Source object containing events to be bound.</param>
            <param name="listenerType">Type of listener object to instantiate. Contains handler methods to be bound to.</param>
            <param name="listenerConstructorArgs">Constructor arguments used to instantiate object referred to by <see paramref="listenerType"></see>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ReflectionInstrumentationAttacher.BindInstrumentation">
            <summary>
            Binds events to handling methods.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.InstrumentationAttacherFactory">
            <summary>
            Represents a factor to attach instrumentation objects.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.InstrumentationAttacherFactory.CreateBinder(System.Object,System.Object[],Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            Create the binder for instrumentation.
            </summary>
            <param name="createdObject">The created object for the attacher.</param>
            <param name="constructorArgs">The construcor objects.</param>
            <param name="reflectionCache">The relection cache.</param>
            <returns>An <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IInstrumentationAttacher"/> object.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.NoBindingInstrumentationAttacher">
            <summary>
            Instrumentation binder that does nothing. Implementation of Null Object Pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.NoBindingInstrumentationAttacher.BindInstrumentation">
            <summary>
            Null implementation of interface contract method. Does no binding.
            On purpose. Really... Look up NullObject pattern for justification.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.LocatorNameTypeFactoryBase`1">
            <summary>
            Base class for instance factories that require a locator to provide singletons.
            </summary>
            <remarks>
            This class is used to create instances of types compatible with <typeparamref name="T"/> described 
            by a configuration source.
            The use of a <see cref="T:Microsoft.Practices.ObjectBuilder2.IReadWriteLocator"/> enables singletons for the types that support them.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.LocatorNameTypeFactoryBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.LocatorNameTypeFactoryBase`1"/> class with the default configuration source
            and a locator.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.LocatorNameTypeFactoryBase`1.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.LocatorNameTypeFactoryBase`1"/> class with a configuration source 
            and a locator.
            </summary>
            <param name="configurationSource">The configuration source to use.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.LocatorNameTypeFactoryBase`1.CreateDefault">
            <summary>
            Returns an instance of <typeparamref name="T"/> based on the default instance configuration.
            </summary>
            <returns>
            A new instance of <typeparamref name="T"/>, or the singleton instance if <typeparamref name="T"/> allows singletons.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.LocatorNameTypeFactoryBase`1.Create(System.String)">
            <summary>
            Returns an new instance of <typeparamref name="T"/> based on the configuration for <paramref name="name"/>.
            </summary>
            <param name="name">The name of the required instance.</param>
            <returns>
            A new instance of <typeparamref name="T"/>, or the singleton instance if <typeparamref name="T"/> allows singletons.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryFactory">
            <summary>
            Static facade for the generic building mechanism based on ObjectBuilder.
            </summary>
            <remarks>
            The facade uses a shared stateless <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilder"/> instance configured with the strategies 
            that perform the creation of objects in the Enterprise Library.
            <para>
            The strategies used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryFactory"/> are:
            <list type="bullet">
            <item><term><see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameMappingStrategy"/> to deal with default instances.</term></item>
            <item><term><see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfiguredObjectStrategy"/> to perform the actual creation of the objects based on the available configuration.</term></item>
            <item><term><see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.InstrumentationStrategy"/> to attach instrumentation to the created objects.</term></item>
            </list>
            </para>
            <para>
            The creation request can provide an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> to be used by the strategies that need access to 
            configuration. If such a configuration source is not provided, a default configuration source will be requested 
            to the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceFactory"/>.
            In any case, the configuration source is made available to the strategies through a transient <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IConfigurationObjectPolicy"/>.
            </para>
            <para>
            The facade keeps a shared <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache"/> that is made available to the strategies through a transient 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IReflectionCachePolicy"/>.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfiguredObjectStrategy"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryFactory.BuildUp``1">
            <overloads>
            Returns an instance of type <typeparamref name="T"/>.
            </overloads>
            <summary>
            Returns a new default instance of type <typeparamref name="T"/> based on configuration information 
            from the default configuration source.
            </summary>
            <typeparam name="T">The type to build.</typeparam>
            <returns>A new instance of <typeparamref name="T"/> or any of it subtypes.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryFactory.BuildUp``1(Microsoft.Practices.ObjectBuilder2.IReadWriteLocator,Microsoft.Practices.ObjectBuilder2.ILifetimeContainer)">
            <summary>
            Returns a default instance of type <typeparamref name="T"/> based on configuration information 
            from the default configuration source.
            </summary>
            <typeparam name="T">The type to build.</typeparam>
            <param name="locator">The locator to be used for this build operation.</param>
            <param name="lifetimeContainer">The lifetime container to be used for this build operation.</param>
            <returns>A new instance of <typeparamref name="T"/> or any of it subtypes, or an existing instance
            if type <typeparamref name="T"/> is a singleton that is already present in the <paramref name="locator"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryFactory.BuildUp``1(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Returns a new default instance of type <typeparamref name="T"/> based on configuration information 
            from <paramref name="configurationSource"/>.
            </summary>
            <typeparam name="T">The type to build.</typeparam>
            <param name="configurationSource">The source for configuration information.</param>
            <returns>A new instance of <typeparamref name="T"/> or any of it subtypes.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryFactory.BuildUp``1(Microsoft.Practices.ObjectBuilder2.IReadWriteLocator,Microsoft.Practices.ObjectBuilder2.ILifetimeContainer,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Returns a default instance of type <typeparamref name="T"/> based on configuration information 
            from <paramref name="configurationSource"/>.
            </summary>
            <typeparam name="T">The type to build.</typeparam>
            <param name="locator">The locator to be used for this build operation.</param>
            <param name="lifetimeContainer">The lifetime container to be used for this build operation.</param>
            <param name="configurationSource">The source for configuration information.</param>
            <returns>A new instance of <typeparamref name="T"/> or any of it subtypes, or an existing instance
            if type <typeparamref name="T"/> is a singleton that is already present in the <paramref name="locator"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryFactory.BuildUp``1(System.String)">
            <summary>
            Returns a new default instance of type <typeparamref name="T"/> based on configuration information 
            from the default configuration source for <paramref name="id"/>.
            </summary>
            <typeparam name="T">The type to build.</typeparam>
            <param name="id">The id of the object to build.</param>
            <returns>A new instance of <typeparamref name="T"/> or any of it subtypes.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryFactory.BuildUp``1(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Returns a new default instance of type <typeparamref name="T"/> based on configuration information 
            from <paramref name="configurationSource"/> for <paramref name="id"/>.
            </summary>
            <typeparam name="T">The type to build.</typeparam>
            <param name="id">The id of the object to build.</param>
            <param name="configurationSource">The source for configuration information.</param>
            <returns>A new instance of <typeparamref name="T"/> or any of it subtypes.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryFactory.BuildUp``1(Microsoft.Practices.ObjectBuilder2.IReadWriteLocator,Microsoft.Practices.ObjectBuilder2.ILifetimeContainer,System.String)">
            <summary>
            Returns a default instance of type <typeparamref name="T"/> based on configuration information 
            from the default configuration source for <paramref name="id"/>.
            </summary>
            <typeparam name="T">The type to build.</typeparam>
            <param name="lifetimeContainer">The lifetime container to be used for this build operation.</param>
            <param name="id">The id of the object to build.</param>
            <param name="locator">The locator to be used for this build operation.</param>
            <returns>A new instance of <typeparamref name="T"/> or any of it subtypes, or an existing instance
            if type <typeparamref name="T"/> is a singleton that is already present in the <paramref name="locator"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryFactory.BuildUp``1(Microsoft.Practices.ObjectBuilder2.IReadWriteLocator,Microsoft.Practices.ObjectBuilder2.ILifetimeContainer,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Returns a default instance of type <typeparamref name="T"/> based on configuration information 
            from <paramref name="configurationSource"/> for <paramref name="id"/>.
            </summary>
            <typeparam name="T">The type to build.</typeparam>
            <param name="id">The id of the object to build.</param>
            <param name="locator">The locator to be used for this build operation.</param>
            <param name="lifetimeContainer">The lifetime container to be used for this build operation.</param>
            <param name="configurationSource">The source for configuration information.</param>
            <returns>A new instance of <typeparamref name="T"/> or any of it subtypes, or an existing instance
            if type <typeparamref name="T"/> is a singleton that is already present in the <paramref name="locator"/>.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameMapperAttribute">
            <summary>
            Specifies what type to use to map instance names for the type this attribute is bound to. This class cannot be inherited.
            </summary>
            <remarks>
            This attribute is used when building objects through ObjectBuilder. The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameMappingStrategy"/> will query 
            the requested type for this attribute, and will use an instance of the specified mapper type to map the instance name when necessary.
            The specified type must implement the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IConfigurationNameMapper"/> interface.
            The attribute needs to be bound only to the types that will be requested to ObjectBuilder that might need instance name mappings; 
            it is not necessary to bind the attribute to subclasses or implementations of interfaces.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IConfigurationNameMapper"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameMappingStrategy"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryFactory"/>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameMapperAttribute.NameMappingObjectType">
            <summary>
            The mapper type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameMapperAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameMapperAttribute"/> class with a mapper type.
            </summary>
            <param name="nameMappingObjectType">The mapper type. Must implement <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IConfigurationNameMapper"/>.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameMappingStrategy">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderStrategy"/> which maps null instance names into a different name.
            </summary>
            <remarks>
            The strategy is used to deal with default names.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameMapperAttribute"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IConfigurationNameMapper"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryBuilderStrategy">
            <summary>
            This type supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Base class for custom strategies used with ObjectBuilder. Provides methods to retrieve useful information from the context.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryBuilderStrategy.GetConfigurationSource(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> instance from the context.
            </summary>
            <param name="context">The build context.</param>
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> in the context, or a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/> 
            if there is no such source in the context.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryBuilderStrategy.GetReflectionCache(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache"/> instance from the context.
            </summary>
            <param name="context">The build context.</param>
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache"/> in the context, or a new instance
            if there is no such cache in the context.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameMappingStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Override of <see cref="M:Microsoft.Practices.ObjectBuilder2.IBuilderStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)"/>. Updates the instance name using a name mapper associated to type 
            to build so later strategies in the build chain will use the updated instance name.
            </summary>
            <remarks>
            Will only update the instance name if it is <see langword="null"/>.
            </remarks>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext"/> that represents the current building process.</param>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"> when the configuration required to do the mapping is not present or is 
            invalid in the configuration source.</exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameProvider">
            <summary>
            Manages the creation of names for anonymous instances.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameProvider.MakeUpName">
            <summary>
            Creates a new name.
            </summary>
            <returns>The created name.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameProvider.IsMadeUpName(System.String)">
            <summary>
            Tests a name to determine if it has been created.
            </summary>
            <param name="name">The name to test.</param>
            <returns><b>true</b> if the name was made up.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationObjectPolicy">
            <summary>
            A configuration object policy that holds a reference to an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IConfigurationObjectPolicy">
            <summary>
            Represents a policy that will provide an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            </summary>
            <remarks>
            This policy will be used by strategies that need to access a configuration source.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IConfigurationObjectPolicy.ConfigurationSource">
            <summary>
            Gets the configuration source.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationObjectPolicy.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationObjectPolicy"/> class with a configuration source.
            </summary>
            <param name="configurationSource">The configuration source.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationObjectPolicy.ConfigurationSource">
            <summary>
            Gets the configuration source.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfiguredObjectStrategy">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderStrategy"/> which creates objects.
            </summary>
            <remarks>
            <para>The strategy looks for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.CustomFactoryAttribute">CustomFactory</see> attribute to 
            retrieve the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ICustomFactory"/> implementation needed to build the requested types based on 
            configuration.</para>
            <para>The provided context must have a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationObjectPolicy"/> holding a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>
            where to request the configuration information.</para>
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ICustomFactory"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.CustomFactoryAttribute"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationObjectPolicy"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfiguredObjectStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Override of <see cref="M:Microsoft.Practices.ObjectBuilder2.IBuilderStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)"/>. 
            Creates the requested object using the custom factory associated to the type specified by the context's key,
            and updates the context's existing object.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext"/> that represents the current building process.</param>
            <exception cref="T:System.InvalidOperationException"> when the requested type does not have the 
            required <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.CustomFactoryAttribute">CustomFactory</see> attribute.</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"> when the configuration for the requested ID is not present or is 
            invalid in the configuration source.</exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IConfigurationNameMapper">
            <summary>
            Represents an object that maps an instance name.
            </summary>
            <remarks>
            The mapping usually consists of getting the default instance name from configuration 
            when the requested name is <see langword="null"/>.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameMapperAttribute"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameMappingStrategy"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IConfigurationNameMapper.MapName(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Returns the mapped instance name, usually based on configuration information.
            </summary>
            <param name="name">The original instance name.</param>
            <param name="configSource">The configuration source to use to get configuration information.</param>
            <returns>The mapped instance name.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.InstrumentationAttachmentStrategy">
            <summary>
            Drives binding of instrumentation events to handler methods based on the attributes on the 
            source object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.InstrumentationAttachmentStrategy.AttachInstrumentation(System.Object,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <overloads>
            Attaches the instrumentation events in the <paramref name="createdObject"></paramref> to the 
            creating instance of the listener object, as defined by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListenerAttribute"></see>
            on the source class.
            </overloads>
            <summary>
            Attaches the instrumentation events in the <paramref name="createdObject"></paramref> to the 
            creating instance of the listener object, as defined by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListenerAttribute"></see>
            on the source class.
            </summary>
            <param name="createdObject">Source object used for instrumentation events.</param>
            <param name="configurationSource"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"></see> instance used to define whether
            instrumentation is enabled or disabled for application.</param>
            <param name="reflectionCache">Cache for instrumentation attributes discovered through reflection.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.InstrumentationAttachmentStrategy.AttachInstrumentation(System.String,System.Object,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            Attaches the instrumentation events in the <paramref name="createdObject"></paramref> to the 
            creating instance of the listener object, as defined by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListenerAttribute"></see>
            on the source class.
            </summary>
            <param name="instanceName">User-provided instance name given to the instrumenation listener during its instantiation.</param>
            <param name="createdObject">Source object used for instrumentation events.</param>
            <param name="configurationSource"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"></see> instance used to define whether
            instrumentation is enabled or disabled for application.</param>
            <param name="reflectionCache">Cache for instrumentation attributes discovered through reflection.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.InstrumentationStrategy">
            <summary>
            This type supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Adapter used to inject instrumentation attachment process into ObjectBuilder creation process
            for objects.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.InstrumentationAttachmentStrategy"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.InstrumentationStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Implementation of <see cref="M:Microsoft.Practices.ObjectBuilder2.IBuilderStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)"/>.
            </summary>
            <remarks>
            This implementation will attach instrumentation to the created objects. 
            </remarks>
            <param name="context">The build context.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.NameTypeFactoryBase`1">
            <summary>
            Base class for instance factories.
            </summary>
            <remarks>
            This class is used to create instances of types compatible with <typeparamref name="T"/> described 
            by a configuration source.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.NameTypeFactoryBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.NameTypeFactoryBase`1"/> class with the default configuration source.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.NameTypeFactoryBase`1.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.NameTypeFactoryBase`1"/> class with a configuration source.
            </summary>
            <param name="configurationSource">The configuration source to use.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.NameTypeFactoryBase`1.CreateDefault">
            <summary>
            Returns a new instance of <typeparamref name="T"/> based on the default instance configuration.
            </summary>
            <returns>
            A new instance of <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.NameTypeFactoryBase`1.Create(System.String)">
            <summary>
            Returns an new instance of <typeparamref name="T"/> based on the configuration for <paramref name="name"/>.
            </summary>
            <param name="name">The name of the required instance.</param>
            <returns>
            A new instance of <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.TypeInstantiationAssembler`2">
            <summary>
            Generic assembler that will just instantiate the type in a configuration element for polymorphic hierarchies.
            </summary>
            <typeparam name="TObject">The interface or the base type to build.</typeparam>
            <typeparam name="TConfiguration">The base configuration object type.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.TypeInstantiationAssembler`2.Assemble(Microsoft.Practices.ObjectBuilder2.IBuilderContext,`1,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            Builds an instance of the subtype of <typeparamref name="TObject"/> type the receiver knows how to build by
            invoking the default constructor on the type specified by the configuration object.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext"/> that represents the current building process.</param>
            <param name="objectConfiguration">The configuration object that describes the object to build.</param>
            <param name="configurationSource">The source for configuration objects.</param>
            <param name="reflectionCache">The cache to use retrieving reflection information.</param>
            <returns>A new instance of the <typeparamref name="TObject"/> subtype.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher">
            <summary>
            <para>Represents an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher"/> that watches a file.</para>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher">
            <summary>
            <para>Represents an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher"/> that watches a file.</para>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher">
            <summary>
            <para>Provides a way to watch for changes to configuration in storage.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher.StartWatching">
            <summary>
            When implemented by a subclass, starts the object watching for configuration changes
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher.StopWatching">
            <summary>
            When implemented by a subclass, stops the object from watching for configuration changes
            </summary>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher.ConfigurationChanged">
            <summary>
            Event raised when the underlying persistence mechanism for configuration notices that
            the persistent representation of configuration information has changed.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher.SectionName">
            <summary>
            When implemented by a subclass, returns the section name that is being watched.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.SetDefaultPollDelayInMilliseconds(System.Int32)">
            <summary>
            Sets the default poll delay.
            </summary>
            <param name="newDefaultPollDelayInMilliseconds">The new default poll.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.ResetDefaultPollDelay">
            <summary>
            Reset the default to 15000 millisecond.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.SetPollDelayInMilliseconds(System.Int32)">
            <summary>
            Sets the poll delay in milliseconds.
            </summary>
            <param name="newDelayInMilliseconds">
            The poll delay in milliseconds.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.#ctor">
            <summary>
            <para>Initialize a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher"/> class</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.Finalize">
            <summary>
            <para>Allows an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> to attempt to free resources and perform other cleanup operations before the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> is reclaimed by garbage collection.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.StartWatching">
            <summary>
            <para>Starts watching the configuration file.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.StopWatching">
            <summary>
            <para>Stops watching the configuration file.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.Dispose">
            <summary>
            <para>Releases the unmanaged resources used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> and optionally releases the managed resources.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.Disposing(System.Boolean)">
            <summary>
            <para>Releases the unmanaged resources used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> and optionally releases the managed resources.</para>
            </summary>
            <param name="isDisposing">
            <para><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.OnConfigurationChanged">
            <summary>
            <para>Raises the <see cref="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.ConfigurationChanged"/> event.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.GetCurrentLastWriteTime">
            <summary>
            <para>Returns the <see cref="T:System.DateTime"/> of the last change of the information watched</para>
            </summary>
            <returns>The <see cref="T:System.DateTime"/> of the last modificaiton, or <code>DateTime.MinValue</code> if the information can't be retrieved</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.BuildThreadName">
            <summary>
            Returns the string that should be assigned to the thread used by the watcher
            </summary>
            <returns>The name for the thread</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.BuildEventData">
            <summary>
            Builds the change event data, in a suitable way for the specific watcher implementation
            </summary>
            <returns>The change event information</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.GetEventSourceName">
            <summary>
            Returns the source name to use when logging events
            </summary>
            <returns>The event source name</returns>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.ConfigurationChanged">
            <summary>
            Event raised when the underlying persistence mechanism for configuration notices that
            the persistent representation of configuration information has changed.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.SectionName">
            <summary>
            <para>Gets the name of the configuration section being watched.</para>
            </summary>
            <value>
            <para>The name of the configuration section being watched.</para>
            </value>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher.#ctor(System.String,System.String)">
            <summary>
            <para>Initialize a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> class with the path to the configuration file and the name of the section</para>
            </summary>
            <param name="configFilePath">
            <para>The full path to the configuration file.</para>
            </param>
            <param name="configurationSectionName">
            <para>The name of the configuration section to watch.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher.Finalize">
            <summary>
            <para>Allows an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> to attempt to free resources and perform other cleanup operations before the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> is reclaimed by garbage collection.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher.GetCurrentLastWriteTime">
            <summary>
            <para>Returns the <see cref="T:System.DateTime"/> of the last change of the information watched</para>
            <para>The information is retrieved using the watched file modification timestamp</para>
            </summary>
            <returns>The <see cref="T:System.DateTime"/> of the last modificaiton, or <code>DateTime.MinValue</code> if the information can't be retrieved</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher.BuildThreadName">
            <summary>
            Returns the string that should be assigned to the thread used by the watcher
            </summary>
            <returns>The name for the thread</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher.BuildEventData">
            <summary>
            Builds the change event data, including the full path of the watched file
            </summary>
            <returns>The change event information</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher.GetEventSourceName">
            <summary>
            Returns the source name to use when logging events
            </summary>
            <returns>The event source name</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher.SectionName">
            <summary>
            <para>Gets the name of the configuration section being watched.</para>
            </summary>
            <value>
            <para>The name of the configuration section being watched.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource">
            <summary>
            Represents an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> that retrieves the configuration information from the 
            application's default configuration file using the <see cref="T:System.Configuration.ConfigurationManager"/> API.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/> is a wrapper over the static configuration access API provided by 
            <see cref="T:System.Configuration.ConfigurationManager"/> and watches for changes in the configuration files to refresh the 
            configuration when a change is detected.
            </para>
            <para>
            It uses a shared instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceImplementation"/> to manage the access to the 
            configuration subsystem and to manage the file change watchers.
            </para>
            </remarks>
            <seealso cref="T:System.Configuration.ConfigurationManager"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceImplementation"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.GetSection(System.String)">
            <summary>
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/>.
            </summary>
            <param name="sectionName">The section name to retrieve.</param>
            <returns>The specified <see cref="T:System.Configuration.ConfigurationSection"/>, or <see langword="null"/> (<b>Nothing</b> in Visual Basic)
            if a section by that name is not found.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.AddSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Adds a handler to be called when changes to the section named <paramref name="sectionName"/> are detected.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler for the change event to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.RemoveSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Removes a handler to be called when changes to section <paramref name="sectionName"/> are detected.
            </summary>
            <param name="sectionName">The name of the watched section.</param>
            <param name="handler">The handler for the change event to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.ResetImplementation(System.Boolean)">
            <summary>
            Reset the current configuration implementation.
            </summary>
            <param name="refreshing">
            true to have the implementation to do refreshing; owtherwise, false.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.Save(System.String,System.String,System.Configuration.ConfigurationSection)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Adds or replaces <paramref name="configurationSection"/> under name <paramref name="section"/> in the configuration 
            file named <paramref name="fileName" /> and saves the configuration file.
            </summary>
            <param name="fileName">The name of the configuration file.</param>
            <param name="section">The name for the section.</param>
            <param name="configurationSection">The configuration section to add or replace.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.Remove(System.String,System.String)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Removes the configuration section named <paramref name="section"/> from the configuration file named
            <paramref name="fileName"/> and saves the configuration file.
            </summary>
            <param name="fileName">The name of the configuration file.</param>
            <param name="section">The name for the section.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.Add(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration source location specified by 
            <paramref name="saveParameter"/> and saves the configuration source.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists in the location specified by 
            <paramref name="saveParameter"/> it will be replaced.
            </remarks>
            <param name="addParameter">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter"/> that represents the location where 
            to save the updated configuration. Must be an instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationParameter"/>.</param>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.Remove(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String)">
            <summary>
            Removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration source location specified by 
            <paramref name="removeParameter"/> and saves the configuration source.
            </summary>
            <param name="removeParameter">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter"/> that represents the location where 
            to save the updated configuration. Must be an instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationParameter"/>.</param>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.Implementation">
            <summary>
            Gets the current configuration source implementation.
            </summary>
            <value>
            The current configuration source implementation.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceElement">
            <summary>
            Represents the configuration settings that describe an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceElement"/> class with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceElement"/> class with a name and an type.
            </summary>
            <param name="name">The instance name.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceElement.CreateSource">
            <summary>
            Returns a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/>.
            </summary>
            <returns>A new configuration source.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceImplementation">
            <summary>
            This type supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Represents the implementation details for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceImplementation.#ctor">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceImplementation"/> class.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceImplementation"/> will use the current application configuration file as
            the main configuration file.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceImplementation.#ctor(System.Boolean)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceImplementation"/> class.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceImplementation"/> will use the current application's configuration file as
            the main configuration file.
            </remarks>
            <param name="refresh"><b>true</b>if runtime changes should be refreshed, <b>false</b> otherwise.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceImplementation.GetSection(System.String)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/> from the current application's configuration file, 
            and starts watching for its changes if not watching already.
            </summary>
            <param name="sectionName">The section name.</param>
            <returns>The section, or <see langword="null"/> if it doesn't exist.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceImplementation.RefreshAndValidateSections(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ICollection{System.String}@,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Refreshes the configuration sections from the main configuration file and determines which sections have suffered notifications
            and should be notified to registered handlers.
            </summary>
            <param name="localSectionsToRefresh">A dictionary with the configuration sections residing in the main configuration file that must be refreshed.</param>
            <param name="externalSectionsToRefresh">A dictionary with the configuration sections residing in external files that must be refreshed.</param>
            <param name="sectionsToNotify">A new collection with the names of the sections that suffered changes and should be notified.</param>
            <param name="sectionsWithChangedConfigSource">A new dictionary with the names and file names of the sections that have changed their location.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceImplementation.RefreshExternalSections(System.String[])">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Refreshes the configuration sections from an external configuration file.
            </summary>
            <param name="sectionsToRefresh">A collection with the names of the sections that suffered changes and should be refreshed.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ConstantResolverPolicy">
            <summary>
            Dependency resolver that resolves to a constant value.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ConstantResolverPolicy.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ConstantResolverPolicy"/>.
            </summary>
            <param name="value">The constant value to resolve to.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ConstructorArgumentMatchingPolicyCreator">
            <summary>
            A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.IContainerPolicyCreator"/> implementation that tries to match a target type 
            public constructors' parameters with an object's properties to create build plan policies.
            </summary>
            <remarks>
            <para>
            Matching is performed by considering the target type's constructors in decreasing order by
            number for parameters and trying to match the parameters' names with the properties in source object.
            If a match is found, a policy to use the matched constructor will be created, and the values for the matched source object properties
            will be used as the constructor parameters.
            If not match is found for any constructor an exception is thrown.
            </para>
            <para>
            To match parameters to properties, a case-insensitive comparison is performed and the property is validated
            for the following conditions:
            <list type="bullet">
            <item>
            <description>The property is public.</description>
            </item>
            <item>
            <description>The property can be read.</description>
            </item>
            <item>
            <description>The property is not an indexer.</description>
            </item>
            <item>
            <description>The property has a matching type.</description>
            </item>
            </list>
            </para>
            <para>
            Subclasses can override how matching is performed and what kind of parameter resolution policies are created.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.IContainerPolicyCreator">
            <summary>
            Encapsulates the logic to create the policies required to create instances of a type.
            </summary>
            <remarks>
            This encapsulated logic is used when the policies for a provider of an unknown type must be created.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.IContainerPolicyCreator.CreatePolicies(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.String,System.Configuration.ConfigurationElement,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Adds the policies required to create the provider specified by <paramref name="configurationObject"/>
            to <paramref name="policyList"/>.
            </summary>
            <param name="policyList">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to which the policies must be added.</param>
            <param name="instanceName">The name to use for the instance's policies.</param>
            <param name="configurationObject">The <see cref="T:System.Configuration.ConfigurationElement"/> that describes a provider.</param>
            <param name="configurationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> from which additional configuration information
            should be retrieved if necessary.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ConstructorArgumentMatchingPolicyCreator.#ctor(System.Type)">
            <summary>
            Initializes a new instance of class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ConstructorArgumentMatchingPolicyCreator"/> for a given type.
            </summary>
            <param name="targetType">The <see cref="T:System.Type"/> for which policies will be created.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ConstructorArgumentMatchingPolicyCreator.MatchArgumentAndPropertyTypes(System.Reflection.ParameterInfo,System.Reflection.PropertyInfo)">
            <summary>
            Checks <paramref name="parameterInfo"/> and <paramref name="propertyInfo"/> for type matching.
            </summary>
            <param name="parameterInfo">The constructor parameter to match</param>
            <param name="propertyInfo">The property to match.</param>
            <returns><see langword="true"/> if types are compatible, otherwise <see langword="false"/>.</returns>.
            <remarks>
            The default behavior is to match for simple <see cref="M:System.Type.IsAssignableFrom(System.Type)">assignability</see>. 
            Subclasses can override this behavior.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ConstructorArgumentMatchingPolicyCreator.CreateDependencyResolverPolicy(System.Reflection.ParameterInfo,System.Object)">
            <summary>
            Returns a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> suitable to resolve <paramref name="value"/>
            for <paramref name="parameterInfo"/>.
            </summary>
            <param name="parameterInfo">The constructor parameter.</param>
            <param name="value">The raw value from the source object.</param>
            <returns>An instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ConstantResolverPolicy"/> that returns <paramref name="value"/>. Subclasses
            can override this behavior.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ContainerPolicyCreatorAttribute">
            <summary>
            Specifies the type that can create the policies necessary to create an object
            as described by configuration objects.
            </summary>
            <remarks>
            The specified type must implement the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.IContainerPolicyCreator"/> interface.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ContainerPolicyCreatorAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ContainerPolicyCreatorAttribute"/>.
            </summary>
            <param name="policyCreatorType">The type implementing <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.IContainerPolicyCreator"/>.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="policyCreatorType"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="policyCreatorType"/> does not implement 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.IContainerPolicyCreator"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="policyCreatorType"/> does not have a zero-arguments 
            constructor.</exception>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ContainerPolicyCreatorAttribute.PolicyCreatorType">
            <summary>
            Gets the <see cref="T:System.Type"/> specified by the attribute.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.CustomProviderPolicyCreator`1">
            <summary>
            Standard policy creator for custom providers.
            </summary>
            <typeparam name="T">The type of the custom provider data class representing a custom provider.</typeparam>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.DelegateBuildPlanPolicy">
            <summary>
            An <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuildPlanPolicy"/> implementation configured with a delegate that can be set to 
            replace the dynamically generated IL policies.
            </summary>
            <remarks>
            If a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.DelegateBuildPlanPolicy"/> is set, all the creation stages will be overriden, 
            not just the constructor call.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.DelegateBuildPlanPolicy.#ctor(System.Func{Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Object})">
            <summary>
            Initializes a new instance of class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.DelegateBuildPlanPolicy"/> with a 
            delegate.
            </summary>
            <param name="factoryDelegate">The delagate to invoke when building an object.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryBlockExtension">
            <summary>
            Base class for Enterprise Library Blocks' container extensions.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryBlockExtension.CreateProvidersPolicies``2(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection{``1},Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Creates the policies to create the providers specified by a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1"/>
            using the appropriate <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.IContainerPolicyCreator"/> classes specified with the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ContainerPolicyCreatorAttribute"/>
            class.
            </summary>
            <typeparam name="TProviderBase">The root of the provider hierarchy.</typeparam>
            <typeparam name="TProviderConfigurationBase">The root of the configuration object hierarchy.</typeparam>
            <param name="policyList">The destination of the new policies.</param>
            <param name="defaultProviderName">The name of the default provider, if any.</param>
            <param name="configurationObjects">The collection of configuration objects.</param>
            <param name="configurationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> from where additional configuration information
            can be retrieved.</param>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">when the specified default name does not correspond to an element
            in the collection of provider configuration objects.</exception>
            <exception cref="T:System.ArgumentException">when the type of a configuration object in <paramref name="configurationObjects"/>
            does not have the required <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ContainerPolicyCreatorAttribute"/> specifying an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.IContainerPolicyCreator"/>
            class.</exception>
            <remarks>
            Two policies are usually created for each element in <paramref name="configurationObjects"/>: a key mapping policy 
            to map to the concrete provider type, and a constructor selector policy with properly configured parameters
            to create the provider.
            If a valid provider name is supplied for <paramref name="defaultProviderName"/>, an additional key mapping policy
            is created to map the null name to the default provider name.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryBlockExtension.CreateProvidersPolicies``2(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection{``1},Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.Func{``1,System.String})">
            <summary>
            Creates the policies to create the providers specified by a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1"/>
            using the appropriate <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.IContainerPolicyCreator"/> classes specified with the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ContainerPolicyCreatorAttribute"/>
            class.
            </summary>
            <typeparam name="TProviderBase">The root of the provider hierarchy.</typeparam>
            <typeparam name="TProviderConfigurationBase">The root of the configuration object hierarchy.</typeparam>
            <param name="policyList">The destination of the new policies.</param>
            <param name="defaultProviderName">The name of the default provider, if any.</param>
            <param name="configurationObjects">The collection of configuration objects.</param>
            <param name="configurationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> from where additional configuration information
            can be retrieved.</param>
            <param name="getName">A delegate to determine the name to use for policies.</param>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">when the specified default name does not correspond to an element
            in the collection of provider configuration objects.</exception>
            <exception cref="T:System.ArgumentException">when the type of a configuration object in <paramref name="configurationObjects"/>
            does not have the required <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ContainerPolicyCreatorAttribute"/> specifying an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.IContainerPolicyCreator"/>
            class.</exception>
            <remarks>
            Two policies are usually created for each element in <paramref name="configurationObjects"/>: a key mapping policy 
            to map to the concrete provider type, and a constructor selector policy with properly configured parameters
            to create the provider.
            If a valid provider name is supplied for <paramref name="defaultProviderName"/>, an additional key mapping policy
            is created to map the null name to the default provider name.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryBlockExtension.GetContainerPolicyCreator(System.Type,System.Type)">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.IContainerPolicyCreator"/> associated to <paramref name="type"/> with the
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ContainerPolicyCreatorAttribute"/>.
            </summary>
            <param name="sourceType">The <see cref="T:System.Type"/> from which the policy creator must be created. Usually a configuration object type.</param>
            <param name="targetType">The <see cref="T:System.Type"/> for which the policies will be created.</param>
            <returns>An instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.IContainerPolicyCreator"/>.</returns>
            <exception cref="T:System.ArgumentException">when there is no <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ContainerPolicyCreatorAttribute"/> 
            on <paramref name="type"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryBlockExtension.GetDefaultContainerPolicyCreator(System.Type)">
            <summary>
            Returns a default <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.IContainerPolicyCreator"/> implementation for <paramref name="targetType"/>.
            </summary>
            <param name="targetType">The type for which policies must be built.</param>
            <returns>An instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ConstructorArgumentMatchingPolicyCreator"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryBlockExtension.ConfigurationSource">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> for the extension.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryCoreExtension">
            <summary>
            Main <see cref="T:Microsoft.Practices.Unity.UnityContainerExtension"/> for Enterprise Library.
            </summary>
            <remarks>
            This extension specifies the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> to be used by all the extensions for the Blocks
            and adds the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.InstrumentationStrategy"/> to the strategy chain.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryCoreExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryCoreExtension"/> class with the
            default <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryCoreExtension.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryCoreExtension"/> class with the
            the specified <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            </summary>
            <param name="configurationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> to use when retrieving
            configuration information.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryCoreExtension.Initialize">
            <summary>
            Adds the policies used by other extensions to locate an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> and
            a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache"/>, and adds the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.InstrumentationStrategy"/>
            to the strategy chain.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.FixedConstructorSelectorPolicy">
            <summary>
            Constructor Selector Policy that return a fixed constructor, specified during creation.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.FixedConstructorSelectorPolicy.#ctor(Microsoft.Practices.ObjectBuilder2.SelectedConstructor)">
            <summary>
            Initializes a new instance of the class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.FixedConstructorSelectorPolicy"/>
            with the supplied constructor.
            </summary>
            <param name="selectedConstructor">The fixed constructor to select.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.FixedPropertySelectorPolicy">
            <summary>
            Property selector policy that returns a fixed set of selected properties previously specified.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.FixedPropertySelectorPolicy.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.ObjectBuilder2.SelectedProperty})">
            <summary>
            Initializes a new instance of the class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.FixedPropertySelectorPolicy"/> with the
            supplied <see cref="T:Microsoft.Practices.ObjectBuilder2.SelectedProperty"/> instances.
            </summary>
            <param name="selectedProperties">The selected properties to return on request.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.Fluent.IFinishPoliciesBuilding">
            <summary>
            Supports the fluent API for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.PolicyBuilder`2"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.Fluent.IFinishPoliciesBuilding.AddPoliciesToPolicyList(Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Finish the creation process by adding all the collected policies to <paramref name="policyList"/>.
            </summary>
            <param name="policyList">The destination <see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/>.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.Fluent.IPropertyAndFinishPolicyBuilding`2">
            <summary>
            Supports the fluent API for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.PolicyBuilder`2"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.Fluent.IPropertyPolicyBuilding`2">
            <summary>
            Supports the fluent API for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.PolicyBuilder`2"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.Fluent.IPropertyPolicyBuilding`2.SetProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Specify a property mapping.
            </summary>
            <typeparam name="TProperty">The type of the target property.</typeparam>
            <param name="propertyAccessExpression">The expresion that specifies the property to map to. Should look like "o => o.Property".</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.Fluent.IMapProperty`3">
            <summary>
            Supports the fluent API for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.PolicyBuilder`2"/>.
            </summary>
            <typeparam name="TTarget">The type on which a property will be set.</typeparam>
            <typeparam name="TSource">The type for which the values for the property will be calculated.</typeparam>
            <typeparam name="TProperty">The type of the property to set.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.Fluent.IMapProperty`3.To(System.Linq.Expressions.Expression{System.Func{`1,`2}})">
            <summary>
            Indicate the expression that specifies the value for the property.
            </summary>
            <param name="mappingExpression">The expression specifying the value.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.PolicyBuilder`2">
            <summary>
            Helps specifying build plan policies for objects, using Linq expressions to achieve type safety.
            </summary>
            <typeparam name="TTarget">The concrete type for which policies will be built.</typeparam>
            <typeparam name="TSource">The type of the object from which the arguments for the policies will be extracted.</typeparam>
            <remarks>
            The policy builder will interprete Linq expresions and translate them into suitable build plan policies. These expressions will
            typically consist of accesing property values from an instance of <typeparamref name="TSource"/>, but that is not strictly necessary.
            Top-level expressions involving method calls to the static class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.Resolve"/> will be interpreted as requests to resolve
            references using the container.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.Resolve"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.PolicyBuilder`2.#ctor(System.String,`1)">
            <summary>
            Initializes a new instance of the class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.PolicyBuilder`2"/>.
            </summary>
            <paparam name="name">The instance name to use for the keys associated to the created polices.</paparam>
            <parparam name="source">The object from which values will extracted.</parparam>
            <remarks>
            No constructor policy will be created by instances created with this constructor.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.PolicyBuilder`2.#ctor(Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey,`1)">
            <summary>
            Initializes a new instance of the class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.PolicyBuilder`2"/>.
            </summary>
            <paparam name="instanceKey">The key to associate to the created polices.</paparam>
            <parparam name="source">The object from which values will extracted.</parparam>
            <remarks>
            No constructor policy will be created by instances created with this constructor.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.PolicyBuilder`2.#ctor(System.String,`1,System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
            Initializes a new instance of the class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.PolicyBuilder`2"/> with a creation expression.
            </summary>
            <param name="name">The instance name to use for the keys associated to the created polices.</param>
            <param name="source">The object from which values will extracted.</param>
            <param name="creationExpression">The expression that specifies the <see cref="T:Microsoft.Practices.ObjectBuilder2.IConstructorSelectorPolicy"/>
            that should be created by the policy builder.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.PolicyBuilder`2.#ctor(Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey,`1,System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
            Initializes a new instance of the class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.PolicyBuilder`2"/> with a creation expression.
            </summary>
            <param name="instanceKey">The key to associate to the created polices.</param>
            <param name="source">The object from which values will extracted.</param>
            <param name="creationExpression">The expression that specifies the <see cref="T:Microsoft.Practices.ObjectBuilder2.IConstructorSelectorPolicy"/>
            that should be created by the policy builder.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.PolicyBuilder`2.SetProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Specify a property mapping.
            </summary>
            <typeparam name="TProperty">The type of the target property.</typeparam>
            <param name="propertyAccessExpression">The expresion that specifies the property to map to. Should look like "o => o.Property".</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.PolicyBuilder`2.AddPoliciesToPolicyList(Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Finish the creation process by adding all the collected policies to <paramref name="policyList"/>.
            </summary>
            <param name="policyList">The destination <see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/>.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ReferenceCollectionResolverPolicy">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that will convert a collection of string names
            into a collection of objects resolved from the container with the supplied names.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ReferenceCollectionResolverPolicy.#ctor(System.Type,System.Type,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ReferenceCollectionResolverPolicy"/>.
            </summary>
            <param name="collectionType">The type of the collection to return when resolving the dependency.</param>
            <param name="elementType">The (base) type of elements to resolve into the collection.</param>
            <param name="keys">The list of keys to resolve.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ReferenceDictionaryResolverPolicy`3">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that will convert a collection of string names and 
            into a dictionary of objects resolved from the container with the supplied names.
            </summary>
            <typeparam name="TDictionary">The type of dictionary to create when resolving.</typeparam>
            <typeparam name="T">The type of object to resolve.</typeparam>
            <typeparam name="TKey">The type of the suppliled keys.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ReferenceDictionaryResolverPolicy`3.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`2}})">
            <summary>
            Initializes a new instance of the class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ReferenceDictionaryResolverPolicy`3"/>.
            </summary>
            <param name="dependencyKeys">The list of names and keys.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ReferenceResolverPolicy">
            <summary>
            Dependency resolver that resolves to a new builder request for a configured key.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ReferenceResolverPolicy.#ctor(Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>
            Initializes a new instance of the class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ReferenceResolverPolicy"/>
            with a given key.
            </summary>
            <param name="referenceKey">The key to use when resolving a dependency.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.Resolve">
            <summary>
            Utility class that is used to specify the need for resolving objects when specifying policies with the
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.PolicyBuilder`2"/> in a strongly typed way.
            </summary>
            <remarks>
            <para>
            The methods in this class don't perform any useful action. Instead, using them instructs the policy builder
            to generate resolution policies.
            </para>
            <para>
            The resolution indicated by the methods in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.Resolve"/> class will be performed at build time.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.Resolve.Reference``1(System.String)">
            <summary>
            Resolve <paramref name="key"/> to an instance of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.Resolve.OptionalReference``1(System.String)">
            <summary>
            Resolve <paramref name="key"/> to an instance of <typeparamref name="T"/> if
            key is not empty; otherwise rsolve to <see langword="null"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.Resolve.ReferenceCollection``2(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Resolve to a new instance of collection type <typeparamref name="TCollection"/>
            populated with the result of resolving instances of type <typeparamref name="T"/>
            with the names in <paramref name="keys"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.Resolve.ReferenceDictionary``3(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,``2}})">
            <summary>
            Resolve to a new instance of dictionary type <typeparamref name="TDictionary"/>
            populated with the result of resolving instances of type <typeparamref name="T"/>
            with the names in <paramref name="keys"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder">
            <summary>
            Base class for the reflection-based installers. These reflection-based installers 
            search through assemblies looking for the appropriate kinds of installable resources and
            arrange for them to be registered with the appropriate installer
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder.Fill(System.Configuration.Install.Installer)">
            <summary>
            Fills the given installer with other, more specific kinds of installers that have been
            filled with the appropriate kinds of installable resources
            </summary>
            <param name="installer">Outer installer to be filled with nested installers for specific resources</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder.#ctor(System.Type[],System.Type)">
            <summary>
            Initializes object by giving it access to an array of all available types and a specification of
            the more specific resource type that will be installed.
            </summary>
            <param name="availableTypes">Array of available types through which installer should look</param>
            <param name="instrumentationAttributeType">Attribute specifying the more specific resource type to search for</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder.ConfirmAttributeExists(System.Type,System.Type)">
            <summary>
            Helper method to determine if the given type is attributed with the necessary attributes to be installed
            for a given installer
            </summary>
            <param name="instrumentedType">Type in question</param>
            <param name="attributeType">More specific attribute used to match resource being installed</param>
            <returns>True if the attributes on the given <paramref name="instrumentedType"></paramref> matches <paramref name="attributeType"></paramref></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder.IsInstrumented(System.Type,System.Type)">
            <summary>
            Helper method to determine if the attributes for a given type match the attributes used to 
            specify a specific kind of installable resource. The type should be attributed with <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.HasInstallableResourcesAttribute"></see>
            and the attribute passed to this method call.
            </summary>
            <param name="instrumentedType">Type in question</param>
            <param name="instrumentedAttributeType">More specific attribute used to match resource being installed</param>
            <returns><b>true</b> if the type specifies intallable resources.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder.CreateInstallers(System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Creates one or more installers after iterating over the <paramref name="instrumentedTypes"></paramref>.
            The number of iterators returned depends on the specific needs of the particular installable type.
            </summary>
            <returns>Collection of installers created through iterating over included types</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder.InstrumentedTypes">
            <summary>
            Gets or sets a list of all instrumentented types found in a given assembly. Types are instrumented if they are
            attributed with <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.HasInstallableResourcesAttribute"></see>	 and another attribute specifying 
            another, more specific resource type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection">
            <summary>
            Configuration object for Instrumentation. This section defines the instrumentation behavior 
            for the entire application
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.SectionName">
            <summary>
            Section name
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes enabled state of the three forms of instrumentation
            </summary>
            <param name="performanceCountersEnabled">True if performance counter instrumentation is to be enabled</param>
            <param name="eventLoggingEnabled">True if event logging instrumentation is to be enabled</param>
            <param name="wmiEnabled">True if wmi instrumentation is to be enabled</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.#ctor(System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes enabled state of the three forms of instrumentation and the instance name
            </summary>
            <param name="performanceCountersEnabled">True if performance counter instrumentation is to be enabled</param>
            <param name="eventLoggingEnabled">True if event logging instrumentation is to be enabled</param>
            <param name="wmiEnabled">True if wmi instrumentation is to be enabled</param>
            <param name="applicationInstanceName">Value of the InstanceName</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.#ctor">
            <summary>
            Initializes object to default settings of all instrumentation types disabled and an empty InstanceName
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.PerformanceCountersEnabled">
            <summary>
            Gets and sets the value of PerformanceCountersEnabled
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.EventLoggingEnabled">
            <summary>
            Gets and sets the value of EventLoggingEnabled
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.WmiEnabled">
            <summary>
            Gets and sets value of WmiEnabled
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.ApplicationInstanceName">
            <summary>
            Gets and sets value of ApplicationInstanceName
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.DefaultEventLoggerCustomFactoryBase">
            <summary>
            Base for custom factories used to create default event loggers specific to individual blocks.
            These default event loggers are used when events need to be logged from static classes and methods
            that cannot participate in the normal instrumentation attachment process.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.DefaultEventLoggerCustomFactoryBase.CreateObject(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="context">Represents the context in which a build-up or tear-down runs.</param>
            <param name="name">Unused parameter</param>
            <param name="configurationSource">Represents a source for getting configuration</param>
            <param name="reflectionCache">Unused parameter.</param>
            <returns>Fully initialized instance of a default event logging object</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.DefaultEventLoggerCustomFactoryBase.DoCreateObject(Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Builds an initialized default event logging object.
            </summary>
            <param name="instrumentationConfigurationSection">The instrumentation section that is used as configuration.</param>
            <returns>A fully initialized instance of a default event logging object.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounterFactory">
            <summary>
            Factory for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter"></see>s. Individual <see cref="T:System.Diagnostics.PerformanceCounter"></see>
            instances are cached to prevent the same instance from being created multiple times.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounterFactory.CreateCounter(System.String,System.String,System.String[])">
            <summary>
            Creates an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter"></see> initialized with individual <see cref="T:System.Diagnostics.PerformanceCounter"></see>
            instances. Instances are named according to <paramref name="instanceNames"></paramref> passed to this method.
            </summary>
            <param name="categoryName">Performance counter category name, as defined during installation.</param>
            <param name="counterName">Performance counter name, as defined during installation.</param>
            <param name="instanceNames">Param array of instance names for which individual counters should be created.</param>
            <returns>The new counter instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounterFactory.ClearCachedCounters">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute">
            <summary>
            Defines an event source to be installed by the reflection based installer system. Each field
            in this attribute is a placeholder for the same field as defined in the <see cref="T:System.Diagnostics.EventLogInstaller"></see>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes this object with the event log name and source to be installed.
            </summary>
            <param name="logName">Event log name to which the source should be added.</param>
            <param name="sourceName">Event log source to be added.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.LogName">
            <summary>
            Gets the event log name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.SourceName">
            <summary>
            Gets the event source name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.CategoryCount">
            <summary>
            Gets and sets the category count.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.CategoryResourceFile">
            <summary>
            Gets the category resource file name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.MessageResourceFile">
            <summary>
            Gets and sets the message resource file name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.ParameterResourceFile">
            <summary>
            Gets and sets the parameter resource file name
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogEntryFormatter">
            <summary>
            Formats an event log entry to the defined format.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IEventLogEntryFormatter">
            <summary>
            Formats an event log entry for logging to event log.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IEventLogEntryFormatter.GetEntryText(System.String,System.String[])">
            <overloads>
            Creates a formatted message, suitable for logging to the event log.
            </overloads>
            <summary>
            Creates a formatted message, suitable for logging to the event log.
            </summary>
            <param name="message">Message to be formatted, with format tags embedded.</param>
            <param name="extraInformation">Extra strings to be matched up with the format tags provided in <paramref name="message"></paramref>.</param>
            <returns>Formatted message, suitable for logging to the event log.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IEventLogEntryFormatter.GetEntryText(System.String,System.Exception,System.String[])">
            <summary>
            Creates a formatted message, suitable for logging to the event log.
            </summary>
            <param name="message">Message to be formatted, with format tags embedded.</param>
            <param name="exception">Exception containing message text to be added to event log message produced by this method</param>
            <param name="extraInformation">Extra strings to be matched up with the format tags provided in <paramref name="message"></paramref>.</param>
            <returns>Formatted message, suitable for logging to the event log.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogEntryFormatter.#ctor(System.String)">
            <overloads>
            Initializes this object with the name of the specific block using this class.
            </overloads>
            <summary>
            Initializes this object with the name of the specific block using this class.
            </summary>
            <param name="blockName">Name of block using this functionality.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogEntryFormatter.#ctor(System.String,System.String)">
            <summary>
            Initializes this object	with the given application and block names.
            </summary>
            <param name="applicationName">Name of the application.</param>
            <param name="blockName">Name of the block using this functionality.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogEntryFormatter.GetEntryText(System.String,System.String[])">
            <overloads>
            Creates a formatted message, suitable for logging to the event log.
            </overloads>
            <summary>
            Creates a formatted message, suitable for logging to the event log.
            </summary>
            <param name="message">Message to be formatted, with format tags embedded.</param>
            <param name="extraInformation">Extra strings to be matched up with the format tags provided in <paramref name="message"></paramref>.</param>
            <returns>Formatted message, suitable for logging to the event log.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogEntryFormatter.GetEntryText(System.String,System.Exception,System.String[])">
            <summary>
            Creates a formatted message, suitable for logging to the event log.
            </summary>
            <param name="message">Message to be formatted, with format tags embedded.</param>
            <param name="exception">Exception containing message text to be added to event log message produced by this method</param>
            <param name="extraInformation">Extra strings to be matched up with the format tags provided in <paramref name="message"></paramref>.</param>
            <returns>Formatted message, suitable for logging to the event log.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogInstallerBuilder">
            <summary>
            Add event log source definitions for classes that have been attributed
            with HasInstallableResourceAttribute and EventLogDefinition attributes to EventLogInstallers.
            One installer is created for each unique event log source that is found.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogInstallerBuilder.#ctor(System.Type[])">
            <summary>
            Initializes this object with a list of <see cref="T:System.Type"></see>s that may potentially be attributed appropriately.
            </summary>
            <param name="potentialTypes">Array of types to inspect check for event log sources needing installation</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogInstallerBuilder.CreateInstallers(System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Creates <see cref="T:System.Diagnostics.EventLogInstaller"></see> instances for each separate event log source needing installation.
            </summary>
            <param name="instrumentedTypes">Collection of <see cref="T:System.Type"></see>s that represent types defining
            event log sources to be installed.</param>
            <returns>Collection of installers containing event log sources to be installed.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IInstrumentationEventProvider">
            <summary>
            Defines the contract implemented by objects that provide instrumentation events for block objects.
            An implementation of this interface is used when the block object itself cannot provide the
            instrumentation events itself for some reason and desires to delegate the responsibility for
            containing the instrumentations to another object. One important usage of instances of this class are
            when a block object wishes to pass the instrumentation events to a contained block object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IInstrumentationEventProvider.GetInstrumentationEventProvider">
            <summary>
            Returns the object to which the instrumentation events have been delegated.
            </summary>
            <returns>Object to which the instrumentation events have been delegated.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IExplicitInstrumentationBinder">
            <summary>
            Defines the contract to be implemented by explicit binders for individual blocks. 
            Explicit binders are used to define exactly how instrumentation event sources are bound to
            instrumentation event listeners. It is used for those instances when the implementor wishes to
            explicitly define how this binding happens, rather than allow the binding to occur through reflection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IExplicitInstrumentationBinder.Bind(System.Object,System.Object)">
            <summary>
            Adds specified <paramref name="listenerMethod"></paramref> as an event handler for 
            the <paramref name="sourceEvent"></paramref>.
            </summary>
            <param name="source">Event on source object to which <paramref name="listenerMethod"></paramref> will be added.</param>
            <param name="listener">Method to be added as event handler for <paramref name="listenerMethod"></paramref>.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener">
            <summary>
            Listens for events raised by block classes and reports them to appropriate instrumentation 
            services (WMI, EventLog, or PeformanceCounters).
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.#ctor(System.Boolean,System.Boolean,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter)">
            <summary>
            Base constructor for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener"></see>. 
            </summary>
            <overloads>
            Base constructor for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener"></see>. 
            </overloads>
            <param name="performanceCountersEnabled">True if performance counter reporting is enabled</param>
            <param name="eventLoggingEnabled">True if event logging is enabled</param>
            <param name="wmiEnabled">True if WMI logging is enabled</param>
            <param name="nameFormatter">Creates unique name for each <see cref="T:System.Diagnostics.PerformanceCounter"/> instance.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter)">
            <summary>
            Base constructor for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener"></see>. 
            </summary>
            <param name="instanceName">Unique name for this instance</param>
            <param name="performanceCountersEnabled">True if performance counter reporting is enabled</param>
            <param name="eventLoggingEnabled">True if event logging is enabled</param>
            <param name="wmiEnabled">True if WMI logging is enabled</param>
            <param name="nameFormatter">Creates unique name for each <see cref="T:System.Diagnostics.PerformanceCounter"/> instance.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.#ctor(System.String[],System.Boolean,System.Boolean,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter)">
            <summary>
            Base constructor for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener"></see>. 
            </summary>
            <param name="instanceNames">Unique names for th <see cref="T:System.Diagnostics.PerformanceCounter"></see> instances to be managed by this listener.</param>
            <param name="performanceCountersEnabled">True if performance counter reporting is enabled</param>
            <param name="eventLoggingEnabled">True if event logging is enabled</param>
            <param name="wmiEnabled">True if WMI logging is enabled</param>
            <param name="nameFormatter">Creates unique name for each <see cref="T:System.Diagnostics.PerformanceCounter"/> instance.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.GetEventSourceName">
            <summary>
            Gets the event source name as defined in the class metadata.
            </summary>
            <returns>The event source name.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.CreatePerformanceCounters(System.String[])">
            <summary>
            Instantiates the performance counter instances managed by this listener.
            </summary>
            <param name="instanceNames">Instance names for performance counters.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.CreateInstanceName(System.String)">
            <summary>
            Creates a unique name for a specific performance counter instance.
            </summary>
            <param name="nameSuffix">Instance name for a specific performance counter.</param>
            <returns>The created instance name.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.FireManagementInstrumentation(Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.BaseWmiEvent)">
            <summary>
            Raises a Wmi event.
            </summary>
            <remarks>
            This method's is necessary to run instrumentation in partial trust. Since assembly System.Management 
            does not allow partially trusted callers, referencing class ManagementInstrumentation from the 
            instrumentation handlers makes the delegates fail because of the implicit LinkDemands, even when
            Wmi instrumentation is disabled.
            </remarks>
            <param name="wmiEvent">The Wmi event to raise</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.EventLoggingEnabled">
            <summary>
            Gets and sets the EventLoggingEnabled property
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.PerformanceCountersEnabled">
            <summary>
            Gets and sets the PerformanceCountersEnabled property
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.WmiEnabled">
            <summary>
            Gets and sets the WmiEnabled property
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstallerBuilder">
            <summary>
            Add event log source definitions for classes that have been attributed
            with HasInstallableResourceAttribute and EventLogDefinition attributes to EventLogInstallers.
            One installer is created for each unique performance counter category that is found.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstallerBuilder.#ctor(System.Type[])">
            <summary>
            Initializes this object with a list of <see cref="T:System.Type"></see>s that may potentially be attributed appropriately.
            </summary>
            <param name="availableTypes">Array of types to inspect check for performance counter definitions needing installation</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstallerBuilder.CreateInstallers(System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Creates <see cref="T:System.Diagnostics.PerformanceCounterInstaller"></see> instances for each separate performance counter definition needing installation.
            </summary>
            <param name="instrumentedTypes">Collection of <see cref="T:System.Type"></see>s that represent types defining
            performance counter definitions to be installed.</param>
            <returns>Collection of installers containing performance counter definitions to be installed.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstallerBuilder.GetCategoryHelp(Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute,System.Reflection.Assembly)">
            <summary>
            Gets the category help for a performance counter.
            </summary>
            <param name="attribute">The performance counter attribute.</param>
            <param name="originalAssembly">The assembly where the help is defined.</param>
            <returns>The help for the performance counter.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstallerBuilder.GetCounterHelp(System.String,System.Reflection.Assembly)">
            <summary>
            Gets the counter help for a performance counter.
            </summary>
            <param name="resourceName">The resource name.</param>
            <param name="originalAssembly">The assembly where the help is defined.</param>
            <returns>The help for the performance counter.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstanceName">
            <summary>
            Constructs an instance name for a <see cref="T:System.Diagnostics.PerformanceCounter"></see> following embedded
            formatting rules.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstanceName.#ctor(System.String,System.String)">
            <overloads>
            Initializes this object with information needed to construct a <see cref="T:System.Diagnostics.PerformanceCounter"></see>\
            instance name.
            </overloads>
            <summary>
            Initializes this object with information needed to construct a <see cref="T:System.Diagnostics.PerformanceCounter"></see>\
            instance name.
            </summary>
            <param name="prefix">Counter name prefix.</param>
            <param name="suffix">Counter name suffix.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstanceName.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <overloads>
            Initializes this object with information needed to construct a <see cref="T:System.Diagnostics.PerformanceCounter"></see>\
            instance name.
            </overloads>
            <summary>
            Initializes this object with information needed to construct a <see cref="T:System.Diagnostics.PerformanceCounter"></see>\
            instance name.
            </summary>
            <param name="prefix">Counter name prefix.</param>
            <param name="suffix">Counter name suffix.</param>
            <param name="maxPrefixLength">Max prefix length.</param>
            <param name="maxSuffixLength">Max suffix length.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstanceName.ToString">
            <summary>
            Returns properly formatted counter name as a string.
            </summary>
            <returns>Formatted counter name.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute">
            <summary>
            Defines information needed to install a <see cref="T:System.Diagnostics.PerformanceCounterCategory"></see>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute.#ctor(System.String,System.String)">
             <overloads>
             Initializes this attribute with information needed to install this performance counter category.
             </overloads>
             <summary>
             Initializes this attribute with information needed to install this performance counter category.
             </summary>
             <param name="categoryName">Performance counter category name</param>
             <param name="categoryHelp">Counter category help resource name. 
             This is not the help text itself, 
             but is the resource name used to look up the internationalized help text at install-time.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute.#ctor(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType)">
             <summary>
             Initializes this attribute with information needed to install this performance counter category.
             </summary>
             <param name="categoryName">Performance counter category name</param>
             <param name="categoryHelp">Counter category help resource name. 
             This is not the help text itself, 
             but is the resource name used to look up the internationalized help text at install-time.
            </param>
             <param name="categoryType">Performance counter category type.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute.CategoryType">
            <summary>
            Gets the <see cref="T:System.Diagnostics.PerformanceCounter"></see> category type.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute.CategoryName">
            <summary>
            Gets the <see cref="T:System.Diagnostics.PerformanceCounter"></see> category name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute.CategoryHelp">
            <summary>
            Gets the <see cref="T:System.Diagnostics.PerformanceCounter"></see> category help resource name.
            This is not the help text itself, 
            but is the resource name used to look up the internationalized help text at install-time.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ReflectionInstaller`1">
            <summary>
            Generic installer wrapper around installer builder. Used to find and install 
            given type of installable resource.
            </summary>
            <typeparam name="TInstallerBuilder">Specific type of installer builder to instantiate</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ReflectionInstaller`1.Install(System.Collections.IDictionary)">
            <summary>
            Installs the instrumentation resources
            </summary>
            <param name="stateSaver">An <see cref="T:System.Collections.IDictionary"/> used to save information needed to perform a commit, rollback, or uninstall operation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ReflectionInstaller`1.Uninstall(System.Collections.IDictionary)">
            <summary>
            Uninstalls the instrumentation resources
            </summary>
            <param name="stateSaver">An <see cref="T:System.Collections.IDictionary"/> that contains the state of the computer after the installation was complete.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.BaseWmiEvent">
            <summary>
            Base class for Enterprise Library's WMI Events. 
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.BaseWmiEvent.UtcTimeStamp">
            <summary>
            Gets the timestamp for this WMI Event.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.ResourceStringLoader">
            <summary>
            Helper class to load resources strings.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.ResourceStringLoader.LoadString(System.String,System.String)">
            <summary>
            Load a resource string.
            </summary>
            <param name="baseName">The base name of the resource.</param>
            <param name="resourceName">The resource name.</param>
            <returns>The string from the resource.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.ResourceStringLoader.LoadString(System.String,System.String,System.Reflection.Assembly)">
            <summary>
            Load a resource string.
            </summary>
            <param name="baseName">The base name of the resource.</param>
            <param name="resourceName">The resource name.</param>
            <param name="asm">The assembly to load the resource from.</param>
            <returns>The string from the resource.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Utility.ConstantStringResolver">
            <summary>
            Resolves strings by returning a constant value.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Utility.IStringResolver">
            <summary>
            Resolves string objects. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Utility.IStringResolver.GetString">
            <summary>
            Returns a string represented by the receiver.
            </summary>
            <returns>The string object.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Utility.ConstantStringResolver.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Utility.ConstantStringResolver"/> with a constant value.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Utility.DelegateStringResolver">
            <summary>
            Resolves strings by invoking a delegate and returning the resulting value.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Utility.DelegateStringResolver.#ctor(System.Func{System.String})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Utility.ConstantStringResolver"/> with a delegate.
            </summary>
            <param name="resolverDelegate">The delegate to invoke when resolving a string.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Utility.ResourceStringResolver">
            <summary>
            Resolves strings by retrieving them from assembly resources, falling back to a specified
            value.
            </summary>
            <remarks>
            If both the resource type and the resource name are available, a resource lookup will be 
            performed; otherwise, the default value will be returned.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Utility.ResourceStringResolver.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Utility.ResourceStringResolver"/>
            for a resource type, a resource name and a fallback value.
            </summary>
            <param name="resourceType">The type that identifies the resources file.</param>
            <param name="resourceName">The name of the resource.</param>
            <param name="fallbackValue">The fallback value, to use when any of the resource
            identifiers is not available.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Utility.ResourceStringResolver.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Utility.ResourceStringResolver"/>
            for a resource type name, a resource name and a fallback value.
            </summary>
            <param name="resourceTypeName">The name of the type that identifies the resources file.</param>
            <param name="resourceName">The name of the resource.</param>
            <param name="fallbackValue">The fallback value, to use when any of the resource
            identifiers is not available.</param>
        </member>
    </members>
</doc>
