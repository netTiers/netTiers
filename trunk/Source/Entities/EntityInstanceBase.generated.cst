<%--
	Template for the table entity base class.
--%>
<%@ CodeTemplate Src="..\TemplateLib\CommonSqlCode.cs" Debug="True" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Business object base class"  ResponseEncoding="UTF-8" NoWarn="0108,0618,1572,1573,1574,0162,2002"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Connection" Description="Table Object should be based on." %>
<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Connection" Description="Tables of the sytem." %>
<%@ Property Name="SerializeEntityState" Type="System.Boolean" Default="False" Category="02. Framework Generation - Optional" Description="Indicates if the EntityState property should be included in serialization." %>

<%@ Property Name="IncludeRelations" Type="System.Boolean" Default="False" Category="Options" Description="Include Collections for Related Entities."%>
<%@ Property Name="IncludeManyToMany" Type="System.Boolean" Default="False" Category="Options" Description="Include Collections for Related Entities."%>
<%@ Property Name="IncludeGetListByFK" Type="System.Boolean" Default="True" Category="Options" Description="If true get functions will be generated." %>
<%@ Property Name="IncludeWCFDataAttributes" Type="System.Boolean" Default="False" Category="02. Framework Generation - Optional" Description="Indicates if the WCF attributes, [DataContract] and [DataMember], should be included on the entity classes." %>
<%@ Property Name="IncludeXmlAttributes" Type="System.Boolean" Default="False" Category="02. Framework Generation - Optional" Description="Indicates if the Xml attributes, [XmlElement(IsNullable=true)], should be included on the entity classes." %>

<%@ Property Name="NameSpace" Optional="True" Type="System.String" Category="Style" Description="Object Namespace." %>
	
<%@ Property Name="UsePartialClass" Type="System.Boolean" Default="true" Category="General" Description="Indicates if partial class should be generated." %>
<%@ Property Name="EqualitySemantics" Type="MoM.Templates.EqualitySemantics" Default="Value" Category="02. Framework Generation - Optional" Description="Equality semantics used for Entity instances.  If 'Reference', default reference type semantics will be used (based on object identity).  If 'Value', Equals() and GetHashCode() will be overridden to use value semantics (based on object contents)." %>
<%@ Property Name="ValidationType" Type="MoM.Templates.ValidationType" Default="NetTiers" Category="02. Framework Generation - Optional" Description="Choice to either use .netTiers validation framework, or Enterprise Library VAB" %>

<%-- When debugging, you must include this section of code 
<%@ Register Name="EntityData" Template="EntityData.cst" MergeProperties="False" ExcludeProperties="" %>
--%>

<%
	
	
	//if (SourceTables == null) SourceTables = new SchemaExplorer.TableSchemaCollection();
	
	// Name of the Abstract Class
	string className = GetClassName(SourceTable);
	string collectionClassName = GetClassName(SourceTable, ClassNameFormat.Collection);
	string structName = GetClassName(SourceTable, ClassNameFormat.Struct);
	string abstractClassName = GetClassName(SourceTable, ClassNameFormat.Abstract);
	string keyClassName = GetClassName(SourceTable, ClassNameFormat.Key);
	string interfaceName = GetClassName(SourceTable, ClassNameFormat.Interface);

	string constructorAccessModifier = UsePartialClass ? "public" : "protected";
	
	// Collection of primary key columns
	//NOT IN 2.6 API 
	//MemberColumnSchemaCollection pkCols = SourceTable.PrimaryKey.MemberColumns; 
	ColumnSchemaCollection pkCols = SourceTable.PrimaryKey.MemberColumns;
	
	// Collection of all columns in the table.
	ColumnSchemaCollection cols = SourceTable.Columns;
		
	//Provides information about the indexes contained in the table. 
	//IndexSchemaCollection indexes = SourceTable.Indexes;
		
	ColumnSchemaCollection colsUpdatable = new ColumnSchemaCollection();
	foreach (ColumnSchema column in cols)
	{
		if ( ! IsIdentityColumn(column) && ! IsComputed(column) )
			colsUpdatable.Add(column);
	}
	
	//Get the columns that are common to all tables
	ColumnSchemaCollection commonColumns = GetCommonTableColumns(SourceTables);
%>
/*
	File generated by NetTiers templates [www.nettiers.com]
	<%
	if( IncludeGeneratedDate)
	{
	%>
	Generated on : <%=DateTime.Now.ToLongDateString()%>
	<%
	}
	%>
	Important: Do not modify this file. Edit the file <%=className%>.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
<% if(ValidationType == MoM.Templates.ValidationType.EntLib){%>
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using Microsoft.Practices.EnterpriseLibrary.Validation;
<%}%>

using <%=NameSpace%>.Validation;
#endregion

namespace <%=NameSpace%>
{
	///<summary>
	/// <% if(SourceTable.Description.Length == 0 ) {%>An object representation of the '<%=SourceTable.Name%>' table. [No description found the database]<%} else {Response.Write(GetColumnXmlComment(SourceTable,1));}%>	
	///</summary>
	<% if ( IncludeWCFDataAttributes ) { %>
	[DataContract]
	<% } else { %>
	[Serializable]
	<% } %>
	[DataObject, CLSCompliant(true)]
	public abstract partial class <%=abstractClassName%> : EntityBase, <%=interfaceName%>, IEntityId<<%= keyClassName %>>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		<% if (IncludeWCFDataAttributes ) { %>
		[DataMember]
		<% } %>
		private <%=structName%> entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		<% if (IncludeWCFDataAttributes ) { %>
		[DataMember]
		<% } %>
		private <%=structName%> _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private <%=structName%> backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		<% if (!IncludeWCFDataAttributes) { %>
		[NonSerialized]
		<% } %>
		private <%=collectionClassName%> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		<% if (!IncludeWCFDataAttributes) { %>
		[field:NonSerialized]
		<% } %>
		public event <%= GetClassName(SourceTable, ClassNameFormat.EventHandler) %> ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		<% if (!IncludeWCFDataAttributes) { %>
		[field:NonSerialized]
		<% } %>
		public event <%= GetClassName(SourceTable, ClassNameFormat.EventHandler) %> ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="<%=abstractClassName%>"/> instance.
		///</summary>
		<%=constructorAccessModifier%> <%=abstractClassName%>()
		{
			this.entityData = new <%=structName%>();
			this.backupData = null;
		}		
		
		<% if(colsUpdatable.Count > 0) { %>
		///<summary>
		/// Creates a new <see cref="<%=abstractClassName%>"/> instance.
		///</summary>
		<% for (int x=0; x < colsUpdatable.Count; x++) { %>
		///<param name="<%=GetFieldName(colsUpdatable[x]) %>"><%=GetColumnXmlComment(colsUpdatable[x],2)%></param>
		<% } %>
		<%=constructorAccessModifier%> <%=abstractClassName%>(<% WrapInit(); for (int x=0; x < colsUpdatable.Count; x++) { %><%= GetCSType(colsUpdatable[x]) %> <%= GetFieldName(colsUpdatable[x]) %><%WrapIncr(colsUpdatable[x]); if (x < colsUpdatable.Count -1){%>, <% WrapLine(3); } }// end for %>)
		{
			this.entityData = new <%=structName%>();
			this.backupData = null;

			<% for (int x=0; x < colsUpdatable.Count; x++) { %>
			this.<%= GetPropertyName(colsUpdatable[x]) %> = <%= GetFieldName(colsUpdatable[x]) %>;
			<% }// end for %>
		}
		<% } %>
		
		///<summary>
		/// A simple factory method to create a new <see cref="<%=className%>"/> instance.
		///</summary>
		<% for (int x=0; x < colsUpdatable.Count; x++) { %>
		///<param name="<%=GetFieldName(colsUpdatable[x]) %>"><%=GetColumnXmlComment(colsUpdatable[x],2)%></param>
		<% } %>
		public static <%=className%> Create<%=className%>(<% WrapInit(); for (int x=0; x < colsUpdatable.Count; x++) { %><%= GetCSType(colsUpdatable[x]) %> <%= GetFieldName(colsUpdatable[x]) %><% WrapIncr(colsUpdatable[x]); if (x < colsUpdatable.Count -1){%>, <%  WrapLine(3); } }// end for %>)
		{
			<%=className%> new<%=className%> = new <%=className%>();
			<% for (int x=0; x < colsUpdatable.Count; x++) { %>
			new<%=className%>.<%=GetPropertyName(colsUpdatable[x]) %> = <%= GetFieldName(colsUpdatable[x]) %>;
			<% }// end for %>
			return new<%=className%>;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		<% for (int x=0; x < cols.Count; x++) {
		
		string dataObjectFieldParams = GetDataObjectFieldCallParams(cols[x]);
		string defaultValue	= GetColumnDefaultValue(cols[x]).Length > 0
			? string.Format(",{1}\t\tDefaultValue({0})", GetColumnDefaultValue(cols[x]), "\r\n") 
			: ""; 

		%>
		/// <summary>
		/// 	Gets or sets the <%= GetPropertyName(cols[x]) %> property. 
		///		<%=GetColumnXmlComment(cols[x],2)%>
		/// </summary>
		/// <value>This type is <%=cols[x].NativeType%>.</value>
		/// <remarks>
		/// This property can<%if (!cols[x].AllowDBNull) {%> not<%}%> be set to null. <%if (cols[x].AllowDBNull && !IsCSReferenceDataType(cols[x])) {%>
		/// If this column is null, this property will return <%=GetCSDefaultByType(cols[x])%>. It is up to the developer
		/// to check the value of Is<%=GetPropertyName(cols[x])%>Null() and perform business logic appropriately.<%}%>
		/// </remarks>
		<%if (! cols[x].AllowDBNull && IsCSReferenceDataType(cols[x]) ) {%>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		<%}%>
		<% if(!cols[x].AllowDBNull && IsCSReferenceDataType(cols[x]) && ValidationType == MoM.Templates.ValidationType.EntLib){ %>
		[NotNullValidator(MessageTemplate="Property does not allow null values.", Tag="<%= cols[x].Name %>")]<% } %>
		<% if(!cols[x].AllowDBNull && CanCheckLength(cols[x]) && IsCSReferenceDataType(cols[x]) && ValidationType == MoM.Templates.ValidationType.EntLib){ %>
		[ValidatorComposition(CompositionType.And, Tag="<%= cols[x].Name %>")]<% } %>
		<% if(cols[x].AllowDBNull && CanCheckLength(cols[x]) && IsCSReferenceDataType(cols[x]) && ValidationType == MoM.Templates.ValidationType.EntLib){%>
		[NotNullValidator(Negated=true, Tag="<%= cols[x].Name %>")]
		[ValidatorComposition(CompositionType.Or, Tag="<%= cols[x].Name %>")]<% } %>
		<% if(CanCheckLength(cols[x]) && ValidationType == MoM.Templates.ValidationType.EntLib){ %>
		[StringLengthValidator(<%= cols[x].Size %>, MessageTemplate="Maximum length has been exceeded.", Tag="<%= cols[x].Name %>")]<% } %>
		<% if ( IncludeXmlAttributes && cols[x].AllowDBNull ) { %>
		[XmlElement(IsNullable=true)]
		<% } %>
		[<%if (cols[x].IsPrimaryKeyMember && (IsIdentityColumn(cols[x]) || IsComputed(cols[x])) ) {%>ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, <%}%>DescriptionAttribute(@"<%=GetDescriptionAttributeText(cols[x].Description)%>"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(<%= dataObjectFieldParams  %>)<%= defaultValue %>]
		public <%if (commonColumns.IndexOf(cols[x].Name) != -1) Response.Write ("override "); else Response.Write ("virtual ");%><%= GetCSType(cols[x])%> <%= GetPropertyName(cols[x]) %>
		{
			get
			{
				return this.entityData.<%= GetPropertyName(cols[x]) %>; 
			}
			
			set
			{
				<%{%>
				if (this.entityData.<%= GetPropertyName(cols[x]) %> == value)
				<%}%>
					return;
					
				OnColumnChanging(<%= GetClassName(SourceTable, ClassNameFormat.Column) %>.<%=GetPropertyName(cols[x]) %>, this.entityData.<%= GetPropertyName(cols[x]) %>);
				this.entityData.<%= GetPropertyName(cols[x]) %> = value;
				<% if ( cols[x].IsPrimaryKeyMember ) { %>
				this.EntityId.<%= GetPropertyName(cols[x]) %> = value;
				<% } %>
				if (<% if (IncludeWCFDataAttributes ) { %> !this._deserializing && <% } %>this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(<%= GetClassName(SourceTable, ClassNameFormat.Column) %>.<%=GetPropertyName(cols[x]) %>, this.entityData.<%= GetPropertyName(cols[x]) %>);
				OnPropertyChanged("<%=GetPropertyName(cols[x]) %>");
			}
		}
		
		<%
			if (cols[x].IsPrimaryKeyMember && !IsIdentityColumn(cols[x]) && !IsComputed(cols[x]) )
			{%>
		/// <summary>
		/// 	Get the original value of the <%= cols[x].Name %> property.
		///		<%=GetColumnXmlComment(cols[x],2)%>
		/// </summary>
		/// <remarks>This is the original value of the <%= cols[x].Name %> property.</remarks>
		/// <value>This type is <%=cols[x].NativeType%></value>
		<% if ( IncludeXmlAttributes && cols[x].AllowDBNull ) { %>
		[XmlElement(IsNullable=true)]
		<% } %>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual <%= GetCSType(cols[x])%> <%= GetOriginalPropertyName(cols[x]) %>
		{
			get { return this.entityData.<%= GetOriginalPropertyName(cols[x]) %>; }
			set { this.entityData.<%= GetOriginalPropertyName(cols[x]) %> = value; }
		}
		
		<% 	} // end if updatable PK
		
		} // end for each columns 
		%>
		#endregion Data Properties		

		<% if (IncludeGetListByFK) { %>
		#region Source Foreign Key Property
				
		<%	//Generate a Source property for each foreign key relation		
		System.Collections.ArrayList filled = new System.Collections.ArrayList();
		foreach(TableKeySchema tableKey in SourceTable.ForeignKeys)
		{	
			// related table must be in the selection
			if (SourceTables.Contains(tableKey.PrimaryKeyTable)) {
			string fkPropertyName = GetKeysName(tableKey.ForeignKeyMemberColumns);
			
			if(filled.Contains(fkPropertyName))
				continue;
				
			filled.Add(fkPropertyName);
			
			string pkClassName = GetClassName(tableKey.PrimaryKeyTable);
			string memberVarName = "_" + GetCamelCaseName(fkPropertyName) + "Source";
		%>		
		/// <summary>
		/// Gets or sets the source <see cref="<%=pkClassName%>"/>.
		/// </summary>
		/// <value>The source <%=pkClassName%> for <%=fkPropertyName%>.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual <%=pkClassName%> <%=fkPropertyName%>Source
      	{
            get { return entityData.<%=fkPropertyName%>Source; }
            set { entityData.<%=fkPropertyName%>Source = value; }
      	}
		<%	} //end if in SourceTables
		 } //end for each FK%>
		#endregion
		<%}// IncludeGetListByFK%>	
		
		#region Children Collections
<% 
if(IncludeRelations) {
WriteRelationshipPropertyString();
}
%>
		#endregion Children Collections
		
		#endregion
		<% if(ValidationType == MoM.Templates.ValidationType.NetTiers)
		{
		%>
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		<% 
		for (int x=0; x < cols.Count; x++) 
		{
			string propertyName = GetPropertyName(cols[x]);
			string friendlyName = GetFriendlyName(cols[x]);
			
			if (! cols[x].AllowDBNull && IsCSReferenceDataType(cols[x])) 
			{
				%>
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("<%=propertyName%>", "<%=friendlyName%>"));
				<%							
			}
			
			if (CanCheckLength(cols[x]))
			{%>
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("<%=propertyName%>", "<%=friendlyName%>", <%=cols[x].Size%>));
			<%
			}			
		}
		%>		
		}
   		#endregion
		<%
		}
		%>
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "<%=SourceTable.Name%>"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {<%for (int i=0; i< SourceTable.Columns.Count; i++) {
					if (i>0) Response.Write(", ");
					Response.Write("\""+ SourceTable.Columns[i].Name + "\"");
					} %>};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as <%=structName%>;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (<%=className%>) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as <%=collectionClassName%>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as <%=className%>);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed <%=className%> Entity 
		///</summary>
		protected virtual <%=className%> Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			<%=className%> copy = new <%=className%>();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
			<% for (int x=0; x < cols.Count; x++) { %>
				copy.<%= GetPropertyName(cols[x]) %> = this.<%= GetPropertyName(cols[x]) %>;
				<% if( cols[x].IsPrimaryKeyMember && !IsIdentityColumn(cols[x]) && !IsComputed(cols[x]) ) { %>
					copy.<%= GetOriginalPropertyName(cols[x]) %> = this.<%= GetOriginalPropertyName(cols[x]) %>;
				<% } %>
			<% } %>
			
			<% if (IncludeGetListByFK) { %>
				<%	//Generate a Source property for each foreign key relation
				System.Collections.ArrayList filled = new System.Collections.ArrayList();
				foreach(TableKeySchema tableKey in SourceTable.ForeignKeys)
				{	
					// related table must be in the selection
					if (SourceTables.Contains(tableKey.PrimaryKeyTable)) {
						string fkPropertyName = GetKeysName(tableKey.ForeignKeyMemberColumns);
				
						if(filled.Contains(fkPropertyName))
							continue;
						
						filled.Add(fkPropertyName);
					
						string pkClassName = GetClassName(tableKey.PrimaryKeyTable);
						%>
			if (this.<%=fkPropertyName%>Source != null && existingCopies.Contains(this.<%=fkPropertyName%>Source))
				copy.<%=fkPropertyName%>Source = existingCopies[this.<%=fkPropertyName%>Source] as <%= pkClassName %>;
			else
				copy.<%=fkPropertyName%>Source = MakeCopyOf(this.<%=fkPropertyName%>Source, existingCopies) as <%= pkClassName %>;
			<%		} //end if in SourceTables
				} //end for each FK
		  }// IncludeGetListByFK%>	
		
		<% 
		if (IncludeRelations){
		int ctr = 0;
		foreach(CollectionInfo item in GetChildrenCollections(SourceTable, SourceTables).Values) { 
			if (ctr == 0)
				Response.Write("\t\t\t//deep copy nested objects" + Environment.NewLine);
			ctr++;
			
			string typeName = "";
			if (item.CollectionRelationshipType == MoM.Templates.CommonSqlCode.RelationshipType.OneToOne)
				typeName = item.TypeName;
			else
				typeName = item.CollectionTypeName;
		%>
			copy.<%= item.PropertyNameUnique %> = (<%= typeName %>) MakeCopyOf(this.<%=item.PropertyNameUnique %>, existingCopies); 
			<% }//end foreach CollectionInfo
		}//end if IncludeRelations
		%>
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed <%=className%> Entity 
		///</summary>
		public virtual <%=className%> Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed <%=className%> Entity which is a deep copy of the current entity.
		///</summary>
		public virtual <%=className%> DeepCopy()
		{
			return EntityHelper.Clone<<%=className%>>(this as <%=className%>);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as <%=structName%>;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as <%=structName%>;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(<%= GetClassName(SourceTable, ClassNameFormat.Column) %> column)
		{
			switch(column)
			{
				<% for (int x=0; x < cols.Count; x++) { %>
					case <%= GetClassName(SourceTable, ClassNameFormat.Column) %>.<%=GetPropertyName(cols[x])%>:
					return entityData.<%=GetPropertyName(cols[x])%> != _originalData.<%=GetPropertyName(cols[x])%>;
				<% } %>
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			<% for (int x=0; x < cols.Count; x++) { %>
			result = result || entityData.<%=GetPropertyName(cols[x])%> != _originalData.<%=GetPropertyName(cols[x])%>;
			<% } %>
			return result;
		}	
		
		///<summary>
		///  Returns a <%=className%> Entity with the original data.
		///</summary>
		public <%=className%> GetOriginalEntity()
		{
			if (_originalData != null)
				return Create<%=className%>(
				<%
				for (int i = 0;i < colsUpdatable.Count; i++)
				{%>
				_originalData.<%=GetPropertyName(colsUpdatable[i])%><%if (i < colsUpdatable.Count-1){%>,<%}%>
				<%}
				%>
				);
				
			return (<%=className%>)this.Clone();
		}
		#endregion
	
	<% if(EqualitySemantics == MoM.Templates.EqualitySemantics.Value) {%>
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="<%=abstractClassName%>"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is <%=abstractClassName%>)
				return ValueEquals(this, (<%=abstractClassName%>)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="<%=abstractClassName%>"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return <%
				for (int i=0; i < cols.Count; i++) 
				{
					if (i>0) 
					{
						Response.Write(" ^ \r\n\t\t\t\t\t");
					}
					if (cols[i].AllowDBNull) 
					{
						Response.Write("((this."+ GetPropertyName(cols[i]) + " == null) ? string.Empty : this."+ GetPropertyName(cols[i]) + ".ToString()).GetHashCode()");
					}
					else
					{
						Response.Write("this."+ GetPropertyName(cols[i]) + ".GetHashCode()");
					}
				} 
				%>;
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="<%=abstractClassName%>"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(<%=abstractClassName%> toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		<% } %>
		
		///<summary>
		/// Determines whether the specified <see cref="<%=abstractClassName%>"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="<%=abstractClassName%>"/> to compare.</param>
		///<param name="Object2">The second <see cref="<%=abstractClassName%>"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(<%=abstractClassName%> Object1, <%=abstractClassName%> Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
		<% for (int x=0; x < cols.Count; x++) {
			    if ( cols[x].AllowDBNull )
				{ %>
			if ( Object1.<%= GetPropertyName(cols[x]) %> != null && Object2.<%= GetPropertyName(cols[x]) %> != null )
			{
				if (Object1.<%= GetPropertyName(cols[x]) %> != Object2.<%= GetPropertyName(cols[x]) %>)
					equal = false;
			}
			else if (Object1.<%=GetPropertyName(cols[x])%> == null ^ Object2.<%=GetPropertyName(cols[x])%> == null )
			{
				equal = false;
			}
		      <%}
				else { %>
			if (Object1.<%= GetPropertyName(cols[x]) %> != Object2.<%= GetPropertyName(cols[x]) %>)
				equal = false;
			<% } // if ( cols[x].AllowDBNull ) %>
		<% }// end for %>	
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			<% // TODO -> generate a strongly typed IComparer in the concrete class %>
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((<%=abstractClassName%>)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static <%= GetClassName(SourceTable, ClassNameFormat.Comparer) %> GetComparer()
        {
            return new <%= GetClassName(SourceTable, ClassNameFormat.Comparer) %>();
        }
        */

        // Comparer delegates back to <%=className%>
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(<%=className%> rhs, <%= GetClassName(SourceTable, ClassNameFormat.Column) %> which)
        {
            switch (which)
            {
            	<% foreach(ColumnSchema column in cols) { %>
            	
            	<% if (column.DataType != DbType.Binary) { %>
            	
            	case <%= GetClassName(SourceTable, ClassNameFormat.Column) %>.<%=GetPropertyName(column)%>:
            		<% if (column.AllowDBNull && !IsCSReferenceDataType(column)) {%>
            		return this.<%=GetPropertyName(column)%>.Value.CompareTo(rhs.<%=GetPropertyName(column)%>.Value);
            		<% } else { %>
            		return this.<%=GetPropertyName(column)%>.CompareTo(rhs.<%=GetPropertyName(column)%>);
            		<% } %>  
            		
            	<% } %>
            		                 
            	<% } //end foreach %>                
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<<%= keyClassName %>> Members
		
		// member variable for the EntityId property
		private <%= keyClassName %> _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual <%= keyClassName %> EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new <%= keyClassName %>(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) <%= (!SerializeEntityState ? ", XmlIgnoreAttribute()" : "") %>]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("<%= className %>")<%
				for (int x=0; x < cols.Count;x++) { 
					if(cols[x].IsPrimaryKeyMember) {%>
					.Append("|").Append( this.<%=GetPropertyName(cols[x])%>.ToString())<%
					}// end if 
				} //end for each column %>.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{<%=cols.Count+1%>}{<%=cols.Count%>}<% for (int x=0; x < cols.Count; x++) { Response.Write("- " + GetPropertyName(cols[x]) + ": {" + x + "}{" + cols.Count + "}" ); } %>{<%=cols.Count+2%>}", 
			<%for (int x=0; x < cols.Count; x++)
			  {
			    if ( cols[x].AllowDBNull )
				{%>
				(this.<%=GetPropertyName(cols[x])%> == null) ? string.Empty : this.<%=GetPropertyName(cols[x])%>.ToString(),
				<%} else { %>
				this.<%= GetPropertyName(cols[x]) %>,
			<% } // if ( cols[x].AllowDBNull )
			} // for (int x=0; x < cols.Count; x++) %>
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		<%
			CodeTemplate template;
			if (CodeTemplates.ContainsKey("EntityData.cst"))
				template = CodeTemplates["EntityData.cst"];
			else
				template = base.CreateTemplate<EntityData>();
				
			this.CopyPropertiesTo(template);
			template.SetProperty("SourceTables", _sourceTables);
			template.SetProperty("SerializeEntityState", SerializeEntityState);
			template.SetProperty("IncludeWCFDataAttributes", IncludeWCFDataAttributes);
			
			Response.Write(template.RenderToString());
		%>
		#endregion
		
				
		<% if (IncludeWCFDataAttributes ) { %>
		
		#region DataContract serialization
		
		bool _deserializing = false;
		
		/// <summary>
		/// Called before deserializing the type.
		/// </summary>
		[OnDeserializingAttribute]
		private void Initialize_BeforeDeserializing(StreamingContext context)
		{
			this._deserializing = true;
		
			this.entityData = new <%=structName%>();
			this.backupData = null;
			
			AddValidationRules();
		}
		
		/// <summary>
		/// Called after deserializing the type.
		/// </summary>
		[OnDeserializedAttribute ]
		private void Initialize_Deserialized(StreamingContext context)
		{
			this._deserializing = false;
		}
				
		#endregion
		
		<% } %>
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="<%= GetClassName(SourceTable, ClassNameFormat.Column) %>"/> which has raised the event.</param>
		public virtual void OnColumnChanging(<%= GetClassName(SourceTable, ClassNameFormat.Column) %> column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="<%= GetClassName(SourceTable, ClassNameFormat.Column) %>"/> which has raised the event.</param>
		public virtual void OnColumnChanged(<%= GetClassName(SourceTable, ClassNameFormat.Column) %> column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="<%= GetClassName(SourceTable, ClassNameFormat.Column) %>"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(<%= GetClassName(SourceTable, ClassNameFormat.Column) %> column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				<%= GetClassName(SourceTable, ClassNameFormat.EventHandler) %> handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new <%= GetClassName(SourceTable, ClassNameFormat.EventArgs) %>(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="<%= GetClassName(SourceTable, ClassNameFormat.Column) %>"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(<%= GetClassName(SourceTable, ClassNameFormat.Column) %> column, object value)
		{
			if (!SuppressEntityEvents)
			{
				<%= GetClassName(SourceTable, ClassNameFormat.EventHandler) %> handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new <%= GetClassName(SourceTable, ClassNameFormat.EventArgs) %>(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region <%= GetClassName(SourceTable, ClassNameFormat.EventArgs) %> class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="<%=className%>"/> object.
	/// </remarks>
	public class <%= GetClassName(SourceTable, ClassNameFormat.EventArgs) %> : System.EventArgs
	{
		private <%= GetClassName(SourceTable, ClassNameFormat.Column) %> column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the <%= GetClassName(SourceTable, ClassNameFormat.EventArgs) %> class.
		///</summary>
		public <%= GetClassName(SourceTable, ClassNameFormat.EventArgs) %>(<%= GetClassName(SourceTable, ClassNameFormat.Column) %> column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the <%= GetClassName(SourceTable, ClassNameFormat.EventArgs) %> class.
		///</summary>
		public <%= GetClassName(SourceTable, ClassNameFormat.EventArgs) %>(<%= GetClassName(SourceTable, ClassNameFormat.Column) %> column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The <%= GetClassName(SourceTable, ClassNameFormat.Column) %> that was modified, which has raised the event.
		///</summary>
		///<value cref="<%= GetClassName(SourceTable, ClassNameFormat.Column) %>" />
		public <%= GetClassName(SourceTable, ClassNameFormat.Column) %> Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all <%=className%> related events.
	///</summary>
	public delegate void <%= GetClassName(SourceTable, ClassNameFormat.EventHandler) %>(object sender, <%= GetClassName(SourceTable, ClassNameFormat.EventArgs) %> e);
	
	#region <%= GetClassName(SourceTable, ClassNameFormat.Comparer) %>
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class <%= GetClassName(SourceTable, ClassNameFormat.Comparer) %> : System.Collections.Generic.IComparer<<%=className%>>
	{
		<%= GetClassName(SourceTable, ClassNameFormat.Column) %> whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:<%= GetClassName(SourceTable, ClassNameFormat.Comparer) %>"/> class.
        /// </summary>
		public <%= GetClassName(SourceTable, ClassNameFormat.Comparer) %>()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:<%= GetClassName(SourceTable, ClassNameFormat.Comparer) %>"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public <%= GetClassName(SourceTable, ClassNameFormat.Comparer) %>(<%= GetClassName(SourceTable, ClassNameFormat.Column) %> column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="<%=className%>"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="<%=className%>"/> to compare.</param>
        /// <param name="b">The second <c><%=className%></c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(<%=className%> a, <%=className%> b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(<%=className%> entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(<%=className%> a, <%=className%> b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public <%= GetClassName(SourceTable, ClassNameFormat.Column) %> WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region <%= keyClassName %> Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="<%= className %>"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class <%= keyClassName %> : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the <%= keyClassName %> class.
		/// </summary>
		public <%= keyClassName %>()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the <%= keyClassName %> class.
		/// </summary>
		public <%= keyClassName %>(<%= abstractClassName %> entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				<% foreach ( ColumnSchema column in pkCols ) { %>
				this.<%= GetPropertyName(column) %> = entity.<%= GetPropertyName(column) %>;
				<% } %>
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the <%= keyClassName %> class.
		/// </summary>
		public <%= keyClassName %>(<%= GetFunctionHeaderParameters(pkCols) %>)
		{
			#region Init Properties

			<% foreach ( ColumnSchema column in pkCols ) { %>
			this.<%= GetPropertyName(column) %> = <%= GetFieldName(column) %>;
			<% } %>

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private <%= abstractClassName %> _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public <%= abstractClassName %> Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		<% foreach ( ColumnSchema column in pkCols ) { %>
		// member variable for the <%= GetPropertyName(column) %> property
		private <%= GetCSType(column) %> <%= GetVariableName(column) %>;
		
		/// <summary>
		/// Gets or sets the <%= GetPropertyName(column) %> property.
		/// </summary>
		public <%= GetCSType(column) %> <%= GetPropertyName(column) %>
		{
			get { return <%= GetVariableName(column) %>; }
			set
			{
				if ( this.Entity != null )
					this.Entity.<%= GetPropertyName(column) %> = value;
				
				<%= GetVariableName(column) %> = value;
			}
		}
		
		<% } %>
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
			<% foreach ( ColumnSchema column in pkCols ) { %>
				<% if ( column.AllowDBNull ) { %>
				<%= GetPropertyName(column) %> = (<%= GetCSType(column) %>) EntityUtil.ChangeType(values["<%= GetPropertyName(column) %>"], typeof(<%= GetCSType(column) %>));
				<% } else { %>
				<%= GetPropertyName(column) %> = ( values["<%= GetPropertyName(column) %>"] != null ) ? (<%= GetCSType(column) %>) EntityUtil.ChangeType(values["<%= GetPropertyName(column) %>"], typeof(<%= GetCSType(column) %>)) : <%= GetCSDefaultByType(column) %>;
				<% } %>
			<% } %>
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			<% foreach ( ColumnSchema column in pkCols ) { %>
			values.Add("<%= GetPropertyName(column) %>", <%= GetPropertyName(column) %>);
			<% } %>

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("<% for ( int i=0; i<pkCols.Count; i++ ) { %><%= GetPropertyName(pkCols[i]) %>: {<%= i %>}{<%= pkCols.Count %>}<% } %>",
						<% foreach ( ColumnSchema column in pkCols ) { %>
							<% if ( column.AllowDBNull ) { %>
								(<%= GetPropertyName(column) %> ?? String.Empty),
							<% } else { %>
								<%= GetPropertyName(column) %>,
							<% } %>
						<% } %>
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region <%= GetClassName(SourceTable, ClassNameFormat.Column) %> Enum
	
	/// <summary>
	/// Enumerate the <%=className%> columns.
	/// </summary>
	[Serializable]
	public enum <%= GetClassName(SourceTable, ClassNameFormat.Column) %> : int
	{
		<% for (int x=0; x < cols.Count; x++) { %>
		/// <summary>
		/// <%=GetPropertyName(cols[x])%> : <%=GetColumnXmlComment(cols[x],2)%>
		/// </summary>
		[EnumTextValue("<%= cols[x].Name %>")]
		[ColumnEnum(<%= GetColumnEnumAttributeParams(cols[x]) %>)]
		<%=GetPropertyName(cols[x])%> = <%= (x+1) %><%if(x < cols.Count -1) {%>,<%}%>
		<% }// end for %>	
	}//End enum

	#endregion <%= GetClassName(SourceTable, ClassNameFormat.Column) %> Enum

} // end namespace
<script runat="template">
///<summary>
/// Many To Many Relationship Class Template Property String
///</summary>
protected static string MANY_TO_MANY = @"
		/// <summary>
		///	Holds a collection of {3} objects
		///	which are related to this object through the junction table {2}
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual {1} {0}
		{{
			get {{ return entityData.{0}; }}
			set {{ entityData.{0} = value; }}	
		}}
";

///<summary>
/// One to One Relationship Class Template Property String
///</summary>		
protected static string ONE_TO_ONE = @"
		/// <summary>
		///	Holds a {0} object
		///	which is related to this object through the relation {1}
		/// </summary>
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual {0} {0}
		{{
			get {{ return entityData.{0}; }}
			set {{ entityData.{0} = value; }}	
		}}
";
		
///<summary>
/// One To Many Relationship Class Template Property String
///</summary>		
protected static string ONE_TO_MANY = @"	
		/// <summary>
		///	Holds a collection of {2} objects
		///	which are related to this object through the relation {1}
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual {0} {3}
		{{
			get {{ return entityData.{3}; }}
			set {{ entityData.{3} = value; }}	
		}}
";
		
///<summary>
///   Writes out the property string of all the relationship object collections.
///</summary>
private void WriteRelationshipPropertyString() 
{

	///Loop Child Collections
	foreach (CollectionInfo item in GetChildrenCollections(SourceTable, SourceTables).Values)
	{		
		///Assign by RelationshipType, Then Write to Response
		switch((int)item.CollectionRelationshipType)
		{
			///One To One Relationship
			case (int)RelationshipType.OneToOne:								
				object[] oneToOneParams = {
							item.PropertyNameUnique,
							item.TypeName
				};
				item.PropertyName = string.Format(ONE_TO_ONE, oneToOneParams);
				break;
				
			///One To Many, Many To One
			case (int)RelationshipType.OneToMany:
			case (int)RelationshipType.ManyToOne:
				object[] oneToManyParams = {
						item.TypeName
						, item.PkIdxName
						, item.SecondaryTable
						, item.PropertyNameUnique
				};
			item.PropertyName = string.Format(ONE_TO_MANY, oneToManyParams);
			break;
			
			///Many To Many
			case (int)RelationshipType.ManyToMany:
				object[] manyToManyParams = {
							item.PropertyNameUnique
						,	item.TypeName
						,	item.JunctionTable
						, 	item.CleanName
				};
				item.PropertyName = string.Format(MANY_TO_MANY, manyToManyParams);
				break;
			default:
				break;
		}
	
		///Write it out to the resonse stream
		Response.Write(item.PropertyName);	
	
	}///End foreach loop
		
}
</script>
