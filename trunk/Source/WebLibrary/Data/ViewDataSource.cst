<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="..\..\TemplateLib\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Debug="False" Description="Generates a data source control for each view." ResponseEncoding="UTF-8" NoWarn="0108,0618,1572,1573,1574,0162,2002" %>
<%@ Property Name="BLLNameSpace" Optional="False" Type="System.String" Category="Style" Description="Object Namespace." %>
<%@ Property Name="DALNameSpace" Optional="False" Type="System.String" Category="Style" Description="DAL Namespace." %>
<%@ Property Name="WebNameSpace" Optional="False" Type="System.String" Category="Style" Description="Web Namespace." %>
<%@ Property Name="ComponentLayerNameSpace" Optional="False" Type="System.String" Category="Style" Description="Component Namespace." %>

<%@ Property Name="SourceView" Type="SchemaExplorer.ViewSchema" Category="Connection" Description="Table that the data access class should be based on." %>
<%@ Property Name="IncludeDatabaseFeatures" Type="MoM.Templates.DatabaseType" Category="02. Framework Generation - Optional" Description="Indicates which database specific features to generate." Default="None" %>
<%@ Property Name="IncludeComponentLayer" Type="MoM.Templates.ComponentPatternType" Category="02. Framework Generation - Optional" Description="The pattern type to implement in the Component Layer." Default="None" %>
<%@ Property Name="IncludeCustoms" Type="System.Boolean" Default="True" Category="07. CRUD - Advanced" Description="If true custom stored procedures (that starts with '_TableName_') will be detected and generated." %>
<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeFind" Type="System.Boolean" Default="True" Category="Options" Description="If true Find functions will be generated." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Text" %>
<%
	// collection of custom stored procedures
	IDictionary procs = GetCustomProcedures(SourceView);
	
	bool IsServiceLayer = (IncludeComponentLayer == MoM.Templates.ComponentPatternType.ServiceLayer);
	string pagingProperty = "StartIndex";
	
	if ( IncludeDatabaseFeatures == MoM.Templates.DatabaseType.SQLServer2005 )
	{
		pagingProperty = "PageIndex";
	}
	
	string viewName = SourceView.Name;
	string className = GetClassName(SourceView);
	string providerName = GetClassName(SourceView, ClassNameFormat.Provider);
	string providerBaseName = GetClassName(SourceView, ClassNameFormat.ProviderBase);
	string providerObject = "DataRepository." + providerName;
	
	if ( IsServiceLayer )
	{
		providerBaseName = GetClassName(SourceView, ClassNameFormat.Service);
		providerObject = String.Format("new {0}()", providerBaseName);
	}
	
	// holds method names used in GetSelectData method
	IList methods = new ArrayList();
	// holds method names used in SelectMethod enum
	IList methodNames = new ArrayList();
	
	bool HasCustomMethods = false;
	
	if ( IncludeGetList )
	{
		methodNames.Add(MethodNames.Get);
		methodNames.Add(MethodNames.GetPaged);
		methodNames.Add(MethodNames.GetAll);
	}
	if ( IncludeFind )
	{
		methodNames.Add(MethodNames.Find);
	}
	if ( IncludeCustoms )
	{
		CommandSchema command;
		string methodName;
		
		foreach ( DictionaryEntry p in procs )
		{
			methodName = (string) p.Key;
			command = (CommandSchema) p.Value;
			
			// currently we only support custom methods with matching return values
			if ( IsMatching(command, SourceView) && !methodNames.Contains(methodName) )
			{
				methodNames.Add(methodName);
				HasCustomMethods = true;
			}
		}
	}
%>
#region Using Directives
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.Design;
using <%= BLLNameSpace %>;
using <%= DALNameSpace %>;
using <%= DALNameSpace %>.Bases;
<% if ( IsServiceLayer ) { %>
using <%= ComponentLayerNameSpace %>;
<% } %>
#endregion

namespace <%= WebNameSpace %>.Data
{
	/// <summary>
	/// Represents the DataRepository.<%= className %>Provider object that provides
	/// data to data-bound controls in multi-tier Web application architectures.
	/// </summary>
	[CLSCompliant(true)]
	[Designer(typeof(<%= className %>DataSourceDesigner))]
	public class <%= className %>DataSource : ReadOnlyDataSource<<%= className %>>
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the <%= className %>DataSource class.
		/// </summary>
		public <%= className %>DataSource() : base(<%= providerObject %>)
		{
		}

		#endregion Constructors
		
		#region Properties
		
		/// <summary>
		/// Gets a reference to the <%= className %>DataSourceView used by the <%= className %>DataSource.
		/// </summary>
		protected <%= className %>DataSourceView <%= className %>View
		{
			get { return ( View as <%= className %>DataSourceView ); }
		}
		
		<% if ( HasCustomMethods ) { %>
		/// <summary>
		/// Gets or sets the name of the method or function that
		/// the <%= className %>DataSource control invokes to retrieve data.
		/// </summary>
		public new <%= className %>SelectMethod SelectMethod
		{
			get
			{
				<%= className %>SelectMethod selectMethod = <% if ( IncludeGetList ) { %><%= className %>SelectMethod.<%= MethodNames.GetAll %><% } else { %>default(<%= className %>SelectMethod)<% } %>;
				Object method = ViewState["SelectMethod"];
				if ( method != null )
				{
					selectMethod = (<%= className %>SelectMethod) method;
				}
				return selectMethod;
			}
			set { ViewState["SelectMethod"] = value; }
		}
		
		<% } // end if ( HasCustomMethods ) { %>
		#endregion Properties
		
		#region Methods

		/// <summary>
		/// Creates a new instance of the <%= className %>DataSourceView class that is to be
		/// used by the <%= className %>DataSource.
		/// </summary>
		/// <returns>An instance of the <%= className %>DataSourceView class.</returns>
		protected override BaseDataSourceView<<%= className %>, Object> GetNewDataSourceView()
		{
			return new <%= className %>DataSourceView(this, DefaultViewName);
		}
		
		/// <summary>
        /// Creates a cache hashing key based on the startIndex, pageSize and the SelectMethod being used.
        /// </summary>
        /// <param name="startIndex">The current start row index.</param>
        /// <param name="pageSize">The current page size.</param>
        /// <returns>A string that can be used as a key for caching purposes.</returns>
		protected override string CacheHashKey(int startIndex, int pageSize)
        {
			return String.Format("{0}:{1}:{2}", SelectMethod, startIndex, pageSize);
        }
		
		#endregion Methods
	}
	
	/// <summary>
	/// Supports the <%= className %>DataSource control and provides an interface for
	/// data-bound controls to perform data operations with business and data objects.
	/// </summary>
	public class <%= className %>DataSourceView : ReadOnlyDataSourceView<<%= className %>>
	{
		#region Declarations

		#endregion Declarations
		
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the <%= className %>DataSourceView class.
		/// </summary>
		/// <param name="owner">A reference to the <%= className %>DataSource which created this instance.</param>
		/// <param name="viewName">The name of the view.</param>
		public <%= className %>DataSourceView(<%= className %>DataSource owner, String viewName)
			: base(owner, viewName)
		{
		}
		
		#endregion Constructors
		
		#region Properties

		/// <summary>
		/// Gets a strongly-typed reference to the Owner property.
		/// </summary>
		internal <%= className %>DataSource <%= className %>Owner
		{
			get { return Owner as <%= className %>DataSource; }
		}

		<% if ( HasCustomMethods ) { %>
		/// <summary>
		/// Gets or sets the name of the method or function that
		/// the DataSource control invokes to retrieve data.
		/// </summary>
		internal new <%= className %>SelectMethod SelectMethod
		{
			get { return <%= className %>Owner.SelectMethod; }
			set { <%= className %>Owner.SelectMethod = value; }
		}

		<% } // if ( HasCustomMethods ) { %>
		/// <summary>
		/// Gets a strongly typed reference to the Provider property.
		/// </summary>
		internal <%= providerBaseName %> <%= providerName %>
		{
			get { return Provider as <%= providerBaseName %>; }
		}

		#endregion Properties
		
		#region Methods
		
		<% if ( HasCustomMethods ) { %>
		/// <summary>
		/// Gets a collection of Entity objects based on the value of the SelectMethod property.
		/// </summary>
		/// <param name="count">The total number of rows in the DataSource.</param>
		/// <returns>A collection of Entity objects.</returns>
		protected override IList<<%= className %>> GetSelectData(out int count)
		{
			Hashtable values = CollectionsUtil.CreateCaseInsensitiveHashtable(GetParameterValues());
			IList<<%= className %>> results = null;
			// <%= className %> item;
			count = 0;
			<%= WriteParameterDeclarations(procs) %>
			switch ( SelectMethod )
			{
				<%
				if ( IncludeGetList )
				{
				%>
				case <%= className %>SelectMethod.<%= MethodNames.Get %>:
					results = <%= providerName %>.<%= MethodNames.Get %>(<%= TransactionManager %>WhereClause, OrderBy, <%= pagingProperty %>, PageSize, out count);
                    break;
				case <%= className %>SelectMethod.<%= MethodNames.GetPaged %>:
					results = <%= providerName %>.<%= MethodNames.GetPaged %>(<%= TransactionManager %>WhereClause, OrderBy, <%= pagingProperty %>, PageSize, out count);
					break;
				case <%= className %>SelectMethod.<%= MethodNames.GetAll %>:
					results = <%= providerName %>.<%= MethodNames.GetAll %>(<%= TransactionManager %>StartIndex, PageSize, out count);
                    break;
				<% } // end if ( IncludeGetList ) { %>
				<% if ( IncludeFind ) { %>
				case <%= className %>SelectMethod.<%= MethodNames.Find %>:
					results = <%= providerName %>.<%= MethodNames.Find %>(<%= TransactionManager %>FilterParameters, OrderBy, StartIndex, PageSize, out count);
                    break;
				<% } // end if ( IncludeFind ) {
				if ( IncludeCustoms )
				{
					Response.Write("\t\t\t\t// Custom" + Environment.NewLine);
					Response.Write(WriteCustomSelectStatements(SourceView, methods, IsServiceLayer));
				}
				%>
				default:
					break;
			}

			if ( results != null && count < 1 )
			{
				count = results.Count;
			}
			
			return results;
		}
		
		<% } // end if ( HasCustomMethods ) { %>
		#endregion Methods
	}

	<% if ( HasCustomMethods ) { %>
	#region <%= className %>SelectMethod
	
	/// <summary>
	/// Enumeration of method names available for the <%= className %>DataSource.SelectMethod property.
	/// </summary>
	public enum <%= className %>SelectMethod
	{
		<% for( int j = 0; j < methodNames.Count; j++ ) { %>
		/// <summary>
		/// Represents the <%= methodNames[j].ToString() %> method.
		/// </summary>
		<%= methodNames[j].ToString() %><% if (j < methodNames.Count-1) { %>,<% } %>
		<% } %>
	}
	
	#endregion <%= className %>SelectMethod
	
	<% } // end if ( HasCustomMethods ) { %>
	#region <%= className %>DataSourceDesigner

	/// <summary>
	/// Provides design-time support in a design host for the <%= className %>DataSource class.
	/// </summary>
	public class <%= className %>DataSourceDesigner : ReadOnlyDataSourceDesigner<<%= className %>>
	{
		<% if ( HasCustomMethods ) { %>
		/// <summary>
		/// Initializes a new instance of the <%= className %>DataSourceDesigner class.
		/// </summary>
		public <%= className %>DataSourceDesigner()
		{
		}

		/// <summary>
		/// Gets or sets the SelectMethod property.
		/// </summary>
		public new <%= className %>SelectMethod SelectMethod
		{
			get { return ((<%= className %>DataSource) DataSource).SelectMethod; }
			set { SetPropertyValue("SelectMethod", value); }
		}

		/// <summary>Gets the designer action list collection for this designer.</summary>
		/// <returns>The <see cref="T:System.ComponentModel.Design.DesignerActionListCollection"/>
		/// associated with this designer.</returns>
		public override DesignerActionListCollection ActionLists
		{
			get
			{
				DesignerActionListCollection actions = new DesignerActionListCollection();
				actions.Add(new <%= className %>DataSourceActionList(this));
				actions.AddRange(base.ActionLists);
				return actions;
			}
		}
		<% } // end if ( HasCustomMethods ) { %>
	}

	<% if ( HasCustomMethods ) { %>
	#region <%= className %>DataSourceActionList

	/// <summary>
	/// Supports the <%= className %>DataSourceDesigner class.
	/// </summary>
	internal class <%= className %>DataSourceActionList : DesignerActionList
	{
		private <%= className %>DataSourceDesigner _designer;

		/// <summary>
		/// Initializes a new instance of the <%= className %>DataSourceActionList class.
		/// </summary>
		/// <param name="designer"></param>
		public <%= className %>DataSourceActionList(<%= className %>DataSourceDesigner designer) : base(designer.Component)
		{
			_designer = designer;
		}

		/// <summary>
		/// Gets or sets the SelectMethod property.
		/// </summary>
		public <%= className %>SelectMethod SelectMethod
		{
			get { return _designer.SelectMethod; }
			set { _designer.SelectMethod = value; }
		}

		/// <summary>
		/// Returns the collection of <see cref="T:System.ComponentModel.Design.DesignerActionItem"/>
		/// objects contained in the list.
		/// </summary>
		/// <returns>A <see cref="T:System.ComponentModel.Design.DesignerActionItem"/>
		/// array that contains the items in this list.</returns>
		public override DesignerActionItemCollection GetSortedActionItems()
		{
			DesignerActionItemCollection items = new DesignerActionItemCollection();
			items.Add(new DesignerActionPropertyItem("SelectMethod", "Select Method", "Methods"));
			return items;
		}
	}

	#endregion <%= className %>DataSourceActionList

	<% } // end if ( HasCustomMethods ) { %>
	#endregion <%= className %>DataSourceDesigner

	#region <%= className %>Filter

	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilter&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="<%= className %>"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class <%= className %>Filter : SqlFilter<<%= className %>Column>
	{
	}

	#endregion <%= className %>Filter

	#region <%= className %>ExpressionBuilder
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlExpressionBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="<%= className %>"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class <%= className %>ExpressionBuilder : SqlExpressionBuilder<<%= className %>Column>
	{
	}
	
	#endregion <%= className %>ExpressionBuilder		
}

<script runat="template">
private string TransactionManager
{
	get { return (IncludeComponentLayer != MoM.Templates.ComponentPatternType.ServiceLayer) ? "GetTransactionManager(), " : ""; }
}

private string WriteParameterDeclarations(IDictionary procs)
{
	StringBuilder sb = new StringBuilder(Environment.NewLine);
	ArrayList columns = new ArrayList();

	if ( IncludeCustoms )
	{
		foreach ( CommandSchema command in procs.Values )
		{
			if ( IsMatching(command, SourceView) )
			{
				foreach ( ParameterSchema param in command.InputParameters )
				{
					string unique = GetCustomVariableName(param.Name , command);
					if( !columns.Contains(unique) )
					{
						columns.Add(unique);
						WriteParameterDeclaration(param, sb, false);
					}
				}
				
				foreach ( ParameterSchema param in command.AllOutputParameters )
				{
					string unique = GetCustomVariableName(param.Name , command);
					if( !columns.Contains(unique) )
					{
						columns.Add(unique);
						WriteParameterDeclaration(param, sb, true);
					}
				} 
			}
		}
	}
	
	return sb.ToString();
}

private void WriteParameterDeclaration(ParameterSchema param, StringBuilder sb, bool useDefaultValue)
{
	sb.AppendFormat("\t\t\t{1} {0}{2};{3}",
					GetCustomVariableName(param.Name, param.Command),
					GetCSType(param),
					(useDefaultValue ? string.Format(" = {0}", GetCSDefaultByType(param)) : ""),
					Environment.NewLine);
}

private string WriteCustomSelectStatements(ViewSchema view, IList methods, bool isServiceLayer)
{
	IDictionary procs = GetCustomProcedures(SourceView);
	StringBuilder sb = new StringBuilder();
	CommandSchema command;
	string methodName;
	
	string pagingParams = "StartIndex, PageSize";
	string methodParams;

	foreach ( DictionaryEntry p in procs )
	{
		methodName = (string) p.Key;
		command = (CommandSchema) p.Value;

		// currently we only support custom methods with matching return values
		if ( IsMatching(command, SourceView) && !methods.Contains(methodName) )
		{
			methodParams = TransformStoredProcedureInputsToDataAccess(!isServiceLayer, command.InputParameters, true) + TransformStoredProcedureOutputsToDataAccess(command.InputParameters.Count > 0, command.AllOutputParameters, true);
			//methodParams = TransformStoredProcedureInputsToDataAccess(!isServiceLayer, command.InputParameters, true);
			methods.Add(methodName);
			sb.Append(WriteCaseStatement(view, methodName, false));
			sb.Append(WriteParameterStatements(command.InputParameters, view.Name));
			sb.AppendFormat("\t\t\t\t\tresults = {0}.{1}({2}{3}{4}{5});{6}",
							GetClassName(view, ClassNameFormat.Provider),
							methodName,
							TransactionManager,
							(isServiceLayer ? methodParams : pagingParams),
							(isServiceLayer && (command.InputParameters.Count + command.AllOutputParameters.Count > 0) ? ", " : ""),
//							(isServiceLayer && (command.InputParameters.Count > 0) ? ", " : ""),
							(isServiceLayer ? pagingParams : methodParams),
							Environment.NewLine);
			sb.Append(WriteBreakStatement());
		}
	}
	
	return sb.ToString();
}

private string WriteParameterStatements(ParameterSchemaCollection parameters, string tableName)
{
	StringBuilder sb = new StringBuilder();
	foreach ( ParameterSchema param in parameters )
	{
		if ( param.AllowDBNull )
		{
			sb.AppendFormat("\t\t\t\t\t{0} = ({2}) EntityUtil.ChangeType(values[\"{1}\"], typeof({2}));{3}",
							GetCustomVariableName(param.Name, param.Command),
							GetPropertyName(param),
							GetCSType(param),
							Environment.NewLine);
		}
		else
		{
			sb.AppendFormat("\t\t\t\t\t{0} = ( values[\"{1}\"] != null ) ? ({2}) EntityUtil.ChangeType(values[\"{1}\"], typeof({2})) : {3};{4}",
							GetCustomVariableName(param.Name , param.Command),
							GetPropertyName(param),
							GetCSType(param),
							GetCSDefaultByType(param),
							Environment.NewLine);
		}
	}
	return sb.ToString();
}

private string WriteCaseStatement(ViewSchema view, string methodName)
{
	return WriteCaseStatement(view, methodName, true);
}

private string WriteCaseStatement(ViewSchema view, string methodName, bool includeGetBy)
{
	StringBuilder sb = new StringBuilder();
	sb.AppendFormat("\t\t\t\tcase {0}SelectMethod.{1}{2}:{3}",
					GetClassName(view),
					(includeGetBy ? "GetBy" : ""),
					methodName,
					Environment.NewLine);
	return sb.ToString();
}

private string WriteBreakStatement()
{
	StringBuilder sb = new StringBuilder();
	sb.AppendFormat("\t\t\t\t\tbreak;{0}", Environment.NewLine);
	return sb.ToString();
}
</script>
