<%@ CodeTemplate Src="TemplateLib/CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="Text" Description="NetTiers main template." Debug="True" ResponseEncoding="UTF-8" NoWarn="0108,0618,1572,1573,1574,0162,2002" CompilerVersion="v3.5"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Assembly Name="System.DirectoryServices" %>
<%@ Assembly Name="System.Web" %>
<%@ Assembly Name="System.Xml" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import NameSpace="System.Text" %>
<%@ Import NameSpace="System.Text.RegularExpressions" %>
<%@ Import NameSpace="System.Diagnostics" %>
<%@ Import NameSpace="System.Xml" %>
<%@ Import NameSpace="System.Xml.Xsl" %>
<%@ Import NameSpace="System.Xml.XPath" %> 

<%-- 1. Datasource --%>
<%@ Property Name="ChooseSourceDatabase" Type="SchemaExplorer.DatabaseSchema" DeepLoad="True" Optional="False" Category="01. Getting Started - Required" Description="Database that the tables views, and stored procedures should be based on. IMPORTANT!!! If SourceTables and SourceViews are left blank, the Entire Database will then be generated." %>

<%-- 2. Framework Generation Category --%>
<%@ Property Name="ExecuteSql" Type="System.Boolean" Default="False" Category="02. Framework Generation - Optional" Description="If true the stored procedures are installed on the sql server. (The SQL file is generated in all case)" %>
<%@ Property Name="SQLFolderName" Type="System.String" Category="02. Framework Generation - Optional" Description="The sub folder to output the SQL scripts" Default="SQL" Optional="False"%>
<%@ Property Name="ViewReport" Type="System.Boolean" Default="True" Category="02. Framework Generation - Optional" Description="Indicates if the html report should launched at the end of the generation." %>
<%@ Property Name="AutoIncrementBuildVersion" Type="System.Boolean" Default="True" Category="02. Framework Generation - Optional" Description="Indicates if assembley build version should be auto incremented." %>
<%@ Property Name="LaunchVisualStudio" Type="System.Boolean" Default="False" Category="02. Framework Generation - Optional" Description="Attempts to launch visual studio with the generated solution only if there are no instances already open." %>
<%@ Property Name="IncludeUnitTest" Type="MoM.Templates.UnitTestStyle" Default="None" Category="02. Framework Generation - Optional" Description="Indicates type of Unit tests to be generated." %>
<%@ Property Name="IncludeComponentLayer" Type="MoM.Templates.ComponentPatternType" Category="02. Framework Generation - Optional" Description="The pattern type to implement in the Component Layer." Default="None" %>
<%@ Property Name="IncludeWCFDataAttributes" Type="System.Boolean" Default="False" Category="02. Framework Generation - Optional" Description="Indicates if the WCF attributes, [DataContract] and [DataMember], should be included on the entity classes." %>
<%@ Property Name="SerializeEntityState" Type="System.Boolean" Default="False" Category="02. Framework Generation - Optional" Description="Indicates if the EntityState property should be included during serialization.  Useful if needing to know what state the entity is in over webservices." %>
<%@ Property Name="EntLibVersion" Type="MoM.Templates.EntLibVersion" Default="v5_0" Category="02. Framework Generation - Optional" Description="Indicates the Enterprise Library version to use. Options include v3.1, v5.0" %>
<%@ Property Name="VisualStudioVersion" Type="MoM.Templates.VSNetVersion" Default="v2008" Category="02. Framework Generation - Optional" Description="Indicates the Version of Visual Studio to target. Options include v2005, v2008 and v2010" %>
<%@ Property Name="DotNetVersion" Type="MoM.Templates.DotNetFrameworkVersion" Default="v3_5" Category="02. Framework Generation - Optional" Description="Indicates the Version of Dot Net to target. Options include v2, v3 and v3.5" %>
<%@ Property Name="IncludeXmlAttributes" Type="System.Boolean" Default="False" Category="02. Framework Generation - Optional" Description="Indicates if the Xml attributes, [XmlElement(IsNullable=true)], should be included on the entity classes." %>
<%@ Property Name="CustomCodeFolderName" Type="System.String" Category="02. Framework Generation - Optional" Description="If specified, indicates the name of a folder that can contains custom classes to dynamically add to each project." Default="App_Code" %>
<%@ Property Name="EqualitySemantics" Type="MoM.Templates.EqualitySemantics" Default="Value" Category="02. Framework Generation - Optional" Description="Equality semantics used for Entity instances.  If 'Reference', default reference type semantics will be used (based on object identity).  If 'Value', Equals() and GetHashCode() will be overridden to use value semantics (based on object contents)." %>
<%@ Property Name="TimeStandard" Type="TimeStandardEnum" Default="Local" Category="02. Framework Generation - Optional" Description="Standard used for generating DateTime values. If 'UTC' DateTime is generated based on UtcNow. If 'Local' DateTime is generated based on DateTime.Now" %>
<%@ Property Name="IsConnectionStringAzure" Type="System.Boolean" Default="False" Category="02. Framework Generation - Optional" Description="Indicates if at runtime the netTiersConnectionString is read from Window Azure's ServiceConfiguration.cscfg or from Web.config/app.config." %>

<%-- 3. Namespaces Category --%>
<%@ Property Name="BusinessLogicLayerNameSpace" Type="System.String" Category="03. Namespaces - Required" Description="The sub namespace that is added to the root namespace for the entities." Default="Entities" Optional="False" %>
<%@ Property Name="DataAccessLayerNameSpace" Type="System.String" Category="03. Namespaces - Required" Description="The sub namespace for the Data access layer components classes." Default="Data" Optional="False"%>
<%@ Property Name="UnitTestsNameSpace" Type="System.String" Category="03. Namespaces - Required" Description="The sub namespace for the UnitTests classes." Default="UnitTests" %>

<%-- End Required, The Rest Optional --%>
<%-- General Category --%>
<%@ Property Name="CompanyName" Optional="True" Type="System.String" Category="04. General - Advanced" Description="The name of your company. This is only for documenation." %>
<%@ Property Name="CompanyURL" Optional="True" Type="System.String" Category="04. General - Advanced" Description="The URL of your company. This is only for documenation." %>
<%@ Property Name="SignAssembly" Type="System.Boolean" Category="04. General - Advanced" Description="If true, projects will try to sign the assemblies and search for the snk in the local directory." Default="false" %>

<%-- 5.0 Web Library --%>
<%@ Property Name="GenerateWebLibrary" Type="System.Boolean" Default="true" Category="05. WebLibrary - Advanced" Description="Indicates if the web library should be generated.  This contains the EntityDataSource and Other Helpful ASP.net utility classes." %>
<%@ Property Name="IncludeDesignTimeSupport" Type="System.Boolean" Default="true" Category="05. WebLibrary - Advanced" Description="Indicates if Visual Studio design-time support should be provided for the Web Library controls." %>
<%@ Property Name="DataSourceEnableTransactionDefault" Type="System.Boolean" Default="true" Category="05. WebLibrary - Advanced" Description="Sets the default for the EnableTransaction property on the data source controls." %>

<%-- 6.0 ASP.Net Admin Controls --%>

<%-- 6.0 webservice --%>
<%@ Property Name="WebServiceClassName" Type="System.String" Optional="True" Default="" Category="06. Web - Advanced" Description="The class name of the Web Services.  Defaults to Namespace + 'Services' if not specified." %>
<%@ Property Name="GenerateWebservice" Type="System.Boolean" Default="false" Category="06. Web - Advanced" Description="Indicates if the webservice dataaccesslayer should be generated" %>
<%@ Property Name="AttemptCreateLocalVirtualDirectory" Type="System.Boolean" Default="false" Category="06. Web - Advanced" Description="Indicates if you would like the generator to attempt to create the virtual directory for the url specified in WebServiceUrl if it doesn't exist for the WebserviceOutput directory." %>

<%-- 6.5 ASP.Net Website --%>
<%@ Property Name="GenerateWebsite" Type="System.Boolean" Default="true" Category="06b. Website - Advanced" Description="Indicates if a complete website should be generated." %>
<%@ Property Name="UseWebAppProject" Type="System.Boolean" Default="false" Category="06b. Website - Advanced" Description="Indicates if a Web Application Project file should be generated.  Note: you must have the Visual Studio extension installed in order to open the project." %>
<%@ Property Name="OverwriteWebConfig" Type="System.Boolean" Default="false" Category="06b. Website - Advanced" Description="Indicates if the Web.config should be overwritten." %>
<%@ Property Name="IncludeAtlasLibrary" Type="System.Boolean" Default="false" Category="06b. Website - Advanced" Description="Indicates whether to include a reference to the Atlas component library." %>
<%@ Property Name="IncludeAtlasToolkit" Type="System.Boolean" Default="false" Category="06b. Website - Advanced" Description="Indicates whether to include a reference to the Atlas Control Toolkit. This property is only taken into account when IncludeAtlasLibrary is true." %>
<%@ Property Name="GenerateWebsiteAdmin" Type="System.Boolean" Default="true" Category="06b. Website - Advanced" Description="Indicates if the web admin  should be generated." %>
<%@ Property Name="DateFormat" Type="System.String" Default="MM/dd/yyyy" Category="06b. Website - Advanced" Description="The format to be used when displaying dates in the web site." %>

<%-- 7.0 Retry of SQL statements --%>
<%@ Property Name="RetryEnabled" Optional="False" Type="System.Boolean" Category="07. CRUD - Advanced" Default="false" Description="Enabling Retry will add code retry the queries that failed with data exceptions. Useful to if your database becomes temporarily unavailable." %>
<%@ Property Name="RetryMaxAttempts" Optional="True" Type="System.Int32" Category="07. CRUD - Advanced" Description="The number of attempts that will be made." Default="5" %>
<%@ Property Name="RetrySleepTime" Optional="True" Type="System.Int32" Category="07. CRUD - Advanced" Description="The number of milliseconds that the current thread will sleep between attempts.  Sleep only occurs if an exception is thrown." Default="1000" %>
<%@ Property Name="RetrySleepStyle" Optional="True" Type="MoM.Templates.SleepStyle" Category="07. CRUD - Advanced" Description="" %>
<%-- 7.0 CRUD Options --%>
<%@ Property Name="LibraryPath" Type="System.String" Default="References" Category="07. CRUD - Advanced" Description="Path of the assembly library directory from the project output directory root." %>
<%@ Property Name="IncludeCustoms" Type="System.Boolean" Default="True" Category="07. CRUD - Advanced" Description="If true custom stored procedures (that starts with '_TableName_') will be detected and generated." %>
<%@ Property Name="CustomNonMatchingReturnType" Type="CustomNonMatchingReturnType" Default="DataSet" Category="07. CRUD - Advanced" Description="When using custom stored procedures, if the returned rows do not match the fields in an entity, a DataSet or IDataReader will be returned. Choose One.  This is useful if you've returned more than one resultset in a custom procedure; you can use a ConvertToDataSet(IDataReader) method in the Utility class to convert that to a DataSet." %>

<%@ Property Name="IncludeDrop" Type="System.Boolean" Default="True" Category="07. CRUD - Advanced" Description="If True then drop statements will be generated in accordance with the DropStyle. If False then no procedures will be droppped" %>
<%@ Property Name="DropStyle" Type="DropStyleEnum" Default="Entity" Category="07. CRUD - Advanced" Description="If Entity then drop statements will be generated to drop existing stored procedures for procedures being generated. If All then all existing netTiers procedures that match the ProcedurePrefix (one must be specified) and do not match the CustomProceduresStartsWith will be droppped." %>
<%@ Property Name="IncludeInsert" Type="System.Boolean" Default="True" Category="07. CRUD - Advanced" Description="If true insert procedures will be generated." %>
<%@ Property Name="IncludeUpdate" Type="System.Boolean" Default="True" Category="07. CRUD - Advanced" Description="If true update procedures will be generated." %>
<%@ Property Name="IncludeSave" Type="System.Boolean" Default="True" Category="07. CRUD - Advanced" Description="If true combined insert/update/delete procedures will be generated. In consequence, if this option is selected IncludeInsert, IncludeUpdate and IncludeDelete are automatically activated." %>
<%@ Property Name="IncludeDelete" Type="System.Boolean" Default="True" Category="07. CRUD - Advanced" Description="If true delete procedures will be generated." %>
<%@ Property Name="IncludeGet" Type="System.Boolean" Default="True" Category="07. CRUD - Advanced" Description="If true get procedures will be generated." %>
<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="07. CRUD - Advanced" Description="If true getlist procedures will be generated." %>	
<%@ Property Name="IncludeGetListByFK" Type="System.Boolean" Default="True" Category="07. CRUD - Advanced" Description="If true get statements will be generated." %>
<%@ Property Name="IncludeGetListByIX" Type="System.Boolean" Default="True" Category="07. CRUD - Advanced" Description="If true getlist statements will be generated." %>
<%@ Property Name="IncludeFind" Type="System.Boolean" Default="True" Category="07. CRUD - Advanced" Description="If true find statements will be generated." %>
<%@ Property Name="IncludeManyToMany" Type="System.Boolean" Default="True" Category="07. CRUD - Advanced" Description="If true select statements will be generated for any many to many relationship." %>
<%@ Property Name="IncludeRelations" Type="System.Boolean" Default="True" Category="07. CRUD - Advanced" Description="If true select statements will be generated for any many to many relationship." %>
<%@ Property Name="IsolationLevel" Type="TransactionIsolationLevelEnum" Default="None" Category="07. CRUD - Advanced" Description="Isolation level to use in generated procedures." %>
<%@ Property Name="UseTimestampConcurrency" Type="System.Boolean" Default="True" Category="07. CRUD - Advanced" Description="If this is set to True, Update and Delete will throw DbConcurrencyException when the timestamp doesn't match current." %>

<%-- Style of stored procedures --%>
<%@ Property Name="InsertSuffix" Type="System.String" Default="_Insert" Category="08. Stored procedures - Advanced" Description="Suffix to use for all generated INSERT stored procedures." %>
<%@ Property Name="UpdateSuffix" Type="System.String" Default="_Update" Category="08. Stored procedures - Advanced" Description="Suffix to use for all generated UPDATE stored procedures." %>
<%@ Property Name="DeleteSuffix" Type="System.String" Default="_Delete" Category="08. Stored procedures - Advanced" Description="Suffix to use for all generated DELETE stored procedures." %>
<%@ Property Name="SelectSuffix" Type="System.String" Default="_Get" Category="08. Stored procedures - Advanced" Description="Suffix to use for all generated SELECT stored procedures." %>
<%@ Property Name="SelectAllSuffix" Type="System.String" Default="_List" Category="08. Stored procedures - Advanced" Description="Suffix to use for all generated SELECT stored procedures." %>
<%@ Property Name="FindSuffix" Type="System.String" Default="_Find" Category="08. Stored procedures - Advanced"Description="Suffix to use for all generated selective SELECT stored procedures." %>
<%@ Property Name="GrantReadUser" Type="System.String" Category="08. Stored procedures - Advanced" Description="Optional user or role to GRANT EXEC Procedure permissions to (for all generated read only procedures)" Default="" Optional="True" %>
<%@ Property Name="GrantUser" Type="System.String" Category="08. Stored procedures - Advanced" Description="Optional user or role to GRANT EXEC Procedure permissions to (for all generated procedures)" Default="" Optional="True" %>

<%-- 9.0 windows forms Library --%>
<%@ Property Name="GenerateWinLibrary" Type="System.Boolean" Default="false" Category="09. Winforms Library - Advanced" Description="Indicates if the WindowsForms library should be generated.  This contains grids and edit controls for each entity generated." %>

<%-- Register Templates in framework --%>
<!-- #include file="TemplateLib/FrameworkTemplates.cst" --> 

<%-- Register User Templates --%>
<!-- #include file="UserLib/UserTemplates.cst" --> 

<script runat="template">

	#region Fields
	private string templateOutputDirectory = String.Empty;
	private string templateMappingFile = string.Empty;
	private string _WebServiceOutputPath = String.Empty; 
	private string _WebServiceUrl = String.Empty; 
	private string _ApplicationName = String.Empty;
    private string _VisualStudioRefVersion = String.Empty;

	private MoM.Templates.ValidationType _ValidationType = MoM.Templates.ValidationType.NetTiers;
	
	private TableSchemaCollection templateSourceTables;
	private ViewSchemaCollection templateSourceViews;
	private TableSchemaCollection templateEnumTables;
   
	#endregion
	
	#region Properties
	private string rootNamespace = "";
	
	[CodeTemplateProperty(CodeTemplatePropertyOption.Required)]
	[Category("01. Getting Started - Required")]
	[Description("Root namespace for generated c# classes. This will be the prefix for the other project namespaces.  Example: If you enter [NetTiers.Northwind] here, and you enter [Entities] in BLLNamespace, then you will see NetTiers.Northwind.Entities for your BLL Layer.")]
	[DefaultValue("")]
	public string RootNameSpace 
	{ 
		get
		{
			if (rootNamespace.Length == 0)
			{
				rootNamespace =  (ChooseSourceDatabase != null ? ChooseSourceDatabase.Name : "");
			}
			return rootNamespace;
		}
		set
		{
			rootNamespace = value;
		} 
	}
	
	[Browsable(false)]
	public DatabaseSchema SourceDatabase 
	{ 
		get
		{
			return ChooseSourceDatabase;
		}
		set
		{
			ChooseSourceDatabase = value;
		} 
	}
	
	[Category("01. Getting Started - Required")]
	[Description("Root namespace for generated c# classes. This will be the prefix for the other project namespaces.  Example: If you enter [NetTiers.Northwind] here, and you enter [Entities] in BLLNamespace, then you will see NetTiers.Northwind.Entities for your BLL Layer.")]
	[Browsable(false)]
	public string NameSpace 
	{ 
		get
		{
			return RootNameSpace;
		}
		set
		{
			RootNameSpace = value;
		} 
	}

	[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
	[Optional, NotChecked]
	[Category("01. Getting Started - Required")]
	[Description("The directory to output the results to.")]
	[DefaultValue("")]
	public string OutputDirectory 
	{ 
		get
		{
			if (string.IsNullOrEmpty(templateOutputDirectory))
            {
                return Path.Combine(CodeSmith.Engine.Configuration.Instance.CodeSmithTemplatesDirectory, Path.Combine("NetTiers", (ChooseSourceDatabase != null ? SourceDatabase.Name : "Output")));
			}
			else
			{
				return templateOutputDirectory;
			}
		}
		set
		{
			if (value.EndsWith("\\")) value = value.Substring(0, value.Length - 1);
			templateOutputDirectory = value;
		} 
	}
	
	[Editor(typeof(System.Windows.Forms.Design.FileNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
	[Category("01. Getting Started - Required")]
	[Optional, NotChecked]
	[Description("Optional File Path to a table/object alias file.")]
	public string MappingFile
	{
		get 
		{
			if (string.IsNullOrEmpty(templateMappingFile))
			{
				return OutputDirectory + "\\" + (ChooseSourceDatabase != null ? SourceDatabase.Name : "") + "Mapping.config";
			}
			else
			{
				return templateMappingFile;
			}
		}
		set	
		{
			templateMappingFile = value;
		}
	}
		
	private string componentLayerNameSpace = null;
	[Category("03. Namespaces - Required")]
	[Description("Is the namespace for the given business layer you choose in the IncludeComponentLayer property.")]
	public string ComponentLayerNameSpace 
	{ 
		get
		{
			if (componentLayerNameSpace == null && IncludeComponentLayer.ToString() != "None")
			{
				return  IncludeComponentLayer.ToString() == "ServiceLayer" ? "Services" : "Domain";
			}
			else
			{ 
				if (componentLayerNameSpace == null)
				return "";
				
				return componentLayerNameSpace;
			}
		}
		set
		{
			componentLayerNameSpace = value;
		} 
	}
	
	
	[Category("01b. Filter by Individual Objects - Optional")]
	[Description("The tables you wish to generate, if you do not select any SourceTables or SourceViews, and SourceDatabase is completed, then the entire database will be generated.")]
	[Optional, NotChecked]
	public TableSchemaCollection SourceTables
	{
		get
		{
			if (this.templateSourceTables != null && this.templateSourceTables.Count > 0 )
				return this.templateSourceTables;
			else
				return null;
		}
		set
		{
			this.templateSourceTables = value;
		}
	}
	
	[Category("01b. Filter by Individual Objects - Optional")]
	[Description("The tables to generate as enums. Your columns must meet the following rules. The first column must be a primary key and an Identity column, the second column must have a unique column constraint index, the optional third column will be the description of the generated enum. You must select this as a SourceTable as well in order to generate the enum.")]
	[Optional, NotChecked]
	public TableSchemaCollection EnumTables
	{
		get
		{
			if (this.templateEnumTables != null && this.templateEnumTables.Count > 0 )
				return this.templateEnumTables;
			else
				return null;
		}
		set
		{			
			this.templateEnumTables = value;
		}
	}
	
	[Category("01b. Filter by Individual Objects - Optional")]
	[Description("The views you wish to generate, if you do not select any SourceViews or SourceTables, and SourceDatabase is completed, then the entire database will be generated.")]
	[Optional, NotChecked]
	public ViewSchemaCollection SourceViews
	{
		get
		{
			if (this.templateSourceViews != null && this.templateSourceViews.Count > 0 )
				return this.templateSourceViews;
			else
				return null;
		}
		set
		{
			this.templateSourceViews = value;
		}
	}
	
	
	[Category("General")]
	[Description("Should we use partials when generating .net 2.0 code?")]
	[Optional, NotChecked]
	[Browsable(false)]
	[Obsolete("Partial class are now automatically where targetting .net2 framework.")]
	public bool UsePartialClass
	{
		get
		{
			return _UsePartialClass;
		}
		set
		{
			_UsePartialClass = value;
		}
	}
	private bool _UsePartialClass = true;
	
	[Category("General")]
	[Description("Should overwrite partial stubs?")]
	[Optional, NotChecked]
	[Browsable(false)]
	public bool OverwritePartialClassStub
	{
		get
		{
			return _OverwritePartialClassStub;
		}
		set
		{
			_OverwritePartialClassStub = value;
		}
	}
	private bool _OverwritePartialClassStub = false;


	[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
	[Optional, NotChecked]
	[Category("06. Web - Advanced")]
	[Description("The full path for the the WebService files. this path match with the webservice url.")]
	[DefaultValue("c:\\inetpub\\wwwroot\\WebServices")]
	public string WebServiceOutputPath 
	{ 
		get
		{
			if (_WebServiceOutputPath.Length == 0)
			{
				return @"c:\NetTiers\" + (ChooseSourceDatabase != null ? ChooseSourceDatabase.Name + @"\WebServices" : @"Output\WebServices");
			}
			return _WebServiceOutputPath;
		}
		set
		{
			if (value.EndsWith("\\")) value = value.Substring(0, value.Length - 1);
			_WebServiceOutputPath = value;
		} 
	}

	[Optional, NotChecked]
	[Category("06. Web - Advanced")]
	[Description("The IIS virtual directory path for the WebService files. This path should match with the WebserviceOutputPath.")]
	[DefaultValue("http://localhost/NetTiersWS")]
	public string WebServiceUrl
	{ 
		get
		{
			if (_WebServiceUrl.Length == 0)
			{
				return "http://localhost/" + _webServiceClassName;
			}
			return _WebServiceUrl;
		}
		set
		{
			_WebServiceUrl = value;
		} 
	}

	[Optional, NotChecked]
	[Category("06b. Website - Advanced")]
	[Description("Indicates the web admin site name.")]
	[DefaultValue("Application Name")]
	public string WebAdminSiteName
	{ 
		get
		{
			if (_ApplicationName.Length == 0)
			{
				if (ChooseSourceDatabase != null)
				{
					return GetClassName(ChooseSourceDatabase) + " Application";
				}
				else
				{
					return "";
				}
				
			}
			return _ApplicationName;
		}
		set
		{
			_ApplicationName = value;
		} 
	}
	[Category("02. Framework Generation - Optional")]
	[Description("Choice to either use .netTiers validation framework, or Enterprise Library VAB")]
	[DefaultValue("NetTiers")]
	public MoM.Templates.ValidationType ValidationType
	{
		get { return _ValidationType; }
		set
		{
			_ValidationType = value; 
			
			// Enterprise lib validation didn't exist until version 4.0.
			// If the current version is less than 4.0 and entlib validation is selected update the property..
			if ( value == MoM.Templates.ValidationType.EntLib && (byte)EntLibVersion < 3)
			{
				Trace.WriteLine("\tWARNING: EntLib validation requires that you use a version of EntLib 3.1 or newer.");
				this.EntLibVersion = MoM.Templates.EntLibVersion.v3_1;
			}
		}
	}

	#endregion Properties
	
	#region OnPropertyChanged
	#if CodeSmith40
	protected override void OnPropertyChanged(string propertyName) 
	{
		if((this.State == TemplateState.Default || this.State == TemplateState.Validating)
			&& propertyName == "ChooseSourceDatabase")
		{
			//MappingFile = "";
			//OutputDirectory = "";
			//RootNameSpace = "";
			//vWebServiceOutputPath = "";
			//WebServiceUrl = "";
			WebAdminSiteName = "";
		}
		
		base.OnPropertyChanged(propertyName);
	}
	#endif
	#endregion 
	
	private bool _generateWebSecurity = false;
			
	[Category("10. WebLibrary.Security - Optional")]
	[Description("Indicates if the Web.Security library should be generated. This contains the EntityMembershipProvider class and other classes helpful to ASP.NET Membership services.")]
	[CodeTemplateProperty(CodeTemplatePropertyOption.Optional)]
	public bool GenerateWebSecurity
	{
		get 
		{
			return _generateWebSecurity;
		}
		set
		{
			_generateWebSecurity = value;	
		}
	}
	
	private ColumnSchema _entityMembershipUserPKCol = null;

	[Category("10. WebLibrary.Security - Optional")]
	[Description("Primary key column from the table that will become the EntityMembershipUser's user entity.")]
	[CodeTemplateProperty(CodeTemplatePropertyOption.Optional)]
	public ColumnSchema EntityMembershipUserPKCol
	{
		get
		{
			return this._entityMembershipUserPKCol;
		}
		set
		{
			_entityMembershipUserPKCol = value;	
		}
	}

	private string _membershipUserMapFile;

	[Editor(typeof(System.Windows.Forms.Design.FileNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
	[Category("10. WebLibrary.Security - Optional")]
	[Description("Optional File Path to a MembershipUserProperty/EntityProperty alias file")]
	[CodeTemplateProperty(CodeTemplatePropertyOption.Optional)]
	public string MembershipUserMapFile
	{
		get
		{
			return this._membershipUserMapFile;
		}
		set
		{
			_membershipUserMapFile = value;	
		}
	}

	private bool _membershipUseMD5 = false;

	[Category("10. WebLibrary.Security - Optional")]
	[Description("Use MD5 hash for passwords. False defaults to SHA1.")]
	[CodeTemplateProperty(CodeTemplatePropertyOption.Optional)]
	public bool UseMD5Hash
	{
		get
		{
			return this._membershipUseMD5;
		}
		set
		{
			_membershipUseMD5 = value;
		}
	}
	
	#region Properties used by the wizard to report progression
	
	private int _counter = 0;
	
	
	[Browsable(false)]
	public int Counter
	{
		get {return this._counter;}
	}
	
	private int _errorMessageCount = 0;
	[Browsable(false)]
	public int ErrorMessageCount
	{
		get {return this._errorMessageCount;}
	}
	
	private int _CurrentObjectIndex = 0;
	[Browsable(false)]
	public int CurrentObjectIndex
	{
		get {return this._CurrentObjectIndex;}
	}
	
	private string _CurrentPhase = string.Empty;
	[Browsable(false)]
	public string CurrentPhase
	{
		get {return this._CurrentPhase;}		
	}
	
	[Browsable(false)]
	public int TotalObjects
	{
		get {return (SourceTables != null ? SourceTables.Count : 0) + (SourceViews != null ? SourceViews.Count : 0);}		
	}
	
	private string _CurrentFileName = string.Empty;
	[Browsable(false)]
	public string CurrentFileName
	{
		get {return this._CurrentFileName;}		
	}
	
	private StringBuilder _CompileErrors = new StringBuilder();
	[Browsable(false)]
	public string CompileErrors
	{
		get {return this._CompileErrors.ToString();}		
	}
	
	private StringBuilder _CompileWarnings = new StringBuilder();
	[Browsable(false)]
	public string CompileWarnings
	{
		get {return this._CompileWarnings.ToString();}		
	}
	
	[Browsable(false)]
	public int TotalTemplates
	{
		get {return CodeTemplates.Count;}		
	}
		
	[Browsable(false)]
	public int CurrentTemplateIndex
	{
		get {return CodeTemplates.Count;}		
	}	
	
	[Browsable(false)]
	[Obsolete("Visual studio 2005 is the only solution type for .net2 framework.")]
	public bool IsTargetingVisualStudio2003
	{
		get { return false; }
		//get {return this.vsnetVersion == VSNetVersion.v2003;}
		//set
		//{
		//	if (value == true)
		//	{
		//		this.vsnetVersion = VSNetVersion.v2003;
		//	}
		//	else
		//	{
		//		this.vsnetVersion = VSNetVersion.v2005;
		//	}
		//}	
	}
	
	#endregion
	
	#region Enums
	public enum TransactionIsolationLevelEnum
	{
		None,
		ReadCommitted,
		ReadUncommitted,
		RepeatableRead,
		Serializable,
		Snapshot
	}
	
	[Obsolete("Separated project is automatically used.")]
	public enum VSNetIntegration
	{
		None,
		SingleProject,
		SeparatedProjects
	}
	
	public enum DbProviderFactory
	{
		SqlClient
		, OracleClient
		, OdbcClient
		, OleDbClient
		, SqlCeClient
	}
	
	// Used to determine the style of drop statement to be used (if any)
	public enum DropStyleEnum
	{
		Entity,
		All
	}
	
	public enum TimeStandardEnum
	{
		Utc,
		Local
	}
	
	#endregion Enums
	
</script>

<script runat="template">

	#region Fields
	private string sdkInstallRoot;
	VSNetIntegration vsnetIntegration  = VSNetIntegration.SeparatedProjects;
	
	public bool GenerateBusinessLogicLayer = true;	
	public bool GenerateDataAccessLayer = true;
    public bool GenerateSql = true;
	#endregion Fields    
	
    #region xml report fields
    public XmlDocument docOutput;
    public DateTime startTime = DateTime.Now;
	public DateTime lastTime = DateTime.Now;
    #endregion xml report fields
     
    //TextPad Regex for template listing array.  Used to convert to FrameWorkTemplates.cst
	//\t\t\t\t\t\t\t\t\t\t\t\t\t\t"\(.*\\\\\)?\(.*\).cst",

	//Include the User Engine Methods
	<!-- #include file="UserLib/CustomMethods.cs" --> 
	
	public enum AccessibilityEnum
	{
	    Public,
	    Protected,
	    Internal,
	    ProtectedInternal,
	    Private
	}

	#region Template related methods
	protected override void OnInit()
	{
		#if CodeSmith50
		this.SetPropertyAttribute("SourceTables", "DeepLoad", "True");
		this.SetPropertyAttribute("EnumTables", "DeepLoad", "True");
		this.SetPropertyAttribute("SourceViews", "DeepLoad", "True");
		#endif
		base.OnInit();
	}
	
	public void RenderToFile(string templateName, string path, bool overwrite)
	{
		this._CurrentFileName = path;
		this.GetTemplate(templateName).RenderToFile(path, overwrite);
		this._counter++;
	}

	// load all the templates and put them into an hashtable
	public void LoadTemplates()
	{
		//Expression can creates matches for template name and template key from /TemplateLib/FrameworkTemplates.cst
		//Name=\"(.*)\".*Template=\"\.\.(.*)?/(.*).cst
		//System.Text.RegularExpressions.Regex exp = new System.Text.RegularExpressions.Regex("Name=\"(.*)\".*Template=\"\.\.(.*)?/(.*).cst");
		
		//Include the Create Statement of all the Framework Templates
		<!-- #include file="TemplateLib/CreateTemplates.cs" --> 
		
		//Include the Create Statement of all the User Templates
		<!-- #include file="UserLib/CreateTemplates.cs" --> 
	
		foreach(CodeSmith.Engine.CodeTemplate template in CodeTemplates.Values)
		{
			try
			{
				this.CopyPropertiesTo(template);
				template.SetProperty("CurrentNetTiersMap", base.CurrentNetTiersMap);
				template.SetProperty("CodeTemplates", base.CodeTemplates);
				this.PerformStep();
			}
			catch ( Exception ex )
			{
				Trace.WriteLine("\tWARNING: " + ex);
			}
		}
	}

	public CodeTemplate GetTemplate(string templateType)
	{
		return CodeTemplates[templateType];
	}
	
	public MoM.Templates.CommonSqlCode GetTemplateBase(string templateType)
	{
		return (MoM.Templates.CommonSqlCode) GetTemplate(templateType);
	}
	#endregion Template related methods
	
	/// <summary>
	/// The main function that does the generation process for each table and view.
	/// </summary>
	public void Go()
	{	
		#region Initialisation - including building list of tables to process
		this.vsnetIntegration = VSNetIntegration.SeparatedProjects;
		RelationshipDictionary.Clear();
		
		_CurrentPhase = "Initialization";
		DebugWriteLine("Current Phase: " + _CurrentPhase);
		
		MoM.Templates.ComponentPatternType ComponentPattern = IncludeComponentLayer;
	
		DebugWriteLine("ComponentPattern: "+ ComponentPattern.ToString());
		
		#region NetTiersProvider Detection : based upon the current SchemaExplorer
		
		bool _netTiersSqlProvider = true;	
		ProviderInvariantName = "System.Data.SqlClient";
		
		SchemaExplorer.IDbSchemaProvider schemaProvider = SourceDatabase.Provider;
		if (SourceDatabase.Provider.Name != "SqlSchemaProvider" )
		{
			_netTiersSqlProvider = false;
			if (SourceDatabase.Provider.Name == "SQLiteSchemaProvider")
			{
				ProviderInvariantName = "System.Data.SQLite";
			}
			else if (SourceDatabase.Provider.Name == "ADOXSchemaProvider")
			{
				ProviderInvariantName = "System.Data.OleDb";
			}		
			else if (SourceDatabase.Provider.Name == "OracleSchemaProvider")
			{
				ProviderInvariantName = "System.Data.OracleClient";
				ParameterPrefix = "";
			}
			else if (SourceDatabase.Provider.Name == "SqlCompactSchemaProvider")
			{
				ProviderInvariantName = "System.Data.SqlServerCe.3.5";
				ParameterPrefix = "@";
			} 
			else if(SourceDatabase.Provider.Name == "VistaDB Schema Provider")
			{
				//TODO: Update .netTiers to use the VistaDB Provider.
				//NOTE: This is a temp fix.
				ProviderInvariantName = "System.Data.OleDb";
			} 
		}
		
		#endregion
		
		#region Build Namespaces
		if (BusinessLogicLayerNameSpace == null) BusinessLogicLayerNameSpace = string.Empty;
		string BLLNameSpace = NameSpace + (BusinessLogicLayerNameSpace.Length>0 ? "." + GetCleanName(BusinessLogicLayerNameSpace) : string.Empty);
		string ComponentsNameSpace = NameSpace + (this.ComponentLayerNameSpace.Length> 0 ? "." + GetCleanName(ComponentLayerNameSpace) : string.Empty);
		string DALNameSpace = NameSpace + "." + (DataAccessLayerNameSpace.Length>0 ? GetCleanName(DataAccessLayerNameSpace) : "DataAccessLayer");
		string DALSqlNameSpace = DALNameSpace  + ".SqlClient";
		string DALOracleNameSpace = DALNameSpace + ".OracleClient";
		string DALSqlCeNameSpace = DALNameSpace + ".SqlCeClient";
		string DALGenericNameSpace = DALNameSpace + ".GenericClient";
		string DALWSNameSpace = DALNameSpace  + ".WebServiceClient";
		string UTNameSpace = NameSpace + "." + (UnitTestsNameSpace.Length>0 ? GetCleanName(UnitTestsNameSpace) : "UnitTests");
		string WSNameSpace = DALNameSpace + ".WebService";
		string WebLibNameSpace = NameSpace + ".Web";
		string WebsiteNameSpace = NameSpace + ".Website";
		string WinLibNameSpace = NameSpace + ".Windows.Forms";
		string SQLNamespace = NameSpace + "." +  (SQLFolderName.Length > 0 ?  SQLFolderName : "SQL");
		string WebSecurityLibNameSpace = WebLibNameSpace + ".Security";
		string factoryType = (ComponentPattern == MoM.Templates.ComponentPatternType.DomainModel ? string.Format("{0}.{1}", ComponentsNameSpace, "ComponentEntityFactory") : string.Format("{0}.{1}", BLLNameSpace, "EntityFactory")); 
		#endregion Build Namespaces
	
		#region Build output paths
		
		string rootPathBLL = OutputDirectory + "\\" + BLLNameSpace;
		string rootPathComponents = OutputDirectory + "\\" +  ComponentsNameSpace;
		string rootPathDAL = OutputDirectory + "\\" + DALNameSpace;
		string rootPathDALSql = OutputDirectory + "\\" + DALSqlNameSpace;
		string rootPathDALOracle = OutputDirectory + "\\" + DALOracleNameSpace;
		string rootPathDALSqlCe = OutputDirectory + "\\" + DALSqlCeNameSpace;
		string rootPathDALGeneric = OutputDirectory + "\\" + DALGenericNameSpace;
		string rootPathDALWS = OutputDirectory + "\\" + DALWSNameSpace;
		string rootPathWebLib = OutputDirectory + "\\" + WebLibNameSpace;
		string rootPathWebSecurityLib = OutputDirectory + "\\" + WebLibNameSpace + ".Security";
		string rootPathWinLib = OutputDirectory + "\\" + WinLibNameSpace;
		string rootPathWebsite = OutputDirectory + "\\" + WebsiteNameSpace;
		string rootPathUT = OutputDirectory + "\\" + UTNameSpace;
		string rootPathSQL = OutputDirectory + "\\" + SQLNamespace;
		string rootPathWS  = WebServiceOutputPath; 
		string specialPath = vsnetIntegration == VSNetIntegration.SeparatedProjects ? ((IncludeUnitTest != MoM.Templates.UnitTestStyle.None) ? rootPathUT : rootPathDAL) : OutputDirectory;
	
		#endregion Build output paths
		
		bool HasCustomCode = (CustomCodeFolderName != null && CustomCodeFolderName.Trim().Length > 0 );
		if (ProcedurePrefix == null)	ProcedurePrefix = string.Empty;
		if (WebServiceUrl == null) WebServiceUrl = string.Empty;
		
		docOutput = new XmlDocument();
		docOutput.AppendChild(docOutput.CreateElement("NetTiersReport"));
		
		XmlAttribute att = docOutput.CreateAttribute("startTime");
		att.Value = DateTime.Now.ToFileTime().ToString();
		docOutput.DocumentElement.Attributes.Append(att);
		
		XmlAttribute attDALNS = docOutput.CreateAttribute("DALNameSpace");
		attDALNS.Value = DALNameSpace;
		docOutput.DocumentElement.Attributes.Append(attDALNS);
	
		XmlAttribute attSolution = docOutput.CreateAttribute("SolutionLink");
		attSolution.Value = GetSolutionFileLink();
		docOutput.DocumentElement.Attributes.Append(attSolution);
		
		XmlAttribute attConn = docOutput.CreateAttribute("ConnectionString");
		attConn.Value = SourceDatabase.ConnectionString;
		docOutput.DocumentElement.Attributes.Append(attConn);		
		
		XmlAttribute attFact = docOutput.CreateAttribute("FactoryType");
		attFact.Value = (ComponentPattern == MoM.Templates.ComponentPatternType.DomainModel ? ComponentLayerNameSpace + ".ComponentEntityFactory" : BLLNameSpace + ".EntityFactory");
		docOutput.DocumentElement.Attributes.Append(attFact);		
		
		XmlElement initNode = docOutput.CreateElement("initialization");
		initNode.Attributes.Append(att);
		docOutput.DocumentElement.AppendChild(initNode);
		
		XmlElement customProcsNode = docOutput.CreateElement("customStoredProcedures");
		XmlAttribute attIncludeCustoms = docOutput.CreateAttribute("includeCustoms");
		attIncludeCustoms.Value = IncludeCustoms.ToString().ToLower();
		customProcsNode.Attributes.Append(attIncludeCustoms);
		docOutput.DocumentElement.AppendChild(customProcsNode);
		
		if (IncludeSave)
		{
			IncludeInsert = true;
			IncludeUpdate = true;
			IncludeDelete = true;
		}
		
		try
		{
			Microsoft.Win32.RegistryKey key = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\.NETFramework");
			sdkInstallRoot = string.Format("{0}\\Bin\\", key.GetValue("sdkInstallRootv2.0"));
			key.Close();
		}
		catch
		{
			sdkInstallRoot = @"c:\Program Files\Microsoft Visual Studio 8\SDK\v2.0\Bin\";
		}		
		
		DebugWriteLine(string.Format("sdkInstallRoot: {0}", sdkInstallRoot));
		
		//Validate necessary parameters
		_CurrentPhase = "Parameter Validation";
		DebugWriteLine("Current Phase: "+_CurrentPhase);
		
		XmlElement parametersNode = AddMessageNode(initNode, 0, "Validating parameters.", false);
		
		if ( GenerateWebSecurity )
		{
			// make sure MembershipUser primary key column is selected
			if ( EntityMembershipUserPKCol == null )
			{
				AddMessageNode(parametersNode, 1, "EntityMembershipUserPKCol has not been specified, so the Web.Security library will not be generated.", true);
				GenerateWebSecurity = false;
			}
		}
		
		//Set the Correct WebServiceClassName
		string _webServiceClassName = WebServiceClassName;		
		if(string.IsNullOrEmpty(_webServiceClassName))
		{
			_webServiceClassName = NameSpace + "Services";
		}
		
		#region Build the correct list of used tables (filtering tables without primary key)
		_CurrentPhase = "Check datasource";
		DebugWriteLine("Current Phase: "+_CurrentPhase);
		//Entire Database
		if (SourceDatabase != null && (SourceTables == null || SourceTables.Count == 0) && (SourceViews == null || SourceViews.Count == 0))
		{
			templateSourceTables = new TableSchemaCollection();
			templateSourceViews = new ViewSchemaCollection();
			
			for (int i=0; i < SourceDatabase.Tables.Count; i++)
			{
				templateSourceTables.Add(SourceDatabase.Tables[i]);
			}
					
			for (int i=0; i < SourceDatabase.Views.Count; i++)
			{
				templateSourceViews.Add(SourceDatabase.Views[i]);
			}
		}
		else 
		{
			if (SourceTables == null) templateSourceTables = new TableSchemaCollection();
			if (SourceViews == null) templateSourceViews = new ViewSchemaCollection();
		}
		#endregion Build the correct list of used tables (filtering tables without primary key)
		
		#region Remove tables with no primary key
		TableSchemaCollection _tmp = (TableSchemaCollection)templateSourceTables.Clone();	 
		
		for (int i=0; i < _tmp.Count; i++)
		{
			try
			{
				//in sql 2005, sysdiagrams is added as dbo, and a user table, not a system table.
				if (_tmp[i].Name == "sysdiagrams")
				{
					templateSourceTables.Remove(_tmp[i]);
				}
				
				//throwing a NullReferenceException on the following line, changed to use HasPrimaryKey property
				//if (_tmp[i].PrimaryKey == null || _tmp[i].PrimaryKey.MemberColumns.Count == 0)
				if (!_tmp[i].HasPrimaryKey)
				{
					AddMessageNode(initNode, 1, "Table " + _tmp[i].Name + " does not have a primary key, it will not be generated.", true);
					templateSourceTables.Remove(_tmp[i]);
					DebugWriteLine("Remove table (no PK): "+_tmp[i].Name);
				}
			}
			catch(ApplicationException e)
			{
				AddMessageNode(initNode, 1, "Table " + _tmp[i].Name + " does not have a primary key, it will not be generated.", true);
				templateSourceTables.Remove(_tmp[i]);
				DebugWriteLine("ApplicationException: "+e.Message);
			}
		}
		#endregion Remove tables with no primary key
			
		//Sort by dependancy
		templateSourceTables.Sort(new SchemaExplorer.TableDependancyComparer());
		#endregion Initialisation - including building list of tables to process
		
		#region Check if there is anything to do, if not then exit;		
		if (templateSourceTables.Count == 0 && templateSourceViews.Count == 0)
		{
			AddMessageNode(initNode, 2, "No valid tables in the selection.", true);
			return;
		}
		#endregion Check if there is anything to do, if not then exit;		
	
		#region Entity Mapping 
	
		MappingInstance map = (MappingInstance)base.CreateTemplate<MappingInstance>();	
		this.CodeTemplate.CopyPropertiesTo(map);  
		map.MappingFile = this.MappingFile;
	
		if (!Directory.Exists(Path.GetDirectoryName(this.MappingFile)))
			SafeCreateDirectory(Path.GetDirectoryName(this.MappingFile));
		
		map.SourceTables = templateSourceTables;
		map.SourceViews = templateSourceViews;
		
		map.UsePascalCasing = this.UsePascalCasing;
		
		NetTiers.NetTiersMap netTiersMap = map.GetMapping(this.MappingFile);
		if (netTiersMap == null && !string.IsNullOrEmpty(MappingFile))
		{
			AddMessageNode(initNode, 2, "Generating .netTiers Entity Mapping", false);
			using (System.IO.StreamWriter sw = new System.IO.StreamWriter(new MemoryStream()))
			{
				map.Render(sw);
				sw.Close();
			}
			netTiersMap = map.GetMapping(this.MappingFile);
			
			if (netTiersMap == null)
				AddMessageNode(initNode, 2, "Could not load mapping, mapping feature skipped.", true);	
		}
		base.CurrentNetTiersMap = netTiersMap;
		#endregion  Entity Mapping
		
		SetProgress(templateSourceTables.Count + templateSourceViews.Count + (167 * 2));  /*167 templates or so 1 for compiling, 1 for property setting */
		
		#region Load templates
		XmlElement templatesNode = AddMessageNode(initNode, 0, "Loading templates.", false);
		_CurrentPhase = "Templates compilation";
		DebugWriteLine("Current Phase: "+_CurrentPhase);
		
		// Load All of the Templates
		LoadTemplates();
		AddExecutionTime(templatesNode);
		#endregion Load templates	
		
		#region Check the enum tables format (int + text)
		if (templateEnumTables == null) templateEnumTables = new TableSchemaCollection();	
		TableSchemaCollection _enums = (TableSchemaCollection)templateEnumTables.Clone(); //new TableSchemaCollection();
		for (int i=0; i < _enums.Count; i++)
		{
			try
			{
				Trace.WriteLine("Checking Enum Table " + _enums[i].Name);
				AddMessageNode(initNode, 1, "Checking Enum Table " + _enums[i].Name , false);
				ValidForEnum(_enums[i]);
				Trace.WriteLine("Enum Table Valid " + _enums[i].Name);
				AddMessageNode(initNode, 1, "Enum Table Valid " + _enums[i].Name , false);
			}
			catch(Exception e)
			{
				AddMessageNode(initNode, 1, "Table " + _enums[i].Name + " is not eligible for enum generation: " + e.Message , true);
				templateEnumTables.Remove(_enums[i]);
				DebugWriteLine("ApplicationException: "+e.Message);
			}
		}
		#endregion Check the enum tables format (int + text)	
		
		#region Create directories and copy dependencies
		_CurrentPhase = "CREATING FOLDERS AND COPYING DEPENDENCIES ";
		DebugWriteLine("Current Phase: "+_CurrentPhase);
		
		AddMessageNode(initNode, 0, "Creating folders and copying dependencies.", false);
		string libPath = Path.GetFullPath(Path.Combine(OutputDirectory, LibraryPath));
		SafeCreateDirectory(libPath);
		
		#region Set up Entity directories
		if(GenerateBusinessLogicLayer)
		{
			SafeCreateDirectory(rootPathBLL);
			SafeCreateDirectory(rootPathBLL + "\\Views");	
			SafeCreateDirectory(rootPathBLL + "\\Validation");
	
			if ( HasCustomCode )
			{
				SafeCreateDirectory(rootPathBLL + "\\" + CustomCodeFolderName);
			}
		}
		#endregion Set up Entity directories	
	
		#region Set up Component directories
		if (ComponentPattern != MoM.Templates.ComponentPatternType.None)
		{
			SafeCreateDirectory(rootPathComponents);
			SafeCreateDirectory(rootPathComponents + "\\Processors");
			SafeCreateDirectory(rootPathComponents);
			SafeCreateDirectory(rootPathComponents + "\\Views");
			
			if ( HasCustomCode )
			{
				SafeCreateDirectory(rootPathComponents + "\\" + CustomCodeFolderName);
			}
		}
		#endregion Set up Component directories
		
		#region Set up DAL directories
		if (GenerateDataAccessLayer)
		{
			// base classes for any provider implementations
			SafeCreateDirectory(rootPathDAL + "\\Bases");
			SafeCreateDirectory(rootPathDAL + "\\Bases\\Views");
			SafeCreateDirectory(rootPathDAL + "\\Query");
			
			if ( HasCustomCode )
			{
				SafeCreateDirectory(rootPathDAL + "\\" + CustomCodeFolderName);
			}
			
			// sql implementation
			if (_netTiersSqlProvider)
			{
				SafeCreateDirectory(rootPathDALSql);
				SafeCreateDirectory(rootPathDALSql + "\\Views");
						
				if ( HasCustomCode )
				{
					SafeCreateDirectory(rootPathDALSql + "\\" + CustomCodeFolderName);
				}
			}
			// Generic implementation
			else if(ProviderInvariantName == "System.Data.OracleClient")
			{
				SafeCreateDirectory(rootPathDALOracle);
				SafeCreateDirectory(rootPathDALOracle + "\\Views");
	
				if ( HasCustomCode )
				{
					SafeCreateDirectory(rootPathDALOracle + "\\" + CustomCodeFolderName);
				}
			}
			else if(ProviderInvariantName == "System.Data.SqlServerCe.3.5")
			{
				SafeCreateDirectory(rootPathDALSqlCe);	
				if ( HasCustomCode )
				{
					SafeCreateDirectory(rootPathDALSqlCe + "\\" + CustomCodeFolderName);
				}
			}
			// Generic implementation
			else
			{
				SafeCreateDirectory(rootPathDALGeneric);
				SafeCreateDirectory(rootPathDALGeneric + "\\Views");
	
				if ( HasCustomCode )
				{
					SafeCreateDirectory(rootPathDALGeneric + "\\" + CustomCodeFolderName);
				}
			}
			
			#region web service directories
			if (GenerateWebservice)
			{
				SafeCreateDirectory(rootPathDALWS);
				SafeCreateDirectory(rootPathDALWS + "\\Views");
				SafeCreateDirectory(rootPathDALWS + "\\Web References\\WsProxy");
				
				if (AttemptCreateLocalVirtualDirectory)
				{
					if(!AttemptCreateLocalVirtualDirectoryByPath())
						Debug.WriteLine("Virtual Directory for web services not created, either it already exists, it does not have proper permissions");
				}
				
				//SafeCreateDirectory(rootPathDAL + "\\WebServiceClient");
				//SafeCreateDirectory(rootPathDAL + "\\WebServiceClient\\Views");
				//SafeCreateDirectory(specialPath + "\\Web References\\WsProxy");
			}
			#endregion web service directories
		}
		#endregion Set up DAL directories	
		
		#region Set up unit test directories
		if (IncludeUnitTest != MoM.Templates.UnitTestStyle.None)
		{
			SafeCreateDirectory(rootPathUT);
			SafeCreateDirectory(rootPathUT + "\\Views");
	
			if ( HasCustomCode )
			{
				SafeCreateDirectory(rootPathUT + "\\" + CustomCodeFolderName);
			}
		}
		#endregion Set up unit test directories	
		
		#region Set up Sql directories
		if (GenerateSql)
		{
			SafeCreateDirectory(rootPathSQL);
		}
		#endregion Set up Sql directories	
		
		#region Set up web service directories
		if (GenerateWebservice)
		{
			SafeCreateDirectory(rootPathWS);
			SafeCreateDirectory(rootPathWS + "\\Bin");
	
			if ( HasCustomCode )
			{
				SafeCreateDirectory(rootPathWS + "\\" + CustomCodeFolderName);
			}
			
			// TODO check if the virtual directory exists, if not create it.
		}	
		#endregion Set up web service directories	
		
		#region Set up win library directories
		if (GenerateWinLibrary)
		{
			SafeCreateDirectory(rootPathWinLib);
			SafeCreateDirectory(rootPathWinLib + "\\Data");
			SafeCreateDirectory(rootPathWinLib + "\\UI");
		}
		#endregion Set up win library directories
			
		#region Set up web library directories
		if (GenerateWebLibrary)
		{
			SafeCreateDirectory(rootPathWebLib);
			SafeCreateDirectory(rootPathWebLib + "\\Data");
			SafeCreateDirectory(rootPathWebLib + "\\DataSourceControls");
			SafeCreateDirectory(rootPathWebLib + "\\DataSourceControls\\Views");
			SafeCreateDirectory(rootPathWebLib + "\\UI");
			SafeCreateDirectory(rootPathWebLib + "\\UI\\RepeaterControls");
			SafeCreateDirectory(rootPathWebLib + "\\UI\\RepeaterControls\\Views");
			
			if ( HasCustomCode )
			{
				SafeCreateDirectory(rootPathWebLib + "\\" + CustomCodeFolderName);
			}
		}
		#endregion Set up web library directories
		
		#region Set up web security library directory
		if (GenerateWebSecurity)
		{
			SafeCreateDirectory(rootPathWebSecurityLib);
		}
		#endregion Set up web security library directory
		
		#region Set up website directories
		if (GenerateWebsite)
		{
			SafeCreateDirectory(rootPathWebsite);
			SafeCreateDirectory(rootPathWebsite + "\\Bin");
	
			if (IncludeAtlasLibrary)
			{
				//SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\Microsoft.Web.Atlas.dll", rootPathWebsite + "\\Bin\\Microsoft.Web.Atlas.dll");
			}
			if (IncludeAtlasToolkit)
			{
				SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\AjaxControlToolkit.dll", rootPathWebsite + "\\Bin\\AjaxControlToolkit.dll");
				//SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\AJAXExtensionsToolbox.dll", rootPathWebsite + "\\Bin\\AJAXExtensionsToolbox.dll");
			}
			
			//if (!UseWebAppProject && IncludeComponentLayer == MoM.Templates.ComponentPatternType.None )
			//{
			//	SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.dll", rootPathWebsite + "\\Bin\\Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.dll");
			//}
	
			if (GenerateWebsiteAdmin)
			{
				SafeCreateDirectory(rootPathWebsite + "\\App_Code");
				SafeCreateDirectory(rootPathWebsite + "\\Admin");
				SafeCreateDirectory(rootPathWebsite + "\\Admin\\UserControls");
				SafeCreateDirectory(rootPathWebsite + "\\App_Themes");
				SafeCreateDirectory(rootPathWebsite + "\\App_Themes\\Default");
				SafeCreateDirectory(rootPathWebsite + "\\Common");
				SafeCreateDirectory(rootPathWebsite + "\\Common\\Calendar");
				SafeCreateDirectory(rootPathWebsite + "\\Images");
				SafeCreateDirectory(rootPathWebsite + "\\MasterPages");
				
				SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\ASP.NET\\Common\\Common\\CalendarControl.css", rootPathWebsite + "\\Common\\Calendar\\CalendarControl.css");
				SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\ASP.NET\\Common\\Common\\CalendarControl.js", rootPathWebsite + "\\Common\\Calendar\\CalendarControl.js");
				SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\ASP.NET\\Common\\App_Themes\\Default.css", rootPathWebsite + "\\App_Themes\\Default\\Default.css");
				SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\ASP.NET\\Common\\App_Themes\\Default.skin", rootPathWebsite + "\\App_Themes\\Default\\Default.skin");
				SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\ASP.NET\\Common\\Images\\sortdescending.gif", rootPathWebsite + "\\Images\\sortdescending.gif");
				SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\ASP.NET\\Common\\Images\\excel.gif", rootPathWebsite + "\\Images\\excel.gif");
				SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\ASP.NET\\Common\\Images\\loading.gif", rootPathWebsite + "\\Images\\loading.gif");
				SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\ASP.NET\\Common\\Images\\minical.gif", rootPathWebsite + "\\Images\\minical.gif");
				SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\ASP.NET\\Common\\Images\\sortascending.gif", rootPathWebsite + "\\Images\\sortascending.gif");
				SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\ASP.NET\\Common\\Images\\expand_blue.jpg", rootPathWebsite + "\\Images\\expand_blue.jpg");
				SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\ASP.NET\\Common\\Images\\collapse_blue.jpg", rootPathWebsite + "\\Images\\collapse_blue.jpg");
				SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\ASP.NET\\Common\\aspx\\Default.aspx", rootPathWebsite + "\\Admin\\Default.aspx");
				SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\ASP.NET\\Common\\aspx\\Default.aspx.cs", rootPathWebsite + "\\Admin\\Default.aspx.cs");
			}
		}
		#endregion Set up website directories
	
		#region Copy References
		string entLibSubDir = string.Format("EntLib{0}", EntLibVersion.ToString());
		
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\" + entLibSubDir + "\\Microsoft.Practices.EnterpriseLibrary.Common.dll", libPath + "\\Microsoft.Practices.EnterpriseLibrary.Common.dll");
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\" + entLibSubDir + "\\Microsoft.Practices.EnterpriseLibrary.Data.dll", libPath+ "\\Microsoft.Practices.EnterpriseLibrary.Data.dll");
		
        if(EntLibVersion == MoM.Templates.EntLibVersion.v5_0)
		    SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\" + entLibSubDir + "\\Microsoft.Practices.Unity.dll", libPath +  "\\Microsoft.Practices.Unity.dll");
		else
            SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\" + entLibSubDir + "\\Microsoft.Practices." + GetEntLibOBClassName(EntLibVersion) + ".dll", libPath +  "\\Microsoft.Practices." + GetEntLibOBClassName(EntLibVersion) + ".dll");
            
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\" + entLibSubDir + "\\Microsoft.Practices.EnterpriseLibrary.Caching.dll", libPath +  "\\Microsoft.Practices.EnterpriseLibrary.Caching.dll");
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\" + entLibSubDir + "\\Microsoft.Practices.EnterpriseLibrary.Caching.Cryptography.dll", libPath + "\\Microsoft.Practices.EnterpriseLibrary.Caching.Cryptography.dll");
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\" + entLibSubDir + "\\Microsoft.Practices.EnterpriseLibrary.Logging.dll", libPath +  "\\Microsoft.Practices.EnterpriseLibrary.Logging.dll");
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\" + entLibSubDir + "\\Microsoft.Practices.EnterpriseLibrary.Logging.Database.dll", libPath +  "\\Microsoft.Practices.EnterpriseLibrary.Logging.Database.dll");
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\" + entLibSubDir + "\\Microsoft.Practices.EnterpriseLibrary.Security.dll", libPath + "\\Microsoft.Practices.EnterpriseLibrary.Security.dll");
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\" + entLibSubDir + "\\Microsoft.Practices.EnterpriseLibrary.Security.Cryptography.dll", libPath +  "\\Microsoft.Practices.EnterpriseLibrary.Security.Cryptography.dll");
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\" + entLibSubDir + "\\Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.dll", libPath +  "\\Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.dll");
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\" + entLibSubDir + "\\Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.dll", libPath + "\\Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.dll");
		if(ValidationType == MoM.Templates.ValidationType.EntLib)
		{
			SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\" + entLibSubDir + "\\Microsoft.Practices.EnterpriseLibrary.Validation.dll", libPath + "\\Microsoft.Practices.EnterpriseLibrary.Validation.dll");
		}

		if(ProviderInvariantName == "System.Data.SqlServerCe.3.5")
		{
			SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\" + entLibSubDir + "\\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.dll", libPath + "\\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.dll");
		}		
	
		// NUnit file
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\nunit.framework.dll", libPath + "\\nunit.framework.dll");
		
		if(IsConnectionStringAzure)
		{
			SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\AzureSDKv1_0\\Microsoft.ServiceHosting.ServiceRuntime.dll", libPath + "\\Microsoft.ServiceHosting.ServiceRuntime.dll");
		}
		
		#endregion Copy References
		
		AddExecutionTime(initNode);
		
		#endregion Create directories and copy dependencies
		
		#region Code generation
		_CurrentPhase = "Generating global file ";
		DebugWriteLine("Current Phase: "+_CurrentPhase);
		
		System.Xml.XmlElement commonNode = docOutput.CreateElement("common");
		XmlAttribute att2 = docOutput.CreateAttribute("startTime");
		att2.Value = DateTime.Now.ToFileTime().ToString();
		commonNode.Attributes.Append(att2);	
		docOutput.DocumentElement.AppendChild(commonNode);
		
		#region List classes
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//-- ListBase interface file
		//----------------------------------------------------------------------------------------------------------------------------------------------
		XmlElement nListBaseNode = AddFileNode(commonNode, "ListBase.cs");
		this.GetTemplate("ListBase.cst").SetProperty("NameSpace", BLLNameSpace);
		this.RenderToFile("ListBase.cst", rootPathBLL + "\\ListBase.cs", true);
		
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//-- TList interface file
		//----------------------------------------------------------------------------------------------------------------------------------------------
		XmlElement nTListNode = AddFileNode(commonNode, "TList.cs");
		this.GetTemplate("TList.cst").SetProperty("NameSpace", BLLNameSpace);
		string tListName = GetTListName();		
		this.RenderToFile("TList.cst", string.Format("{0}\\{1}.cs",rootPathBLL,tListName), true);
		
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//-- VList interface file
		//----------------------------------------------------------------------------------------------------------------------------------------------
		XmlElement nVListNode = AddFileNode(commonNode, "VList.cs");
		this.GetTemplate("VList.cst").SetProperty("NameSpace", BLLNameSpace);
		string vListName = GetVListName();
		this.RenderToFile("VList.cst", string.Format("{0}\\Views\\{1}.cs",rootPathBLL,vListName), true);
        
        if(EntLibVersion == MoM.Templates.EntLibVersion.v5_0)
        {
            AddFileNode(commonNode, "WeakRefDictionary.cs");
            this.GetTemplate("WeakRefDictionary.cst").SetProperty("BLLNameSpace", BLLNameSpace);
            this.RenderToFile("WeakRefDictionary.cst", rootPathBLL + "\\WeakRefDictionary.cs", true);
        }
		#endregion List classes
		
		#region Common Test Classes
		XmlElement testUtilityNode = AddFileNode(commonNode, "TestUtility.cs");
		this.GetTemplate("TestUtility.cst").SetProperty("NameSpace", UTNameSpace);
		this.RenderToFile("TestUtility.cst", rootPathUT + "\\TestUtility.cs", true);		
		#endregion
		
		#region Entity Classes 1
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//-- IEntity interface file
		//----------------------------------------------------------------------------------------------------------------------------------------------
		XmlElement ientityNode = AddFileNode(commonNode, "IEntity.cs");
		this.GetTemplate("IEntity.cst").SetProperty("NameSpace", BLLNameSpace);
		this.GetTemplate("IEntity.cst").SetProperty("SourceTables", templateSourceTables);
		this.GetTemplate("IEntity.cst").SetProperty("SourceViews", templateSourceViews);
		//this.GetTemplate("IEntity.cst").RenderToFile(rootPathBLL + "\\IEntity.cs", true);
		this.RenderToFile("IEntity.cst", rootPathBLL + "\\IEntity.cs", true);
			
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//-- IEntityId
		//----------------------------------------------------------------------------------------------------------------------------------------------
		XmlElement iEntityIdNode = AddFileNode(commonNode, "IEntityId.cs");
		this.GetTemplate("IEntityId.cst").SetProperty("BLLNameSpace", BLLNameSpace);
		this.RenderToFile("IEntityId.cst", rootPathBLL + "\\IEntityId.cs", true);
			
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//-- IEntityKey
		//----------------------------------------------------------------------------------------------------------------------------------------------
		XmlElement iEntityKeyNode = AddFileNode(commonNode, "IEntityKey.cs");
		this.GetTemplate("IEntityKey.cst").SetProperty("BLLNameSpace", BLLNameSpace);
		this.RenderToFile("IEntityKey.cst", rootPathBLL + "\\IEntityKey.cs", true);
		
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//-- Entity Factory file
		//----------------------------------------------------------------------------------------------------------------------------------------------
		XmlElement entityFactoryNode = AddFileNode(commonNode, "EntityFactory.cs");
		this.GetTemplate("EntityFactory.cst").SetProperty("NameSpace", BLLNameSpace);
		this.RenderToFile("EntityFactory.cst", rootPathBLL + "\\EntityFactory.cs", true);
		
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//-- Entity Factory Base file
		//----------------------------------------------------------------------------------------------------------------------------------------------
		XmlElement entityFactoryBaseNode = AddFileNode(commonNode, "EntityFactoryBase.cs");
		this.GetTemplate("EntityFactoryBase.cst").SetProperty("NameSpace", BLLNameSpace);
		this.RenderToFile("EntityFactoryBase.cst", rootPathBLL + "\\EntityFactoryBase.cs", true);
		
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//-- Entity IEntityFactory file
		//----------------------------------------------------------------------------------------------------------------------------------------------
		XmlElement iEntityFactoryNode = AddFileNode(commonNode, "IEntityFactory.cs");
		this.GetTemplate("IEntityFactory.cst").SetProperty("NameSpace", BLLNameSpace);
		this.RenderToFile("IEntityFactory.cst", rootPathBLL + "\\IEntityFactory.cs", true);
		
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//-- Entity IEntityCacheItem file
		//----------------------------------------------------------------------------------------------------------------------------------------------
		XmlElement iEntityCacheItemNode = AddFileNode(commonNode, "IEntityCacheItem.cs");
		this.GetTemplate("IEntityCacheItem.cst").SetProperty("NameSpace", BLLNameSpace);
		this.RenderToFile("IEntityCacheItem.cst", rootPathBLL + "\\IEntityCacheItem.cs", true);
	
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//-- Entity EntityCache file
		//----------------------------------------------------------------------------------------------------------------------------------------------
		XmlElement iEntityCacheNode = AddFileNode(commonNode, "EntityCache.cs");
		this.GetTemplate("EntityCache.cst").SetProperty("NameSpace", BLLNameSpace);
		this.RenderToFile("EntityCache.cst", rootPathBLL + "\\EntityCache.cs", true);
		
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//-- Entity IEntityLocator file
		//----------------------------------------------------------------------------------------------------------------------------------------------
        if(EntLibVersion == MoM.Templates.EntLibVersion.v5_0)
        {
            XmlElement iEntityLocatorNode = AddFileNode(commonNode, "EntityLocator.cs");
		    this.GetTemplate("EntityLocator_EntLib5.cst").SetProperty("NameSpace", BLLNameSpace);
            this.GetTemplate("EntityLocator.cst").SetProperty("EntLibVersion", EntLibVersion);
		    this.RenderToFile("EntityLocator_EntLib5.cst", rootPathBLL + "\\EntityLocator.cs", true);    
        }
        else
        {
            XmlElement iEntityLocatorNode = AddFileNode(commonNode, "EntityLocator.cs");
		    this.GetTemplate("EntityLocator.cst").SetProperty("NameSpace", BLLNameSpace);
		    this.GetTemplate("EntityLocator.cst").SetProperty("ObjectBuilderClass", GetEntLibOBClassName(EntLibVersion));
            this.GetTemplate("EntityLocator.cst").SetProperty("EntLibVersion", EntLibVersion);
		    this.RenderToFile("EntityLocator.cst", rootPathBLL + "\\EntityLocator.cs", true);
        }
		
		
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//-- Entity EntityManager file
		//----------------------------------------------------------------------------------------------------------------------------------------------
        if(EntLibVersion == MoM.Templates.EntLibVersion.v5_0)
        {
            XmlElement iEntityManagerNode = AddFileNode(commonNode, "EntityManager.cs");
            this.GetTemplate("EntityManager_EntLib5.cst").SetProperty("NameSpace", BLLNameSpace);
            this.RenderToFile("EntityManager_EntLib5.cst", rootPathBLL + "\\EntityManager.cs", true);   
        }
        else
        {
            XmlElement iEntityManagerNode = AddFileNode(commonNode, "EntityManager.cs");
            this.GetTemplate("EntityManager.cst").SetProperty("NameSpace", BLLNameSpace);
            this.RenderToFile("EntityManager.cst", rootPathBLL + "\\EntityManager.cs", true);
        }
		
		#endregion Entity Classes 1
		
		#region Validation class files
		if(ValidationType == MoM.Templates.ValidationType.EntLib)
		{
			XmlElement propertyValidatorNode = AddFileNode(commonNode, "PropertyValidator.cs");
			this.GetTemplate("PropertyValidator.cst").SetProperty("NameSpace", BLLNameSpace);
			this.RenderToFile("PropertyValidator.cst", rootPathBLL + "\\Validation\\PropertyValidator.cs", true);
			
			XmlElement propertyValidatorValueAccessNode = AddFileNode(commonNode, "PropertyValidatorValueAccess.cs");
			this.GetTemplate("PropertyValidatorValueAccess.cst").SetProperty("NameSpace", BLLNameSpace);
			this.RenderToFile("PropertyValidatorValueAccess.cst", rootPathBLL + "\\Validation\\PropertyValidatorValueAccess.cs", true);
			
			XmlElement propertyValidatorValueAccessBuilderNode = AddFileNode(commonNode, "PropertyValidatorValueAccessBuilder.cs");
			this.GetTemplate("PropertyValidatorValueAccessBuilder.cst").SetProperty("NameSpace", BLLNameSpace);
			this.RenderToFile("PropertyValidatorValueAccessBuilder.cst", rootPathBLL + "\\Validation\\PropertyValidatorValueAccessBuilder.cs", true);
		}
		else
		{
			XmlElement nBrokenRuleNode = AddFileNode(commonNode, "BrokenRule.cs");
			this.GetTemplate("BrokenRule.cst").SetProperty("NameSpace", BLLNameSpace);
			this.RenderToFile("BrokenRule.cst", rootPathBLL + "\\Validation\\BrokenRule.cs", true);
			
			XmlElement nBrokenRulesListNode = AddFileNode(commonNode, "BrokenRulesList.cs");
			this.GetTemplate("BrokenRulesList.cst").SetProperty("NameSpace", BLLNameSpace);
			this.RenderToFile("BrokenRulesList.cst", rootPathBLL + "\\Validation\\BrokenRulesList.cs", true);
			
			XmlElement nCommonRulesNode = AddFileNode(commonNode, "CommonRules.cs");
			this.GetTemplate("CommonRules.cst").SetProperty("NameSpace", BLLNameSpace);
			this.RenderToFile("CommonRules.cst", rootPathBLL + "\\Validation\\CommonRules.cs", true);
			
			XmlElement nValidationRuleArgsNode = AddFileNode(commonNode, "ValidationRuleArgs.cs");
			this.GetTemplate("ValidationRuleArgs.cst").SetProperty("NameSpace", BLLNameSpace);
			this.RenderToFile("ValidationRuleArgs.cst", rootPathBLL + "\\Validation\\ValidationRuleArgs.cs", true);
			
			XmlElement nValidationRuleHandlerNode = AddFileNode(commonNode, "ValidationRuleHandler.cs");
			this.GetTemplate("ValidationRuleHandler.cst").SetProperty("NameSpace", BLLNameSpace);
			this.RenderToFile("ValidationRuleHandler.cst", rootPathBLL + "\\Validation\\ValidationRuleHandler.cs", true);
			
			XmlElement nValidationRuleInfoNode = AddFileNode(commonNode, "ValidationRuleInfo.cs");
			this.GetTemplate("ValidationRuleInfo.cst").SetProperty("NameSpace", BLLNameSpace);
			this.RenderToFile("ValidationRuleInfo.cst", rootPathBLL + "\\Validation\\ValidationRuleInfo.cs", true);
			
			XmlElement nValidationRulesNode = AddFileNode(commonNode, "ValidationRules.cs");
			this.GetTemplate("ValidationRules.cst").SetProperty("NameSpace", BLLNameSpace);
			this.RenderToFile("ValidationRules.cst", rootPathBLL + "\\Validation\\ValidationRules.cs", true);
		}
		#endregion Validation class files	
		
		#region Entity Classes 2
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//-- EntityBaseCore file
		//----------------------------------------------------------------------------------------------------------------------------------------------
		XmlElement entityBaseCoreNode = AddFileNode(commonNode, "EntityBaseCore.generated.cs");
		this.GetTemplate("EntityBaseCore.generated.cst").SetProperty("NameSpace", BLLNameSpace);
		this.GetTemplate("EntityBaseCore.generated.cst").SetProperty("SourceTables", templateSourceTables);
		this.GetTemplate("EntityBaseCore.generated.cst").SetProperty("SourceViews", templateSourceViews);
		this.GetTemplate("EntityBaseCore.generated.cst").SetProperty("IncludeWCFDataAttributes", IncludeWCFDataAttributes);
		this.GetTemplate("EntityBaseCore.generated.cst").SetProperty("IncludeXmlAttributes", IncludeXmlAttributes);
		this.GetTemplate("EntityBaseCore.generated.cst").SetProperty("SerializeEntityState", SerializeEntityState);
		this.GetTemplate("EntityBaseCore.generated.cst").SetProperty("ValidationType", ValidationType);
		this.RenderToFile("EntityBaseCore.generated.cst", rootPathBLL + "\\EntityBaseCore.generated.cs", true);
		
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//-- EntityBase file - generated only once
		//----------------------------------------------------------------------------------------------------------------------------------------------
		if (!File.Exists(rootPathBLL + "\\EntityBase.cs"))
		{
			XmlElement entityBaseNode = AddFileNode(commonNode, "EntityBase.cs");
			this.GetTemplate("EntityBase.cst").SetProperty("NameSpace", BLLNameSpace);
			this.RenderToFile("EntityBase.cst", rootPathBLL + "\\EntityBase.cs", true);
		}
		
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//-- EntityKeyBaseCore file
		//----------------------------------------------------------------------------------------------------------------------------------------------
		AddFileNode(commonNode, "EntityKeyBaseCore.generated.cs");
		this.GetTemplate("EntityKeyBaseCore.generated.cst").SetProperty("BLLNameSpace", BLLNameSpace);
		this.RenderToFile("EntityKeyBaseCore.generated.cst", rootPathBLL + "\\EntityKeyBaseCore.generated.cs", true);
					
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//-- EntityBase file - generated only once
		//----------------------------------------------------------------------------------------------------------------------------------------------
		if (!File.Exists(rootPathBLL + "\\EntityKeyBase.cs"))
		{
			AddFileNode(commonNode, "EntityKeyBase.cs");
			this.GetTemplate("EntityKeyBase.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.RenderToFile("EntityKeyBase.cst", rootPathBLL + "\\EntityKeyBase.cs", true);
		}
		#endregion Entity Classes 2
		
		#region Components - Singe File Copy Overs
		if (ComponentPattern != MoM.Templates.ComponentPatternType.None)
		{
			//----------------------------------------------------------------------------------------------------------------------------------------------
			//-- SecurityContext file - generated only once
			//----------------------------------------------------------------------------------------------------------------------------------------------
			if (!File.Exists(rootPathComponents + "\\SecurityContext.cs"))
			{
				XmlElement iSecurityContextNode = AddFileNode(commonNode, "SecurityContext.cs");
				this.GetTemplate("SecurityContext.cst").SetProperty("NameSpace", ComponentsNameSpace);
				this.GetTemplate("SecurityContext.cst").SetProperty("BLLNameSpace", BLLNameSpace);
				this.GetTemplate("SecurityContext.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.RenderToFile("SecurityContext.cst", rootPathComponents + "\\SecurityContext.cs", true);
			}

			XmlElement iSecurityContextBaseNode = AddFileNode(commonNode, "SecurityContextBase.generated.cs");
			this.GetTemplate("SecurityContextBase.cst").SetProperty("NameSpace", ComponentsNameSpace);
			this.GetTemplate("SecurityContextBase.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("SecurityContextBase.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.RenderToFile("SecurityContextBase.cst", rootPathComponents + "\\SecurityContextBase.generated.cs", true);
	
			XmlElement contextViewNode = AddFileNode(commonNode, "ContextView.cs");
			this.GetTemplate("ContextView.cst").SetProperty("NameSpace", ComponentsNameSpace);
			this.GetTemplate("ContextView.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("ContextView.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.RenderToFile("ContextView.cst", rootPathComponents + "\\ContextView.cs", true);
		
			XmlElement iProcessorNode = AddFileNode(commonNode, "IProcessor.cs");
			this.GetTemplate("IProcessor.cst").SetProperty("NameSpace", ComponentsNameSpace);
			this.RenderToFile("IProcessor.cst", rootPathComponents + "\\Processors\\IProcessor.cs", true);
			
			XmlElement iProcessorResultNode = AddFileNode(commonNode, "IProcessorResult.cs");
			this.GetTemplate("IProcessorResult.cst").SetProperty("NameSpace", ComponentsNameSpace);
			this.GetTemplate("IProcessorResult.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("IProcessorResult.cst").SetProperty("ValidationType", ValidationType);
			this.RenderToFile("IProcessorResult.cst", rootPathComponents + "\\Processors\\IProcessorResult.cs", true);
	
			XmlElement iProcessorBaseNode = AddFileNode(commonNode, "ProcessorBase.cs");
			this.GetTemplate("ProcessorBase.cst").SetProperty("NameSpace", ComponentsNameSpace);
			this.GetTemplate("ProcessorBase.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.RenderToFile("ProcessorBase.cst", rootPathComponents + "\\Processors\\ProcessorBase.cs", true);
			
			XmlElement iGenericProcessorResultNode = AddFileNode(commonNode, "GenericProcessorResult.cs");
			this.GetTemplate("GenericProcessorResult.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("GenericProcessorResult.cst").SetProperty("NameSpace", ComponentsNameSpace);
			this.GetTemplate("GenericProcessorResult.cst").SetProperty("ValidationType", ValidationType);
			this.RenderToFile("GenericProcessorResult.cst", rootPathComponents + "\\Processors\\GenericProcessorResult.cs", true);
	
			XmlElement cDomainUtilNode = AddFileNode(commonNode, "DomainUtil.cs");
			this.GetTemplate("DomainUtil.cst").SetProperty("NameSpace", ComponentsNameSpace);
			this.GetTemplate("DomainUtil.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("DomainUtil.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.RenderToFile("DomainUtil.cst", rootPathComponents + "\\DomainUtil.cs", true);
	
				
			XmlElement iConnectionScopeNode = AddFileNode(commonNode, "IConnectionScope.cs");
			this.GetTemplate("IConnectionScope.cst").SetProperty("NameSpace", ComponentsNameSpace);
			this.GetTemplate("IConnectionScope.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("IConnectionScope.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.RenderToFile("IConnectionScope.cst", rootPathComponents + "\\IConnectionScope.cs", true);
	
			XmlElement connectionScopeNode = AddFileNode(commonNode, "ConnectionScope.cs");
			this.GetTemplate("ConnectionScope.cst").SetProperty("NameSpace", ComponentsNameSpace);
			this.GetTemplate("ConnectionScope.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("ConnectionScope.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.RenderToFile("ConnectionScope.cst", rootPathComponents + "\\ConnectionScope.cs", true);
	
			XmlElement connectionScopeBaseNode = AddFileNode(commonNode, "ConnectionScopeBase.cs");
			this.GetTemplate("ConnectionScopeBase.cst").SetProperty("NameSpace", ComponentsNameSpace);
			this.GetTemplate("ConnectionScopeBase.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("ConnectionScopeBase.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.RenderToFile("ConnectionScopeBase.cst", rootPathComponents + "\\ConnectionScopeBase.cs", true);
	
			if (ComponentPattern == MoM.Templates.ComponentPatternType.DomainModel)
			{
				XmlElement iComponentEntityNode = AddFileNode(commonNode, "IComponentEntity.cs");
				this.GetTemplate("IComponentEntity.cst").SetProperty("NameSpace", ComponentsNameSpace);
				this.GetTemplate("IComponentEntity.cst").SetProperty("BLLNameSpace", BLLNameSpace);
				this.RenderToFile("IComponentEntity.cst", rootPathComponents + "\\IComponentEntity.cs", true);
				
				XmlElement componentEntityFactoryNode = AddFileNode(commonNode, "ComponentEntityFactory.cs");
				this.GetTemplate("ComponentEntityFactory.cst").SetProperty("NameSpace", ComponentsNameSpace);
				this.GetTemplate("ComponentEntityFactory.cst").SetProperty("BLLNameSpace", BLLNameSpace);
				this.RenderToFile("ComponentEntityFactory.cst", rootPathComponents + "\\ComponentEntityFactory.cs", true);
			}
			else
			{
				XmlElement iComponentServiceNode = AddFileNode(commonNode, "IComponentService.cs");
				this.GetTemplate("IComponentService.cst").SetProperty("NameSpace", ComponentsNameSpace);
				this.GetTemplate("IComponentService.cst").SetProperty("BLLNameSpace", BLLNameSpace);
				this.RenderToFile("IComponentService.cst", rootPathComponents + "\\IComponentService.cs", true);
	
				// only generate stub once
				if ( !File.Exists(rootPathComponents + "\\ServiceBase.cs") )
				{
					XmlElement iServiceBaseNode = AddFileNode(commonNode, "ServiceBase.cst.cs");
					this.GetTemplate("ServiceBase.cst").SetProperty("NameSpace", ComponentsNameSpace);
					this.GetTemplate("ServiceBase.cst").SetProperty("BLLNameSpace", BLLNameSpace);
					this.GetTemplate("ServiceBase.cst").SetProperty("DALNameSpace", DALNameSpace);
					this.RenderToFile("ServiceBase.cst", rootPathComponents + "\\ServiceBase.cs", true);
				}
				
				XmlElement iServiceBaseCoreNode = AddFileNode(commonNode, "ServiceBaseCore.cst.cs");
				this.GetTemplate("ServiceBaseCore.cst").SetProperty("NameSpace", ComponentsNameSpace);
				this.GetTemplate("ServiceBaseCore.cst").SetProperty("BLLNameSpace", BLLNameSpace);
				this.GetTemplate("ServiceBaseCore.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate("ServiceBaseCore.cst").SetProperty("ValidationType", ValidationType);
				this.RenderToFile("ServiceBaseCore.cst", rootPathComponents + "\\ServiceBaseCore.generated.cs", true);
				
				//For Views
				// only generate stub once
				if ( !File.Exists(rootPathComponents + "\\Views\\ServiceViewBase.cs") )
				{
					XmlElement iServiceViewBaseNode = AddFileNode(commonNode, "ServiceViewBase.cst.cs");
					this.GetTemplate("ServiceViewBase.cst").SetProperty("NameSpace", ComponentsNameSpace);
					this.GetTemplate("ServiceViewBase.cst").SetProperty("BLLNameSpace", BLLNameSpace);
					this.GetTemplate("ServiceViewBase.cst").SetProperty("DALNameSpace", DALNameSpace);
					this.RenderToFile("ServiceViewBase.cst", rootPathComponents + "\\Views\\ServiceViewBase.cs", true);
				}
				
				XmlElement iServiceViewBaseCoreNode = AddFileNode(commonNode, "ServiceViewBaseCore.cst.cs");
				this.GetTemplate("ServiceViewBaseCore.cst").SetProperty("NameSpace", ComponentsNameSpace);
				this.GetTemplate("ServiceViewBaseCore.cst").SetProperty("BLLNameSpace", BLLNameSpace);
				this.GetTemplate("ServiceViewBaseCore.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate("ServiceViewBaseCore.cst").SetProperty("ValidationType", ValidationType);
				this.RenderToFile("ServiceViewBaseCore.cst", rootPathComponents + "\\Views\\ServiceViewBaseCore.generated.cs", true);
				//--------------------------------------------------
				
				XmlElement iServiceResultNode = AddFileNode(commonNode, "ServiceResult.cs");
				this.GetTemplate("ServiceResult.cst").SetProperty("NameSpace", ComponentsNameSpace);
				this.GetTemplate("ServiceResult.cst").SetProperty("BLLNameSpace", BLLNameSpace);
				this.GetTemplate("ServiceResult.cst").SetProperty("ValidationType", ValidationType);
				this.RenderToFile("ServiceResult.cst", rootPathComponents + "\\ServiceResult.cs", true);
			}
		} // end if component/
		#endregion Components - Singe File Copy Overs
	
		#region Entity Classes 3
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//-- EntityFilter class
		//----------------------------------------------------------------------------------------------------------------------------------------------
		XmlElement filterNode = AddFileNode(commonNode, "EntityFilter.cs");
		this.GetTemplate("EntityFilter.cst").SetProperty("NameSpace", BLLNameSpace);
		this.RenderToFile("EntityFilter.cst", rootPathBLL + "\\EntityFilter.cs", true);
		
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//-- EntityPropertyComparer class
		//----------------------------------------------------------------------------------------------------------------------------------------------
		XmlElement comparerNode = AddFileNode(commonNode, "EntityPropertyComparer.cs");
		this.GetTemplate("EntityPropertyComparer.cst").SetProperty("NameSpace", BLLNameSpace);
		this.RenderToFile("EntityPropertyComparer.cst", rootPathBLL + "\\EntityPropertyComparer.cs", true);
		
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//-- GenericTypeConverter class
		//----------------------------------------------------------------------------------------------------------------------------------------------
		XmlElement converterNode = AddFileNode(commonNode, "GenericTypeConverter.cs");
		this.GetTemplate("GenericTypeConverter.cst").SetProperty("NameSpace", BLLNameSpace);
		this.RenderToFile("GenericTypeConverter.cst", rootPathBLL + "\\GenericTypeConverter.cs", true);
		#endregion Entity Classes 3
		
		#region Stored procedures
		if (GenerateSql)
		{
			string xmlTemplateName = "";
			string xmlOutputName = "";
			
			if(_netTiersSqlProvider)
			{
				//SQL
				xmlTemplateName = "StoredProceduresXml.cst";
				xmlOutputName = "Procedures.xml";
			}
			else if (ProviderInvariantName == "System.Data.SQLite")
			{	
				xmlTemplateName = "System.Data.SQLite.Procedures.cst";
				xmlOutputName = "System.Data.SQLite.Procedures.xml";
			}
			else if (ProviderInvariantName == "System.Data.OleDb")
			{
				xmlTemplateName = "System.Data.OleDb.Procedures.cst";
				xmlOutputName = "System.Data.OleDb.Procedures.xml";
			}
			else if (ProviderInvariantName == "System.Data.OracleClient")
			{			
				xmlTemplateName = "System.Data.Oracle.Procedures.cst";
				xmlOutputName = "System.Data.OracleClient.Procedures.xml";
			}
			else if (ProviderInvariantName == "System.Data.SqlServerCe.3.5")
			{			
				xmlTemplateName = "SqlCeStoredProceduresXml.cst";
				xmlOutputName = "System.Data.SqlServerCe.Procedures.xml";
			}
			else
			{
				throw new System.Exception("This provider is not supported.");
			}
		
			XmlElement queriesNode = AddFileNode(commonNode, xmlOutputName);
			
			//SQL Specific
			if(_netTiersSqlProvider)
			{
				this.GetTemplate(xmlTemplateName).SetProperty("IncludeCustoms", IncludeCustoms);		
				this.GetTemplate(xmlTemplateName).SetProperty("CustomProcedureStartsWith", CustomProcedureStartsWith);				
				this.GetTemplate(xmlTemplateName).SetProperty("UseTimestampConcurrency", UseTimestampConcurrency);				
			}
			
			this.GetTemplate(xmlTemplateName).SetProperty("SourceViews", templateSourceViews);
			this.GetTemplate(xmlTemplateName).SetProperty("SourceTables", templateSourceTables);
			
			this.GetTemplate(xmlTemplateName).SetProperty("IncludeDrop", IncludeDrop);
			this.GetTemplate(xmlTemplateName).SetProperty("IncludeInsert", IncludeInsert);
			this.GetTemplate(xmlTemplateName).SetProperty("IncludeUpdate", IncludeUpdate);
			this.GetTemplate(xmlTemplateName).SetProperty("IncludeManyToMany", IncludeManyToMany);
			this.GetTemplate(xmlTemplateName).SetProperty("IncludeDelete", IncludeDelete);
			this.GetTemplate(xmlTemplateName).SetProperty("IncludeUpdate", IncludeUpdate);
			this.GetTemplate(xmlTemplateName).SetProperty("IncludeGetList", IncludeGetList);
			this.GetTemplate(xmlTemplateName).SetProperty("IncludeGetListByFK", IncludeGetListByFK);
			this.GetTemplate(xmlTemplateName).SetProperty("IncludeGetListByIX", IncludeGetListByIX);
			this.GetTemplate(xmlTemplateName).SetProperty("IncludeFind", IncludeFind);
			this.GetTemplate(xmlTemplateName).SetProperty("IncludeDatabaseFeatures", IncludeDatabaseFeatures);
			
			this.GetTemplate(xmlTemplateName).SetProperty("IsolationLevel", IsolationLevel);
			this.GetTemplate(xmlTemplateName).SetProperty("InsertSuffix", InsertSuffix);
			this.GetTemplate(xmlTemplateName).SetProperty("UpdateSuffix", UpdateSuffix);
			this.GetTemplate(xmlTemplateName).SetProperty("DeleteSuffix", DeleteSuffix);
			this.GetTemplate(xmlTemplateName).SetProperty("SelectSuffix", SelectSuffix);
			this.GetTemplate(xmlTemplateName).SetProperty("SelectAllSuffix", SelectAllSuffix);
			this.GetTemplate(xmlTemplateName).SetProperty("FindSuffix", FindSuffix);
			
			this.GetTemplate(xmlTemplateName).SetProperty("GrantReadUser", GrantReadUser);
			this.GetTemplate(xmlTemplateName).SetProperty("GrantWriteUser", GrantUser);
					
			this.GetTemplate(xmlTemplateName).SetProperty("CompanyName", CompanyName);
			this.GetTemplate(xmlTemplateName).SetProperty("CompanyURL", CompanyURL);
			
			this.GetTemplate(xmlTemplateName).SetProperty("ProcedurePrefix", ProcedurePrefix.Replace(" ", ""));
	
			if(_netTiersSqlProvider)
			{
				this.RenderToFile(xmlTemplateName, rootPathDALSql + "\\" + xmlOutputName, true);
			}
			else if(ProviderInvariantName == "System.Data.OracleClient")
			{
				this.RenderToFile(xmlTemplateName, rootPathDALOracle + "\\" + xmlOutputName, true);
			}
			else if(ProviderInvariantName == "System.Data.SqlServerCe.3.5")
			{
				this.GetTemplate(xmlTemplateName).SetProperty("UseTimestampConcurrency", UseTimestampConcurrency);
				this.RenderToFile(xmlTemplateName, rootPathDALSqlCe + "\\" + xmlOutputName, true);
			}
			else
			{
				this.RenderToFile(xmlTemplateName, rootPathDALGeneric + "\\" + xmlOutputName, true);
			}
			
			// Create the SQL File from the XML file
			XslTransform xslt = new XslTransform();
			
			if(_netTiersSqlProvider)
			{
				xslt.Load(this.CodeTemplateInfo.DirectoryName + "\\DataAccessLayer.SqlClient\\scriptsql.xsl");
			}
			else if(ProviderInvariantName == "System.Data.OracleClient")
			{
				xslt.Load(this.CodeTemplateInfo.DirectoryName + "\\DataAccessLayer.OracleClient\\ScriptOracleSql.xsl");
			}
			else if(ProviderInvariantName == "System.Data.SqlServerCe.3.5")
			{
				xslt.Load(this.CodeTemplateInfo.DirectoryName + "\\DataAccessLayer.SqlCeClient\\scriptsql.xsl");
			}
			             
			TextWriter writer = null;
			XPathDocument mydata = null;
			
			try
			{
				if(_netTiersSqlProvider)
				{
					writer = new StreamWriter(rootPathSQL + "\\procedures.sql");
					//Create a new XPathDocument and load the XML data to be transformed.
					mydata = new XPathDocument(rootPathDALSql + "\\" + xmlOutputName);
				}
				else if(ProviderInvariantName == "System.Data.SqlServerCe.3.5")
				{
					writer = new StreamWriter(rootPathSQL + "\\procedures.sql");
					//Create a new XPathDocument and load the XML data to be transformed.
					mydata = new XPathDocument(rootPathDALSqlCe + "\\" + xmlOutputName);
				}
				else if(ProviderInvariantName == "System.Data.OracleClient")
				{
					writer = new StreamWriter(rootPathSQL + "\\procedures.sql");
					
					//Create a new XPathDocument and load the XML data to be transformed.
					mydata = new XPathDocument(rootPathDALOracle + "\\" + xmlOutputName);
				}
				else
				{
					writer = new StreamWriter(rootPathSQL + "\\procedures.sql");
					
					//Create a new XPathDocument and load the XML data to be transformed.
					mydata = new XPathDocument(rootPathDALGeneric + "\\" + xmlOutputName);
				}
		
				xslt.Transform(mydata, null, writer, null);
				writer.Close();
			}
			catch(Exception ex)
			{
				Response.WriteLine(ex);
			}
			finally
			{
				if (writer != null)
				{
					writer.Close();
				}
			}
		
			// Install the stored procedures.
			if (ExecuteSql)
			{
				try
				{
					ExecuteSqlInFile(rootPathSQL + "\\procedures.sql", SourceDatabase.ConnectionString );
				}
				catch(System.Data.SqlClient.SqlException sex)
				{
					AddMessageNode(queriesNode, 2, string.Format("Error while execution Sql file. {0}", sex), true);
				}
				catch(Exception ex)
				{
					AddMessageNode(queriesNode, 2, string.Format("Error while execution Sql file. {0}", ex), true);
				}			
			}
		}
		#endregion Stored procedures
		
		#region Generate common dataaccesslayer
		if (GenerateDataAccessLayer)
		{
			// Generates the configuration files
			string configFile = "App.config.2005.cst";
			
			// Configuration files for the unit test project
			if (IncludeUnitTest != MoM.Templates.UnitTestStyle.None)
			{
				AddFileNode(commonNode, "Unit test configuration files");
				this.GetTemplate(configFile).SetProperty("IsWebConfig", false);
				this.GetTemplate(configFile).SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate(configFile).SetProperty("ConnectionString", SourceDatabase.ConnectionString);
				this.GetTemplate(configFile).SetProperty("FactoryType", factoryType);
				this.GetTemplate(configFile).SetProperty("NetTiersSqlProvider", _netTiersSqlProvider);			
				this.GetTemplate(configFile).SetProperty("ProviderInvariantName", ProviderInvariantName);
	
				this.GetTemplate(configFile).SetProperty("WebServiceUrl", WebServiceUrl + "/" + NameSpace + "Services.asmx");
				
				this.RenderToFile(configFile, specialPath + "\\" + NameSpace + (vsnetIntegration == VSNetIntegration.SeparatedProjects && (IncludeUnitTest != MoM.Templates.UnitTestStyle.None) ? "." + UnitTestsNameSpace : string.Empty) + ".dll.config", true);
				
				// these config files are very similar today,
				// but may not be in the future, so here's a way
				// for them to live side-by-side going forward.
				string ver = EntLibVersion.ToString().Substring(EntLibVersion.ToString().LastIndexOf(".") + 1);
				string entLibConfigTemplateName = string.Format("entlib.{0}.config.cst", ver);
				AddFileNode(commonNode, string.Format("Enterprise Library {0} unit test configuration files", ver));
				this.GetTemplate(entLibConfigTemplateName).SetProperty("NameSpace", NameSpace);
				this.GetTemplate(entLibConfigTemplateName).SetProperty("BLLNameSpace", BLLNameSpace);
				this.RenderToFile(entLibConfigTemplateName, specialPath + "\\entlib.config", true);
			}	
			
			// Configuration files for the webservice
			if (GenerateWebservice)
			{
				this.GetTemplate(configFile).SetProperty("IsWebConfig", true);
				this.GetTemplate(configFile).SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate(configFile).SetProperty("ConnectionString", SourceDatabase.ConnectionString);
				this.GetTemplate(configFile).SetProperty("FactoryType", factoryType);
				this.GetTemplate(configFile).SetProperty("WebServiceUrl", WebServiceUrl);
				this.GetTemplate(configFile).SetProperty("NetTiersSqlProvider", _netTiersSqlProvider);			
				this.GetTemplate(configFile).SetProperty("ProviderInvariantName", ProviderInvariantName);			
				this.RenderToFile(configFile, rootPathWS + "\\Web.config", true);
			}
			
			AddFileNode(commonNode, "Utility.cs");
			this.GetTemplate("Utility.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("Utility.cst").SetProperty("NameSpace", BLLNameSpace);
			this.GetTemplate("Utility.cst").SetProperty("RetryEnabled", RetryEnabled);
			this.GetTemplate("Utility.cst").SetProperty("RetryMaxAttempts", RetryMaxAttempts);
			this.GetTemplate("Utility.cst").SetProperty("RetrySleepTime", RetrySleepTime);
			this.GetTemplate("Utility.cst").SetProperty("RetrySleepStyle", RetrySleepStyle);
			this.RenderToFile("Utility.cst", rootPathDAL + "\\Utility.cs", true);
                                    
			AddFileNode(commonNode, "ITransactionManager.cs");
			this.GetTemplate("ITransactionManager.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.RenderToFile("ITransactionManager.cst", rootPathDAL + "\\ITransactionManager.cs", true);
									
			AddFileNode(commonNode, "TransactionManager.cs");
			this.GetTemplate("TransactionManager.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("TransactionManager.cst").SetProperty("ProviderInvariantName", ProviderInvariantName);
			this.RenderToFile("TransactionManager.cst", rootPathDAL + "\\TransactionManager.cs", true);
			
			AddFileNode(commonNode, "DataRepository.cs");
			this.GetTemplate("DataRepository.cst").SetProperty("NameSpace", BLLNameSpace);
			this.GetTemplate("DataRepository.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("DataRepository.cst").SetProperty("SourceTables", templateSourceTables);
			this.GetTemplate("DataRepository.cst").SetProperty("SourceViews", templateSourceViews);
			this.GetTemplate("DataRepository.cst").SetProperty("IncludeDesignTimeSupport", IncludeDesignTimeSupport);
			this.GetTemplate("DataRepository.cst").SetProperty("VisualStudioVersion", VisualStudioVersion);
			this.GetTemplate("DataRepository.cst").SetProperty("IsConnectionStringAzure", IsConnectionStringAzure);
			this.RenderToFile("DataRepository.cst", rootPathDAL + "\\DataRepository.cs", true);
			
			AddFileNode(commonNode, "IEntityProvider.cs");
			SetCommonProperties("IEntityProvider.cst");
			this.GetTemplate("IEntityProvider.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("IEntityProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("IEntityProvider.cst").SetProperty("IncludeComponentLayer", IncludeComponentLayer);
			this.RenderToFile("IEntityProvider.cst", rootPathDAL + "\\IEntityProvider.cs", true);
	
			AddFileNode(commonNode, "IEntityViewProvider.cs");
			this.GetTemplate("IEntityViewProvider.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("IEntityViewProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("IEntityViewProvider.cst").SetProperty("IncludeGetList", IncludeGetList);
			this.GetTemplate("IEntityViewProvider.cst").SetProperty("IncludeFind", IncludeFind);
			this.GetTemplate("IEntityViewProvider.cst").SetProperty("IncludeComponentLayer", IncludeComponentLayer);
			this.RenderToFile("IEntityViewProvider.cst", rootPathDAL + "\\IEntityViewProvider.cs", true);
	
			if ( !File.Exists(rootPathDAL + "\\Bases\\EntityProviderBase.cs") )
			{
				AddFileNode(commonNode, "EntityProviderBase.cs");
				this.GetTemplate("EntityProviderBaseClass.cst").SetProperty("BLLNameSpace", BLLNameSpace);
				this.GetTemplate("EntityProviderBaseClass.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.RenderToFile("EntityProviderBaseClass.cst", rootPathDAL + "\\Bases\\EntityProviderBase.cs", true);
			}
			
			AddFileNode(commonNode, "EntityProviderBaseCore.generated.cs");
			SetCommonProperties("EntityProviderBaseCoreClass.generated.cst");
			this.GetTemplate("EntityProviderBaseCoreClass.generated.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("EntityProviderBaseCoreClass.generated.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("EntityProviderBaseCoreClass.generated.cst").SetProperty("IncludeDatabaseFeatures", IncludeDatabaseFeatures);
			this.GetTemplate("EntityProviderBaseCoreClass.generated.cst").SetProperty("EntLibVersion", EntLibVersion);
			this.RenderToFile("EntityProviderBaseCoreClass.generated.cst", rootPathDAL + "\\Bases\\EntityProviderBaseCore.generated.cs", true);
	
			if ( !File.Exists(rootPathDAL + "\\Bases\\EntityViewProviderBase.cs") )
			{
				AddFileNode(commonNode, "EntityViewProviderBase.cs");
				this.GetTemplate("EntityViewProviderBaseClass.cst").SetProperty("BLLNameSpace", BLLNameSpace);
				this.GetTemplate("EntityViewProviderBaseClass.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.RenderToFile("EntityViewProviderBaseClass.cst", rootPathDAL + "\\Bases\\EntityViewProviderBase.cs", true);
			}
	
			AddFileNode(commonNode, "EntityViewProviderBaseCore.generated.cs");
			this.GetTemplate("EntityViewProviderBaseCoreClass.generated.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("EntityViewProviderBaseCoreClass.generated.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("EntityViewProviderBaseCoreClass.generated.cst").SetProperty("IncludeGetList", IncludeGetList);
			this.GetTemplate("EntityViewProviderBaseCoreClass.generated.cst").SetProperty("IncludeFind", IncludeFind);
			this.RenderToFile("EntityViewProviderBaseCoreClass.generated.cst", rootPathDAL + "\\Bases\\EntityViewProviderBaseCore.generated.cs", true);
					
			AddFileNode(commonNode, "INetTiersProvider.cs");
			this.GetTemplate("INetTiersProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("INetTiersProvider.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("INetTiersProvider.cst").SetProperty("SourceTables", templateSourceTables);
			this.GetTemplate("INetTiersProvider.cst").SetProperty("SourceViews", templateSourceViews);
			this.RenderToFile("INetTiersProvider.cst", rootPathDAL + "\\Bases\\INetTiersProvider.cs", true);
					
			AddFileNode(commonNode, "NetTiersProvider.cs");
			this.GetTemplate("NetTiersProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("NetTiersProvider.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("NetTiersProvider.cst").SetProperty("SourceTables", templateSourceTables);
			this.GetTemplate("NetTiersProvider.cst").SetProperty("SourceViews", templateSourceViews);
			this.RenderToFile("NetTiersProvider.cst", rootPathDAL + "\\Bases\\NetTiersProvider.cs", true);
	
			AddFileNode(commonNode, "NetTiersProviderBase.cs");
			this.GetTemplate("NetTiersProviderBase.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("NetTiersProviderBase.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("NetTiersProviderBase.cst").SetProperty("SourceTables", templateSourceTables);
			this.GetTemplate("NetTiersProviderBase.cst").SetProperty("SourceViews", templateSourceViews);
			this.RenderToFile("NetTiersProviderBase.cst", rootPathDAL + "\\Bases\\NetTiersProviderBase.cs", true);
	
			AddFileNode(commonNode, "NetTiersProviderCollection.cs");
			this.GetTemplate("NetTiersProviderCollection.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.RenderToFile("NetTiersProviderCollection.cst", rootPathDAL + "\\Bases\\NetTiersProviderCollection.cs", true);
			
			AddFileNode(commonNode, "NetTiersServiceSection.cs");
			this.GetTemplate("NetTiersServiceSection.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("NetTiersServiceSection.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.RenderToFile("NetTiersServiceSection.cst", rootPathDAL + "\\Bases\\NetTiersServiceSection.cs", true);
	
			AddFileNode(commonNode, "ExpressionParserBase.cs");
			this.GetTemplate("ExpressionParserBase.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("ExpressionParserBase.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.RenderToFile("ExpressionParserBase.cst", rootPathDAL + "\\Query\\ExpressionParserBase.cs", true);
	
			AddFileNode(commonNode, "SqlExpressionParser.cs");
			this.GetTemplate("SqlExpressionParser.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("SqlExpressionParser.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.RenderToFile("SqlExpressionParser.cst", rootPathDAL + "\\Query\\SqlExpressionParser.cs", true);
	
			AddFileNode(commonNode, "SqlStringBuilder.cs");
			this.GetTemplate("SqlStringBuilder.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("SqlStringBuilder.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.RenderToFile("SqlStringBuilder.cst", rootPathDAL + "\\Query\\SqlStringBuilder.cs", true);
	
			AddFileNode(commonNode, "SqlUtil.cs");
			this.GetTemplate("SqlUtil.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("SqlUtil.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.RenderToFile("SqlUtil.cst", rootPathDAL + "\\Query\\SqlUtil.cs", true);
	
			AddFileNode(commonNode, "StringTokenizer.cs");
			this.GetTemplate("StringTokenizer.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("StringTokenizer.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.RenderToFile("StringTokenizer.cst", rootPathDAL + "\\Query\\StringTokenizer.cs", true);
			
			if (_netTiersSqlProvider == true)
			{			
			AddFileNode(commonNode, "SqlClient\\SqlNetTiersProvider.cs");
			this.GetTemplate("SqlNetTiersProvider.cst").SetProperty("NameSpace", BLLNameSpace);
			this.GetTemplate("SqlNetTiersProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("SqlNetTiersProvider.cst").SetProperty("SourceTables", templateSourceTables);
			this.GetTemplate("SqlNetTiersProvider.cst").SetProperty("SourceViews", templateSourceViews);
			this.RenderToFile("SqlNetTiersProvider.cst", rootPathDALSql + "\\SqlNetTiersProvider.cs", true);
			
				AddFileNode(commonNode, "StoredProcedureProvider.cs");
				this.GetTemplate("StoredProcedureProvider.cst").SetProperty("BLLNameSpace", BLLNameSpace);
				this.GetTemplate("StoredProcedureProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate("StoredProcedureProvider.cst").SetProperty("IncludeDatabaseFeatures", IncludeDatabaseFeatures);
				this.RenderToFile("StoredProcedureProvider.cst", rootPathDALSql + "\\StoredProcedureProvider.cs", true);
			}
			else if(ProviderInvariantName == "System.Data.OracleClient")
			{
				AddFileNode(commonNode, "OracleClient\\OracleNetTiersProvider.cs");
				this.GetTemplate("OracleNetTiersProvider.cst").SetProperty("NameSpace", BLLNameSpace);
				this.GetTemplate("OracleNetTiersProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate("OracleNetTiersProvider.cst").SetProperty("SourceTables", templateSourceTables);
				this.GetTemplate("OracleNetTiersProvider.cst").SetProperty("SourceViews", templateSourceViews);
				this.RenderToFile("OracleNetTiersProvider.cst", rootPathDALOracle + "\\OracleNetTiersProvider.cs", true);
				
				//AddFileNode(commonNode, "OracleClient\\DbCommandManager.cs");
				//this.GetTemplate("DbCommandManager.cst").SetProperty("BLLNameSpace", BLLNameSpace);
				//this.GetTemplate("DbCommandManager.cst").SetProperty("DALNameSpace", DALNameSpace);
				//this.GetTemplate("DbCommandManager.cst").SetProperty("ProviderInvariantName", ProviderInvariantName);
				//this.GetTemplate("DbCommandManager.cst").SetProperty("IncludeDatabaseFeatures", IncludeDatabaseFeatures);
				//this.RenderToFile("DbCommandManager.cst", rootPathDALOracle + "\\DbCommandManager.cs", true);
			}
			else if(ProviderInvariantName == "System.Data.SqlServerCe.3.5")
			{
				AddFileNode(commonNode, "SqlCeClient\\SqlCeNetTiersProvider.cs");
				this.GetTemplate("SqlCeNetTiersProvider.cst").SetProperty("NameSpace", BLLNameSpace);
				this.GetTemplate("SqlCeNetTiersProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate("SqlCeNetTiersProvider.cst").SetProperty("SourceTables", templateSourceTables);
				this.GetTemplate("SqlCeNetTiersProvider.cst").SetProperty("SourceViews", templateSourceViews);
				this.RenderToFile("SqlCeNetTiersProvider.cst", rootPathDALSqlCe + "\\SqlCeNetTiersProvider.cs", true);				

				AddFileNode(commonNode, "SqlCeClient\\StoredProcedureProvider.cs");
				this.GetTemplate("SqlCeStoredProcedureProvider.cst").SetProperty("BLLNameSpace", BLLNameSpace);
				this.GetTemplate("SqlCeStoredProcedureProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate("SqlCeStoredProcedureProvider.cst").SetProperty("IncludeDatabaseFeatures", IncludeDatabaseFeatures);
				this.RenderToFile("SqlCeStoredProcedureProvider.cst", rootPathDALSqlCe + "\\StoredProcedureProvider.cs", true);

			}
			else
			{
				AddFileNode(commonNode, "GenericClient\\GenericNetTiersProvider.cs");
				this.GetTemplate("GenericNetTiersProvider.cst").SetProperty("NameSpace", BLLNameSpace);
				this.GetTemplate("GenericNetTiersProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate("GenericNetTiersProvider.cst").SetProperty("SourceTables", templateSourceTables);
				this.GetTemplate("GenericNetTiersProvider.cst").SetProperty("SourceViews", templateSourceViews);
				this.RenderToFile("GenericNetTiersProvider.cst", rootPathDALGeneric + "\\GenericNetTiersProvider.cs", true);
				
				AddFileNode(commonNode, "GenericClient\\DbCommandManager.cs");
				this.GetTemplate("DbCommandManager.cst").SetProperty("BLLNameSpace", BLLNameSpace);
				this.GetTemplate("DbCommandManager.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate("DbCommandManager.cst").SetProperty("ProviderInvariantName", ProviderInvariantName);
				this.GetTemplate("DbCommandManager.cst").SetProperty("IncludeDatabaseFeatures", IncludeDatabaseFeatures);
				this.RenderToFile("DbCommandManager.cst", rootPathDALGeneric + "\\DbCommandManager.cs", true);
			}
			
			if (GenerateWebservice)
			{
				AddFileNode(commonNode, "WebServiceClient\\WsNetTiersProvider.cs");
				
				this.GetTemplate("WsNetTiersProvider.cst").SetProperty("BLLNameSpace", BLLNameSpace);
				this.GetTemplate("WsNetTiersProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate("WsNetTiersProvider.cst").SetProperty("SourceTables", templateSourceTables);
				this.GetTemplate("WsNetTiersProvider.cst").SetProperty("SourceViews", templateSourceViews);
				
				this.GetTemplate("WsNetTiersProvider.cst").SetProperty("WebReferenceName", "WsProxy");
				this.GetTemplate("WsNetTiersProvider.cst").SetProperty("ProxyClassName", _webServiceClassName);
							
				this.RenderToFile("WsNetTiersProvider.cst", rootPathDALWS + "\\WsNetTiersProvider.cs", true);
			}
		}
		#endregion Generate common dataaccesslayer
		
		#region Generating ASP.NET Webservice
		if (GenerateWebservice)
		{
			if (this.IncludeComponentLayer == MoM.Templates.ComponentPatternType.ServiceLayer)
			{
				//ComponentService Layer
				AddFileNode(commonNode, SourceDatabase.Name + "BLLServices.asmx");
				
				this.GetTemplate("ServiceLayer.WebService.cst").SetProperty("SourceViews", templateSourceViews);
				this.GetTemplate("ServiceLayer.WebService.cst").SetProperty("SourceTables", templateSourceTables);
				this.GetTemplate("ServiceLayer.WebService.cst").SetProperty("IncludeCustoms", IncludeCustoms);				
				this.GetTemplate("ServiceLayer.WebService.cst").SetProperty("CustomNonMatchingReturnType", CustomNonMatchingReturnType);
				this.GetTemplate("ServiceLayer.WebService.cst").SetProperty("ProcedurePrefix", ProcedurePrefix.Replace(" ", ""));
				
				this.GetTemplate("ServiceLayer.WebService.cst").SetProperty("IncludeInsert", IncludeInsert);
				this.GetTemplate("ServiceLayer.WebService.cst").SetProperty("IncludeUpdate", IncludeUpdate);
				this.GetTemplate("ServiceLayer.WebService.cst").SetProperty("IncludeDelete", IncludeDelete);
				this.GetTemplate("ServiceLayer.WebService.cst").SetProperty("IncludeUpdate", IncludeUpdate);
				this.GetTemplate("ServiceLayer.WebService.cst").SetProperty("IncludeManyToMany", IncludeManyToMany);
				this.GetTemplate("ServiceLayer.WebService.cst").SetProperty("IncludeGetList", IncludeGetList);
				this.GetTemplate("ServiceLayer.WebService.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);
				this.GetTemplate("ServiceLayer.WebService.cst").SetProperty("IncludeGetListByIX", IncludeGetListByIX);
				this.GetTemplate("ServiceLayer.WebService.cst").SetProperty("IncludeFind", IncludeFind);
									
				this.GetTemplate("ServiceLayer.WebService.cst").SetProperty("NameSpace", BLLNameSpace);
				this.GetTemplate("ServiceLayer.WebService.cst").SetProperty("ComponentsNameSpace", ComponentsNameSpace);
				this.GetTemplate("ServiceLayer.WebService.cst").SetProperty("BLLNameSpace", BLLNameSpace);
				
				this.GetTemplate("ServiceLayer.WebService.cst").SetProperty("ClassName", _webServiceClassName);
				this.GetTemplate("ServiceLayer.WebService.cst").SetProperty("WebServiceUrl", WebServiceUrl);
				
				this.RenderToFile("ServiceLayer.WebService.cst", rootPathWS + "\\" + NameSpace + "BLLServices.asmx", true);
			}
			//End ComponentService Layer 
			
			
			AddFileNode(commonNode, SourceDatabase.Name + "Services.asmx");
			
			this.GetTemplate("WebService.cst").SetProperty("SourceViews", templateSourceViews);
			this.GetTemplate("WebService.cst").SetProperty("SourceTables", templateSourceTables);
			this.GetTemplate("WebService.cst").SetProperty("IncludeCustoms", IncludeCustoms);				
			this.GetTemplate("WebService.cst").SetProperty("CustomNonMatchingReturnType", CustomNonMatchingReturnType);
			this.GetTemplate("WebService.cst").SetProperty("ProcedurePrefix", ProcedurePrefix.Replace(" ", ""));
			
			this.GetTemplate("WebService.cst").SetProperty("IncludeInsert", IncludeInsert);
			this.GetTemplate("WebService.cst").SetProperty("IncludeUpdate", IncludeUpdate);
			this.GetTemplate("WebService.cst").SetProperty("IncludeDelete", IncludeDelete);
			this.GetTemplate("WebService.cst").SetProperty("IncludeUpdate", IncludeUpdate);
			this.GetTemplate("WebService.cst").SetProperty("IncludeManyToMany", IncludeManyToMany);
			this.GetTemplate("WebService.cst").SetProperty("IncludeGetList", IncludeGetList);
			this.GetTemplate("WebService.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);
			this.GetTemplate("WebService.cst").SetProperty("IncludeGetListByIX", IncludeGetListByIX);
			this.GetTemplate("WebService.cst").SetProperty("IncludeFind", IncludeFind);
								
			this.GetTemplate("WebService.cst").SetProperty("NameSpace", BLLNameSpace);
			this.GetTemplate("WebService.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("WebService.cst").SetProperty("BLLNameSpace", BLLNameSpace);
				
			this.GetTemplate("WebService.cst").SetProperty("ClassName", _webServiceClassName);
			this.GetTemplate("WebService.cst").SetProperty("WebServiceUrl", WebServiceUrl);
			this.GetTemplate("WebService.cst").SetProperty("ProviderInvariantName", ProviderInvariantName);
			
			this.RenderToFile("WebService.cst", rootPathWS + "\\" + NameSpace + "Services.asmx", true);
			
			// Writing the web.config of this webservice
			//AddFileNode(commonNode, "Web.config");
			//this.GetTemplate("Web.config.cst").SetProperty("ConnectionString", SourceDatabase.ConnectionString);
			//this.GetTemplate("Web.config.cst").RenderToFile(rootPathWS + "\\Web.config", true);
			
			// The WebInfo file for the WebService
			//if (vsnetVersion != VSNetVersion.v2005)
			//{
			//	this.GetTemplate("WebInfo.cst").SetProperty("WebServiceUrl", WebServiceUrl);
			//	this.GetTemplate("WebInfo.cst").SetProperty("NameSpace", NameSpace);
			//	this.GetTemplate("WebInfo.cst").SetProperty("DataAccessLayerNameSpace", DataAccessLayerNameSpace);
				//this.GetTemplate("WebInfo.cst").RenderToFile(rootPathWS + "\\" + NameSpace + "." + (DataAccessLayerNameSpace.Length>0 ? DataAccessLayerNameSpace : "DataAccessLayer") + ".WebService.csproj.webinfo", true);		
			//	this.RenderToFile("WebInfo.cst", rootPathWS + "\\" + NameSpace + "." + (DataAccessLayerNameSpace.Length>0 ? DataAccessLayerNameSpace : "DataAccessLayer") + ".WebService.csproj.webinfo", true);
			//}
		}
		
		#endregion Generating ASP.NET Webservice
		
		#region Web Library Classes
		if ( GenerateWebLibrary )
		{
			// Web.Data
			AddFileNode(commonNode, "BaseDataSource.cs");
			SetCommonProperties("BaseDataSource.cst");
			this.GetTemplate("BaseDataSource.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("BaseDataSource.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("BaseDataSource.cst").SetProperty("WebNameSpace", WebLibNameSpace);
			this.GetTemplate("BaseDataSource.cst").SetProperty("DataSourceEnableTransactionDefault", DataSourceEnableTransactionDefault);
			this.RenderToFile("BaseDataSource.cst", rootPathWebLib + "\\Data\\BaseDataSource.cs", true);
			
			AddFileNode(commonNode, "BaseDataSourceDesigner.cs");
			this.GetTemplate("BaseDataSourceDesigner.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("BaseDataSourceDesigner.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("BaseDataSourceDesigner.cst").SetProperty("WebNameSpace", WebLibNameSpace);
			this.RenderToFile("BaseDataSourceDesigner.cst", rootPathWebLib + "\\Data\\BaseDataSourceDesigner.cs", true);
			
			AddFileNode(commonNode, "CustomDataSource.cs");
			SetCommonProperties("CustomDataSource.cst");
			this.GetTemplate("CustomDataSource.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("CustomDataSource.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("CustomDataSource.cst").SetProperty("WebNameSpace", WebLibNameSpace);
			this.RenderToFile("CustomDataSource.cst", rootPathWebLib + "\\Data\\CustomDataSource.cs", true);
			
			AddFileNode(commonNode, "CustomDataSourceDesigner.cs");
			this.GetTemplate("CustomDataSourceDesigner.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("CustomDataSourceDesigner.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("CustomDataSourceDesigner.cst").SetProperty("WebNameSpace", WebLibNameSpace);
			this.RenderToFile("CustomDataSourceDesigner.cst", rootPathWebLib + "\\Data\\CustomDataSourceDesigner.cs", true);
			
			AddFileNode(commonNode, "CustomParameter.cs");
			this.GetTemplate("CustomParameter.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("CustomParameter.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("CustomParameter.cst").SetProperty("WebNameSpace", WebLibNameSpace);
			this.RenderToFile("CustomParameter.cst", rootPathWebLib + "\\Data\\CustomParameter.cs", true);
			
			AddFileNode(commonNode, "DataParameter.cs");
			this.GetTemplate("DataParameter.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("DataParameter.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("DataParameter.cst").SetProperty("WebNameSpace", WebLibNameSpace);
			this.RenderToFile("DataParameter.cst", rootPathWebLib + "\\Data\\DataParameter.cs", true);
			
			AddFileNode(commonNode, "EntityDataSource.cs");
			this.GetTemplate("EntityDataSource.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("EntityDataSource.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("EntityDataSource.cst").SetProperty("WebNameSpace", WebLibNameSpace);
			this.GetTemplate("EntityDataSource.cst").SetProperty("DataSourceEnableTransactionDefault", DataSourceEnableTransactionDefault);
			this.RenderToFile("EntityDataSource.cst", rootPathWebLib + "\\Data\\EntityDataSource.cs", true);
			
			AddFileNode(commonNode, "EntityDataSourceFilter.cs");
			this.GetTemplate("EntityDataSourceFilter.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("EntityDataSourceFilter.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("EntityDataSourceFilter.cst").SetProperty("WebNameSpace", WebLibNameSpace);
			this.RenderToFile("EntityDataSourceFilter.cst", rootPathWebLib + "\\Data\\EntityDataSourceFilter.cs", true);
			
			AddFileNode(commonNode, "EntityRelationship.cs");
			this.GetTemplate("EntityRelationship.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("EntityRelationship.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("EntityRelationship.cst").SetProperty("WebNameSpace", WebLibNameSpace);
			this.GetTemplate("EntityRelationship.cst").SetProperty("IncludeRelations", IncludeRelations);
			this.GetTemplate("EntityRelationship.cst").SetProperty("IncludeDelete", IncludeDelete);
			this.GetTemplate("EntityRelationship.cst").SetProperty("IncludeInsert", IncludeInsert);
			this.GetTemplate("EntityRelationship.cst").SetProperty("IncludeSave", IncludeSave);
			this.GetTemplate("EntityRelationship.cst").SetProperty("IncludeUpdate", IncludeUpdate);
			this.GetTemplate("EntityRelationship.cst").SetProperty("IncludeManyToMany", IncludeManyToMany);
			this.GetTemplate("EntityRelationship.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);
			this.RenderToFile("EntityRelationship.cst", rootPathWebLib + "\\Data\\EntityRelationship.cs", true);
			
			AddFileNode(commonNode, "EntityRelationshipMember.cs");
			this.GetTemplate("EntityRelationshipMember.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("EntityRelationshipMember.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("EntityRelationshipMember.cst").SetProperty("WebNameSpace", WebLibNameSpace);
			this.RenderToFile("EntityRelationshipMember.cst", rootPathWebLib + "\\Data\\EntityRelationshipMember.cs", true);
	
			AddFileNode(commonNode, "EntityTransactionModule.cs");
			this.GetTemplate("EntityTransactionModule.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("EntityTransactionModule.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("EntityTransactionModule.cst").SetProperty("WebNameSpace", WebLibNameSpace);
			this.GetTemplate("EntityTransactionModule.cst").SetProperty("ComponentLayerNameSpace", ComponentsNameSpace);
			this.GetTemplate("EntityTransactionModule.cst").SetProperty("IncludeComponentLayer", IncludeComponentLayer);
			this.RenderToFile("EntityTransactionModule.cst", rootPathWebLib + "\\Data\\EntityTransactionModule.cs", true);
			
			AddFileNode(commonNode, "ILinkedDataSource.cs");
			SetCommonProperties("ILinkedDataSource.cst");
			this.GetTemplate("ILinkedDataSource.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("ILinkedDataSource.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("ILinkedDataSource.cst").SetProperty("WebNameSpace", WebLibNameSpace);
			this.RenderToFile("ILinkedDataSource.cst", rootPathWebLib + "\\Data\\ILinkedDataSource.cs", true);
			
			AddFileNode(commonNode, "ManyToManyListRelationship.cs");
			this.GetTemplate("ManyToManyListRelationship.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("ManyToManyListRelationship.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("ManyToManyListRelationship.cst").SetProperty("WebNameSpace", WebLibNameSpace);
			this.RenderToFile("ManyToManyListRelationship.cst", rootPathWebLib + "\\Data\\ManyToManyListRelationship.cs", true);
			
			AddFileNode(commonNode, "ManyToManyViewRelationship.cs");
			this.GetTemplate("ManyToManyViewRelationship.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("ManyToManyViewRelationship.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("ManyToManyViewRelationship.cst").SetProperty("WebNameSpace", WebLibNameSpace);
			this.RenderToFile("ManyToManyViewRelationship.cst", rootPathWebLib + "\\Data\\ManyToManyViewRelationship.cs", true);
			
			AddFileNode(commonNode, "OneToManyGridRelationship.cs");
			this.GetTemplate("OneToManyGridRelationship.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("OneToManyGridRelationship.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("OneToManyGridRelationship.cst").SetProperty("WebNameSpace", WebLibNameSpace);
			this.RenderToFile("OneToManyGridRelationship.cst", rootPathWebLib + "\\Data\\OneToManyGridRelationship.cs", true);
			
			AddFileNode(commonNode, "OneToOneViewRelationship.cs");
			this.GetTemplate("OneToOneViewRelationship.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("OneToOneViewRelationship.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("OneToOneViewRelationship.cst").SetProperty("WebNameSpace", WebLibNameSpace);
			this.RenderToFile("OneToOneViewRelationship.cst", rootPathWebLib + "\\Data\\OneToOneViewRelationship.cs", true);
	
			AddFileNode(commonNode, "ProviderDataSource.cs");
			SetCommonProperties("ProviderDataSource.cst");
			this.GetTemplate("ProviderDataSource.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("ProviderDataSource.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("ProviderDataSource.cst").SetProperty("WebNameSpace", WebLibNameSpace);
			this.GetTemplate("ProviderDataSource.cst").SetProperty("IncludeComponentLayer", IncludeComponentLayer);
			this.RenderToFile("ProviderDataSource.cst", rootPathWebLib + "\\Data\\ProviderDataSource.cs", true);
			
			AddFileNode(commonNode, "ProviderDataSourceDesigner.cs");
			this.GetTemplate("ProviderDataSourceDesigner.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("ProviderDataSourceDesigner.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("ProviderDataSourceDesigner.cst").SetProperty("WebNameSpace", WebLibNameSpace);
			this.RenderToFile("ProviderDataSourceDesigner.cst", rootPathWebLib + "\\Data\\ProviderDataSourceDesigner.cs", true);
	
			AddFileNode(commonNode, "ReadOnlyDataSource.cs");
			this.GetTemplate("ReadOnlyDataSource.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("ReadOnlyDataSource.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("ReadOnlyDataSource.cst").SetProperty("WebNameSpace", WebLibNameSpace);
			this.GetTemplate("ReadOnlyDataSource.cst").SetProperty("IncludeGetList", IncludeGetList);
			this.GetTemplate("ReadOnlyDataSource.cst").SetProperty("IncludeFind", IncludeFind);
			this.GetTemplate("ReadOnlyDataSource.cst").SetProperty("IncludeDatabaseFeatures", IncludeDatabaseFeatures);
			this.GetTemplate("ReadOnlyDataSource.cst").SetProperty("IncludeComponentLayer", IncludeComponentLayer);
			this.RenderToFile("ReadOnlyDataSource.cst", rootPathWebLib + "\\Data\\ReadOnlyDataSource.cs", true);
			
			AddFileNode(commonNode, "ReadOnlyDataSourceDesigner.cs");
			this.GetTemplate("ReadOnlyDataSourceDesigner.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("ReadOnlyDataSourceDesigner.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("ReadOnlyDataSourceDesigner.cst").SetProperty("WebNameSpace", WebLibNameSpace);
			this.RenderToFile("ReadOnlyDataSourceDesigner.cst", rootPathWebLib + "\\Data\\ReadOnlyDataSourceDesigner.cs", true);
			
			AddFileNode(commonNode, "SqlParameter.cs");
			this.GetTemplate("SqlParameter.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("SqlParameter.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("SqlParameter.cst").SetProperty("WebNameSpace", WebLibNameSpace);
			this.RenderToFile("SqlParameter.cst", rootPathWebLib + "\\Data\\SqlParameter.cs", true);
			
			#region Generate DAL
			if ( GenerateDataAccessLayer )
			{
				SetCommonProperties("TableDataSource.cst");
				this.GetTemplate("TableDataSource.cst").SetProperty("SourceTables", SourceTables);
				this.GetTemplate("TableDataSource.cst").SetProperty("BLLNameSpace", BLLNameSpace);
				this.GetTemplate("TableDataSource.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate("TableDataSource.cst").SetProperty("WebNameSpace", WebLibNameSpace);
				this.GetTemplate("TableDataSource.cst").SetProperty("ComponentLayerNameSpace", ComponentsNameSpace);
				this.GetTemplate("TableDataSource.cst").SetProperty("IncludeComponentLayer", IncludeComponentLayer);
				this.GetTemplate("TableDataSource.cst").SetProperty("IncludeCustoms", IncludeCustoms);
				
				foreach ( TableSchema table in templateSourceTables )
				{
					AddFileNode(commonNode, GetClassName(table) + "DataSource.cs");
					this.GetTemplate("TableDataSource.cst").SetProperty("SourceTable", table);
					this.RenderToFile("TableDataSource.cst", rootPathWebLib + "\\DataSourceControls\\" + GetClassName(table) + "DataSource.cs", true);
				}
				
				this.GetTemplate("ViewDataSource.cst").SetProperty("BLLNameSpace", BLLNameSpace);
				this.GetTemplate("ViewDataSource.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate("ViewDataSource.cst").SetProperty("WebNameSpace", WebLibNameSpace);
				this.GetTemplate("ViewDataSource.cst").SetProperty("ComponentLayerNameSpace", ComponentsNameSpace);
				this.GetTemplate("ViewDataSource.cst").SetProperty("IncludeDatabaseFeatures", IncludeDatabaseFeatures);
				this.GetTemplate("ViewDataSource.cst").SetProperty("IncludeComponentLayer", IncludeComponentLayer);
				this.GetTemplate("ViewDataSource.cst").SetProperty("IncludeCustoms", IncludeCustoms);
				this.GetTemplate("ViewDataSource.cst").SetProperty("IncludeGetList", IncludeGetList);
				this.GetTemplate("ViewDataSource.cst").SetProperty("IncludeFind", IncludeFind);
				
				foreach ( ViewSchema view in templateSourceViews )
				{
					AddFileNode(commonNode, GetClassName(view) + "DataSource.cs");
					this.GetTemplate("ViewDataSource.cst").SetProperty("SourceView", view);
					this.RenderToFile("ViewDataSource.cst", rootPathWebLib + "\\DataSourceControls\\Views\\" + GetClassName(view) + "DataSource.cs", true);
				}
			}
			#endregion Generate DAL
			
			// Web.UI
			if ( !File.Exists(rootPathWebLib + "\\UI\\FormUtil.cs") )
			{
				AddFileNode(commonNode, "FormUtil.cs");
				this.GetTemplate("FormUtil.cst").SetProperty("BLLNameSpace", BLLNameSpace);
				this.GetTemplate("FormUtil.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate("FormUtil.cst").SetProperty("WebNameSpace", WebLibNameSpace);
				this.RenderToFile("FormUtil.cst", rootPathWebLib + "\\UI\\FormUtil.cs", true);
			}
			
			AddFileNode(commonNode, "FormUtilBase.generated.cs");
			this.GetTemplate("FormUtilBase.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("FormUtilBase.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("FormUtilBase.cst").SetProperty("WebNameSpace", WebLibNameSpace);
			this.RenderToFile("FormUtilBase.cst", rootPathWebLib + "\\UI\\FormUtilBase.generated.cs", true);
			
			AddFileNode(commonNode, "MultiBindableTemplate.cs");
			this.GetTemplate("MultiBindableTemplate.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("MultiBindableTemplate.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("MultiBindableTemplate.cst").SetProperty("WebNameSpace", WebLibNameSpace);
			this.RenderToFile("MultiBindableTemplate.cst", rootPathWebLib + "\\UI\\MultiBindableTemplate.cs", true);
			
			AddFileNode(commonNode, "MultiFormView.cs");
			this.GetTemplate("MultiFormView.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("MultiFormView.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("MultiFormView.cst").SetProperty("WebNameSpace", WebLibNameSpace);
			this.RenderToFile("MultiFormView.cst", rootPathWebLib + "\\UI\\MultiFormView.cs", true);
	
			AddFileNode(commonNode, "EntityGridView.cs");
			this.GetTemplate("EntityGridView.cs.cst").SetProperty("RootNameSpace", RootNameSpace);	
			this.GetTemplate("EntityGridView.cs.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.RenderToFile("EntityGridView.cs.cst", rootPathWebLib + "\\UI\\EntityGridView.cs", true);
	
			AddFileNode(commonNode, "EntityDropDownList.cs");
			this.GetTemplate("EntityDropDownList.cs.cst").SetProperty("RootNameSpace", RootNameSpace);	
			this.RenderToFile("EntityDropDownList.cs.cst", rootPathWebLib + "\\UI\\EntityDropDownList.cs", true);
	
			AddFileNode(commonNode, "BoundEntityDropDownField.cs");
			this.GetTemplate("BoundEntityDropDownField.cs.cst").SetProperty("RootNameSpace", RootNameSpace);	
			this.RenderToFile("BoundEntityDropDownField.cs.cst", rootPathWebLib + "\\UI\\BoundEntityDropDownField.cs", true);
	
			AddFileNode(commonNode, "BoundRadioButtonField.cs");
			this.GetTemplate("BoundRadioButtonField.cs.cst").SetProperty("RootNameSpace", RootNameSpace);	
			this.RenderToFile("BoundRadioButtonField.cs.cst", rootPathWebLib + "\\UI\\BoundRadioButtonField.cs", true);
			
			AddFileNode(commonNode, "GridViewSearchPanel.cs");
			this.GetTemplate("GridViewSearchPanel.cs.cst").SetProperty("RootNameSpace", RootNameSpace);	
			this.GetTemplate("GridViewSearchPanel.cs.cst").SetProperty("BusinessLogicLayerNameSpace", BusinessLogicLayerNameSpace);
			this.GetTemplate("GridViewSearchPanel.cs.cst").SetProperty("ProviderInvariantName", ProviderInvariantName);		
			this.RenderToFile("GridViewSearchPanel.cs.cst", rootPathWebLib + "\\UI\\GridViewSearchPanel.cs", true);		
	
			AddFileNode(commonNode, "GridViewSearchPanelState.cs");
			this.GetTemplate("GridViewSearchPanelState.cs.cst").SetProperty("RootNameSpace", RootNameSpace);	
			this.RenderToFile("GridViewSearchPanelState.cs.cst", rootPathWebLib + "\\UI\\GridViewSearchPanelState.cs", true);		
	
			AddFileNode(commonNode, "EntityLabel.cs");
			this.GetTemplate("EntityLabel.cs.cst").SetProperty("RootNameSpace", RootNameSpace);	
			this.RenderToFile("EntityLabel.cs.cst", rootPathWebLib + "\\UI\\EntityLabel.cs", true);
	
			AddFileNode(commonNode, "HyperlinkField.cs");
			this.GetTemplate("HyperlinkField.cs.cst").SetProperty("RootNameSpace", RootNameSpace);	
			this.RenderToFile("HyperlinkField.cs.cst", rootPathWebLib + "\\UI\\HyperlinkField.cs", true);
			
			#region Generated strongly typed repeater
			if ( GenerateDataAccessLayer )
			{
				SetCommonProperties("TableRepeater.cst");
				this.GetTemplate("TableRepeater.cst").SetProperty("NameSpace", RootNameSpace);
				this.GetTemplate("TableRepeater.cst").SetProperty("BusinessLogicLayerNameSpace", BLLNameSpace);
				this.GetTemplate("TableRepeater.cst").SetProperty("DALNameSpace", DALNameSpace);
				
				foreach ( TableSchema table in templateSourceTables )
				{
					AddFileNode(commonNode, GetClassName(table) + "Repeater.cs");
					this.GetTemplate("TableRepeater.cst").SetProperty("SourceTable", table);
					this.RenderToFile("TableRepeater.cst", rootPathWebLib + "\\UI\\RepeaterControls\\" + GetClassName(table) + "Repeater.cs", true);
				}
				
	
				this.GetTemplate("ViewRepeater.cst").SetProperty("NameSpace", RootNameSpace);
				this.GetTemplate("ViewRepeater.cst").SetProperty("BusinessLogicLayerNameSpace", BLLNameSpace);
				this.GetTemplate("ViewRepeater.cst").SetProperty("DALNameSpace", DALNameSpace);
							
				foreach ( ViewSchema view in templateSourceViews )
				{
					AddFileNode(commonNode, GetClassName(view) + "Repeater.cs");
					this.GetTemplate("ViewRepeater.cst").SetProperty("SourceView", view);
					this.RenderToFile("ViewRepeater.cst", rootPathWebLib + "\\UI\\RepeaterControls\\Views\\" + GetClassName(view) + "Repeater.cs", true);
				}
			}
			
			#endregion Generated strongly typed repeater
			
			if ( GenerateWebSecurity )
			{
				AddFileNode(commonNode, "EntityMembershipProvider.cs");
				this.GetTemplate("EntityMembershipProvider.cst").SetProperty("BLLNameSpace", BLLNameSpace);
				this.GetTemplate("EntityMembershipProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate("EntityMembershipProvider.cst").SetProperty("WebNameSpace", WebLibNameSpace);
				this.GetTemplate("EntityMembershipProvider.cst").SetProperty("EntityMembershipUserPKCol", EntityMembershipUserPKCol);
				this.GetTemplate("EntityMembershipProvider.cst").SetProperty("MembershipUserMapFile", MembershipUserMapFile);
				this.GetTemplate("EntityMembershipProvider.cst").SetProperty("UseMD5Hash", UseMD5Hash);
				this.RenderToFile("EntityMembershipProvider.cst", rootPathWebSecurityLib + "\\EntityMembershipProvider.cs", true);
	
				AddFileNode(commonNode, "EntityMembershipUser.cs");
				this.GetTemplate("EntityMembershipUser.cst").SetProperty("BLLNameSpace", BLLNameSpace);
				this.GetTemplate("EntityMembershipUser.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate("EntityMembershipUser.cst").SetProperty("WebNameSpace", WebLibNameSpace);
				this.GetTemplate("EntityMembershipUser.cst").SetProperty("EntityMembershipUserPKCol", EntityMembershipUserPKCol);
				this.GetTemplate("EntityMembershipUser.cst").SetProperty("MembershipUserMapFile", MembershipUserMapFile);
				this.GetTemplate("EntityMembershipUser.cst").SetProperty("UseMD5Hash", UseMD5Hash);
				this.RenderToFile("EntityMembershipUser.cst", rootPathWebSecurityLib + "\\EntityMembershipUser.cs", true);
	
				AddFileNode(commonNode, "EntityMembershipProperty.cs");
				this.GetTemplate("EntityMembershipProperty.cst").SetProperty("BLLNameSpace", BLLNameSpace);
				this.GetTemplate("EntityMembershipProperty.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate("EntityMembershipProperty.cst").SetProperty("WebNameSpace", WebLibNameSpace);
				this.GetTemplate("EntityMembershipProperty.cst").SetProperty("EntityMembershipUserPKCol", EntityMembershipUserPKCol);
				this.GetTemplate("EntityMembershipProperty.cst").SetProperty("MembershipUserMapFile", MembershipUserMapFile);
				this.GetTemplate("EntityMembershipProperty.cst").SetProperty("UseMD5Hash", UseMD5Hash);
				this.RenderToFile("EntityMembershipProperty.cst", rootPathWebSecurityLib + "\\EntityMembershipProperty.cs", true);
			}
			
		}
		
		#endregion Web Library Classes
		
		#region Generate WebSite
		if ( GenerateWebsite )
		{
			string webConfigTemplate = IncludeAtlasLibrary ? "WebConfigAtlas.cst" : "WebConfig.cst";
	
			// Web.config
			if (OverwriteWebConfig || !File.Exists(rootPathWebsite + "\\Web.config") )
			{
				AddFileNode(commonNode, "Web.config");
				this.GetTemplate(webConfigTemplate).SetProperty("NameSpace", NameSpace);
				this.GetTemplate(webConfigTemplate).SetProperty("BLLNameSpace", BLLNameSpace);
				this.GetTemplate(webConfigTemplate).SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate(webConfigTemplate).SetProperty("WebNameSpace", WebLibNameSpace);
				this.GetTemplate(webConfigTemplate).SetProperty("FactoryType", factoryType);
				this.GetTemplate(webConfigTemplate).SetProperty("ConnectionString", SourceDatabase.ConnectionString);
				this.GetTemplate(webConfigTemplate).SetProperty("NetTiersSqlProvider", _netTiersSqlProvider);
				this.GetTemplate(webConfigTemplate).SetProperty("ProviderInvariantName", ProviderInvariantName);
				this.GetTemplate(webConfigTemplate).SetProperty("EntLibVersion", EntLibVersion);
				
				if ( IncludeAtlasLibrary )
				{
					this.GetTemplate(webConfigTemplate).SetProperty("IncludeAtlasToolkit", IncludeAtlasToolkit);
				}
				
				this.RenderToFile(webConfigTemplate, rootPathWebsite + "\\Web.config", true);
				
				//generate entlib
				string ver = EntLibVersion.ToString().Substring(EntLibVersion.ToString().LastIndexOf(".") + 1);
				string entLibConfigTemplateName = string.Format("entlib.{0}.config.cst", ver);
				AddFileNode(commonNode, string.Format("Enterprise Library {0} website configuration files", ver));
				this.GetTemplate(entLibConfigTemplateName).SetProperty("NameSpace", NameSpace);
				this.GetTemplate(entLibConfigTemplateName).SetProperty("BLLNameSpace", BLLNameSpace);
	
				this.RenderToFile(entLibConfigTemplateName, rootPathWebsite + "\\entlib.config", true);
			}
	
			// Default.aspx(.cs)
			if ( !File.Exists(rootPathWebsite + "\\Default.aspx") )
			{
				AddFileNode(commonNode, "Default.aspx");
				this.GetTemplate("Default.aspx.cst").SetProperty("WebsiteNameSpace", WebsiteNameSpace);
				this.GetTemplate("Default.aspx.cst").SetProperty("IncludeAtlasLibrary", IncludeAtlasLibrary);
				this.GetTemplate("Default.aspx.cst").SetProperty("UseWebAppProject", UseWebAppProject);
				this.RenderToFile("Default.aspx.cst", rootPathWebsite + "\\Default.aspx", true);
	
				AddFileNode(commonNode, "Default.aspx.cs");
				this.GetTemplate("Default.aspx.cs.cst").SetProperty("WebsiteNameSpace", WebsiteNameSpace);
				this.GetTemplate("Default.aspx.cs.cst").SetProperty("UseWebAppProject", UseWebAppProject);
				this.RenderToFile("Default.aspx.cs.cst", rootPathWebsite + "\\Default.aspx.cs", true);
				
				if ( UseWebAppProject )
				{
					AddFileNode(commonNode, "Default.aspx.designer.cs");
					this.GetTemplate("Default.aspx.designer.cs.cst").SetProperty("WebsiteNameSpace", WebsiteNameSpace);
					this.GetTemplate("Default.aspx.designer.cs.cst").SetProperty("NameSpace", NameSpace);
					this.RenderToFile("Default.aspx.designer.cs.cst", rootPathWebsite + "\\Default.aspx.designer.cs", true);
				}
			}
			
			#region Generate WebAdmin
			if (GenerateWebsiteAdmin)
			{
				for (int x=0; x < templateSourceTables.Count; x++)
				{
					TableSchema SourceTable = templateSourceTables[x];								
					//----------------------------------------------------------------------------------------------------------------------------------------------
					//-- Web Admin ASCX pages
					//----------------------------------------------------------------------------------------------------------------------------------------------
					//if (true || !File.Exists(rootPathWebsite + "\\Admin\\" + GetClassName(SourceTable) + ".aspx"))
					{											
						this.GetTemplate("Entity.aspx.cst").SetProperty("SourceTable", SourceTable);
						this.GetTemplate("Entity.aspx.cst").SetProperty("SourceTables", templateSourceTables);
						this.GetTemplate("Entity.aspx.cst").SetProperty("NameSpace", RootNameSpace);
						this.GetTemplate("Entity.aspx.cst").SetProperty("BLLNameSpace", BusinessLogicLayerNameSpace);
						this.GetTemplate("Entity.aspx.cst").SetProperty("ProviderInvariantName", ProviderInvariantName);
						this.GetTemplate("Entity.aspx.cst").SetProperty("IncludeAtlasLibrary", IncludeAtlasLibrary);
						this.GetTemplate("Entity.aspx.cst").SetProperty("IncludeAtlasToolkit", IncludeAtlasToolkit);
						this.GetTemplate("Entity.aspx.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);
						this.GetTemplate("Entity.aspx.cst").SetProperty("IncludeRelations", IncludeRelations);
	
						this.GetTemplate("Entity.aspx.cst").RenderToFile(rootPathWebsite + "\\Admin\\" + GetClassName(SourceTable) + ".aspx", true);							
					}	
		
					//----------------------------------------------------------------------------------------------------------------------------------------------
					//-- Web Admin ASCX pages
					//----------------------------------------------------------------------------------------------------------------------------------------------			
					//if (true || !File.Exists(rootPathWebsite + "\\Admin\\" + GetClassName(SourceTable) + ".aspx.cs"))
					{											
						this.GetTemplate("Entity.aspx.cs.cst").SetProperty("SourceTable", SourceTable);				
						this.GetTemplate("Entity.aspx.cs.cst").SetProperty("NameSpace", RootNameSpace);
						this.GetTemplate("Entity.aspx.cs.cst").SetProperty("WebProjectNameSpace", RootNameSpace);
						this.GetTemplate("Entity.aspx.cs.cst").SetProperty("BLLNameSpace", BusinessLogicLayerNameSpace);
						this.GetTemplate("Entity.aspx.cs.cst").SetProperty("ProviderInvariantName", ProviderInvariantName);
						this.GetTemplate("Entity.aspx.cs.cst").SetProperty("DALNameSpace", DataAccessLayerNameSpace);
						this.GetTemplate("Entity.aspx.cs.cst").SetProperty("IncludeAtlasLibrary", IncludeAtlasLibrary);
						this.GetTemplate("Entity.aspx.cs.cst").SetProperty("IncludeAtlasToolkit", IncludeAtlasToolkit);
						
						this.GetTemplate("Entity.aspx.cs.cst").RenderToFile(rootPathWebsite + "\\Admin\\" + GetClassName(SourceTable) + ".aspx.cs", true);
		
					}							
					//if (true || !File.Exists(rootPathWebsite + "\\Admin\\" + GetClassName(SourceTable) + "Edit.aspx"))
					{											
						this.GetTemplate("EntityEdit.aspx.cst").SetProperty("SourceTable", SourceTable);				
						this.GetTemplate("EntityEdit.aspx.cst").SetProperty("SourceTables", templateSourceTables);
						this.GetTemplate("EntityEdit.aspx.cst").SetProperty("NameSpace", RootNameSpace);
						this.GetTemplate("EntityEdit.aspx.cst").SetProperty("SourceDatabase", SourceDatabase);
						this.GetTemplate("EntityEdit.aspx.cst").SetProperty("BLLNameSpace", BusinessLogicLayerNameSpace);
						this.GetTemplate("EntityEdit.aspx.cst").SetProperty("ProviderInvariantName", ProviderInvariantName);
						this.GetTemplate("EntityEdit.aspx.cst").SetProperty("IncludeAtlasLibrary", IncludeAtlasLibrary);
						this.GetTemplate("EntityEdit.aspx.cst").SetProperty("IncludeAtlasToolkit", IncludeAtlasToolkit);
						this.GetTemplate("EntityEdit.aspx.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);
						this.GetTemplate("EntityEdit.aspx.cst").SetProperty("IncludeRelations", IncludeRelations);
						
						this.GetTemplate("EntityEdit.aspx.cst").RenderToFile(rootPathWebsite + "\\Admin\\" + GetClassName(SourceTable) + "Edit.aspx", true);						
					}	
					//if (true || !File.Exists(rootPathWebsite + "\\Admin\\" + GetClassName(SourceTable) + "Edit.aspx.cs"))
					{											
						this.GetTemplate("EntityEdit.aspx.cs.cst").SetProperty("SourceTable", SourceTable);				
						this.GetTemplate("EntityEdit.aspx.cs.cst").SetProperty("SourceTables", templateSourceTables);
						this.GetTemplate("EntityEdit.aspx.cs.cst").SetProperty("WebProjectNameSpace", RootNameSpace);
						this.GetTemplate("EntityEdit.aspx.cs.cst").SetProperty("NameSpace", RootNameSpace);
						this.GetTemplate("EntityEdit.aspx.cs.cst").SetProperty("SourceDatabase", SourceDatabase);
						this.GetTemplate("EntityEdit.aspx.cs.cst").SetProperty("BLLNameSpace", BusinessLogicLayerNameSpace);
						this.GetTemplate("EntityEdit.aspx.cs.cst").SetProperty("ProviderInvariantName", ProviderInvariantName);
						this.GetTemplate("EntityEdit.aspx.cs.cst").SetProperty("IncludeAtlasLibrary", IncludeAtlasLibrary);
						this.GetTemplate("EntityEdit.aspx.cs.cst").SetProperty("IncludeAtlasToolkit", IncludeAtlasToolkit);
						
						this.GetTemplate("EntityEdit.aspx.cs.cst").RenderToFile(rootPathWebsite + "\\Admin\\" + GetClassName(SourceTable) + "Edit.aspx.cs", true);						
					}		
					//if (true || !File.Exists(rootPathWebsite + "\\Admin\\UserControls\\" + GetClassName(SourceTable) + "Fields.ascx"))
					{											
						this.GetTemplate("EntityFields.ascx.cst").SetProperty("SourceTable", SourceTable);
						this.GetTemplate("EntityFields.ascx.cst").SetProperty("SourceTables", templateSourceTables);
						this.GetTemplate("EntityFields.ascx.cst").SetProperty("NameSpace", RootNameSpace);
						this.GetTemplate("EntityFields.ascx.cst").SetProperty("SourceDatabase", SourceDatabase);
						this.GetTemplate("EntityFields.ascx.cst").SetProperty("BLLNameSpace", BusinessLogicLayerNameSpace);
						this.GetTemplate("EntityFields.ascx.cst").SetProperty("IncludeAtlasLibrary", IncludeAtlasLibrary);
						this.GetTemplate("EntityFields.ascx.cst").SetProperty("IncludeAtlasToolkit", IncludeAtlasToolkit);
						this.GetTemplate("EntityFields.ascx.cst").SetProperty("DateFormat", DateFormat);
						
						this.GetTemplate("EntityFields.ascx.cst").RenderToFile(rootPathWebsite + "\\Admin\\UserControls\\" + GetClassName(SourceTable) + "Fields.ascx", true);						
					}			
				}
		
				this.GetTemplate("Web.Sitemap.cst").SetProperty("SourceTables", templateSourceTables);				
				this.GetTemplate("Web.Sitemap.cst").SetProperty("SourceDatabase", SourceDatabase);
				this.RenderToFile("Web.Sitemap.cst", rootPathWebsite + "\\Web.Sitemap", true);	
				
				this.GetTemplate("admin.master.cst").SetProperty("WebsiteNameSpace", WebsiteNameSpace);	
				this.GetTemplate("admin.master.cst").SetProperty("WebAdminSiteName", WebAdminSiteName);	
				this.GetTemplate("admin.master.cst").SetProperty("IncludeAtlasLibrary", IncludeAtlasLibrary);	
				this.GetTemplate("admin.master.cst").SetProperty("CompanyName", CompanyName);	
				this.GetTemplate("admin.master.cst").SetProperty("CompanyURL", CompanyURL);	
				this.RenderToFile("admin.master.cst", rootPathWebsite + "\\MasterPages\\admin.master", true);						
			}
			#endregion Generate WebAdmin
		
		}
		
		#endregion Generate WebSite
		
		#region Generate Win Library
		if (GenerateWinLibrary)
		{
			// TypedDataSource
			this.GetTemplate("TypedDataSource.cst").SetProperty("SourceTables", SourceTables);
			this.GetTemplate("TypedDataSource.cst").SetProperty("NameSpace", RootNameSpace);
			this.GetTemplate("TypedDataSource.cst").SetProperty("WinLibNameSpace", WinLibNameSpace);
			this.GetTemplate("TypedDataSource.cst").SetProperty("BusinessLogicLayerNameSpace", BusinessLogicLayerNameSpace);
			
			//this.GetTemplate("TypedDataSource.cst").RenderToFile(rootPathWinLib + "\\Data\\BindingSources.cs", true);							
			
			
			for (int x=0; x < templateSourceTables.Count; x++)
			{
				TableSchema SourceTable = templateSourceTables[x];		
				
				if (!File.Exists(rootPathWinLib + "\\UI\\" + GetClassName(SourceTable) + "DataGridView.cs"))
				{
					// <Entity>DataGridView
					this.GetTemplate("TableGridView.cst").SetProperty("SourceTable", SourceTable);
					this.GetTemplate("TableGridView.cst").SetProperty("NameSpace", RootNameSpace);
					this.GetTemplate("TableGridView.cst").SetProperty("WinLibNameSpace", WinLibNameSpace);
					this.GetTemplate("TableGridView.cst").SetProperty("BusinessLogicLayerNameSpace", BusinessLogicLayerNameSpace);
				
					this.GetTemplate("TableGridView.cst").RenderToFile(rootPathWinLib + "\\UI\\" + GetClassName(SourceTable) + "DataGridView.cs", false);
				}
				
				// <Entity>DataGridView
				this.GetTemplate("TableGridViewBase.cst").SetProperty("SourceTable", SourceTable);
				this.GetTemplate("TableGridViewBase.cst").SetProperty("NameSpace", RootNameSpace);
				this.GetTemplate("TableGridViewBase.cst").SetProperty("WinLibNameSpace", WinLibNameSpace);
				this.GetTemplate("TableGridViewBase.cst").SetProperty("BusinessLogicLayerNameSpace", BusinessLogicLayerNameSpace);
				
				this.GetTemplate("TableGridViewBase.cst").RenderToFile(rootPathWinLib + "\\UI\\" + GetClassName(SourceTable) + "DataGridViewBase.cs", true);							
				
				if (!File.Exists(rootPathWinLib + "\\UI\\" + GetClassName(SourceTable) + "EditControl.cs"))
				{
					// <Entity>EditControl
					this.GetTemplate("TableEditControl.cst").SetProperty("SourceTable", SourceTable);
					this.GetTemplate("TableEditControl.cst").SetProperty("NameSpace", RootNameSpace);
					this.GetTemplate("TableEditControl.cst").SetProperty("WinLibNameSpace", WinLibNameSpace);
					this.GetTemplate("TableEditControl.cst").SetProperty("BusinessLogicLayerNameSpace", BusinessLogicLayerNameSpace);
				
					this.GetTemplate("TableEditControl.cst").RenderToFile(rootPathWinLib + "\\UI\\" + GetClassName(SourceTable) + "EditControl.cs", true);
				}
				
				// <Entity>EditControl
				this.GetTemplate("TableEditControlBase.cst").SetProperty("SourceTable", SourceTable);
				this.GetTemplate("TableEditControlBase.cst").SetProperty("NameSpace", RootNameSpace);
				this.GetTemplate("TableEditControlBase.cst").SetProperty("WinLibNameSpace", WinLibNameSpace);
				this.GetTemplate("TableEditControlBase.cst").SetProperty("BusinessLogicLayerNameSpace", BusinessLogicLayerNameSpace);
				
				this.GetTemplate("TableEditControlBase.cst").RenderToFile(rootPathWinLib + "\\UI\\" + GetClassName(SourceTable) + "EditControlBase.cs", true);
			}
		}
		
		#endregion Generate Win Library
		
		#region Set Guids
		
		// Hard coded Guid make it easier to maintain solution when regenerating projects
		// It may be intersting to put those value in global properties
		string bllGuid = "20E43088-4618-4F4A-B8AD-FC31B50D94CD"; //Guid.NewGuid().ToString();
		string dalGuid = "041C1BBE-0BFB-4D45-8125-9AB0BBC09A92"; //Guid.NewGuid().ToString();
		string DALSqlGuid = "8996A7B4-57D3-440B-A545-A701844B8C4A"; //Guid.NewGuid().ToString();
		string DALWSGuid = "061C1BBE-0BFB-4D45-8125-9AB0BBC09A92"; //Guid.NewGuid().ToString();
		string DALGenericGuid = "6788B7D9-57D3-440B-A545-A701844B8C4A"; //Guid.NewGuid().ToString();
		string wsGuid  = "5E3CA58E-216A-4F53-BD23-5A48A6C44924"; //Guid.NewGuid().ToString();
		string utGuid  = "031D5BAE-0BFB-4D45-8125-9AB0BBC09A92"; //Guid.NewGuid().ToString();
		string webLibGuid = "47FE3BE8-3E46-47CA-8494-473755867DD0"; //Guid.NewGuid().ToString();
		string websiteGuid = "1DCAB031-308A-4581-AFA8-BD29F45A1357";
		string componentGuid = "794327CE-DC0A-4381-89EE-4C00AFB08D5A"; 
		string winLibGuid = "43FE3BE8-3E46-47CA-8494-473315867DD0"; //Guid.NewGuid().ToString();
		string websecurityGuid = "417D82D0-4E13-4836-99A2-13062B945C49"; // ADDED BY CHARLIE
		
		#endregion Set Guids
	
		#region Set solution and project template names
		
		string projectTemplate = "vsnet2005.project.cst";
		string solutionTemplate = "vsnet2005.solution.cst";
		string vsmdiTemplate = "vsnet2005.vsmdi.cst";
		string testrunconfigTemplate = "vsnet2005.localtestrun.testrunconfig.cst";
		
		#endregion Set solution and project template names
		
		#region Generate VS.Net solution
		
		if (!File.Exists(OutputDirectory + "\\" + NameSpace + ".sln"))
		{
			AddFileNode(commonNode,  NameSpace + ".sln");
					
			this.GetTemplate(solutionTemplate).SetProperty("RootNameSpace", NameSpace);
			this.GetTemplate(solutionTemplate).SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate(solutionTemplate).SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate(solutionTemplate).SetProperty("DALSqlNameSpace", DALSqlNameSpace);
			this.GetTemplate(solutionTemplate).SetProperty("DALOracleNameSpace", DALOracleNameSpace);
			this.GetTemplate(solutionTemplate).SetProperty("DALSqlCeNameSpace", DALSqlCeNameSpace);
			this.GetTemplate(solutionTemplate).SetProperty("ProviderInvariantName", ProviderInvariantName);
			this.GetTemplate(solutionTemplate).SetProperty("DALGenericNameSpace", DALGenericNameSpace);
			this.GetTemplate(solutionTemplate).SetProperty("DALWSNameSpace", DALWSNameSpace);
			this.GetTemplate(solutionTemplate).SetProperty("WebLibNameSpace", WebLibNameSpace);
			this.GetTemplate(solutionTemplate).SetProperty("WinLibNameSpace", WinLibNameSpace);
			this.GetTemplate(solutionTemplate).SetProperty("WebsiteNameSpace", WebsiteNameSpace);
			this.GetTemplate(solutionTemplate).SetProperty("WebSecurityLibNameSpace", WebSecurityLibNameSpace);
			this.GetTemplate(solutionTemplate).SetProperty("UTNameSpace", UTNameSpace);
			this.GetTemplate(solutionTemplate).SetProperty("WSNameSpace", WSNameSpace);
			this.GetTemplate(solutionTemplate).SetProperty("BLLGuid", bllGuid);
			this.GetTemplate(solutionTemplate).SetProperty("DALGuid", dalGuid);
			this.GetTemplate(solutionTemplate).SetProperty("DALSqlGuid", DALSqlGuid);
			this.GetTemplate(solutionTemplate).SetProperty("DALGenericGuid", DALGenericGuid);
			this.GetTemplate(solutionTemplate).SetProperty("DALWSGuid", DALWSGuid);
			this.GetTemplate(solutionTemplate).SetProperty("WSGuid", wsGuid);
			this.GetTemplate(solutionTemplate).SetProperty("UTGuid", utGuid);
			this.GetTemplate(solutionTemplate).SetProperty("WebLibGuid", webLibGuid);
			this.GetTemplate(solutionTemplate).SetProperty("WebsiteGuid", websiteGuid);
			this.GetTemplate(solutionTemplate).SetProperty("WinLibGuid", winLibGuid);
			this.GetTemplate(solutionTemplate).SetProperty("WebSecurityLibGuid", websecurityGuid);
			this.GetTemplate(solutionTemplate).SetProperty("ComponentsGuid", componentGuid);
			this.GetTemplate(solutionTemplate).SetProperty("ComponentPattern", IncludeComponentLayer);
			this.GetTemplate(solutionTemplate).SetProperty("ComponentLayerNameSpace", ComponentsNameSpace);
			this.GetTemplate(solutionTemplate).SetProperty("IncludeComponents", (IncludeComponentLayer != MoM.Templates.ComponentPatternType.None));
			this.GetTemplate(solutionTemplate).SetProperty("IncludeBll", GenerateBusinessLogicLayer);
			this.GetTemplate(solutionTemplate).SetProperty("IncludeDALBase", GenerateDataAccessLayer);	
			this.GetTemplate(solutionTemplate).SetProperty("IncludeSqlClient", GenerateDataAccessLayer && _netTiersSqlProvider);	
			this.GetTemplate(solutionTemplate).SetProperty("IncludeGenericClient", GenerateDataAccessLayer && !_netTiersSqlProvider);	
			this.GetTemplate(solutionTemplate).SetProperty("IncludeWebservice", GenerateWebservice);
			this.GetTemplate(solutionTemplate).SetProperty("IncludeWebserviceClient", GenerateWebservice);
			this.GetTemplate(solutionTemplate).SetProperty("IncludeWebLibrary", GenerateWebLibrary);
			this.GetTemplate(solutionTemplate).SetProperty("IncludeWebSecurity", GenerateWebSecurity);
			this.GetTemplate(solutionTemplate).SetProperty("IncludeWebsite", GenerateWebsite);
			this.GetTemplate(solutionTemplate).SetProperty("IncludeUnitTest", IncludeUnitTest);
			this.GetTemplate(solutionTemplate).SetProperty("UseWebAppProject", UseWebAppProject);
			this.GetTemplate(solutionTemplate).SetProperty("IncludeWinLibrary", GenerateWinLibrary);
			this.GetTemplate(solutionTemplate).SetProperty("WebServiceUrl", WebServiceUrl);
			this.GetTemplate(solutionTemplate).SetProperty("rootPathWS", rootPathWS);
			this.GetTemplate(solutionTemplate).SetProperty("SignAssembly", SignAssembly);
	
			this.RenderToFile(solutionTemplate, OutputDirectory + "\\" + NameSpace + ".sln", true);
		}
		#endregion Generate VS.Net solution
		
		#region Generate VS.Net projects
	
		#region Common project properties
		this.GetTemplate(projectTemplate).SetProperty("SourceDatabase", SourceDatabase);
		this.GetTemplate(projectTemplate).SetProperty("SourceTables", templateSourceTables);
		this.GetTemplate(projectTemplate).SetProperty("SourceViews", templateSourceViews);
		this.GetTemplate(projectTemplate).SetProperty("EnumTables", templateEnumTables);
	
		this.GetTemplate(projectTemplate).SetProperty("SignAssembly", SignAssembly);
		this.GetTemplate(projectTemplate).SetProperty("OutputDirectory", OutputDirectory);
		this.GetTemplate(projectTemplate).SetProperty("CustomCodeFolderName", CustomCodeFolderName);
		this.GetTemplate(projectTemplate).SetProperty("WebServiceUrl", WebServiceUrl);
		this.GetTemplate(projectTemplate).SetProperty("rootPathWS", rootPathWS);
	
		this.GetTemplate(projectTemplate).SetProperty("BLLGuid", bllGuid);
		this.GetTemplate(projectTemplate).SetProperty("DALGuid", dalGuid);
		this.GetTemplate(projectTemplate).SetProperty("DALSqlGuid", DALSqlGuid);
		this.GetTemplate(projectTemplate).SetProperty("DALGenericGuid", DALGenericGuid);
		this.GetTemplate(projectTemplate).SetProperty("DALWSGuid", DALWSGuid);
		this.GetTemplate(projectTemplate).SetProperty("UTGuid", utGuid);
		this.GetTemplate(projectTemplate).SetProperty("WSGuid", wsGuid);
		this.GetTemplate(projectTemplate).SetProperty("WebLibGuid", webLibGuid);
		this.GetTemplate(projectTemplate).SetProperty("WebSecurityLibGuid", websecurityGuid);
		this.GetTemplate(projectTemplate).SetProperty("WinLibGuid", winLibGuid);
		this.GetTemplate(projectTemplate).SetProperty("WebsiteGuid", websiteGuid);
		this.GetTemplate(projectTemplate).SetProperty("ComponentsGuid", componentGuid);
		this.GetTemplate(projectTemplate).SetProperty("ComponentPattern", ComponentPattern);
	
		this.GetTemplate(projectTemplate).SetProperty("NameSpace", NameSpace);
		this.GetTemplate(projectTemplate).SetProperty("BLLNameSpace", BLLNameSpace);
		this.GetTemplate(projectTemplate).SetProperty("DALNameSpace", DALNameSpace);
		this.GetTemplate(projectTemplate).SetProperty("ComponentLayerNameSpace", ComponentsNameSpace);
		this.GetTemplate(projectTemplate).SetProperty("DALSqlNameSpace", DALSqlNameSpace);
		this.GetTemplate(projectTemplate).SetProperty("DALOracleNameSpace", DALOracleNameSpace);
		this.GetTemplate(projectTemplate).SetProperty("DALSqlCeNameSpace", DALSqlCeNameSpace);
		this.GetTemplate(projectTemplate).SetProperty("DALGenericNameSpace", DALGenericNameSpace);
		this.GetTemplate(projectTemplate).SetProperty("DALWSNameSpace", DALWSNameSpace);
		this.GetTemplate(projectTemplate).SetProperty("WebLibNameSpace", WebLibNameSpace);
		this.GetTemplate(projectTemplate).SetProperty("WebSecurityLibNameSpace", WebSecurityLibNameSpace);
		this.GetTemplate(projectTemplate).SetProperty("WinLibNameSpace", WinLibNameSpace);
		this.GetTemplate(projectTemplate).SetProperty("WebsiteNameSpace", WebsiteNameSpace);
		this.GetTemplate(projectTemplate).SetProperty("UTNameSpace", UTNameSpace);
		this.GetTemplate(projectTemplate).SetProperty("WSNameSpace", WSNameSpace);
		
		this.GetTemplate(projectTemplate).SetProperty("NetTiersTemplatePath", string.Empty);
		this.GetTemplate(projectTemplate).SetProperty("PropertySetFilePath", string.Empty);
		this.GetTemplate(projectTemplate).SetProperty("SupportsCodesmithBuildTask", false);
		this.GetTemplate(projectTemplate).SetProperty("IncludeAtlasLibrary", IncludeAtlasLibrary);
		this.GetTemplate(projectTemplate).SetProperty("IncludeAtlasToolkit", IncludeAtlasToolkit);
		this.GetTemplate(projectTemplate).SetProperty("EntLibVersion", EntLibVersion);
		this.GetTemplate(projectTemplate).SetProperty("ValidationType", ValidationType);
		this.GetTemplate(projectTemplate).SetProperty("IsConnectionStringAzure", IsConnectionStringAzure);
		
		//This is the path to the References Folder
		string rootPath = Path.GetFullPath(Path.Combine(OutputDirectory, LibraryPath));

		bool pathFound = false;
		string otherPath = "";
		
		//We will default the path to the Directory below the library path if no other path is found
		string libRelPath = "..\\" + LibraryPath;
		
		//Find the first path that is not the Reference Folder
		foreach(string directory in Directory.GetDirectories(OutputDirectory))
		{
			if(directory.ToUpper() != rootPath.ToUpper())
			{
				otherPath = Path.GetFullPath(Path.Combine(OutputDirectory, directory));
				pathFound = true;
				break;
			}
		}
		
		if(pathFound)
		{
			libRelPath = RelativePathTo(otherPath, rootPath); 
		}

		this.GetTemplate(projectTemplate).SetProperty("LibraryPath", libRelPath);

		#endregion Common project properties	
		
		#region Components project
		if (ComponentPattern != MoM.Templates.ComponentPatternType.None) 
		{
			AddFileNode(commonNode, ComponentLayerNameSpace + ".csproj");
			
			this.GetTemplate(projectTemplate).SetProperty("IncludeBll", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeDALBase", false);	
			this.GetTemplate(projectTemplate).SetProperty("IncludeSqlClient", false);	
			this.GetTemplate(projectTemplate).SetProperty("IncludeGenericClient", false);	
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebservice", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebserviceClient", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebLibrary", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebSecurity", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWinLibrary", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebsite", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeComponents", true);
			this.GetTemplate(projectTemplate).SetProperty("IncludeUnitTest", MoM.Templates.UnitTestStyle.None);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWCFDataAttributes", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeDesignTimeSupport", false);
												
			this.RenderToFile(projectTemplate, rootPathComponents + "\\" + ComponentsNameSpace + ".csproj", true);
		}
		#endregion Components project
		
		#region Entities project
		if (GenerateBusinessLogicLayer) // && !File.Exists(rootPathBLL + "\\" + NameSpace + ".csproj"))
		{
			AddFileNode(commonNode, BLLNameSpace + ".csproj");
			
			this.GetTemplate(projectTemplate).SetProperty("IncludeBll", true);
			this.GetTemplate(projectTemplate).SetProperty("IncludeDALBase", false);	
			this.GetTemplate(projectTemplate).SetProperty("IncludeSqlClient", false);	
			this.GetTemplate(projectTemplate).SetProperty("IncludeGenericClient", false);	
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebservice", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebserviceClient", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebLibrary", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebSecurity", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWinLibrary", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebsite", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeComponents", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeUnitTest", MoM.Templates.UnitTestStyle.None);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWCFDataAttributes", IncludeWCFDataAttributes);
			this.GetTemplate(projectTemplate).SetProperty("IncludeDesignTimeSupport", false);
			
			this.GetTemplate(projectTemplate).SetProperty("NetTiersTemplatePath", GetNetTiersTemplatePath());
			this.GetTemplate(projectTemplate).SetProperty("PropertySetFilePath", GetPropertySetFilePath());
			this.GetTemplate(projectTemplate).SetProperty("SupportsCodesmithBuildTask", DoesSupportCodesmithBuildTask());
			
			//this.GetTemplate(projectTemplate).RenderToFile(rootPathBLL + "\\" + BLLNameSpace + ".csproj", true);
			this.RenderToFile(projectTemplate, rootPathBLL + "\\" + BLLNameSpace + ".csproj", true);
		}
		#endregion Entities project
		
		#region Data Access project
		if (GenerateDataAccessLayer) // && !File.Exists(rootPathDAL + "\\" + NameSpace + ".DataAccessLayer.csproj"))
		{
			#region Data Access Layer base
			AddFileNode(commonNode, DALNameSpace + "." + DataAccessLayerNameSpace + ".csproj");
	
			this.GetTemplate(projectTemplate).SetProperty("IncludeBll", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeDALBase", true);	
			this.GetTemplate(projectTemplate).SetProperty("IncludeSqlClient", false);			
			this.GetTemplate(projectTemplate).SetProperty("IncludeGenericClient", false);	
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebservice", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebserviceClient", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebLibrary", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebSecurity", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebsite", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWinLibrary", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeComponents", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeUnitTest", MoM.Templates.UnitTestStyle.None);			
			this.GetTemplate(projectTemplate).SetProperty("IncludeWCFDataAttributes", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeDesignTimeSupport", IncludeDesignTimeSupport);
	
			this.RenderToFile(projectTemplate, rootPathDAL + "\\" + DALNameSpace + ".csproj", true);
			#endregion Data Access Layer base
			
			if (_netTiersSqlProvider == true)
			{
				#region Sql client
				
				AddFileNode(commonNode, BLLNameSpace + "."+DataAccessLayerNameSpace+".SqlClient.csproj");
		
				this.GetTemplate(projectTemplate).SetProperty("IncludeBll", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeDALBase", false);	
				this.GetTemplate(projectTemplate).SetProperty("IncludeSqlClient", true);			
				this.GetTemplate(projectTemplate).SetProperty("IncludeGenericClient", false);	
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebservice", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebserviceClient", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeComponents", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebLibrary", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebSecurity", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebsite", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeUnitTest", MoM.Templates.UnitTestStyle.None);			
				this.GetTemplate(projectTemplate).SetProperty("IncludeWCFDataAttributes", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeDesignTimeSupport", false);
				
				this.RenderToFile(projectTemplate, rootPathDALSql + "\\" + DALSqlNameSpace + ".csproj", true);
			
				#endregion Sql client
			}
			else if(ProviderInvariantName == "System.Data.OracleClient")
			{
				#region Oracle Client
				
				AddFileNode(commonNode, BLLNameSpace + "."+DataAccessLayerNameSpace+".OracleClient.csproj");
		
				this.GetTemplate(projectTemplate).SetProperty("IncludeBll", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeDALBase", false);	
				this.GetTemplate(projectTemplate).SetProperty("IncludeSqlClient", false);			
				this.GetTemplate(projectTemplate).SetProperty("IncludeGenericClient", true);	
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebservice", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebserviceClient", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeComponents", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebLibrary", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebSecurity", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebsite", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeUnitTest", MoM.Templates.UnitTestStyle.None);			
				this.GetTemplate(projectTemplate).SetProperty("IncludeWCFDataAttributes", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeDesignTimeSupport", false);
			
				this.RenderToFile(projectTemplate, rootPathDALOracle + "\\" + DALOracleNameSpace + ".csproj", true);
			
				#endregion
			}
			else if(ProviderInvariantName == "System.Data.SqlServerCe.3.5")
			{
				#region SqlCe Client
				
				AddFileNode(commonNode, BLLNameSpace + "."+DataAccessLayerNameSpace+".SqlCeClient.csproj");
		
				this.GetTemplate(projectTemplate).SetProperty("IncludeBll", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeDALBase", false);	
				this.GetTemplate(projectTemplate).SetProperty("IncludeSqlClient", false);			
				this.GetTemplate(projectTemplate).SetProperty("IncludeGenericClient", true);	
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebservice", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebserviceClient", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeComponents", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebLibrary", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebSecurity", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebsite", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeUnitTest", MoM.Templates.UnitTestStyle.None);			
				this.GetTemplate(projectTemplate).SetProperty("IncludeWCFDataAttributes", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeDesignTimeSupport", false);
			
				this.RenderToFile(projectTemplate, rootPathDALSqlCe + "\\" + DALSqlCeNameSpace + ".csproj", true);
			
				#endregion
			}
			else
			{
				#region Generic client
			
				AddFileNode(commonNode, BLLNameSpace + "."+DataAccessLayerNameSpace+".GenericClient.csproj");
		
				this.GetTemplate(projectTemplate).SetProperty("IncludeBll", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeDALBase", false);	
				this.GetTemplate(projectTemplate).SetProperty("IncludeSqlClient", false);			
				this.GetTemplate(projectTemplate).SetProperty("IncludeGenericClient", true);	
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebservice", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebserviceClient", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeComponents", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebLibrary", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebSecurity", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebsite", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeUnitTest", MoM.Templates.UnitTestStyle.None);			
				this.GetTemplate(projectTemplate).SetProperty("IncludeWCFDataAttributes", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeDesignTimeSupport", false);
			
				this.RenderToFile(projectTemplate, rootPathDALGeneric + "\\" + DALGenericNameSpace + ".csproj", true);
				
				#endregion Generic client
			}		
			
			#region	Web Service Client
			if (GenerateWebservice)
			{
				AddFileNode(commonNode, rootPathDALWS + "\\" + NameSpace + "." + DataAccessLayerNameSpace + ".WebServiceClient.csproj");
	
				this.GetTemplate(projectTemplate).SetProperty("IncludeBll", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeDALBase", false);	
				this.GetTemplate(projectTemplate).SetProperty("IncludeSqlClient", false);			
				this.GetTemplate(projectTemplate).SetProperty("IncludeGenericClient", false);	
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebservice", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebserviceClient", true);
				this.GetTemplate(projectTemplate).SetProperty("IncludeComponents", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebLibrary", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebSecurity", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebsite", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeUnitTest", MoM.Templates.UnitTestStyle.None);			
				this.GetTemplate(projectTemplate).SetProperty("IncludeWCFDataAttributes", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeDesignTimeSupport", false);
			
				this.RenderToFile(projectTemplate, rootPathDALWS + "\\" + DALWSNameSpace + ".csproj", true);
			}
			
			#endregion Web Service Client
			
		}
		#endregion DAL project
		
		#region Win Library project
		if (GenerateWinLibrary)
		{
			AddFileNode(commonNode, WinLibNameSpace + ".csproj");
	
			this.GetTemplate(projectTemplate).SetProperty("IncludeBll", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeDALBase", false);	
			this.GetTemplate(projectTemplate).SetProperty("IncludeSqlClient", false);			
			this.GetTemplate(projectTemplate).SetProperty("IncludeGenericClient", false);	
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebservice", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebserviceClient", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeComponents", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebLibrary", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebSecurity", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWinLibrary", true);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebsite", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeUnitTest", MoM.Templates.UnitTestStyle.None);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWCFDataAttributes", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeDesignTimeSupport", false);
			
			this.RenderToFile(projectTemplate, rootPathWinLib + "\\" + WinLibNameSpace + ".csproj", true);
		}
		#endregion Win Library project
		
		#region Web.Security  Library Library project file
		if (GenerateWebSecurity)
		{
			AddFileNode(commonNode, WebSecurityLibNameSpace + ".csproj");

			this.GetTemplate(projectTemplate).SetProperty("IncludeBll", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeDALBase", false);	
			this.GetTemplate(projectTemplate).SetProperty("IncludeSqlClient", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeGenericClient", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebservice", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebserviceClient", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeComponents", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebLibrary", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebSecurity", true);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWinLibrary", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebsite", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeUnitTest", MoM.Templates.UnitTestStyle.None);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWCFDataAttributes", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeDesignTimeSupport", false);

			this.RenderToFile(projectTemplate, rootPathWebSecurityLib + "\\" + WebSecurityLibNameSpace + ".csproj", true);
		}
		#endregion Web.Security  Library Library project file
		
		#region Web Library project
		if (GenerateWebLibrary)
		{
			AddFileNode(commonNode, WebLibNameSpace + ".csproj");
	
			this.GetTemplate(projectTemplate).SetProperty("IncludeBll", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeDALBase", false);	
			this.GetTemplate(projectTemplate).SetProperty("IncludeSqlClient", false);			
			this.GetTemplate(projectTemplate).SetProperty("IncludeGenericClient", false);	
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebservice", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebserviceClient", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeComponents", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebLibrary", true);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebSecurity", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWinLibrary", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebsite", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeUnitTest", MoM.Templates.UnitTestStyle.None);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWCFDataAttributes", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeDesignTimeSupport", false);
			
			this.RenderToFile(projectTemplate, rootPathWebLib + "\\" + WebLibNameSpace + ".csproj", true);
		}
		#endregion Web Library project file
		
		#region Web Application project
		if ( GenerateWebsite && UseWebAppProject )
		{
			AddFileNode(commonNode, WebsiteNameSpace + ".csproj");
	
			this.GetTemplate(projectTemplate).SetProperty("IncludeBll", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeDALBase", false);	
			this.GetTemplate(projectTemplate).SetProperty("IncludeSqlClient", false);			
			this.GetTemplate(projectTemplate).SetProperty("IncludeGenericClient", false);	
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebservice", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebserviceClient", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeComponents", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebLibrary", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWinLibrary", false);		
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebsite", true);
			this.GetTemplate(projectTemplate).SetProperty("IncludeUnitTest", MoM.Templates.UnitTestStyle.None);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWCFDataAttributes", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeDesignTimeSupport", false);
			
			this.RenderToFile(projectTemplate, rootPathWebsite + "\\" + WebsiteNameSpace + ".csproj", true);
		}
		#endregion Web Application Project file
		
		#region Unit tests project
		if (IncludeUnitTest != MoM.Templates.UnitTestStyle.None) // && !File.Exists(rootPathDAL + "\\" + NameSpace + ".DataAccessLayer.csproj"))
		{
			AddFileNode(commonNode, NameSpace + "." + UnitTestsNameSpace + ".csproj");
	
			this.GetTemplate(projectTemplate).SetProperty("IncludeBll", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeDALBase", false);	
			this.GetTemplate(projectTemplate).SetProperty("IncludeSqlClient", false);			
			this.GetTemplate(projectTemplate).SetProperty("IncludeGenericClient", false);	
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebservice", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebserviceClient", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebLibrary", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWinLibrary", false);		
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebsite", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeComponents", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeUnitTest", IncludeUnitTest);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWCFDataAttributes", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeDesignTimeSupport", false);
			this.GetTemplate(projectTemplate).SetProperty("NetTiersSqlProvider", _netTiersSqlProvider);
	
			this.RenderToFile(projectTemplate, rootPathUT + "\\" + UTNameSpace + ".csproj", true);
		}
		
		if (IncludeUnitTest == MoM.Templates.UnitTestStyle.VSTS)
		{		
			if (!File.Exists(OutputDirectory + "\\" + NameSpace + ".vsmdi"))
			{
				AddFileNode(commonNode, NameSpace + ".vsmdi");
				this.GetTemplate(vsmdiTemplate).SetProperty("VisualStudioVersion", VisualStudioVersion);
				this.RenderToFile(vsmdiTemplate, OutputDirectory + "\\" + NameSpace + ".vsmdi", true);
			}
			
			if (!File.Exists(OutputDirectory + "\\" + "localtestrun.testrunconfig"))
			{
				AddFileNode(commonNode, "localtestrun.testrunconfig");
				this.GetTemplate(testrunconfigTemplate).SetProperty("VisualStudioVersion", VisualStudioVersion);
				this.RenderToFile(testrunconfigTemplate, OutputDirectory + "\\" + "localtestrun.testrunconfig", true);
			}
		}
		#endregion Unit tests only project
	
		#endregion Generate VS.Net projects	
		
		#region Generating nAnt build file
		if (vsnetIntegration != VSNetIntegration.None && !File.Exists(OutputDirectory + "\\" + NameSpace + ".build"))
		{
			AddFileNode(commonNode, NameSpace + ".build");
					
			this.GetTemplate("nAnt.cst").SetProperty("CompanyName", CompanyName);
			this.GetTemplate("nAnt.cst").SetProperty("CompanyURL", CompanyURL);
			
			this.GetTemplate("nAnt.cst").SetProperty("IncludeBll", GenerateBusinessLogicLayer);
			this.GetTemplate("nAnt.cst").SetProperty("IncludeSqlClient", GenerateDataAccessLayer);
			this.GetTemplate("nAnt.cst").SetProperty("IncludeGenericClient", GenerateDataAccessLayer);
			this.GetTemplate("nAnt.cst").SetProperty("IncludeWebServiceClient", GenerateWebservice);
			this.GetTemplate("nAnt.cst").SetProperty("IncludeUnitTest", IncludeUnitTest);
			
			this.GetTemplate("nAnt.cst").SetProperty("NameSpace", NameSpace);
			this.GetTemplate("nAnt.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("nAnt.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate("nAnt.cst").SetProperty("DALSqlNameSpace", DALSqlNameSpace);
			this.GetTemplate("nAnt.cst").SetProperty("DALWSNameSpace", DALWSNameSpace);
			this.GetTemplate("nAnt.cst").SetProperty("UTNameSpace", UTNameSpace);
			this.GetTemplate("nAnt.cst").SetProperty("WSNameSpace", WSNameSpace);
			
			this.GetTemplate("nAnt.cst").SetProperty("SingleProject", vsnetIntegration == VSNetIntegration.SingleProject);
			
			this.RenderToFile("nAnt.cst", OutputDirectory + "\\" + NameSpace + ".build", false);
		}
		#endregion Generating nAnt build file
		
		#region Entity helper and util
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//-- EntityHelper.cs
		//----------------------------------------------------------------------------------------------------------------------------------------------
		XmlElement entityHelperNode = AddFileNode(commonNode, "EntityHelper.cs");
		this.GetTemplate("EntityHelper.cst").SetProperty("NameSpace", BLLNameSpace);
		this.GetTemplate("EntityHelper.cst").RenderToFile(rootPathBLL + "\\EntityHelper.cs", true);
		//AddExecutionTime(entityHelperNode);
		//----------------------------------------------------------------------------------------------------------------------------------------------
		
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//-- EntityUtil.cs
		//----------------------------------------------------------------------------------------------------------------------------------------------
		XmlElement entityUtilNode = AddFileNode(commonNode, "EntityUtil.cs");
		this.GetTemplate("EntityUtil.cst").SetProperty("NameSpace", BLLNameSpace);
		this.GetTemplate("EntityUtil.cst").SetProperty("TimeStandard", TimeStandard);
		this.GetTemplate("EntityUtil.cst").RenderToFile(rootPathBLL + "\\EntityUtil.cs", true);
		//AddExecutionTime(entityUtilNode);
		//----------------------------------------------------------------------------------------------------------------------------------------------
		#endregion Entity helper and util	
		
		#region Generate Assembly file
		string version = string.Empty;
		if (!File.Exists(OutputDirectory + "\\AssemblyInfo.cs"))
		{
			version = "1.0.0.0";
		}
		else
		{
			version = IncrementBuildVersion(OutputDirectory + "\\AssemblyInfo.cs");		
		}
		
		this.GetTemplate("AssemblyInfo.cst").SetProperty("NameSpace", NameSpace);
		this.GetTemplate("AssemblyInfo.cst").SetProperty("CompanyName", CompanyName);
		this.GetTemplate("AssemblyInfo.cst").SetProperty("CompanyURL", CompanyURL);
		this.GetTemplate("AssemblyInfo.cst").SetProperty("UnitTestNameSpace", UnitTestsNameSpace);
		this.GetTemplate("AssemblyInfo.cst").SetProperty("Version", version);
		this.RenderToFile("AssemblyInfo.cst", OutputDirectory + "\\AssemblyInfo.cs", true );
		#endregion Generate Assembly file
		
		#region Generate Web Service
		if (GenerateWebservice)
		{
			//this.GetTemplate("AssemblyInfo.cst").RenderToFile(rootPathWS + "\\AssemblyInfo.cs", true);
			this.RenderToFile("AssemblyInfo.cst", rootPathWS + "\\AssemblyInfo.cs", true);
		}
		#endregion Generate Web Service
			
		AddExecutionTime(commonNode);
		
		#region Process the By View templates
		for(int x=0; x < templateSourceViews.Count; x++)
		{
			ViewSchema SourceView = templateSourceViews[x];
			_CurrentPhase = string.Format("Generating {0} files", SourceView.Name);
			XmlElement tableNode = AddTableNode(SourceView.Name);
			
			//----------------------------------------------------------------------------------------------------------------------------------------------
			//-- Discovering Customer Procedures
			//----------------------------------------------------------------------------------------------------------------------------------------------
			if (IncludeCustoms)
			{
				IDictionary customProcs = GetCustomProcedures(SourceView);
				LogCustomProcedures(customProcs, SourceView.Name, "view", customProcsNode);
			}
			
			
			//----------------------------------------------------------------------------------------------------------------------------------------------
			//-- Abstract Business Object
			//----------------------------------------------------------------------------------------------------------------------------------------------
			XmlElement boBaseNode = AddFileNode(tableNode, GetClassName(SourceView, ClassNameFormat.PartialAbstract) + ".cs");
					
			this.GetTemplate("EntityViewBase.generated.cst").SetProperty("SourceView", SourceView);
			this.GetTemplate("EntityViewBase.generated.cst").SetProperty("SourceTables", templateSourceTables);
			this.GetTemplate("EntityViewBase.generated.cst").SetProperty("NameSpace", BLLNameSpace);
			this.GetTemplate("EntityViewBase.generated.cst").SetProperty("IncludeRelations", IncludeRelations);
			this.GetTemplate("EntityViewBase.generated.cst").SetProperty("IncludeWCFDataAttributes", IncludeWCFDataAttributes);
			this.GetTemplate("EntityViewBase.generated.cst").SetProperty("IncludeXmlAttributes", IncludeXmlAttributes);
			
			this.RenderToFile("EntityViewBase.generated.cst", rootPathBLL + "\\Views\\" + GetClassName(SourceView, ClassNameFormat.PartialAbstract) + ".cs", true);
			
			//----------------------------------------------------------------------------------------------------------------------------------------------
			//-- Business Object
			//----------------------------------------------------------------------------------------------------------------------------------------------
			if (!File.Exists(rootPathBLL + "\\Views\\" + GetClassName(SourceView) + ".cs")) // || OverwritePartialClassStub)
			{
				XmlElement boNode = AddFileNode(tableNode, GetClassName(SourceView) + ".cs");
								
				this.GetTemplate("EntityView.cst").SetProperty("SourceView", SourceView);
				this.GetTemplate("EntityView.cst").SetProperty("NameSpace", BLLNameSpace);
				this.RenderToFile("EntityView.cst", rootPathBLL + "\\Views\\" + GetClassName(SourceView) + ".cs", false);	
			}
							
			//----------------------------------------------------------------------------------------------------------------------------------------------
			//	Generating the entity Repository decorator		
			//----------------------------------------------------------------------------------------------------------------------------------------------
			XmlElement dalcFactoryCoreNode = AddFileNode(tableNode, GetClassName(SourceView, ClassNameFormat.PartialProviderBase) + "Core.cs");
			
			this.GetTemplate("EntityViewProviderBaseCore.generated.cst").SetProperty("IncludeCustoms", IncludeCustoms);
			this.GetTemplate("EntityViewProviderBaseCore.generated.cst").SetProperty("CustomNonMatchingReturnType", CustomNonMatchingReturnType);				
			this.GetTemplate("EntityViewProviderBaseCore.generated.cst").SetProperty("ProcedurePrefix", ProcedurePrefix.Replace(" ", ""));
			this.GetTemplate("EntityViewProviderBaseCore.generated.cst").SetProperty("IncludeGetList", IncludeGetList);
			this.GetTemplate("EntityViewProviderBaseCore.generated.cst").SetProperty("IncludeGetListByIX", IncludeGetListByIX);
			this.GetTemplate("EntityViewProviderBaseCore.generated.cst").SetProperty("IncludeFind", IncludeFind);
			this.GetTemplate("EntityViewProviderBaseCore.generated.cst").SetProperty("SourceView", SourceView);
			this.GetTemplate("EntityViewProviderBaseCore.generated.cst").SetProperty("NameSpace", BLLNameSpace);
			this.GetTemplate("EntityViewProviderBaseCore.generated.cst").SetProperty("DALNameSpace", DALNameSpace);
								
			this.RenderToFile("EntityViewProviderBaseCore.generated.cst", rootPathDAL + "\\Bases\\Views\\" + GetClassName(SourceView, ClassNameFormat.PartialProviderBase) + "Core.cs", true);
			
			AddExecutionTime(dalcFactoryCoreNode);
			//----------------------------------------------------------------------------------------------------------------------------------------------
	
			if (!File.Exists(rootPathDAL + "\\Bases\\Views\\" + GetClassName(SourceView, ClassNameFormat.ProviderBase) + ".cs")) // || OverwritePartialClassStub)
			{
				XmlElement dalcFactoryNode = AddFileNode(tableNode, GetClassName(SourceView, ClassNameFormat.ProviderBase) + ".cs");
				
				this.GetTemplate("EntityViewProviderBase.cst").SetProperty("SourceView", SourceView);
				this.GetTemplate("EntityViewProviderBase.cst").SetProperty("NameSpace", BLLNameSpace);
				this.GetTemplate("EntityViewProviderBase.cst").SetProperty("DALNameSpace", DALNameSpace);
				
				this.RenderToFile("EntityViewProviderBase.cst", rootPathDAL + "\\Bases\\Views\\" + GetClassName(SourceView, ClassNameFormat.ProviderBase) + ".cs", true);
				
				AddExecutionTime(dalcFactoryNode);
			}
			
			if (_netTiersSqlProvider == true)
			{
			
				//----------------------------------------------------------------------------------------------------------------------------------------------
				//	base provider class
				//----------------------------------------------------------------------------------------------------------------------------------------------
				XmlElement dalcViewBaseNode = AddFileNode(tableNode, "Sql"+ GetClassName(SourceView, ClassNameFormat.PartialProviderBase) + ".cs");
				this.GetTemplate("SqlEntityViewProviderBase.generated.cst").SetProperty("IncludeDatabaseFeatures", IncludeDatabaseFeatures);
				this.GetTemplate("SqlEntityViewProviderBase.generated.cst").SetProperty("IncludeCustoms", IncludeCustoms);
				this.GetTemplate("SqlEntityViewProviderBase.generated.cst").SetProperty("IncludeGetList", IncludeGetList);
				this.GetTemplate("SqlEntityViewProviderBase.generated.cst").SetProperty("IncludeGetListByIX", IncludeGetListByIX);
				this.GetTemplate("SqlEntityViewProviderBase.generated.cst").SetProperty("IncludeFind", IncludeFind);
				this.GetTemplate("SqlEntityViewProviderBase.generated.cst").SetProperty("SourceView", SourceView);
				this.GetTemplate("SqlEntityViewProviderBase.generated.cst").SetProperty("CustomNonMatchingReturnType", CustomNonMatchingReturnType);
				this.GetTemplate("SqlEntityViewProviderBase.generated.cst").SetProperty("NameSpace", BLLNameSpace);
				this.GetTemplate("SqlEntityViewProviderBase.generated.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate("SqlEntityViewProviderBase.generated.cst").SetProperty("SelectSuffix", SelectSuffix);
				this.GetTemplate("SqlEntityViewProviderBase.generated.cst").SetProperty("SelectAllSuffix", SelectAllSuffix);
				this.GetTemplate("SqlEntityViewProviderBase.generated.cst").SetProperty("ProcedurePrefix", ProcedurePrefix);
						
				this.RenderToFile("SqlEntityViewProviderBase.generated.cst", rootPathDALSql + "\\Views\\Sql" + GetClassName(SourceView, ClassNameFormat.PartialProviderBase) + ".cs", true);
				//----------------------------------------------------------------------------------------------------------------------------------------------
				
				//----------------------------------------------------------------------------------------------------------------------------------------------
				//	provider class
				//----------------------------------------------------------------------------------------------------------------------------------------------
				if (!File.Exists(rootPathDALSql + "\\Views\\Sql" + GetClassName(SourceView, ClassNameFormat.Provider) + ".cs"))
				{
					XmlElement sqlDalcNode = AddFileNode(tableNode, rootPathDALSql + "\\Views\\"+ GetClassName(SourceView, ClassNameFormat.Provider) + ".cs");
					//Response.WriteLine("Building concrete SqlClient Repository class : SqlClient\\" + GetProviderName(SourceTable.Name));
					this.GetTemplate("SqlEntityViewProvider.cst").SetProperty("NameSpace", BLLNameSpace);
					this.GetTemplate("SqlEntityViewProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
					this.GetTemplate("SqlEntityViewProvider.cst").SetProperty("ClassName", GetClassName(SourceView));
					this.GetTemplate("SqlEntityViewProvider.cst").SetProperty("ProviderName", "Sql" + GetClassName(SourceView, ClassNameFormat.Provider));
					this.GetTemplate("SqlEntityViewProvider.cst").SetProperty("ProviderBaseName", "Sql" + GetClassName(SourceView, ClassNameFormat.ProviderBase));
					
					this.RenderToFile("SqlEntityViewProvider.cst", rootPathDALSql + "\\Views\\Sql" + GetClassName(SourceView, ClassNameFormat.Provider) + ".cs", false);
					//AddExecutionTime(sqlDalcNode);
				}
			}
			else if(ProviderInvariantName == "System.Data.OracleClient")
			{
				//----------------------------------------------------------------------------------------------------------------------------------------------
				//	base provider class
				//----------------------------------------------------------------------------------------------------------------------------------------------
				XmlElement dalcViewBaseNode = AddFileNode(tableNode, "Oracle"+ GetClassName(SourceView, ClassNameFormat.PartialProviderBase) + ".cs");
				this.GetTemplate("OracleEntityViewProviderBase.generated.cst").SetProperty("IncludeDatabaseFeatures", IncludeDatabaseFeatures);
				this.GetTemplate("OracleEntityViewProviderBase.generated.cst").SetProperty("IncludeCustoms", IncludeCustoms);
				this.GetTemplate("OracleEntityViewProviderBase.generated.cst").SetProperty("IncludeGetList", IncludeGetList);
				this.GetTemplate("OracleEntityViewProviderBase.generated.cst").SetProperty("IncludeGetListByIX", IncludeGetListByIX);
				this.GetTemplate("OracleEntityViewProviderBase.generated.cst").SetProperty("IncludeFind", IncludeFind);
				this.GetTemplate("OracleEntityViewProviderBase.generated.cst").SetProperty("SourceView", SourceView);
				this.GetTemplate("OracleEntityViewProviderBase.generated.cst").SetProperty("CustomNonMatchingReturnType", CustomNonMatchingReturnType);
				this.GetTemplate("OracleEntityViewProviderBase.generated.cst").SetProperty("NameSpace", BLLNameSpace);
				this.GetTemplate("OracleEntityViewProviderBase.generated.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate("OracleEntityViewProviderBase.generated.cst").SetProperty("SelectSuffix", SelectSuffix);
				this.GetTemplate("OracleEntityViewProviderBase.generated.cst").SetProperty("SelectAllSuffix", SelectAllSuffix);
				this.GetTemplate("OracleEntityViewProviderBase.generated.cst").SetProperty("ProcedurePrefix", ProcedurePrefix);
				this.GetTemplate("OracleEntityViewProviderBase.generated.cst").SetProperty("EntLibVersion", EntLibVersion);
						
				this.RenderToFile("OracleEntityViewProviderBase.generated.cst", rootPathDALOracle + "\\Views\\Oracle" + GetClassName(SourceView, ClassNameFormat.PartialProviderBase) + ".cs", true);
				
				//----------------------------------------------------------------------------------------------------------------------------------------------
				//	provider class
				//----------------------------------------------------------------------------------------------------------------------------------------------
				if (!File.Exists(rootPathDALOracle + "\\Views\\Oracle" + GetClassName(SourceView, ClassNameFormat.Provider) + ".cs"))
				{
					XmlElement sqlDalcNode = AddFileNode(tableNode, rootPathDALOracle + "\\Views\\"+ GetClassName(SourceView, ClassNameFormat.Provider) + ".cs");
					this.GetTemplate("OracleEntityViewProvider.cst").SetProperty("NameSpace", BLLNameSpace);
					this.GetTemplate("OracleEntityViewProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
					this.GetTemplate("OracleEntityViewProvider.cst").SetProperty("ClassName", GetClassName(SourceView));
					this.GetTemplate("OracleEntityViewProvider.cst").SetProperty("ProviderName", "Oracle" + GetClassName(SourceView, ClassNameFormat.Provider));
					this.GetTemplate("OracleEntityViewProvider.cst").SetProperty("ProviderBaseName", "Oracle" + GetClassName(SourceView, ClassNameFormat.ProviderBase));
					
					this.RenderToFile("OracleEntityViewProvider.cst", rootPathDALOracle + "\\Views\\Oracle" + GetClassName(SourceView, ClassNameFormat.Provider) + ".cs", false);
					//AddExecutionTime(sqlDalcNode);
				}
			}
			else
			{
				//----------------------------------------------------------------------------------------------------------------------------------------------
				//	base provider class
				//----------------------------------------------------------------------------------------------------------------------------------------------
				XmlElement dalcViewBaseNode = AddFileNode(tableNode, "Generic"+ GetClassName(SourceView, ClassNameFormat.PartialProviderBase) + ".cs");
				this.GetTemplate("GenericEntityViewProviderBase.generated.cst").SetProperty("IncludeDatabaseFeatures", IncludeDatabaseFeatures);
				this.GetTemplate("GenericEntityViewProviderBase.generated.cst").SetProperty("IncludeCustoms", IncludeCustoms);
				this.GetTemplate("GenericEntityViewProviderBase.generated.cst").SetProperty("IncludeGetList", IncludeGetList);
				this.GetTemplate("GenericEntityViewProviderBase.generated.cst").SetProperty("IncludeGetListByIX", IncludeGetListByIX);
				this.GetTemplate("GenericEntityViewProviderBase.generated.cst").SetProperty("IncludeFind", IncludeFind);
				this.GetTemplate("GenericEntityViewProviderBase.generated.cst").SetProperty("SourceView", SourceView);
				this.GetTemplate("GenericEntityViewProviderBase.generated.cst").SetProperty("CustomNonMatchingReturnType", CustomNonMatchingReturnType);
				this.GetTemplate("GenericEntityViewProviderBase.generated.cst").SetProperty("NameSpace", BLLNameSpace);
				this.GetTemplate("GenericEntityViewProviderBase.generated.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate("GenericEntityViewProviderBase.generated.cst").SetProperty("SelectSuffix", SelectSuffix);
				this.GetTemplate("GenericEntityViewProviderBase.generated.cst").SetProperty("SelectAllSuffix", SelectAllSuffix);
				this.GetTemplate("GenericEntityViewProviderBase.generated.cst").SetProperty("ProcedurePrefix", ProcedurePrefix);
						
				this.RenderToFile("GenericEntityViewProviderBase.generated.cst", rootPathDALGeneric + "\\Views\\Generic" + GetClassName(SourceView, ClassNameFormat.PartialProviderBase) + ".cs", true);
				
				//----------------------------------------------------------------------------------------------------------------------------------------------
				//	provider class
				//----------------------------------------------------------------------------------------------------------------------------------------------
				if (!File.Exists(rootPathDALGeneric + "\\Views\\Generic" + GetClassName(SourceView, ClassNameFormat.Provider) + ".cs"))
				{
					XmlElement sqlDalcNode = AddFileNode(tableNode, rootPathDALGeneric + "\\Views\\"+ GetClassName(SourceView, ClassNameFormat.Provider) + ".cs");
					this.GetTemplate("GenericEntityViewProvider.cst").SetProperty("NameSpace", BLLNameSpace);
					this.GetTemplate("GenericEntityViewProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
					this.GetTemplate("GenericEntityViewProvider.cst").SetProperty("ClassName", GetClassName(SourceView));
					this.GetTemplate("GenericEntityViewProvider.cst").SetProperty("ProviderName", "Generic" + GetClassName(SourceView, ClassNameFormat.Provider));
					this.GetTemplate("GenericEntityViewProvider.cst").SetProperty("ProviderBaseName", "Generic" + GetClassName(SourceView, ClassNameFormat.ProviderBase));
					
					this.RenderToFile("GenericEntityViewProvider.cst", rootPathDALGeneric + "\\Views\\Generic" + GetClassName(SourceView, ClassNameFormat.Provider) + ".cs", false);
					//AddExecutionTime(sqlDalcNode);
				}
			}
			//----------------------------------------------------------------------------------------------------------------------------------------------
			//	BLL class
			//----------------------------------------------------------------------------------------------------------------------------------------------
	
			#region Components
			if (ComponentPattern == MoM.Templates.ComponentPatternType.DomainModel)
			{
				if (!File.Exists(rootPathComponents + "\\Views\\" + GetClassName(SourceView) + ".cs")) 
				{
					///Components
					XmlElement comBaseNode = AddFileNode(tableNode,  GetClassName(SourceView) + ".cs");
									
					this.GetTemplate("ComponentView.cst").SetProperty("NameSpace", ComponentsNameSpace);
					this.GetTemplate("ComponentView.cst").SetProperty("BLLNameSpace", BLLNameSpace);
					this.GetTemplate("ComponentView.cst").SetProperty("DALNameSpace", DALNameSpace);
					this.GetTemplate("ComponentView.cst").SetProperty("UsePartialClass", UsePartialClass);
					
					this.GetTemplate("ComponentView.cst").SetProperty("SourceView", SourceView);
					this.GetTemplate("ComponentViewBase.cst").SetProperty("SourceViews", templateSourceViews);
					
					this.GetTemplate("ComponentView.cst").SetProperty("ComponentPattern", ComponentPattern);
					this.GetTemplate("ComponentView.cst").SetProperty("CustomNonMatchingReturnType", CustomNonMatchingReturnType);				
					this.GetTemplate("ComponentView.cst").SetProperty("ProcedurePrefix", ProcedurePrefix.Replace(" ", ""));
		
					this.RenderToFile("ComponentView.cst", rootPathComponents + "\\Views\\" + GetClassName(SourceView) + ".cs", true);
				
					AddExecutionTime(comBaseNode);
				}			
							
				///Components
				XmlElement comBaseNode1 = AddFileNode(tableNode, GetClassName(SourceView, ClassNameFormat.PartialAbstract) + ".cs");
						
				this.GetTemplate("ComponentViewBase.cst").SetProperty("NameSpace", ComponentsNameSpace);
				this.GetTemplate("ComponentViewBase.cst").SetProperty("BLLNameSpace", BLLNameSpace);
				this.GetTemplate("ComponentViewBase.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate("ComponentViewBase.cst").SetProperty("UsePartialClass", UsePartialClass);
	
				this.GetTemplate("ComponentViewBase.cst").SetProperty("SourceView", SourceView);
				this.GetTemplate("ComponentViewBase.cst").SetProperty("SourceViews", templateSourceViews);
				
				this.GetTemplate("ComponentViewBase.cst").SetProperty("IncludeCustoms", IncludeCustoms);
				this.GetTemplate("ComponentViewBase.cst").SetProperty("IncludeGetList", IncludeGetList);
				this.GetTemplate("ComponentViewBase.cst").SetProperty("IncludeFind", IncludeFind);
	
				this.GetTemplate("ComponentViewBase.cst").SetProperty("ComponentPatternType", ComponentPattern);
				this.GetTemplate("ComponentViewBase.cst").SetProperty("CustomNonMatchingReturnType", CustomNonMatchingReturnType);				
				this.GetTemplate("ComponentViewBase.cst").SetProperty("ProcedurePrefix", ProcedurePrefix.Replace(" ", ""));
	
				this.RenderToFile("ComponentViewBase.cst", rootPathComponents + "\\Views\\" + GetClassName(SourceView, ClassNameFormat.PartialAbstract) + ".cs", true);
		
				AddExecutionTime(comBaseNode1);
			}
			else if (ComponentPattern == MoM.Templates.ComponentPatternType.ServiceLayer)
			{
				if (!File.Exists(rootPathComponents + "\\Views\\" + GetClassName(SourceView, ClassNameFormat.Service) + ".cs")) // || OverwritePartialClassStub)
				{
					///Components
					XmlElement coBaseNode = AddFileNode(tableNode,  GetClassName(SourceView, ClassNameFormat.Service) + ".cs");
									
					this.GetTemplate("ComponentViewService.cst").SetProperty("NameSpace", ComponentsNameSpace);
					this.GetTemplate("ComponentViewService.cst").SetProperty("BLLNameSpace", BLLNameSpace);
					this.GetTemplate("ComponentViewService.cst").SetProperty("DALNameSpace", DALNameSpace);
					this.GetTemplate("ComponentViewService.cst").SetProperty("UsePartialClass", UsePartialClass);
					
					this.GetTemplate("ComponentViewService.cst").SetProperty("SourceView", SourceView);
	
					this.GetTemplate("ComponentViewService.cst").SetProperty("ComponentPattern", ComponentPattern);
					this.GetTemplate("ComponentViewService.cst").SetProperty("CustomNonMatchingReturnType", CustomNonMatchingReturnType);				
					this.GetTemplate("ComponentViewService.cst").SetProperty("ProcedurePrefix", ProcedurePrefix.Replace(" ", ""));
		
					this.RenderToFile("ComponentViewService.cst", rootPathComponents + "\\Views\\" + GetClassName(SourceView, ClassNameFormat.Service) + ".cs", true);
				
					AddExecutionTime(coBaseNode);
				}			
							
				///Components
				XmlElement coBaseNode1 = AddFileNode(tableNode, GetClassName(SourceView, ClassNameFormat.PartialAbstractService) + ".cs");
						
				this.GetTemplate("ComponentViewServiceBase.cst").SetProperty("NameSpace", ComponentsNameSpace);
				this.GetTemplate("ComponentViewServiceBase.cst").SetProperty("BLLNameSpace", BLLNameSpace);
				this.GetTemplate("ComponentViewServiceBase.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate("ComponentViewServiceBase.cst").SetProperty("UsePartialClass", UsePartialClass);
	
				this.GetTemplate("ComponentViewServiceBase.cst").SetProperty("SourceView", SourceView);
				//this.GetTemplate("ComponentViewServiceBase.cst").SetProperty("SourceViews", templateSourceViews);
				
				this.GetTemplate("ComponentViewServiceBase.cst").SetProperty("IncludeCustoms", IncludeCustoms);
				this.GetTemplate("ComponentViewServiceBase.cst").SetProperty("IncludeGetList", IncludeGetList);
				this.GetTemplate("ComponentViewServiceBase.cst").SetProperty("IncludeFind", IncludeFind);
	
				this.GetTemplate("ComponentViewServiceBase.cst").SetProperty("ComponentPatternType", ComponentPattern);
				this.GetTemplate("ComponentViewServiceBase.cst").SetProperty("CustomNonMatchingReturnType", CustomNonMatchingReturnType);				
				this.GetTemplate("ComponentViewServiceBase.cst").SetProperty("ProcedurePrefix", ProcedurePrefix.Replace(" ", ""));
	
				this.RenderToFile("ComponentViewServiceBase.cst", rootPathComponents + "\\Views\\" + GetClassName(SourceView, ClassNameFormat.PartialAbstractService) + ".cs", true);
		
				AddExecutionTime(coBaseNode1);
			}		
			#endregion Components
	
			#region	Entity and provider nUnit Test class
			if (IncludeUnitTest != MoM.Templates.UnitTestStyle.None)
			{
				XmlElement testNode;
				//------------------------------------------------------------------------------------------------------------------------------------------
				//	generate only once
				//------------------------------------------------------------------------------------------------------------------------------------------
				if (!File.Exists(rootPathUT + "\\Views\\" + GetClassName(SourceView, ClassNameFormat.UnitTest) + ".cs"))
				{
					testNode = AddFileNode(tableNode, GetClassName(SourceView, ClassNameFormat.UnitTest) + ".cs");
					this.GetTemplate("EntityViewRepositoryTest.cst").SetProperty("SourceView", SourceView);
					this.GetTemplate("EntityViewRepositoryTest.cst").SetProperty("SourceTables", templateSourceTables);
					
					this.GetTemplate("EntityViewRepositoryTest.cst").SetProperty("NameSpace", BLLNameSpace);
					this.GetTemplate("EntityViewRepositoryTest.cst").SetProperty("DALNameSpace", DALNameSpace);
					this.GetTemplate("EntityViewRepositoryTest.cst").SetProperty("UTNameSpace", UTNameSpace);
						
					this.GetTemplate("EntityViewRepositoryTest.cst").SetProperty("IncludeGetList", IncludeGetList);
					this.GetTemplate("EntityViewRepositoryTest.cst").SetProperty("IncludeCustoms", IncludeCustoms);
					this.GetTemplate("EntityViewRepositoryTest.cst").SetProperty("CustomNonMatchingReturnType", CustomNonMatchingReturnType);				
					
					this.GetTemplate("EntityViewRepositoryTest.cst").SetProperty("IncludeUnitTest", IncludeUnitTest);
								
					this.RenderToFile("EntityViewRepositoryTest.cst", rootPathUT + "\\Views\\" + GetClassName(SourceView, ClassNameFormat.UnitTest) + ".cs", true);
					AddExecutionTime(testNode);
				}
				
								
				// generate ordered test lists for EntityrepositoryTests in Visual Studio 
				if (IncludeUnitTest == MoM.Templates.UnitTestStyle.VSTS)
				{
					// generate only once
					if (!File.Exists(rootPathUT + "\\Views\\" + GetClassName(SourceView, ClassNameFormat.UnitTest) + ".orderedtest"))
					{
						testNode = AddFileNode(tableNode, GetClassName(SourceView, ClassNameFormat.UnitTest) + ".orderedtest");
						this.GetTemplate("OrderedEntityViewRepositoryTestList.cst").SetProperty("SourceView", SourceView);
						this.GetTemplate("OrderedEntityViewRepositoryTestList.cst").SetProperty("SourceTables", templateSourceTables);
						
						this.GetTemplate("OrderedEntityViewRepositoryTestList.cst").SetProperty("RootNameSpace", RootNameSpace);
						this.GetTemplate("OrderedEntityViewRepositoryTestList.cst").SetProperty("UTNameSpace", UTNameSpace);
							
						this.GetTemplate("OrderedEntityViewRepositoryTestList.cst").SetProperty("IncludeGetList", IncludeGetList);
						this.GetTemplate("OrderedEntityViewRepositoryTestList.cst").SetProperty("IncludeFind", IncludeFind);
						this.GetTemplate("OrderedEntityViewRepositoryTestList.cst").SetProperty("IncludeCustoms", IncludeCustoms);
						this.GetTemplate("OrderedEntityViewRepositoryTestList.cst").SetProperty("CustomNonMatchingReturnType", CustomNonMatchingReturnType);				
						this.GetTemplate("OrderedEntityViewRepositoryTestList.cst").SetProperty("CustomProcedureStartsWith", CustomProcedureStartsWith);
		
						this.GetTemplate("OrderedEntityViewRepositoryTestList.cst").SetProperty("IncludeUnitTest", IncludeUnitTest);
						
						this.GetTemplate("OrderedEntityViewRepositoryTestList.cst").SetProperty("RootPathUT", rootPathUT);
						
						this.GetTemplate("OrderedEntityViewRepositoryTestList.cst").SetProperty("VisualStudioVersion", VisualStudioVersion);
		
						this.RenderToFile("OrderedEntityViewRepositoryTestList.cst", rootPathUT + "\\Views\\" + GetClassName(SourceView, ClassNameFormat.UnitTest) + ".orderedtest", true);
						AddExecutionTime(testNode);
					}					
				}
				
				//------------------------------------------------------------------------------------------------------------------------------------------
				//	generate always
				//------------------------------------------------------------------------------------------------------------------------------------------
				testNode = AddFileNode(tableNode, GetClassName(SourceView, ClassNameFormat.UnitTest) + ".generated.cs");
				this.GetTemplate("EntityViewRepositoryTest.generated.cst").SetProperty("SourceView", SourceView);
				this.GetTemplate("EntityViewRepositoryTest.generated.cst").SetProperty("SourceTables", templateSourceTables);
				
				this.GetTemplate("EntityViewRepositoryTest.generated.cst").SetProperty("NameSpace", BLLNameSpace);
				this.GetTemplate("EntityViewRepositoryTest.generated.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate("EntityViewRepositoryTest.generated.cst").SetProperty("UTNameSpace", UTNameSpace);
					
				this.GetTemplate("EntityViewRepositoryTest.generated.cst").SetProperty("IncludeGetList", IncludeGetList);
				this.GetTemplate("EntityViewRepositoryTest.generated.cst").SetProperty("IncludeFind", IncludeFind);
				this.GetTemplate("EntityViewRepositoryTest.generated.cst").SetProperty("IncludeCustoms", IncludeCustoms);
				this.GetTemplate("EntityViewRepositoryTest.generated.cst").SetProperty("CustomNonMatchingReturnType", CustomNonMatchingReturnType);				
				
				this.GetTemplate("EntityViewRepositoryTest.generated.cst").SetProperty("IncludeUnitTest", IncludeUnitTest);
							
				this.RenderToFile("EntityViewRepositoryTest.generated.cst", rootPathUT + "\\Views\\" + GetClassName(SourceView, ClassNameFormat.UnitTest) + ".generated.cs", true);
				AddExecutionTime(testNode);
			}
			
			#endregion Entity and provider nUnit Test class
			
			#region Generate Web Service
			if (GenerateWebservice)
			{
				//----------------------------------------------------------------------------------------------------------------------------------------------
				//	base provider class
				//----------------------------------------------------------------------------------------------------------------------------------------------
				XmlElement wsdalcViewBaseNode = AddFileNode(tableNode, "Ws" + GetClassName(SourceView, ClassNameFormat.ProviderBase) + ".cs");
				this.GetTemplate("WsEntityViewProviderBase.generated.cst").SetProperty("IncludeCustoms", IncludeCustoms);
				this.GetTemplate("WsEntityViewProviderBase.generated.cst").SetProperty("CustomNonMatchingReturnType", CustomNonMatchingReturnType);				
				this.GetTemplate("WsEntityViewProviderBase.generated.cst").SetProperty("IncludeGetList", IncludeGetList);
				this.GetTemplate("WsEntityViewProviderBase.generated.cst").SetProperty("IncludeGetListByIX", IncludeGetListByIX);
				this.GetTemplate("WsEntityViewProviderBase.generated.cst").SetProperty("IncludeFind", IncludeFind);
				this.GetTemplate("WsEntityViewProviderBase.generated.cst").SetProperty("SourceView", SourceView);
				this.GetTemplate("WsEntityViewProviderBase.generated.cst").SetProperty("NameSpace", BLLNameSpace);
				this.GetTemplate("WsEntityViewProviderBase.generated.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate("WsEntityViewProviderBase.generated.cst").SetProperty("SelectSuffix", SelectSuffix);
				this.GetTemplate("WsEntityViewProviderBase.generated.cst").SetProperty("SelectAllSuffix", SelectAllSuffix);
				this.GetTemplate("WsEntityViewProviderBase.generated.cst").SetProperty("FindSuffix", FindSuffix);
				
				this.GetTemplate("WsEntityViewProviderBase.generated.cst").SetProperty("WebReferenceName", "WsProxy");
				this.GetTemplate("WsEntityViewProviderBase.generated.cst").SetProperty("ProxyClassName", _webServiceClassName);
							
				this.RenderToFile("WsEntityViewProviderBase.generated.cst", rootPathDALWS + "\\Views\\Ws" + GetClassName(SourceView, ClassNameFormat.ProviderBase) + ".generated.cs", true);
				AddExecutionTime(wsdalcViewBaseNode);
				//----------------------------------------------------------------------------------------------------------------------------------------------
				
				//----------------------------------------------------------------------------------------------------------------------------------------------
				//	provider class
				//----------------------------------------------------------------------------------------------------------------------------------------------
				if (!File.Exists(rootPathDALWS + "\\Views\\Ws" + GetClassName(SourceView, ClassNameFormat.Provider) + ".cs"))
				{
					XmlElement wsDalcViewNode = AddFileNode(tableNode, "WebServiceClient\\Views\\"+ GetClassName(SourceView, ClassNameFormat.Provider) + ".cs");
					//Response.WriteLine("Building concrete SqlClient Repository class : SqlClient\\" + GetProviderName(SourceTable.Name));
					this.GetTemplate("WsEntityViewProvider.cst").SetProperty("BLLNameSpace", BLLNameSpace);
					this.GetTemplate("WsEntityViewProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
					this.GetTemplate("WsEntityViewProvider.cst").SetProperty("ClassName", GetClassName(SourceView));
					this.GetTemplate("WsEntityViewProvider.cst").SetProperty("ProviderName", "Ws" + GetClassName(SourceView, ClassNameFormat.Provider));
					this.GetTemplate("WsEntityViewProvider.cst").SetProperty("ProviderBaseName", "Ws" + GetClassName(SourceView, ClassNameFormat.ProviderBase));
									
					this.RenderToFile("WsEntityViewProvider.cst", rootPathDALWS + "\\Views\\Ws" + GetClassName(SourceView, ClassNameFormat.Provider) + ".cs", false);
					AddExecutionTime(wsDalcViewNode);
				}
			}		
			
			#endregion Generate Web Service
			
			AddExecutionTime(tableNode);
			_CurrentObjectIndex++;
		}
		
		#endregion Process the By View templates
		
		#region Process the By DataTable templates
		for (int x=0; x < templateSourceTables.Count; x++)
		{
			TableSchema SourceTable = templateSourceTables[x];
			_CurrentPhase = string.Format("Generating {0} files", SourceTable.Name);
			XmlElement tableNode = AddTableNode(SourceTable);
			
			#region Discovering Customer Procedures
			if (IncludeCustoms)
			{
				IDictionary customProcs = GetCustomProcedures(SourceTable);
				LogCustomProcedures(customProcs, SourceTable.Name, "table", customProcsNode);
			}	
			#endregion Discovering Customer Procedures
			
			#region Generate Entity layer
			if (GenerateBusinessLogicLayer)
			{
				/*
				//----------------------------------------------------------------------------------------------------------------------------------------------
				//-- Entity data struct
				//----------------------------------------------------------------------------------------------------------------------------------------------
				XmlElement structNode = AddFileNode(tableNode, GetStructName(SourceTable.Name) + ".cs");
						
				this.GetTemplate("EntityData.cst").SetProperty("SourceTable", SourceTable);
				this.GetTemplate("EntityData.cst").SetProperty("SourceTables", templateSourceTables);
				this.GetTemplate("EntityData.cst").SetProperty("NameSpace", BLLNameSpace);
				this.GetTemplate("EntityData.cst").SetProperty("IncludeRelations", IncludeRelations);
				this.GetTemplate("EntityData.cst").SetProperty("IncludeManyToMany", IncludeRelations);
				
				this.RenderToFile("EntityData.cst", rootPathBLL + "\\" + GetStructName(SourceTable.Name) + ".cs", true);
				
				AddExecutionTime(structNode);
				*/
							
				//----------------------------------------------------------------------------------------------------------------------------------------------
				//-- Entity Instance Base
				//----------------------------------------------------------------------------------------------------------------------------------------------
				XmlElement boBaseNode = AddFileNode(tableNode, GetClassName(SourceTable, ClassNameFormat.Partial) + ".cs");
						
				this.GetTemplate("EntityInstanceBase.generated.cst").SetProperty("SourceTable", SourceTable);
				this.GetTemplate("EntityInstanceBase.generated.cst").SetProperty("SourceTables", templateSourceTables);
				this.GetTemplate("EntityInstanceBase.generated.cst").SetProperty("NameSpace", BLLNameSpace);
				this.GetTemplate("EntityInstanceBase.generated.cst").SetProperty("IncludeRelations", IncludeRelations);
				this.GetTemplate("EntityInstanceBase.generated.cst").SetProperty("IncludeManyToMany", IncludeManyToMany);
				this.GetTemplate("EntityInstanceBase.generated.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);
				this.GetTemplate("EntityInstanceBase.generated.cst").SetProperty("IncludeWCFDataAttributes", IncludeWCFDataAttributes);
				this.GetTemplate("EntityInstanceBase.generated.cst").SetProperty("IncludeXmlAttributes", IncludeXmlAttributes);
				this.GetTemplate("EntityInstanceBase.generated.cst").SetProperty("EqualitySemantics", EqualitySemantics);
				this.GetTemplate("EntityInstanceBase.generated.cst").SetProperty("ValidationType", ValidationType);
                this.GetTemplate("EntityInstanceBase.generated.cst").SetProperty("EntLibVersion", EntLibVersion);
				
				this.RenderToFile("EntityInstanceBase.generated.cst", rootPathBLL + "\\" + GetClassName(SourceTable, ClassNameFormat.PartialAbstract) + ".cs", true);
				AddExecutionTime(boBaseNode);
				
				XmlElement iboBaseNode = AddFileNode(tableNode, GetClassName(SourceTable, ClassNameFormat.Interface) + ".cs");
						
				this.GetTemplate("IEntityInstance.cst").SetProperty("SourceTable", SourceTable);
				this.GetTemplate("IEntityInstance.cst").SetProperty("SourceTables", templateSourceTables);
				this.GetTemplate("IEntityInstance.cst").SetProperty("NameSpace", BLLNameSpace);
				this.GetTemplate("IEntityInstance.cst").SetProperty("IncludeRelations", IncludeRelations);
				this.GetTemplate("IEntityInstance.cst").SetProperty("IncludeManyToMany", IncludeManyToMany);
				this.GetTemplate("IEntityInstance.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);
				this.GetTemplate("IEntityInstance.cst").SetProperty("IncludeWCFDataAttributes", IncludeWCFDataAttributes);
				this.GetTemplate("IEntityInstance.cst").SetProperty("IncludeXmlAttributes", IncludeXmlAttributes);
				
				this.RenderToFile("IEntityInstance.cst", rootPathBLL + "\\" + GetClassName(SourceTable, ClassNameFormat.Interface) + ".cs", true);
				AddExecutionTime(iboBaseNode);
	
				//----------------------------------------------------------------------------------------------------------------------------------------------
				//-- Entity file - generated only once
				//----------------------------------------------------------------------------------------------------------------------------------------------
				if (!File.Exists(rootPathBLL + "\\" + GetClassName(SourceTable) + ".cs")) // || OverwritePartialClassStub)
				{
					XmlElement boNode = AddFileNode(tableNode, GetClassName(SourceTable) + ".cs");
									
					this.GetTemplate("EntityInstance.cst").SetProperty("SourceTable", SourceTable);
					this.GetTemplate("EntityInstance.cst").SetProperty("NameSpace", BLLNameSpace);
					
					this.RenderToFile("EntityInstance.cst", rootPathBLL + "\\" + GetClassName(SourceTable) + ".cs", false);
					AddExecutionTime(boNode);
				}
	
				//----------------------------------------------------------------------------------------------------------------------------------------------
				//-- Business Object Enum
				//----------------------------------------------------------------------------------------------------------------------------------------------
				if (templateEnumTables.Contains(SourceTable.Owner, SourceTable.Name))
				{
					//Trace.WriteLine("Generating Enum for Table " + SourceTable.Name);					
					XmlElement boNode = AddFileNode(tableNode, GetClassName(SourceTable, ClassNameFormat.Enum) + ".cs");
									
					this.GetTemplate("Enum.cst").SetProperty("SourceTable", SourceTable);
					this.GetTemplate("Enum.cst").SetProperty("NameSpace", BLLNameSpace);

					//Trace.WriteLine("Enum ClassName " + SourceTable.Name + " " + GetClassName(SourceTable, ClassNameFormat.Enum) );
					this.RenderToFile("Enum.cst", rootPathBLL + "\\" + GetClassName(SourceTable, ClassNameFormat.Enum) + ".cs", true);
					AddExecutionTime(boNode);
				}
				
				#region Components
				if (ComponentPattern == MoM.Templates.ComponentPatternType.DomainModel)
				{
					
					
					if (!File.Exists(rootPathComponents + "\\" + GetClassName(SourceTable) + ".cs")) // || OverwritePartialClassStub)
					{
						XmlElement coBaseNode = AddFileNode(tableNode,  GetClassName(SourceTable) + ".cs");
						
						this.GetTemplate("Component.cst").SetProperty("SourceTable", SourceTable);
						this.GetTemplate("Component.cst").SetProperty("SourceTables", templateSourceTables);
						this.GetTemplate("Component.cst").SetProperty("NameSpace", ComponentsNameSpace);
						this.GetTemplate("Component.cst").SetProperty("BLLNameSpace", BLLNameSpace);
						this.GetTemplate("Component.cst").SetProperty("DALNameSpace", DALNameSpace);
						this.GetTemplate("Component.cst").SetProperty("IncludeRelations", IncludeRelations);
						this.GetTemplate("Component.cst").SetProperty("IncludeManyToMany", IncludeManyToMany);
						this.GetTemplate("Component.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);
						this.GetTemplate("Component.cst").SetProperty("ComponentPattern", ComponentPattern);
						this.GetTemplate("Component.cst").SetProperty("IncludeCustoms", IncludeCustoms);
						this.GetTemplate("Component.cst").SetProperty("CustomNonMatchingReturnType", CustomNonMatchingReturnType);				
						this.GetTemplate("Component.cst").SetProperty("ProcedurePrefix", ProcedurePrefix.Replace(" ", ""));
			
						this.RenderToFile("Component.cst", rootPathComponents + "\\" + GetClassName(SourceTable) + ".cs", true);
						AddExecutionTime(coBaseNode);
					}
		
					///Components
					XmlElement coBaseNode2 = AddFileNode(tableNode, GetClassName(SourceTable, ClassNameFormat.PartialAbstract) + ".cs");
					
					this.GetTemplate("ComponentBase.cst").SetProperty("SourceTable", SourceTable);
					this.GetTemplate("ComponentBase.cst").SetProperty("SourceTables", templateSourceTables);
					this.GetTemplate("ComponentBase.cst").SetProperty("NameSpace", ComponentsNameSpace);
					this.GetTemplate("ComponentBase.cst").SetProperty("BLLNameSpace", BLLNameSpace);
					this.GetTemplate("ComponentBase.cst").SetProperty("DALNameSpace", DALNameSpace);
					this.GetTemplate("ComponentBase.cst").SetProperty("IncludeRelations", IncludeRelations);
					this.GetTemplate("ComponentBase.cst").SetProperty("IncludeManyToMany", IncludeManyToMany);
					this.GetTemplate("ComponentBase.cst").SetProperty("IncludeDelete", IncludeDelete);
					this.GetTemplate("ComponentBase.cst").SetProperty("IncludeInsert", IncludeInsert);
					this.GetTemplate("ComponentBase.cst").SetProperty("IncludeSave", IncludeSave);
					this.GetTemplate("ComponentBase.cst").SetProperty("IncludeUpdate", IncludeUpdate);				
					this.GetTemplate("ComponentBase.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);
					this.GetTemplate("ComponentBase.cst").SetProperty("ComponentPattern", ComponentPattern);
					this.GetTemplate("ComponentBase.cst").SetProperty("IncludeCustoms", IncludeCustoms);
					this.GetTemplate("ComponentBase.cst").SetProperty("CustomNonMatchingReturnType", CustomNonMatchingReturnType);				
					this.GetTemplate("ComponentBase.cst").SetProperty("ProcedurePrefix", ProcedurePrefix.Replace(" ", ""));
		
					this.RenderToFile("ComponentBase.cst", rootPathComponents + "\\" + GetClassName(SourceTable, ClassNameFormat.PartialAbstract) + ".cs", true);
		
					AddExecutionTime(coBaseNode2);
				}
				else if (ComponentPattern == MoM.Templates.ComponentPatternType.ServiceLayer)
				{
					if (!File.Exists(rootPathComponents + "\\" + GetClassName(SourceTable, ClassNameFormat.Service) + ".cs")) // || OverwritePartialClassStub)
					{
						///Components
						XmlElement coBaseNode = AddFileNode(tableNode,  GetClassName(SourceTable, ClassNameFormat.Service) + ".cs");
						
						this.GetTemplate("ComponentService.cst").SetProperty("SourceTable", SourceTable);
						this.GetTemplate("ComponentService.cst").SetProperty("SourceTables", templateSourceTables);
						this.GetTemplate("ComponentService.cst").SetProperty("NameSpace", ComponentsNameSpace);
						this.GetTemplate("ComponentService.cst").SetProperty("BLLNameSpace", BLLNameSpace);
						this.GetTemplate("ComponentService.cst").SetProperty("DALNameSpace", DALNameSpace);
						this.GetTemplate("ComponentService.cst").SetProperty("IncludeRelations", IncludeRelations);
						this.GetTemplate("ComponentService.cst").SetProperty("IncludeManyToMany", IncludeManyToMany);
						this.GetTemplate("ComponentService.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);
						this.GetTemplate("ComponentService.cst").SetProperty("ComponentPattern", ComponentPattern);
						this.GetTemplate("ComponentService.cst").SetProperty("IncludeCustoms", IncludeCustoms);
						this.GetTemplate("ComponentService.cst").SetProperty("CustomNonMatchingReturnType", CustomNonMatchingReturnType);				
						this.GetTemplate("ComponentService.cst").SetProperty("ProcedurePrefix", ProcedurePrefix.Replace(" ", ""));
			
						this.RenderToFile("ComponentService.cst", rootPathComponents + "\\" + GetClassName(SourceTable, ClassNameFormat.Service) + ".cs", true);
					
						AddExecutionTime(coBaseNode);
					}
					
					///Components
					XmlElement coBaseNode2 = AddFileNode(tableNode, GetClassName(SourceTable, ClassNameFormat.PartialAbstractService) + ".cs");
							
					this.GetTemplate("ComponentServiceBase.cst").SetProperty("SourceTable", SourceTable);
					this.GetTemplate("ComponentServiceBase.cst").SetProperty("SourceTables", templateSourceTables);
					this.GetTemplate("ComponentServiceBase.cst").SetProperty("NameSpace", ComponentsNameSpace);
					this.GetTemplate("ComponentServiceBase.cst").SetProperty("BLLNameSpace", BLLNameSpace);
					this.GetTemplate("ComponentServiceBase.cst").SetProperty("DALNameSpace", DALNameSpace);
					this.GetTemplate("ComponentServiceBase.cst").SetProperty("IncludeRelations", IncludeRelations);
					this.GetTemplate("ComponentServiceBase.cst").SetProperty("IncludeDelete", IncludeDelete);
					this.GetTemplate("ComponentServiceBase.cst").SetProperty("IncludeInsert", IncludeInsert);
					this.GetTemplate("ComponentServiceBase.cst").SetProperty("IncludeSave", IncludeSave);
					this.GetTemplate("ComponentServiceBase.cst").SetProperty("IncludeUpdate", IncludeUpdate);
					this.GetTemplate("ComponentServiceBase.cst").SetProperty("IncludeManyToMany", IncludeManyToMany);
					this.GetTemplate("ComponentServiceBase.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);
					this.GetTemplate("ComponentServiceBase.cst").SetProperty("ComponentPattern", ComponentPattern);
					this.GetTemplate("ComponentServiceBase.cst").SetProperty("IncludeCustoms", IncludeCustoms);
					this.GetTemplate("ComponentServiceBase.cst").SetProperty("CustomNonMatchingReturnType", CustomNonMatchingReturnType);				
					this.GetTemplate("ComponentServiceBase.cst").SetProperty("ProcedurePrefix", ProcedurePrefix.Replace(" ", ""));
		
					this.RenderToFile("ComponentServiceBase.cst", rootPathComponents + "\\" + GetClassName(SourceTable, ClassNameFormat.PartialAbstractService) + ".cs", true);
		
					AddExecutionTime(coBaseNode2);
				}
				
				#endregion Components
			}
			#endregion Generate Entity layer
			
			#region Generate DAL
			if (GenerateDataAccessLayer)
			{
				//----------------------------------------------------------------------------------------------------------------------------------------------
				//	Generating the entity Repository decorator		
				//----------------------------------------------------------------------------------------------------------------------------------------------
				XmlElement dalcFactoryCoreNode = AddFileNode(tableNode, GetClassName(SourceTable, ClassNameFormat.PartialProviderBase) + "Core.cs");
				
				this.GetTemplate("EntityProviderBaseCore.generated.cst").SetProperty("SourceTable", SourceTable);
				this.GetTemplate("EntityProviderBaseCore.generated.cst").SetProperty("SourceTables", templateSourceTables);
				
				this.GetTemplate("EntityProviderBaseCore.generated.cst").SetProperty("IncludeCustoms", IncludeCustoms);
				this.GetTemplate("EntityProviderBaseCore.generated.cst").SetProperty("CustomNonMatchingReturnType", CustomNonMatchingReturnType);				
				this.GetTemplate("EntityProviderBaseCore.generated.cst").SetProperty("ProcedurePrefix", ProcedurePrefix.Replace(" ", ""));
	
				this.GetTemplate("EntityProviderBaseCore.generated.cst").SetProperty("IncludeInsert", IncludeInsert);
				this.GetTemplate("EntityProviderBaseCore.generated.cst").SetProperty("IncludeUpdate", IncludeUpdate);
				this.GetTemplate("EntityProviderBaseCore.generated.cst").SetProperty("IncludeSave", IncludeSave);
				this.GetTemplate("EntityProviderBaseCore.generated.cst").SetProperty("IncludeDelete", IncludeDelete);
				this.GetTemplate("EntityProviderBaseCore.generated.cst").SetProperty("IncludeManyToMany", IncludeManyToMany);
				this.GetTemplate("EntityProviderBaseCore.generated.cst").SetProperty("IncludeGetList", IncludeGetList);
				this.GetTemplate("EntityProviderBaseCore.generated.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);
				this.GetTemplate("EntityProviderBaseCore.generated.cst").SetProperty("IncludeGetListByIX", IncludeGetListByIX);
				this.GetTemplate("EntityProviderBaseCore.generated.cst").SetProperty("IncludeFind", IncludeFind);
				this.GetTemplate("EntityProviderBaseCore.generated.cst").SetProperty("IncludeRelations", IncludeRelations);
				
				this.GetTemplate("EntityProviderBaseCore.generated.cst").SetProperty("NameSpace", BLLNameSpace);
				this.GetTemplate("EntityProviderBaseCore.generated.cst").SetProperty("DALNameSpace", DALNameSpace);
								
				this.RenderToFile("EntityProviderBaseCore.generated.cst", rootPathDAL + "\\Bases\\" + GetClassName(SourceTable, ClassNameFormat.PartialProviderBase) + "Core.cs", true);
				AddExecutionTime(dalcFactoryCoreNode);
				
				//----------------------------------------------------------------------------------------------------------------------------------------------
				//	Generating the entity Provider		
				//----------------------------------------------------------------------------------------------------------------------------------------------
				if (!File.Exists(rootPathDAL + "\\Bases\\" + GetClassName(SourceTable, ClassNameFormat.ProviderBase) + ".cs"))
				{
					XmlElement dalcFactoryNode = AddFileNode(tableNode, GetClassName(SourceTable, ClassNameFormat.PartialProviderBase) + ".cs");
					
					this.GetTemplate("EntityProviderBase.cst").SetProperty("SourceTable", SourceTable);
					
					this.GetTemplate("EntityProviderBase.cst").SetProperty("NameSpace", BLLNameSpace);
					this.GetTemplate("EntityProviderBase.cst").SetProperty("DALNameSpace", DALNameSpace);
					
					this.RenderToFile("EntityProviderBase.cst", rootPathDAL + "\\Bases\\" + GetClassName(SourceTable, ClassNameFormat.ProviderBase) + ".cs", true);
					
					AddExecutionTime(dalcFactoryNode);
				}
				//----------------------------------------------------------------------------------------------------------------------------------------------
	
				if (_netTiersSqlProvider == true)
				{
					#region Sql client dal files
				
					//----------------------------------------------------------------------------------------------------------------------------------------------
					//	Generating the abstract SqlClient entity Repository class		
					//----------------------------------------------------------------------------------------------------------------------------------------------
					XmlElement sqlDalcBaseNode = AddFileNode(tableNode, "SqlClient\\Sql"+ GetClassName(SourceTable, ClassNameFormat.PartialProviderBase) + ".cs");
					
					//Response.WriteLine("Building abstract SqlClient Repository class : SqlClient\\" + GetAbstractRepositoryClassName(SourceTable.Name) );
					this.GetTemplate("SqlEntityProviderBase.generated.cst").SetProperty("IncludeCustoms", IncludeCustoms);				
					this.GetTemplate("SqlEntityProviderBase.generated.cst").SetProperty("CustomNonMatchingReturnType", CustomNonMatchingReturnType);				
					
					this.GetTemplate("SqlEntityProviderBase.generated.cst").SetProperty("InsertSuffix", InsertSuffix);
					this.GetTemplate("SqlEntityProviderBase.generated.cst").SetProperty("UpdateSuffix", UpdateSuffix);
					this.GetTemplate("SqlEntityProviderBase.generated.cst").SetProperty("DeleteSuffix", DeleteSuffix);
					this.GetTemplate("SqlEntityProviderBase.generated.cst").SetProperty("SelectSuffix", SelectSuffix);
					this.GetTemplate("SqlEntityProviderBase.generated.cst").SetProperty("SelectAllSuffix", SelectAllSuffix);
					this.GetTemplate("SqlEntityProviderBase.generated.cst").SetProperty("FindSuffix", FindSuffix);
					this.GetTemplate("SqlEntityProviderBase.generated.cst").SetProperty("ProcedurePrefix", ProcedurePrefix.Replace(" ", ""));
					this.GetTemplate("SqlEntityProviderBase.generated.cst").SetProperty("UseTimestampConcurrency", UseTimestampConcurrency);
					
					this.GetTemplate("SqlEntityProviderBase.generated.cst").SetProperty("IncludeInsert", IncludeInsert);
					this.GetTemplate("SqlEntityProviderBase.generated.cst").SetProperty("IncludeUpdate", IncludeUpdate);
					this.GetTemplate("SqlEntityProviderBase.generated.cst").SetProperty("IncludeSave", IncludeSave);
					this.GetTemplate("SqlEntityProviderBase.generated.cst").SetProperty("IncludeDelete", IncludeDelete);
					this.GetTemplate("SqlEntityProviderBase.generated.cst").SetProperty("IncludeManyToMany", IncludeManyToMany);
					this.GetTemplate("SqlEntityProviderBase.generated.cst").SetProperty("IncludeGetList", IncludeGetList);
					this.GetTemplate("SqlEntityProviderBase.generated.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);
					this.GetTemplate("SqlEntityProviderBase.generated.cst").SetProperty("IncludeGetListByIX", IncludeGetListByIX);
					this.GetTemplate("SqlEntityProviderBase.generated.cst").SetProperty("IncludeFind", IncludeFind);
					this.GetTemplate("SqlEntityProviderBase.generated.cst").SetProperty("IncludeDatabaseFeatures", IncludeDatabaseFeatures);
					
					this.GetTemplate("SqlEntityProviderBase.generated.cst").SetProperty("SourceTable", SourceTable);
					this.GetTemplate("SqlEntityProviderBase.generated.cst").SetProperty("SourceTables", templateSourceTables);
					this.GetTemplate("SqlEntityProviderBase.generated.cst").SetProperty("NameSpace", BLLNameSpace);
					this.GetTemplate("SqlEntityProviderBase.generated.cst").SetProperty("DALNameSpace", DALNameSpace);
                    this.GetTemplate("SqlEntityProviderBase.generated.cst").SetProperty("EntLibVersion", EntLibVersion);
                    
					this.RenderToFile("SqlEntityProviderBase.generated.cst", rootPathDALSql + "\\Sql" + GetClassName(SourceTable, ClassNameFormat.PartialProviderBase) + ".cs", true);
					AddExecutionTime(sqlDalcBaseNode);
					
					//----------------------------------------------------------------------------------------------------------------------------------------------
					//	Generating the SqlClient Repository Implementation, only if not already there
					//----------------------------------------------------------------------------------------------------------------------------------------------
					if (!File.Exists(rootPathDALSql+ "\\Sql" + GetClassName(SourceTable, ClassNameFormat.Provider) + ".cs"))
					{
						XmlElement sqlDalcNode = AddFileNode(tableNode, "SqlClient\\"+ GetClassName(SourceTable, ClassNameFormat.UnitTest) + ".cs");
						//Response.WriteLine("Building concrete SqlClient Repository class : SqlClient\\" + GetRepositoryClassName(SourceTable.Name));
						this.GetTemplate("SqlEntityProvider.cst").SetProperty("NameSpace", BLLNameSpace);
						this.GetTemplate("SqlEntityProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
						this.GetTemplate("SqlEntityProvider.cst").SetProperty("ClassName", GetClassName(SourceTable));
						this.GetTemplate("SqlEntityProvider.cst").SetProperty("ProviderName", "Sql" + GetClassName(SourceTable, ClassNameFormat.Provider));
						this.GetTemplate("SqlEntityProvider.cst").SetProperty("ProviderBaseName", "Sql" + GetClassName(SourceTable, ClassNameFormat.ProviderBase));
						
						this.RenderToFile("SqlEntityProvider.cst", rootPathDALSql + "\\Sql" + GetClassName(SourceTable, ClassNameFormat.Provider) + ".cs", false);
						AddExecutionTime(sqlDalcNode);
					}
					#endregion
				}
				else if(ProviderInvariantName == "System.Data.OracleClient")
				{
					#region Oracle client dal files
					
					//----------------------------------------------------------------------------------------------------------------------------------------------
					//	Generating the abstract SqlClient entity Repository class		
					//----------------------------------------------------------------------------------------------------------------------------------------------
					XmlElement oracleDalBaseNode = AddFileNode(tableNode, "OracleClient\\Oracle"+ GetClassName(SourceTable, ClassNameFormat.PartialProviderBase) + ".cs");
					
					//Response.WriteLine("Building abstract OracleClient Repository class : OracleClient\\" + GetAbstractRepositoryClassName(SourceTable.Name) );
					this.GetTemplate("OracleEntityProviderBase.generated.cst").SetProperty("IncludeCustoms", IncludeCustoms);				
					this.GetTemplate("OracleEntityProviderBase.generated.cst").SetProperty("CustomNonMatchingReturnType", CustomNonMatchingReturnType);				
					this.GetTemplate("OracleEntityProviderBase.generated.cst").SetProperty("CustomProcedureStartsWith", CustomProcedureStartsWith);			
					
					this.GetTemplate("OracleEntityProviderBase.generated.cst").SetProperty("InsertSuffix", InsertSuffix);
					this.GetTemplate("OracleEntityProviderBase.generated.cst").SetProperty("UpdateSuffix", UpdateSuffix);
					this.GetTemplate("OracleEntityProviderBase.generated.cst").SetProperty("DeleteSuffix", DeleteSuffix);
					this.GetTemplate("OracleEntityProviderBase.generated.cst").SetProperty("SelectSuffix", SelectSuffix);
					this.GetTemplate("OracleEntityProviderBase.generated.cst").SetProperty("SelectAllSuffix", SelectAllSuffix);
					this.GetTemplate("OracleEntityProviderBase.generated.cst").SetProperty("FindSuffix", FindSuffix);
					this.GetTemplate("OracleEntityProviderBase.generated.cst").SetProperty("ProcedurePrefix", ProcedurePrefix.Replace(" ", ""));
					
					this.GetTemplate("OracleEntityProviderBase.generated.cst").SetProperty("IncludeInsert", IncludeInsert);
					this.GetTemplate("OracleEntityProviderBase.generated.cst").SetProperty("IncludeUpdate", IncludeUpdate);
					this.GetTemplate("OracleEntityProviderBase.generated.cst").SetProperty("IncludeSave", IncludeSave);
					this.GetTemplate("OracleEntityProviderBase.generated.cst").SetProperty("IncludeDelete", IncludeDelete);
					this.GetTemplate("OracleEntityProviderBase.generated.cst").SetProperty("IncludeManyToMany", IncludeManyToMany);
					this.GetTemplate("OracleEntityProviderBase.generated.cst").SetProperty("IncludeGetList", IncludeGetList);
					this.GetTemplate("OracleEntityProviderBase.generated.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);
					this.GetTemplate("OracleEntityProviderBase.generated.cst").SetProperty("IncludeGetListByIX", IncludeGetListByIX);
					this.GetTemplate("OracleEntityProviderBase.generated.cst").SetProperty("IncludeFind", IncludeFind);
					this.GetTemplate("OracleEntityProviderBase.generated.cst").SetProperty("IncludeDatabaseFeatures", IncludeDatabaseFeatures);
					
					this.GetTemplate("OracleEntityProviderBase.generated.cst").SetProperty("SourceTable", SourceTable);
					this.GetTemplate("OracleEntityProviderBase.generated.cst").SetProperty("SourceTables", templateSourceTables);
					this.GetTemplate("OracleEntityProviderBase.generated.cst").SetProperty("NameSpace", BLLNameSpace);
					this.GetTemplate("OracleEntityProviderBase.generated.cst").SetProperty("DALNameSpace", DALNameSpace);
                    this.GetTemplate("OracleEntityProviderBase.generated.cst").SetProperty("EntLibVersion", EntLibVersion);
                    
					this.RenderToFile("OracleEntityProviderBase.generated.cst", rootPathDALOracle + "\\Oracle" + GetClassName(SourceTable, ClassNameFormat.PartialProviderBase) + ".cs", true);
					AddExecutionTime(oracleDalBaseNode);
				
					//----------------------------------------------------------------------------------------------------------------------------------------------
					//	Generating the SqlClient Repository Implementation, only if not already there
					//----------------------------------------------------------------------------------------------------------------------------------------------
					if (!File.Exists(rootPathDALOracle+ "\\Oracle" + GetClassName(SourceTable, ClassNameFormat.Provider) + ".cs"))
					{
						XmlElement OracleDalNode2 = AddFileNode(tableNode, "OracleClient\\"+ GetClassName(SourceTable, ClassNameFormat.Repository) + ".cs");
						//Response.WriteLine("Building concrete SqlClient Repository class : SqlClient\\" + GetRepositoryClassName(SourceTable.Name));
						this.GetTemplate("OracleEntityProvider.cst").SetProperty("NameSpace", BLLNameSpace);
						this.GetTemplate("OracleEntityProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
						this.GetTemplate("OracleEntityProvider.cst").SetProperty("ClassName", GetClassName(SourceTable));
						this.GetTemplate("OracleEntityProvider.cst").SetProperty("ProviderName", "Oracle" + GetClassName(SourceTable, ClassNameFormat.Provider));
						this.GetTemplate("OracleEntityProvider.cst").SetProperty("ProviderBaseName", "Oracle" + GetClassName(SourceTable, ClassNameFormat.ProviderBase));
						
						this.RenderToFile("OracleEntityProvider.cst", rootPathDALOracle + "\\Oracle" + GetClassName(SourceTable, ClassNameFormat.Provider) + ".cs", false);
						AddExecutionTime(OracleDalNode2);
					}
					
					#endregion
				}
				else if(ProviderInvariantName == "System.Data.SqlServerCe.3.5")
				{
					#region SqlServerCe client dal files
					
					//----------------------------------------------------------------------------------------------------------------------------------------------
					//	Generating the abstract SqlClient entity Repository class		
					//----------------------------------------------------------------------------------------------------------------------------------------------
					XmlElement sqlceDalBaseNode = AddFileNode(tableNode, "SqlCeClient\\SqlCe"+ GetClassName(SourceTable, ClassNameFormat.PartialProviderBase) + ".cs");
					
					this.GetTemplate("SqlCeEntityProviderBase.generated.cst").SetProperty("IncludeCustoms", IncludeCustoms);				
					this.GetTemplate("SqlCeEntityProviderBase.generated.cst").SetProperty("CustomNonMatchingReturnType", CustomNonMatchingReturnType);				
					this.GetTemplate("SqlCeEntityProviderBase.generated.cst").SetProperty("CustomProcedureStartsWith", CustomProcedureStartsWith);

					
					this.GetTemplate("SqlCeEntityProviderBase.generated.cst").SetProperty("InsertSuffix", InsertSuffix);
					this.GetTemplate("SqlCeEntityProviderBase.generated.cst").SetProperty("UpdateSuffix", UpdateSuffix);
					this.GetTemplate("SqlCeEntityProviderBase.generated.cst").SetProperty("DeleteSuffix", DeleteSuffix);
					this.GetTemplate("SqlCeEntityProviderBase.generated.cst").SetProperty("SelectSuffix", SelectSuffix);
					this.GetTemplate("SqlCeEntityProviderBase.generated.cst").SetProperty("SelectAllSuffix", SelectAllSuffix);
					this.GetTemplate("SqlCeEntityProviderBase.generated.cst").SetProperty("FindSuffix", FindSuffix);
					this.GetTemplate("SqlCeEntityProviderBase.generated.cst").SetProperty("ProcedurePrefix", ProcedurePrefix.Replace(" ", ""));
					this.GetTemplate("SqlEntityProviderBase.generated.cst").SetProperty("UseTimestampConcurrency", UseTimestampConcurrency);
					
					this.GetTemplate("SqlCeEntityProviderBase.generated.cst").SetProperty("IncludeInsert", IncludeInsert);
					this.GetTemplate("SqlCeEntityProviderBase.generated.cst").SetProperty("IncludeUpdate", IncludeUpdate);
					this.GetTemplate("SqlCeEntityProviderBase.generated.cst").SetProperty("IncludeSave", IncludeSave);
					this.GetTemplate("SqlCeEntityProviderBase.generated.cst").SetProperty("IncludeDelete", IncludeDelete);
					this.GetTemplate("SqlCeEntityProviderBase.generated.cst").SetProperty("IncludeManyToMany", IncludeManyToMany);
					this.GetTemplate("SqlCeEntityProviderBase.generated.cst").SetProperty("IncludeGetList", IncludeGetList);
					this.GetTemplate("SqlCeEntityProviderBase.generated.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);
					this.GetTemplate("SqlCeEntityProviderBase.generated.cst").SetProperty("IncludeGetListByIX", IncludeGetListByIX);
					this.GetTemplate("SqlCeEntityProviderBase.generated.cst").SetProperty("IncludeFind", IncludeFind);
					this.GetTemplate("SqlCeEntityProviderBase.generated.cst").SetProperty("IncludeDatabaseFeatures", IncludeDatabaseFeatures);
					
					this.GetTemplate("SqlCeEntityProviderBase.generated.cst").SetProperty("SourceTable", SourceTable);
					this.GetTemplate("SqlCeEntityProviderBase.generated.cst").SetProperty("SourceTables", templateSourceTables);
					this.GetTemplate("SqlCeEntityProviderBase.generated.cst").SetProperty("NameSpace", BLLNameSpace);
					this.GetTemplate("SqlCeEntityProviderBase.generated.cst").SetProperty("DALNameSpace", DALNameSpace);
                    this.GetTemplate("SqlCeEntityProviderBase.generated.cst").SetProperty("EntLibVersion", EntLibVersion);
                    
					this.RenderToFile("SqlCeEntityProviderBase.generated.cst", rootPathDALSqlCe + "\\SqlCe" + GetClassName(SourceTable, ClassNameFormat.PartialProviderBase) + ".cs", true);
					AddExecutionTime(sqlceDalBaseNode);
				
					//----------------------------------------------------------------------------------------------------------------------------------------------
					//	Generating the SqlClient Repository Implementation, only if not already there
					//----------------------------------------------------------------------------------------------------------------------------------------------
					if (!File.Exists(rootPathDALSqlCe+ "\\SqlCe" + GetClassName(SourceTable, ClassNameFormat.Provider) + ".cs"))
					{
						XmlElement SqlCeDalNode2 = AddFileNode(tableNode, "SqlCeClient\\"+ GetClassName(SourceTable, ClassNameFormat.Repository) + ".cs");
						//Response.WriteLine("Building concrete SqlClient Repository class : SqlClient\\" + GetRepositoryClassName(SourceTable.Name));
						this.GetTemplate("SqlCeEntityProvider.cst").SetProperty("NameSpace", BLLNameSpace);
						this.GetTemplate("SqlCeEntityProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
						this.GetTemplate("SqlCeEntityProvider.cst").SetProperty("ClassName", GetClassName(SourceTable));
						this.GetTemplate("SqlCeEntityProvider.cst").SetProperty("ProviderName", "SqlCe" + GetClassName(SourceTable, ClassNameFormat.Provider));
						this.GetTemplate("SqlCeEntityProvider.cst").SetProperty("ProviderBaseName", "SqlCe" + GetClassName(SourceTable, ClassNameFormat.ProviderBase));
						
						this.RenderToFile("SqlCeEntityProvider.cst", rootPathDALSqlCe + "\\SqlCe" + GetClassName(SourceTable, ClassNameFormat.Provider) + ".cs", false);
						AddExecutionTime(SqlCeDalNode2);
					}
					
					#endregion
				}
				else
				{
					#region Generic client dal files
					
					//----------------------------------------------------------------------------------------------------------------------------------------------
					//	Generating the abstract SqlClient entity Repository class		
					//----------------------------------------------------------------------------------------------------------------------------------------------
					XmlElement genericDalcBaseNode = AddFileNode(tableNode, "GenericClient\\Generic"+ GetClassName(SourceTable, ClassNameFormat.PartialProviderBase) + ".cs");
					
					//Response.WriteLine("Building abstract GenericClient Repository class : GenericClient\\" + GetAbstractRepositoryClassName(SourceTable.Name) );
					this.GetTemplate("GenericEntityProviderBase.generated.cst").SetProperty("IncludeCustoms", IncludeCustoms);				
					this.GetTemplate("GenericEntityProviderBase.generated.cst").SetProperty("CustomNonMatchingReturnType", CustomNonMatchingReturnType);				
					this.GetTemplate("GenericEntityProviderBase.generated.cst").SetProperty("CustomProcedureStartsWith", CustomProcedureStartsWith);			
					
					this.GetTemplate("GenericEntityProviderBase.generated.cst").SetProperty("InsertSuffix", InsertSuffix);
					this.GetTemplate("GenericEntityProviderBase.generated.cst").SetProperty("UpdateSuffix", UpdateSuffix);
					this.GetTemplate("GenericEntityProviderBase.generated.cst").SetProperty("DeleteSuffix", DeleteSuffix);
					this.GetTemplate("GenericEntityProviderBase.generated.cst").SetProperty("SelectSuffix", SelectSuffix);
					this.GetTemplate("GenericEntityProviderBase.generated.cst").SetProperty("SelectAllSuffix", SelectAllSuffix);
					this.GetTemplate("GenericEntityProviderBase.generated.cst").SetProperty("FindSuffix", FindSuffix);
					this.GetTemplate("GenericEntityProviderBase.generated.cst").SetProperty("ProcedurePrefix", ProcedurePrefix.Replace(" ", ""));
					
					this.GetTemplate("GenericEntityProviderBase.generated.cst").SetProperty("IncludeInsert", IncludeInsert);
					this.GetTemplate("GenericEntityProviderBase.generated.cst").SetProperty("IncludeUpdate", IncludeUpdate);
					this.GetTemplate("GenericEntityProviderBase.generated.cst").SetProperty("IncludeSave", IncludeSave);
					this.GetTemplate("GenericEntityProviderBase.generated.cst").SetProperty("IncludeDelete", IncludeDelete);
					this.GetTemplate("GenericEntityProviderBase.generated.cst").SetProperty("IncludeManyToMany", IncludeManyToMany);
					this.GetTemplate("GenericEntityProviderBase.generated.cst").SetProperty("IncludeGetList", IncludeGetList);
					this.GetTemplate("GenericEntityProviderBase.generated.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);
					this.GetTemplate("GenericEntityProviderBase.generated.cst").SetProperty("IncludeGetListByIX", IncludeGetListByIX);
					this.GetTemplate("GenericEntityProviderBase.generated.cst").SetProperty("IncludeFind", IncludeFind);
					this.GetTemplate("GenericEntityProviderBase.generated.cst").SetProperty("IncludeDatabaseFeatures", IncludeDatabaseFeatures);
					
					this.GetTemplate("GenericEntityProviderBase.generated.cst").SetProperty("SourceTable", SourceTable);
					this.GetTemplate("GenericEntityProviderBase.generated.cst").SetProperty("SourceTables", templateSourceTables);
					this.GetTemplate("GenericEntityProviderBase.generated.cst").SetProperty("NameSpace", BLLNameSpace);
					this.GetTemplate("GenericEntityProviderBase.generated.cst").SetProperty("DALNameSpace", DALNameSpace);
                    this.GetTemplate("GenericEntityProviderBase.generated.cst").SetProperty("EntLibVersion", EntLibVersion);
														
					this.RenderToFile("GenericEntityProviderBase.generated.cst", rootPathDALGeneric + "\\Generic" + GetClassName(SourceTable, ClassNameFormat.PartialProviderBase) + ".cs", true);
					AddExecutionTime(genericDalcBaseNode);
					
					//----------------------------------------------------------------------------------------------------------------------------------------------
					//	Generating the SqlClient Repository Implementation, only if not already there
					//----------------------------------------------------------------------------------------------------------------------------------------------
					if (!File.Exists(rootPathDALGeneric+ "\\Generic" + GetClassName(SourceTable, ClassNameFormat.Provider) + ".cs"))
					{
						XmlElement genericDalcNode = AddFileNode(tableNode, "GenericClient\\"+ GetClassName(SourceTable, ClassNameFormat.Repository) + ".cs");
						//Response.WriteLine("Building concrete SqlClient Repository class : SqlClient\\" + GetRepositoryClassName(SourceTable.Name));
						this.GetTemplate("GenericEntityProvider.cst").SetProperty("NameSpace", BLLNameSpace);
						this.GetTemplate("GenericEntityProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
						this.GetTemplate("GenericEntityProvider.cst").SetProperty("ClassName", GetClassName(SourceTable));
						this.GetTemplate("GenericEntityProvider.cst").SetProperty("ProviderName", "Generic" + GetClassName(SourceTable, ClassNameFormat.Provider));
						this.GetTemplate("GenericEntityProvider.cst").SetProperty("ProviderBaseName", "Generic" + GetClassName(SourceTable, ClassNameFormat.ProviderBase));
						
						this.RenderToFile("GenericEntityProvider.cst", rootPathDALGeneric + "\\Generic" + GetClassName(SourceTable, ClassNameFormat.Provider) + ".cs", false);
						AddExecutionTime(genericDalcNode);
					}
					#endregion
				}
				
				
				#region Generate the Repository nUnit Test class
				if ((IncludeUnitTest != MoM.Templates.UnitTestStyle.None) /*&& !IsJunctionTable(SourceTable)*/)
				{
					XmlElement testNode;
					//------------------------------------------------------------------------------------------------------------------------------------------
					//	generate only once
					//------------------------------------------------------------------------------------------------------------------------------------------
					if (!File.Exists(rootPathUT + "\\" + GetClassName(SourceTable, ClassNameFormat.UnitTest) + ".cs"))
					{
						testNode = AddFileNode(tableNode, GetClassName(SourceTable, ClassNameFormat.UnitTest) + ".cs");
						this.GetTemplate("EntityRepositoryTest.cst").SetProperty("SourceTable", SourceTable);
						this.GetTemplate("EntityRepositoryTest.cst").SetProperty("SourceTables", templateSourceTables);
						
						this.GetTemplate("EntityRepositoryTest.cst").SetProperty("NameSpace", BLLNameSpace);
						this.GetTemplate("EntityRepositoryTest.cst").SetProperty("DALNameSpace", DALNameSpace);
						this.GetTemplate("EntityRepositoryTest.cst").SetProperty("UTNameSpace", UTNameSpace);
						
						this.GetTemplate("EntityRepositoryTest.cst").SetProperty("IncludeInsert", IncludeInsert);
						this.GetTemplate("EntityRepositoryTest.cst").SetProperty("IncludeUpdate", IncludeUpdate);
						this.GetTemplate("EntityRepositoryTest.cst").SetProperty("IncludeSave", IncludeSave);
						this.GetTemplate("EntityRepositoryTest.cst").SetProperty("IncludeDelete", IncludeDelete);
						this.GetTemplate("EntityRepositoryTest.cst").SetProperty("IncludeGetList", IncludeGetList);		
						this.GetTemplate("EntityRepositoryTest.cst").SetProperty("IncludeManyToMany", IncludeManyToMany);		
						this.GetTemplate("EntityRepositoryTest.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);		
						this.GetTemplate("EntityRepositoryTest.cst").SetProperty("IncludeGetListByIX", IncludeGetListByIX);	
						this.GetTemplate("EntityRepositoryTest.cst").SetProperty("IncludeRelations", IncludeRelations);	
						
						this.GetTemplate("EntityRepositoryTest.cst").SetProperty("IncludeUnitTest", IncludeUnitTest);
						
						this.RenderToFile("EntityRepositoryTest.cst", rootPathUT + "\\" + GetClassName(SourceTable, ClassNameFormat.UnitTest) + ".cs", true);
						AddExecutionTime(testNode);
					}
					
					// generate ordered test lists for EntityrepositoryTests in Visual Studio 
					if (IncludeUnitTest == MoM.Templates.UnitTestStyle.VSTS)
					{
						// generate only once
						if (!File.Exists(rootPathUT + "\\" + GetClassName(SourceTable, ClassNameFormat.UnitTest) + ".orderedtest"))
						{
							testNode = AddFileNode(tableNode, GetClassName(SourceTable, ClassNameFormat.UnitTest) + ".orderedtest");
							this.GetTemplate("OrderedEntityRepositoryTestList.cst").SetProperty("SourceTable", SourceTable);
							this.GetTemplate("OrderedEntityRepositoryTestList.cst").SetProperty("SourceTables", templateSourceTables);
							
							this.GetTemplate("OrderedEntityRepositoryTestList.cst").SetProperty("RootNameSpace", NameSpace);
							this.GetTemplate("OrderedEntityRepositoryTestList.cst").SetProperty("UTNameSpace", UTNameSpace);
							
							this.GetTemplate("OrderedEntityRepositoryTestList.cst").SetProperty("IncludeInsert", IncludeInsert);
							this.GetTemplate("OrderedEntityRepositoryTestList.cst").SetProperty("IncludeUpdate", IncludeUpdate);
							this.GetTemplate("OrderedEntityRepositoryTestList.cst").SetProperty("IncludeSave", IncludeSave);
							this.GetTemplate("OrderedEntityRepositoryTestList.cst").SetProperty("IncludeDelete", IncludeDelete);
							this.GetTemplate("OrderedEntityRepositoryTestList.cst").SetProperty("IncludeGetList", IncludeGetList);		
							this.GetTemplate("OrderedEntityRepositoryTestList.cst").SetProperty("IncludeManyToMany", IncludeManyToMany);		
							this.GetTemplate("OrderedEntityRepositoryTestList.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);		
							this.GetTemplate("OrderedEntityRepositoryTestList.cst").SetProperty("IncludeGetListByIX", IncludeGetListByIX);	
							this.GetTemplate("OrderedEntityRepositoryTestList.cst").SetProperty("IncludeRelations", IncludeRelations);	
							
							this.GetTemplate("OrderedEntityRepositoryTestList.cst").SetProperty("IncludeUnitTest", IncludeUnitTest);
							
							this.GetTemplate("OrderedEntityRepositoryTestList.cst").SetProperty("RootPathUT", rootPathUT);
							
							this.GetTemplate("OrderedEntityRepositoryTestList.cst").SetProperty("VisualStudioVersion", VisualStudioVersion);
							
							this.RenderToFile("OrderedEntityRepositoryTestList.cst", rootPathUT + "\\" + GetClassName(SourceTable, ClassNameFormat.UnitTest) + ".orderedtest", true);
							AddExecutionTime(testNode);
						}
					}
					
					//------------------------------------------------------------------------------------------------------------------------------------------
					//	generate always
					//------------------------------------------------------------------------------------------------------------------------------------------
					testNode = AddFileNode(tableNode, GetClassName(SourceTable, ClassNameFormat.UnitTest) + ".generated.cs");
					this.GetTemplate("EntityRepositoryTest.generated.cst").SetProperty("SourceTable", SourceTable);
					this.GetTemplate("EntityRepositoryTest.generated.cst").SetProperty("SourceTables", templateSourceTables);
					
					this.GetTemplate("EntityRepositoryTest.generated.cst").SetProperty("NameSpace", BLLNameSpace);
					this.GetTemplate("EntityRepositoryTest.generated.cst").SetProperty("DALNameSpace", DALNameSpace);
					this.GetTemplate("EntityRepositoryTest.generated.cst").SetProperty("UTNameSpace", UTNameSpace);
					
					this.GetTemplate("EntityRepositoryTest.generated.cst").SetProperty("IncludeInsert", IncludeInsert);
					this.GetTemplate("EntityRepositoryTest.generated.cst").SetProperty("IncludeUpdate", IncludeUpdate);
					this.GetTemplate("EntityRepositoryTest.generated.cst").SetProperty("IncludeSave", IncludeSave);
					this.GetTemplate("EntityRepositoryTest.generated.cst").SetProperty("IncludeDelete", IncludeDelete);
					this.GetTemplate("EntityRepositoryTest.generated.cst").SetProperty("IncludeGetList", IncludeGetList);		
					this.GetTemplate("EntityRepositoryTest.generated.cst").SetProperty("IncludeFind", IncludeFind);
					this.GetTemplate("EntityRepositoryTest.generated.cst").SetProperty("IncludeManyToMany", IncludeManyToMany);		
					this.GetTemplate("EntityRepositoryTest.generated.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);		
					this.GetTemplate("EntityRepositoryTest.generated.cst").SetProperty("IncludeGetListByIX", IncludeGetListByIX);	
					this.GetTemplate("EntityRepositoryTest.generated.cst").SetProperty("IncludeRelations", IncludeRelations);	
					
					this.GetTemplate("EntityRepositoryTest.generated.cst").SetProperty("IncludeUnitTest", IncludeUnitTest);
					
					this.RenderToFile("EntityRepositoryTest.generated.cst", rootPathUT + "\\" + GetClassName(SourceTable, ClassNameFormat.UnitTest) + ".generated.cs", true);
					AddExecutionTime(testNode);
				}
				#endregion Generate the Repository nUnit Test class
							
				#region Generate Web Service
				if (GenerateWebservice)
				{
					//----------------------------------------------------------------------------------------------------------------------------------------------
					//	Generating the abstract WebService client Repository class		
					//----------------------------------------------------------------------------------------------------------------------------------------------
					XmlElement wsDalcBaseNode = AddFileNode(tableNode, "WebServiceClient\\Ws" + GetClassName(SourceTable, ClassNameFormat.ProviderBase) + ".cs");
					
					this.GetTemplate("WsEntityProviderBase.generated.cst").SetProperty("IncludeCustoms", IncludeCustoms);
					this.GetTemplate("WsEntityProviderBase.generated.cst").SetProperty("CustomNonMatchingReturnType", CustomNonMatchingReturnType);				
					this.GetTemplate("WsEntityProviderBase.generated.cst").SetProperty("ProcedurePrefix", ProcedurePrefix.Replace(" ", ""));			
					
					this.GetTemplate("WsEntityProviderBase.generated.cst").SetProperty("IncludeInsert", IncludeInsert);
					this.GetTemplate("WsEntityProviderBase.generated.cst").SetProperty("IncludeUpdate", IncludeUpdate);
					this.GetTemplate("WsEntityProviderBase.generated.cst").SetProperty("IncludeSave", IncludeSave);
					this.GetTemplate("WsEntityProviderBase.generated.cst").SetProperty("IncludeDelete", IncludeDelete);
					this.GetTemplate("WsEntityProviderBase.generated.cst").SetProperty("IncludeUpdate", IncludeUpdate);
					this.GetTemplate("WsEntityProviderBase.generated.cst").SetProperty("IncludeManyToMany", IncludeManyToMany);
					this.GetTemplate("WsEntityProviderBase.generated.cst").SetProperty("IncludeGetList", IncludeGetList);
					this.GetTemplate("WsEntityProviderBase.generated.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);
					this.GetTemplate("WsEntityProviderBase.generated.cst").SetProperty("IncludeGetListByIX", IncludeGetListByIX);
					this.GetTemplate("WsEntityProviderBase.generated.cst").SetProperty("IncludeFind", IncludeFind);
												
					this.GetTemplate("WsEntityProviderBase.generated.cst").SetProperty("SourceTable", SourceTable);
					this.GetTemplate("WsEntityProviderBase.generated.cst").SetProperty("SourceTables", templateSourceTables);
					
					this.GetTemplate("WsEntityProviderBase.generated.cst").SetProperty("NameSpace", BLLNameSpace);
					this.GetTemplate("WsEntityProviderBase.generated.cst").SetProperty("DALNameSpace", DALNameSpace);
					
					this.GetTemplate("WsEntityProviderBase.generated.cst").SetProperty("WebReferenceName", "WsProxy");
					this.GetTemplate("WsEntityProviderBase.generated.cst").SetProperty("ProxyClassName", _webServiceClassName);
														
					this.RenderToFile("WsEntityProviderBase.generated.cst", rootPathDALWS + "\\Ws" + GetClassName(SourceTable, ClassNameFormat.ProviderBase) + ".generated.cs", true);
					AddExecutionTime(wsDalcBaseNode);
					
					//----------------------------------------------------------------------------------------------------------------------------------------------
					//	Generating the WebService Repository Implementation, only if not already there
					//----------------------------------------------------------------------------------------------------------------------------------------------
					if (!File.Exists(rootPathDALWS + "\\Ws" + GetClassName(SourceTable, ClassNameFormat.Provider) + ".cs"))
					{
						XmlElement wsDalcNode = AddFileNode(tableNode, "WebServiceClient\\Ws" +  GetClassName(SourceTable, ClassNameFormat.Provider) + ".cs");
						
						this.GetTemplate("WsEntityProvider.cst").SetProperty("NameSpace", BLLNameSpace);
						this.GetTemplate("WsEntityProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
						this.GetTemplate("WsEntityProvider.cst").SetProperty("ClassName", GetClassName(SourceTable));
						this.GetTemplate("WsEntityProvider.cst").SetProperty("ProviderName", "Ws" + GetClassName(SourceTable, ClassNameFormat.Provider));
						this.GetTemplate("WsEntityProvider.cst").SetProperty("ProviderBaseName", "Ws" + GetClassName(SourceTable, ClassNameFormat.AbstractRepository));
						
						this.RenderToFile("WsEntityProvider.cst", rootPathDALWS + "\\Ws" + GetClassName(SourceTable, ClassNameFormat.Provider) + ".cs", false);
						AddExecutionTime(wsDalcNode);
					}			
				}
				
				#endregion Generate Web Service
				
			}
			#endregion Generate DAL
		
			AddExecutionTime(tableNode);
			_CurrentObjectIndex++;
		}
		#endregion Process the By DataTable templates
		
		#endregion Code generation
		
		#region Finalise - build report and start VS if required
		try 
		{
			XmlElement summaryElement = docOutput.CreateElement("summary");
			XmlElement objectCount = docOutput.CreateElement("objectCount");
			objectCount.InnerText = Counter.ToString();
				
			XmlElement messageCount = docOutput.CreateElement("messageCount");
			messageCount.InnerText= this.ErrorMessageCount.ToString();
			
			summaryElement.AppendChild(objectCount);
			summaryElement.AppendChild(messageCount);
			
			docOutput.DocumentElement.AppendChild(summaryElement);
			AddExecutionTime(docOutput.DocumentElement);
			docOutput.Save(OutputDirectory + "\\report.xml");
		
			//XPathDocument doc = new XPathDocument(OutputDirectory + "\\report.xml");
			XslCompiledTransform xslt = new XslCompiledTransform();
			xslt.Load(this.CodeTemplateInfo.DirectoryName + "\\VisualStudio\\reportHTML.xsl");
			XmlTextWriter xmlWriter = new XmlTextWriter(OutputDirectory + "\\report.html", Encoding.UTF8);
			xmlWriter.Formatting = System.Xml.Formatting.Indented;               
			xslt.Transform(docOutput, null, xmlWriter);
			xmlWriter.Close();
			
			if (ViewReport)
			{
				// replace all invalid Url characters with URL Encoded version
				string[] invalidUrlCharacters = { "#" };
				string outputDirectory = OutputDirectory;
				for (int i = 0; i < invalidUrlCharacters.Length; i++)
					outputDirectory = outputDirectory.Replace(invalidUrlCharacters[i], System.Web.HttpUtility.UrlEncode(invalidUrlCharacters[i]));
				
				
				try
				{ 
					outputDirectory = Path.GetFullPath(outputDirectory);
					Directory.GetDirectoryRoot(outputDirectory);
					string file = @"file:\\\" + outputDirectory +  "\\report.html";
					Process.Start(file); 
				} catch{}
			}
			
			if (LaunchVisualStudio)
			{
				// Only if Visual Studio is not running
				bool found = false;
				Process[] processes = Process.GetProcesses();
				foreach(Process process in processes)
				{
					if (process.ProcessName.StartsWith("devenv"))
						found = true;
				}
				
				if(!found)
				{
					string args = "/build debug";
					using (Process p = Process.Start(GetSolutionFileLink(), args))
					{
					}
				}
			}
		} 
		catch (Exception e) 
		{
			Response.WriteLine("Transformation failed, an error has occured:");
			Response.WriteLine(e);
		}
	
		string exTime = string.Concat("Generation complete. Execution time: " , (DateTime.Now - startTime).ToString() , Environment.NewLine , "You can view current documentation @ http://docs.netTiers.com" ); 
		exTime = string.Concat(exTime, string.Format("{0}Generated solution can be found here: {0}{1}", Environment.NewLine, GetSolutionFileLink()));
		
		Trace.WriteLine(exTime);
		Response.WriteLine(exTime);
		#endregion Finalise - build report and start VS if required
	
	}
	
	#region Private helper methods
	
	#region Codesmith related members
	///<summary>
	/// Codesmith version
	///</summary>
	private enum CodesmithVersion : int
	{
		Unknown = 0,
		Codesmith26 = 1,
		Codesmith30 = 2,
		Codesmith31 = 3,
		Codesmith32 = 4,
		Codesmith40 = 5
	}
	
	///<summary>
	/// Does Support Codesmith build task
	///</summary>
	private bool DoesSupportCodesmithBuildTask()
	{
		bool isPro = false;
		try
		{	
			Type lic = typeof(CodeTemplate).Assembly.GetType("CodeSmith.Engine.CodesmithLicense", false, true);
			if (lic != null)
			{
				System.Reflection.PropertyInfo prop = lic.GetProperty("IsProfessional");
				if (prop != null)
					isPro = Convert.ToBoolean(prop.GetValue(null, null));
			}
		}
		catch{}
		
		return (isPro && (int)GetCodesmithVersion() >= (int)CodesmithVersion.Codesmith32);
	}		
	
	///<summary>
	/// Get Codesmith version
	///</summary>
	private CodesmithVersion GetCodesmithVersion()
	{
		try
		{
			string version = typeof(CodeTemplate).Assembly.GetName().Version.ToString();
			if(version != null)
			{
				if (version.IndexOf("3.2") >= 0)
					return CodesmithVersion.Codesmith32;
				else if (version.IndexOf("3.1") >=0)
					return CodesmithVersion.Codesmith31;
				else if (version.IndexOf("3.0") >=0)
					return CodesmithVersion.Codesmith30;
				else if (version.IndexOf("2.6") >= 0)
					return CodesmithVersion.Codesmith26;
			}
		}
		catch
		{
			//could not discover version info.	
		}
		
		return CodesmithVersion.Unknown;
	}
	
	#region CodeSmith Progression
	///<summary>
	/// Sets progress using reflection to continue to support lower versions of CodeSmith
	/// this.Progress.MaximumValue = count;
	///</summary>
	private void SetProgress(int count)
	{
			Progress.MaximumValue = count * (Directory.Exists(this.OutputDirectory) ? 5: 10);
			Progress.Step = 1;
	}
	
	///<summary>
	/// Uses reflection to perform the step of progression in CodeSmith to support older versions
	/// Mimicks this.Progress.PerformStep()
	///</summary>
	private void PerformStep()
	{
		Progress.PerformStep();	
	}
	#endregion 
	
	#endregion Codesmith related members
	
	///<summary>
	/// Get Solution File Link
	///</summary>
	private string GetSolutionFileLink()
	{
		return  @"file:\\\" + OutputDirectory +  "\\" + NameSpace + ".sln";	
	}
	
	///<summary>
	/// Get Property Set File Path
	///</summary>
	private string GetPropertySetFilePath()
	{
		string libPath = Path.GetFullPath(Path.Combine(OutputDirectory, LibraryPath));
		#if CodeSmith40
		string path = Path.Combine(libPath , this.NameSpace + "CodeSmithProject.csp");
		#else
		string path = Path.Combine(libPath , this.NameSpace + "PropertySet.xml");
		#endif 
		
		if (!File.Exists(path))
		{
			this.SavePropertiesToXmlFile(path);	
		}
		return path;
	}
	
	///<summary>
	/// Get NetTiers Template Path
	///</summary>
	private string GetNetTiersTemplatePath()
	{
		return this.CodeTemplateInfo.FullPath;
	}
	
	///<summary>
	///  If generating webservices this method will attempt to create a virtual 
	/// directory on the local IIS server.
	///</summary>
	private bool AttemptCreateLocalVirtualDirectoryByPath()
	{
		try
		{
			if (this.WebServiceUrl == null || this.WebServiceUrl.Trim().Length == 0)
				return false;
			
			if (this.WebServiceOutputPath == null || this.WebServiceOutputPath.Trim().Length == 0)
				return false;
				
			if (!Directory.Exists(this.WebServiceOutputPath))
			{
				SafeCreateDirectory(this.WebServiceOutputPath);		
				
				//Could not create the directory for the WebServiceOutput Path;
				if (!Directory.Exists(this.WebServiceOutputPath))
					return false;
			}
			
			System.Uri uri = new System.Uri(this.WebServiceUrl);
			
			//could not find virtual directory from URI, return;
			if (uri.Segments.Length < 2)
				return false;
				
			System.DirectoryServices.DirectoryEntry rootDirectory
				= new System.DirectoryServices.DirectoryEntry(string.Format("IIS://{0}/W3SVC/1/Root", uri.Host));
			
			rootDirectory.RefreshCache();
			
			//check if virtual directory already exists
			foreach(System.DirectoryServices.DirectoryEntry v in rootDirectory.Children)
			{
				if (v.Name == uri.Segments[uri.Segments.Length - 1])
				{
					return false;
				}
			}
			
			System.DirectoryServices.DirectoryEntry newVirtualDirectory = rootDirectory.Children.Add(uri.Segments[uri.Segments.Length - 1], "IIsWebVirtualDir");
			
			newVirtualDirectory.Properties["Path"].Insert(0, this.WebServiceOutputPath);
			newVirtualDirectory.CommitChanges();
			rootDirectory.CommitChanges();
			
			//create application for the virtual dir
			newVirtualDirectory.Invoke("AppCreate", true);
			
			newVirtualDirectory.CommitChanges();
			rootDirectory.CommitChanges();
			
			newVirtualDirectory.Close();
			rootDirectory.Close();
		}
		catch(Exception exc)
		{
			Debug.WriteLine("Could not automatically create virtual directory for web service\n" + exc.Message);
			return false;
		}
		
		return true;
	}
	
	private void CreateWebServiceProxies(string clientPath)
	{
			try
			{
				if (Directory.Exists(this.sdkInstallRoot))
				{
					//----------------------------------------------------------------------------------------------------------------------------------------------
					// Generating webreference for visual studio
					// 
					// 1. wsdl /out:c:\Web References\WsProxy\Reference.cs http://commerce.services/CustomerServices.asmx?WSDL
					// 2. disco /out:c:\Web References\WsProxy\ http://commerce.services/CustomerServices.asmx
					//----------------------------------------------------------------------------------------------------------------------------------------------
					
					Process p = new Process();
					p.StartInfo.RedirectStandardOutput = true;
					p.StartInfo.UseShellExecute = false;
					p.StartInfo.FileName = "\"" + sdkInstallRoot + "wsdl\"";
					p.StartInfo.Arguments = "/out:\"" + clientPath + "\\Web References\\WsProxy\\Reference.cs\" \"" + WebServiceUrl + "?WSDL\"";
					p.Start();
					p.WaitForExit();
					
					//Response.Write(p.StartInfo.FileName);
					//Response.Write(p.StartInfo.Arguments);
							
					
					//Response.WriteLine("2. Generating Web Reference file: DISCO.");
					//Response.WriteLine("\"" + sdkInstallRoot + "disco\" /out:\"" + rootPathDAL + "\\Web References\\WsProxy\" \"" + WebServiceUrl + "\"");
					Process p2 = new Process();
					p2.StartInfo.RedirectStandardOutput = true;
					p2.StartInfo.UseShellExecute = false;
					p2.StartInfo.FileName = "\"" + sdkInstallRoot + "disco\"";
					p2.StartInfo.Arguments = "/out:\"" + clientPath + "\\Web References\\WsProxy\" \"" + WebServiceUrl + "\"";
					p2.Start();
					p2.WaitForExit();
					//AddFileNode(discoNode, 0, p2.StandardOutput.ReadToEnd());
				}
			}
			catch(Exception exc)
			{
				Trace.WriteLine("WSDL && DISCO FAILED: " + exc.Message);
			}
	}
	
	private void SetCommonProperties(String template)
	{
		this.GetTemplate(template).SetProperty("IncludeGet", IncludeGet);
		this.GetTemplate(template).SetProperty("IncludeFind", IncludeFind);
		this.GetTemplate(template).SetProperty("IncludeSave", IncludeSave);
		this.GetTemplate(template).SetProperty("IncludeInsert", IncludeInsert);
		this.GetTemplate(template).SetProperty("IncludeUpdate", IncludeUpdate);
		this.GetTemplate(template).SetProperty("IncludeDelete", IncludeDelete);
		this.GetTemplate(template).SetProperty("IncludeGetList", IncludeGetList);
		this.GetTemplate(template).SetProperty("IncludeGetListByFK", IncludeGetListByFK);
		this.GetTemplate(template).SetProperty("IncludeGetListByIX", IncludeGetListByIX);
		this.GetTemplate(template).SetProperty("IncludeManyToMany", IncludeManyToMany);
		this.GetTemplate(template).SetProperty("IncludeRelations", IncludeRelations);	
	}
	
	#region Mapping and Xml helper methods
	private NetTiers.NetTiersMap GetMapping()
	{
		return base.GetMapping(this.MappingFile);
	}
	
	private XmlElement AddMessageNode(XmlElement rootNode, int level, string message, bool isError)
	{
	
		Trace.WriteLine(string.Format("{0}*Message:{1}", Tab(level), message));
		XmlElement node = docOutput.CreateElement("Message");
		
		XmlAttribute attLevel = docOutput.CreateAttribute("level");
		attLevel.Value = string.Format("{0}", level);
		node.Attributes.Append(attLevel);
		
		if (isError)
			this._errorMessageCount++;
		
		XmlAttribute attTime = docOutput.CreateAttribute("startTime");
		attTime.Value = DateTime.Now.ToFileTime().ToString();
		node.Attributes.Append(attTime);
		
		XmlAttribute attMsg = docOutput.CreateAttribute("message");
		attMsg.Value = message;
		node.Attributes.Append(attMsg);
				
		rootNode.AppendChild(node);
		return node;
	}
	
	private XmlElement AddFileNode(XmlElement rootNode, string filename)
	{
		XmlElement node = docOutput.CreateElement("File");
		Trace.WriteLine(string.Format("\t*File Created: {0}", filename));	
		PerformStep();
		
		XmlAttribute attName = docOutput.CreateAttribute("name");
		attName.Value = filename;
		node.Attributes.Append(attName);
		XmlAttribute attTime = docOutput.CreateAttribute("startTime");
		attTime.Value = DateTime.Now.ToFileTime().ToString();
		node.Attributes.Append(attTime);
			
		rootNode.AppendChild(node);
		return node;
	}
	
	// append the execution time as attribute to the selected node
	private XmlElement AddExecutionTime(XmlElement node)
	{
	
		XmlAttribute attr = (XmlAttribute)node.Attributes.GetNamedItem("startTime");
		
		if (attr != null)
		{
			DateTime startTime = DateTime.FromFileTime(Convert.ToInt64(attr.Value));
			
			XmlAttribute att2 = docOutput.CreateAttribute("executionTime");
			att2.Value = DateTime.Now.Subtract(startTime).ToString();
			node.Attributes.Append(att2);	
		}
		
		return node;
	}
	
	private XmlElement AddTableNode(TableSchema table)
	{
		return AddTableNode(table.Name);
	}
	
	private XmlElement AddTableNode(string tableName)
	{
		XmlElement node = docOutput.CreateElement("Table");
		Trace.WriteLine(string.Format("*Analyzing Entity: {0}", tableName));
		
		XmlAttribute attName = docOutput.CreateAttribute("name");
		attName.Value = tableName;
		node.Attributes.Append(attName);
		
		XmlAttribute attTime = docOutput.CreateAttribute("startTime");
		attTime.Value = DateTime.Now.ToFileTime().ToString();
		node.Attributes.Append(attTime);	
		
		docOutput.DocumentElement.AppendChild(node);
		
		return node;
	}
	#endregion Mapping and Xml helper methods
	
	///<summary>
	/// Contrib (paul welter)
	/// Creates a relative path between two absolute paths.
	///</summary>
	public static string RelativePathTo(string fromDirectory, string toPath)
	{
		if (fromDirectory == null)
			throw new ArgumentNullException("fromDirectory");
		
		if (toPath == null)
			throw new ArgumentNullException("toPath");
		
		if (System.IO.Path.IsPathRooted(fromDirectory) && System.IO.Path.IsPathRooted(toPath))
		{
			if (string.Compare(System.IO.Path.GetPathRoot(fromDirectory),
				System.IO.Path.GetPathRoot(toPath), true) != 0)
			{
				throw new ArgumentException(
					string.Format("The paths '{0} and '{1}' have different path roots.",
						fromDirectory, toPath));
			}
		}
		
		System.Collections.Specialized.StringCollection relativePath = new System.Collections.Specialized.StringCollection();
		string[] fromDirectories = fromDirectory.Split(System.IO.Path.DirectorySeparatorChar);
		string[] toDirectories = toPath.Split(System.IO.Path.DirectorySeparatorChar);
		int length = Math.Min(fromDirectories.Length, toDirectories.Length);
		int lastCommonRoot = -1;
		
		// find common root
		for (int x = 0; x < length; x++)
		{
			if (string.Compare(fromDirectories[x], toDirectories[x], true) != 0)
				break;
			lastCommonRoot = x;
		}
		
		if (lastCommonRoot == -1)
		{
			throw new ArgumentException(
				string.Format("The paths '{0} and '{1}' do not have a common prefix path.",
					fromDirectory, toPath));
		}
		
		// add relative folders in from path
		for (int x = lastCommonRoot + 1; x < fromDirectories.Length; x++)
			if (fromDirectories[x].Length > 0)
				relativePath.Add("..");
		
		// add to folders to path
		for (int x = lastCommonRoot + 1; x < toDirectories.Length; x++)
			relativePath.Add(toDirectories[x]);
		
		// create relative path
		string[] relativeParts = new string[relativePath.Count];
		relativePath.CopyTo(relativeParts, 0);
		string newPath = string.Join(System.IO.Path.DirectorySeparatorChar.ToString(), relativeParts);
		return newPath;
	}
		
	/// <summary>
	/// Increment Build Version
	/// </summary>
	private string IncrementBuildVersion(string assemblyInfoFilename)
	{
		using (StreamReader reader = File.OpenText(assemblyInfoFilename))
		{
			Regex expression = new Regex(@"^\[assembly: AssemblyVersion\(\""([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)");
			string line = reader.ReadLine();
			while (line != null)
			{
				Match match = expression.Match(line);
				if (match.Success)
				{
					string major = match.Result("$1");
					string minor= match.Result("$2");
					string build = match.Result("$3");
					string revision = match.Result("$4");
					int buildVer = Convert.ToInt32(build);
					
					if (AutoIncrementBuildVersion) 
						buildVer += 1;
					
					return string.Format("{0}.{1}.{2}.{3}", major, minor, buildVer, revision);
				}
				line = reader.ReadLine();
			}
		}
		return "1.0.0.0";
	}
	
	private void LogCustomProcedures(IDictionary customProcs, string entityName, string entityType, XmlElement customProcsNode)
	{
		foreach(DictionaryEntry item in customProcs)
		{
			XmlElement customProcNode = docOutput.CreateElement("customStoredProcedure");
		
			SchemaExplorer.CommandSchema command = (SchemaExplorer.CommandSchema) item.Value;
			
			XmlAttribute nameAtt = docOutput.CreateAttribute("name");
			nameAtt.Value = command.Name;			
			customProcNode.Attributes.Append(nameAtt);
			
			XmlAttribute entityAtt = docOutput.CreateAttribute("relatedEntity");
			entityAtt.Value = entityName;			
			customProcNode.Attributes.Append(entityAtt);
			
			XmlAttribute entityTypeAtt = docOutput.CreateAttribute("relatedEntityType");
			entityTypeAtt.Value = entityType;			
			customProcNode.Attributes.Append(entityTypeAtt);
			
			customProcsNode.AppendChild(customProcNode);
		}
	}
	
	#endregion Private helper methods

</script>
<%
	Verbose = false; // change this to true if you want verbose output in this template
	this.Go();
%>
