<%--
 * $Id: EntityData.cst,v 1.2 2005/11/07 10:41:55 jroland Exp $
 * Last modified by $Author$
 * Last modified at $Date$
 * $Revision$
--%>
<%@ CodeTemplate Src="..\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Business object base class"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Connection" Description="Table Object should be based on." %>
<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Connection" Description="Tables of the sytem." %>

<%@ Property Name="IncludeRelations" Type="System.Boolean" Default="False" Category="Options" Description="Include Collections for Related Entities."%>
<%@ Property Name="IncludeManyToMany" Type="System.Boolean" Default="False" Category="Options" Description="Include Collections for Related Entities."%>
	
<%@ Property Name="NameSpace" Optional="True" Type="System.String" Category="Style" Description="Object Namespace." %>
<%
	/* string className = GetClassName(SourceTable.Name); */
	string structName = GetStructName(SourceTable.Name);
%>
/*
	Code Generated by NetTiers. Do not modify.
	Template file information : $Id: EntityData.cst,v 1.2 2005/11/07 10:41:55 jroland Exp $.	
	
	Generation date: <%=DateTime.Now%>
*/
using System;
using System.ComponentModel;

namespace <%=NameSpace%>
{		
	/// <summary>
	///		The data structure representation of the '<%=SourceTable.Name%>' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class <%=structName%> : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
		<%
			for(int i=0; i<SourceTable.PrimaryKey.MemberColumns.Count; i++)
			{%>
			/// <summary>			
			/// <%=SourceTable.PrimaryKey.MemberColumns[i].Name%> : <%= GetColumnXmlComment(SourceTable.PrimaryKey.MemberColumns[i],2)%>
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "<%=SourceTable.Name%>"</remarks>
			public <%= GetCSType(SourceTable.PrimaryKey.MemberColumns[i]) %> <%=GetPropertyName(SourceTable.PrimaryKey.MemberColumns[i].Name)%>;
				
			<%
				if (!IsIdentityColumn(SourceTable.PrimaryKey.MemberColumns[i]) && !(IsComputed(SourceTable.PrimaryKey.MemberColumns[i])))
				{%>
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public <%= GetCSType(SourceTable.PrimaryKey.MemberColumns[i]) %> <%=GetOriginalPropertyName(SourceTable.PrimaryKey.MemberColumns[i])%>;
			
				<%}
			}
		%>
		#endregion
		
		#region Non Primary key(s)
		
		<% for (int x=0; x < SourceTable.NonPrimaryKeyColumns.Count; x++) { %>
		
		/// <summary>
		/// <%=SourceTable.NonPrimaryKeyColumns[x].Name%> : <%=GetColumnXmlComment(SourceTable.NonPrimaryKeyColumns[x],2)%>
		/// </summary>
		public <%= GetCSType(SourceTable.NonPrimaryKeyColumns[x]) %><%= Tab(2) %>  <%= GetPropertyName(SourceTable.NonPrimaryKeyColumns[x].Name) %> = <% if ( SourceTable.NonPrimaryKeyColumns[x].AllowDBNull && IsCSReferenceDataType(SourceTable.NonPrimaryKeyColumns[x]) ) { %>null<% } else { %><%=GetCSDefaultByType(SourceTable.NonPrimaryKeyColumns[x])%><% }%>;
		<%if ( SourceTable.NonPrimaryKeyColumns[x].AllowDBNull && !IsCSReferenceDataType(SourceTable.NonPrimaryKeyColumns[x]) ) {%>
		public bool Is<%=GetPropertyName(SourceTable.NonPrimaryKeyColumns[x].Name)%>Null = true;
		<%} // end AllowDBNull && !IsCSReferenceDataType
		} //end for each non PK column %>
		#endregion
			
		#endregion "Variable Declarations"
		
		public Object Clone()
		{
			<%=structName%> _tmp = new <%=structName%>();
			
			
			<% for(int i=0; i<SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
			_tmp.<%=GetPropertyName(SourceTable.PrimaryKey.MemberColumns[i].Name)%> = this.<%=GetPropertyName(SourceTable.PrimaryKey.MemberColumns[i].Name)%>;
			<% if (!IsIdentityColumn(SourceTable.PrimaryKey.MemberColumns[i]) && !(IsComputed(SourceTable.PrimaryKey.MemberColumns[i]))) {%>
			_tmp.<%=GetOriginalPropertyName(SourceTable.PrimaryKey.MemberColumns[i].Name)%> = this.<%=GetOriginalPropertyName(SourceTable.PrimaryKey.MemberColumns[i].Name)%>;
			<% } %>
			<% } %>
			
			<% for (int x=0; x < SourceTable.NonPrimaryKeyColumns.Count; x++) { %>
			_tmp.<%= GetPropertyName(SourceTable.NonPrimaryKeyColumns[x].Name) %> = this.<%= GetPropertyName(SourceTable.NonPrimaryKeyColumns[x].Name) %>;
			<%if ( SourceTable.NonPrimaryKeyColumns[x].AllowDBNull && !IsCSReferenceDataType(SourceTable.NonPrimaryKeyColumns[x]) ) {%>
			_tmp.Is<%=GetPropertyName(SourceTable.NonPrimaryKeyColumns[x].Name)%>Null = this.Is<%=GetPropertyName(SourceTable.NonPrimaryKeyColumns[x].Name)%>Null;
			<%} %>
			<% } %>
			
			return _tmp;
		}
		
<% 
		
if(IncludeRelations)
{	
	WriteRelationshipPropertyString();
}
		
%>
	}//End struct
} // end namespace

<script runat="template">
///<summary>
/// Many To Many Relationship Class Template Property String
///</summary>
protected static string MANY_TO_MANY = @"
		public {1} {0} = new {1}();
";

///<summary>
/// One to One Relationship Class Template Property String
///</summary>		
protected static string ONE_TO_ONE = @"
		public {0} {0} = new {0}();
";
		
///<summary>
/// One To Many Relationship Class Template Property String
///</summary>		
protected static string ONE_TO_MANY = @"
		public {0} {0} = new {0}();
";
		
///<summary>
///   Writes out the property string of all the relationship object collections.
///</summary>
private void WriteRelationshipPropertyString()
{	
	///Loop Child Collections
	foreach (CollectionInfo item in GetChildrenCollections(SourceTable, SourceTables))
	{
		
		///Assign by RelationshipType, Then Write to Response
		switch((int)item.CollectionRelationshipType)
		{
			///One To One Relationship
			case (int)RelationshipType.OneToOne:
				object[] oneToOneParams = {
							GetClassName(item.SecondaryTable), 
							GetClassName(item.PkIdxName)
				};
				item.PropertyString = string.Format(ONE_TO_ONE, oneToOneParams);
				break;
				
			///One To Many, Many To One
			case (int)RelationshipType.OneToMany:
			case (int)RelationshipType.ManyToOne:
			    object[] oneToManyParams = {
						GetCollectionClassName(item.SecondaryTable)
						, item.PkIdxName
						, GetClassName(item.SecondaryTable)
				};
			item.PropertyString = string.Format(ONE_TO_MANY, oneToManyParams);
			break;
			
			///Many To Many
			case (int)RelationshipType.ManyToMany:
				object[] manyToManyParams = {
						//GetCollectionClassName(item.CleanName) + "_From_" + GetClassName(item.JunctionTable), 
						item.CollectionName,
						GetCollectionClassName(item.SecondaryTable),
						item.JunctionTable
				};
				item.PropertyString = string.Format(MANY_TO_MANY, manyToManyParams);
				break;
			default:
				break;
		}
		
		if (!RenderedChildren.Contains(item.CleanName))
		{
			///Write it out to the resonse stream
			Response.Write(item.PropertyString);	
			RenderedChildren.Add(item.CleanName);
		}
	}///End foreach loop
	
	///enable use for the next template
	RenderedChildren.Clear();
}
</script>

