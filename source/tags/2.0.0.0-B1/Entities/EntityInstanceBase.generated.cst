<%--
 * $Id: EntityInstanceBase.generated.cst,v 1.11 2006/03/03 03:09:36 bgjohnso Exp $
 * Last modified by $Author: goofsr $
 * Last modified at $Date: 2006-04-09 14:39:46 -0500 (Sun, 09 Apr 2006) $
 * $Revision: 119 $

	Written By:
		Ryan Hurdon
	Description:
		This script will create data access layer classes. It requires stored procedures
		created from the procedure script. So for this code to work properly you need to run
		the procedure template, the rowobject template, and the rowcollection template on
		the same table. You can also optionally use the main script which will run them all
		for you.
--%>
<%@ CodeTemplate Src="..\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Business object base class"  ResponseEncoding="UTF-8"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Connection" Description="Table Object should be based on." %>
<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Connection" Description="Tables of the sytem." %>

<%@ Property Name="IncludeRelations" Type="System.Boolean" Default="False" Category="Options" Description="Include Collections for Related Entities."%>
<%@ Property Name="IncludeManyToMany" Type="System.Boolean" Default="False" Category="Options" Description="Include Collections for Related Entities."%>
<%@ Property Name="IncludeGetListByFK" Type="System.Boolean" Default="True" Category="Options" Description="If true get functions will be generated." %>
<%@ Property Name="IncludeWCFDataAttributes" Type="System.Boolean" Default="False" Category="02. Framework Generation - Optional" Description="Indicates if the WCF attributes, [DataContract] and [DataMember], should be included on the entity classes." %>
<%@ Property Name="IncludeXmlAttributes" Type="System.Boolean" Default="False" Category="02. Framework Generation - Optional" Description="Indicates if the Xml attributes, [XmlElement(IsNullable=true)], should be included on the entity classes." %>

<%@ Property Name="NameSpace" Optional="True" Type="System.String" Category="Style" Description="Object Namespace." %>
	
<%@ Property Name="UsePartialClass" Type="System.Boolean" Default="true" Category="General" Description="Indicates if partial class should be generated." %>
	
<%
	//if (SourceTables == null) SourceTables = new SchemaExplorer.TableSchemaCollection();
	string name;
		
	// Name of the Abstract Class
	string className = GetClassName(SourceTable.Name);
	string collectionClassName = GetCollectionClassName(SourceTable.Name);
	string structName = GetStructName(SourceTable.Name);
	string abstractClassName = GetAbstractClassName(SourceTable.Name);
	string keyClassName = GetKeyClassName(SourceTable.Name);

	string constructorAccessModifier = UsePartialClass ? "public" : "protected";
	
	// Collection of primary key columns
	//NOT IN 2.6 API 
	//MemberColumnSchemaCollection pkCols = SourceTable.PrimaryKey.MemberColumns; 
	ColumnSchemaCollection pkCols = SourceTable.PrimaryKey.MemberColumns;
	
	// Collection of all columns in the table.
	ColumnSchemaCollection cols = SourceTable.Columns;
		
	//Provides information about the indexes contained in the table. 
	//IndexSchemaCollection indexes = SourceTable.Indexes;
		
	ColumnSchemaCollection colsUpdatable = new ColumnSchemaCollection();
	foreach (ColumnSchema column in cols)
	{
		if ( ! IsIdentityColumn(column) && ! IsComputed(column) )
			colsUpdatable.Add(column);
	}
	
	//Get the columns that are common to all tables
	ColumnSchemaCollection commonColumns = GetCommonTableColumns(SourceTables);
%>
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : <%=DateTime.Now.ToLongDateString()%>
	Important: Do not modify this file. Edit the file <%=className%>.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace <%=NameSpace%>
{
	#region <%=className%>EventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="<%=className%>"/> object.
	/// </remarks>
	public class <%=className%>EventArgs : System.EventArgs
	{
		private <%=className%>Column column;
		
		///<summary>
		/// Initalizes a new Instance of the <%=className%>EventArgs class.
		///</summary>
		public <%=className%>EventArgs(<%=className%>Column column)
		{
			this.column = column;
		}
		
		
		///<summary>
		/// The <%=className%>Column that was modified, which has raised the event.
		///</summary>
		///<value cref="<%=className%>Column" />
		public <%=className%>Column Column { get { return this.column; } }
	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all <%=className%> related events.
	///</summary>
	public delegate void <%=className%>EventHandler(object sender, <%=className%>EventArgs e);
	
	///<summary>
	/// <% if(SourceTable.Description.Length == 0 ) {%>An object representation of the '<%=SourceTable.Name%>' table. [No description found the database]<%} else {Response.Write(GetColumnXmlComment(SourceTable,1));}%>	
	///</summary>
	<% if ( IncludeWCFDataAttributes ) { %>
	[DataContract]
	<% } %>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(<%=className%>))]
	public abstract partial class <%=abstractClassName%> : EntityBase, IEntityId<<%= keyClassName %>>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private <%=structName%> entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//<%=structName%> originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private <%=structName%> backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<<%=className%>> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event <%=className%>EventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event <%=className%>EventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="<%=abstractClassName%>"/> instance.
		///</summary>
		<%=constructorAccessModifier%> <%=abstractClassName%>()
		{
			this.entityData = new <%=structName%>();
			this.backupData = null;
		}		
		
		<% if(colsUpdatable.Count > 0) { %>
		///<summary>
		/// Creates a new <see cref="<%=abstractClassName%>"/> instance.
		///</summary>
		<% for (int x=0; x < colsUpdatable.Count; x++) { %>
		///<param name="<%=GetPrivateName(className) + GetPropertyName(colsUpdatable[x].Name) %>"><%=GetColumnXmlComment(colsUpdatable[x],2)%></param>
		<% } %>
		<%=constructorAccessModifier%> <%=abstractClassName%>(<% WrapInit(); for (int x=0; x < colsUpdatable.Count; x++) { %><%= GetCSType(colsUpdatable[x]) %> <%= GetPrivateName(className) + GetPropertyName(colsUpdatable[x].Name) %><%WrapIncr(colsUpdatable[x]); if (x < colsUpdatable.Count -1){%>, <% WrapLine(3); } }// end for %>)
		{
			this.entityData = new <%=structName%>();
			this.backupData = null;

			<% for (int x=0; x < colsUpdatable.Count; x++) { %>
			this.<%= GetPropertyName(colsUpdatable[x]) %> = <%= GetPrivateName(className) + GetPropertyName(colsUpdatable[x].Name) %>;
			<% }// end for %>
		}
		<% } %>
		
		///<summary>
		/// A simple factory method to create a new <see cref="<%=className%>"/> instance.
		///</summary>
		<% for (int x=0; x < colsUpdatable.Count; x++) { %>
		///<param name="<%=GetPrivateName(className) + GetPropertyName(colsUpdatable[x].Name) %>"><%=GetColumnXmlComment(colsUpdatable[x],2)%></param>
		<% } %>
		public static <%=className%> Create<%=className%>(<% WrapInit(); for (int x=0; x < colsUpdatable.Count; x++) { %><%= GetCSType(colsUpdatable[x]) %> <%= GetPrivateName(className) + GetPropertyName(colsUpdatable[x].Name) %><% WrapIncr(colsUpdatable[x]); if (x < colsUpdatable.Count -1){%>, <%  WrapLine(3); } }// end for %>)
		{
			<%=className%> new<%=className%> = new <%=className%>();
			<% for (int x=0; x < colsUpdatable.Count; x++) { %>
			new<%=className%>.<%=GetPropertyName( colsUpdatable[x].Name) %> = <%= GetPrivateName(className) + GetPropertyName(colsUpdatable[x].Name) %>;
			<% }// end for %>
			return new<%=className%>;
		}
				
		#endregion Constructors
		
		<% if (IncludeWCFDataAttributes ) { %>
		
		#region DataContract serialization
		
		bool _deserializing = false;
		
		/// <summary>
		/// Called before deserializing the type.
		/// </summary>
		[OnDeserializingAttribute]
		private void Initialize_BeforeDeserializing(StreamingContext context)
		{
			this._deserializing = true;
		
			this.entityData = new <%=structName%>();
			this.backupData = null;
			
			AddValidationRules();
		}
		
		/// <summary>
		/// Called after deserializing the type.
		/// </summary>
		[OnDeserializedAttribute ]
		private void Initialize_Deserialized(StreamingContext context)
		{
			this._deserializing = false;
		}
				
		#endregion
		
		<% } %>
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="<%=className%>Column"/> which has raised the event.</param>
		public void OnColumnChanging(<%=className%>Column column)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				<%=className%>EventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new <%=className%>EventArgs(column));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="<%=className%>Column"/> which has raised the event.</param>
		public void OnColumnChanged(<%=className%>Column column)
		{
			if (!SuppressEntityEvents)
			{
				<%=className%>EventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new <%=className%>EventArgs(column));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		<% for (int x=0; x < cols.Count; x++) {
		
		string dataObjectFieldParams = GetDataObjectFieldCallParams(cols[x]);
		string defaultValue	= GetColumnDefaultValue(cols[x]).Length > 0
			? string.Format(",{1}\t\tDefaultValue({0})", GetColumnDefaultValue(cols[x]), Environment.NewLine) 
			: ""; 

		%>
		/// <summary>
		/// 	Gets or sets the <%= GetPropertyName(cols[x].Name) %> property. 
		///		<%=GetColumnXmlComment(cols[x],2)%>
		/// </summary>
		/// <value>This type is <%=cols[x].NativeType%>.</value>
		/// <remarks>
		/// This property can<%if (!cols[x].AllowDBNull) {%> not<%}%> be set to null. <%if (cols[x].AllowDBNull && !IsCSReferenceDataType(cols[x])) {%>
		/// If this column is null, this property will return <%=GetCSDefaultByType(cols[x])%>. It is up to the developer
		/// to check the value of Is<%=GetPropertyName(cols[x].Name)%>Null() and perform business logic appropriately.<%}%>
		/// </remarks>
		<%if (! cols[x].AllowDBNull && IsCSReferenceDataType(cols[x]) ) {%>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		<%}%>
		<% if ( IncludeWCFDataAttributes ) { %>
		[DataMember]
		<% } %>
		<% if ( IncludeXmlAttributes && cols[x].AllowDBNull ) { %>
		[XmlElement(IsNullable=true)]
		<% } %>
		[<%if (cols[x].IsPrimaryKeyMember && (IsIdentityColumn(cols[x]) || IsComputed(cols[x])) ) {%>ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, <%}%>DescriptionAttribute("<%=GetDescriptionAttributeText(cols[x].Description)%>"), BindableAttribute()]
		[DataObjectField(<%= dataObjectFieldParams  %>)<%= defaultValue %>]
		public <%if (commonColumns.IndexOf(cols[x].Name) != -1) Response.Write ("override "); else Response.Write ("virtual ");%><%= GetCSType(cols[x])%> <%= GetPropertyName(cols[x]) %>
		{
			get
			{
				return this.entityData.<%= GetPropertyName(cols[x]) %>; 
			}
			
			set
			{
				<% // skip
				if (false && ! cols[x].AllowDBNull && IsCSReferenceDataType(cols[x])) {%>
				//if ( value == null )
				//	throw new ArgumentNullException("value", "<%= GetPropertyName(cols[x].Name) %> does not allow null values.");
				<%}
				if ( cols[x].AllowDBNull && !IsCSReferenceDataType(cols[x]) ) {%>
				if (this.entityData.<%= GetPropertyName(cols[x]) %> == value && this.entityData.<%= GetPropertyName(cols[x]) %> != null )
				<%}
				else
				{%>
				if (this.entityData.<%= GetPropertyName(cols[x]) %> == value)
				<%}%>
					return;
					
				<% if (false && IsLengthType(cols[x])) { %>
				//if (<%if (cols[x].AllowDBNull){%>value != null &&<%}%>value.Length > <%=cols[x].Size%>)
				//{
    			//	throw new ArgumentOutOfRangeException("<%= GetPropertyName(cols[x]) %>", "<%= GetPropertyName(cols[x]) %> maximum length is <%=cols[x].Size%>.");
				//}
				<% } %>
					
				OnColumnChanging(<%=className%>Column.<%=GetPropertyName(cols[x]) %>);
				this.entityData.<%= GetPropertyName(cols[x]) %> = value;
				<% if ( cols[x].IsPrimaryKeyMember ) { %>
				this.EntityId.<%= GetPropertyName(cols[x]) %> = value;
				<% } %>
				if (<% if (IncludeWCFDataAttributes ) { %> !this._deserializing && <% } %>this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(<%=className%>Column.<%=GetPropertyName(cols[x]) %>);
				OnPropertyChanged("<%=GetPropertyName(cols[x]) %>");
			}
		}
		
		<%
			if (cols[x].IsPrimaryKeyMember && !IsIdentityColumn(cols[x]) && !IsComputed(cols[x]) )
			{%>
		/// <summary>
		/// 	Get the original value of the <%= cols[x].Name %> property.
		///		<%=GetColumnXmlComment(cols[x],2)%>
		/// </summary>
		/// <remarks>This is the original value of the <%= cols[x].Name %> property.</remarks>
		/// <value>This type is <%=cols[x].NativeType%></value>
		<% if ( IncludeXmlAttributes && cols[x].AllowDBNull ) { %>
		[XmlElement(IsNullable=true)]
		<% } %>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/<% if ( IncludeWCFDataAttributes ) { %>, DataMember	<% } %>]
		public  virtual <%= GetCSType(cols[x])%> Original<%= GetPropertyName(cols[x].Name) %>
		{
			get { return this.entityData.<%= GetOriginalPropertyName(cols[x]) %>; }
			set { this.entityData.<%= GetOriginalPropertyName(cols[x]) %> = value; }
		}
		
		<% 	} // end if updatable PK
		
		} // end for each columns 
		%>

		<% if (IncludeGetListByFK) { %>
		#region Source Foreign Key Property
				
		<%	//Generate a Source property for each foreign key relation		
		System.Collections.ArrayList filled = new System.Collections.ArrayList();
		foreach(TableKeySchema tableKey in SourceTable.ForeignKeys)
		{	
			// related table must be in the selection
			if (SourceTables.Contains(tableKey.PrimaryKeyTable)) {
			
			string fkPropertyName = GetKeysName(tableKey.ForeignKeyMemberColumns);
			
			if(filled.Contains(fkPropertyName))
				continue;
				
			filled.Add(fkPropertyName);
			
			string pkClassName = GetClassName(tableKey.PrimaryKeyTable.Name);
			string memberVarName = "_" + GetCamelCaseName(fkPropertyName) + "Source";
		%>
		private <%=pkClassName%> <%=memberVarName%> = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="<%=pkClassName%>"/>.
		/// </summary>
		/// <value>The source <%=pkClassName%> for <%=fkPropertyName%>.</value>
		[Browsable(false), BindableAttribute()]
		public virtual <%=pkClassName%> <%=fkPropertyName%>Source
      	{
            get { return this.<%=memberVarName%>; }
            set { this.<%=memberVarName%> = value; }
      	}
		<%	} //end if in SourceTables
		 } //end for each FK%>
		#endregion
		<%}// IncludeGetListByFK%>	
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "<%=SourceTable.Name%>"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {<%for (int i=0; i< SourceTable.Columns.Count; i++) {
					if (i>0) Response.Write(", ");
					Response.Write("\""+ SourceTable.Columns[i].Name + "\"");
					} %>};
			}
		}
		#endregion 
		
<% 
if(IncludeRelations) {
WriteRelationshipPropertyString();
}
%>
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as <%=structName%>;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (<%=className%>) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = (TList<<%=className%>>)value;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as <%=className%>);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  TODO: Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public override void CancelChanges()
		{
			throw new NotImplementedException("Method currently not Supported.");
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed <%=className%> Entity 
		///</summary>
		public virtual <%=className%> Copy()
		{
			//shallow copy entity
			<%=className%> copy = new <%=className%>();
			<% for (int x=0; x < cols.Count; x++) { %>
			copy.<%= GetPropertyName(cols[x].Name) %> = this.<%= GetPropertyName(cols[x].Name) %>;
			<% if( cols[x].IsPrimaryKeyMember && !IsIdentityColumn(cols[x]) && !IsComputed(cols[x]) ) { %>
			copy.<%= GetOriginalPropertyName(cols[x].Name) %> = this.<%= GetOriginalPropertyName(cols[x].Name) %>;
			<% } %>
			<% } %>
					
		<% 
		/* commented till GetChildrenCollections will work 
		if (IncludeRelations){
		int ctr = 0;
		foreach(CollectionInfo item in GetChildrenCollections(SourceTable)) { 
			if (ctr == 0)
				Response.Write("\t\t\t//deep copy nested objects" + Environment.NewLine);
			ctr++;
		%>
			copy.<%=GetCollectionClassName(item.CleanName)%> = (<%=GetCollectionClassName(item.CleanName)%>)MakeCopyOf(this.<%=GetCollectionClassName(item.CleanName)%>); 
			<% }//end foreach CollectionInfo
		}//end if IncludeRelations
		//ChildCollections.Clear();
		*/
		%>
			copy.AcceptChanges();
			return (<%=className%>)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed <%=className%> Entity which is a deep copy of the current entity.
		///</summary>
		public virtual <%=className%> DeepCopy()
		{
			return EntityHelper.Clone<<%=className%>>(this as <%=className%>);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="<%=abstractClassName%>"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(<%=abstractClassName%> toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="<%=abstractClassName%>"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="<%=abstractClassName%>"/> to compare.</param>
		///<param name="Object2">The second <see cref="<%=abstractClassName%>"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(<%=abstractClassName%> Object1, <%=abstractClassName%> Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
		<% for (int x=0; x < cols.Count; x++) {
			    if ( cols[x].AllowDBNull )
				{ %>
			if ( Object1.<%= GetPropertyName(cols[x].Name) %> != null && Object2.<%= GetPropertyName(cols[x].Name) %> != null )
			{
				if (Object1.<%= GetPropertyName(cols[x].Name) %> != Object2.<%= GetPropertyName(cols[x].Name) %>)
					equal = false;
			}
			else if (Object1.<%=GetPropertyName(cols[x].Name)%> == null ^ Object1.<%=GetPropertyName(cols[x].Name)%> == null )
			{
				equal = false;
			}
		      <%}
				else { %>
			if (Object1.<%= GetPropertyName(cols[x].Name) %> != Object2.<%= GetPropertyName(cols[x].Name) %>)
				equal = false;
			<% } // if ( cols[x].AllowDBNull ) %>
		<% }// end for %>	
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((<%=abstractClassName%>)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static <%=className%>Comparer GetComparer()
        {
            return new <%=className%>Comparer();
        }
        */

        // Comparer delegates back to <%=className%>
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(<%=className%> rhs, <%=className%>Column which)
        {
            switch (which)
            {
            	<% foreach(ColumnSchema column in cols) { %>
            	
            	<% if (column.DataType != DbType.Binary) { %>
            	
            	case <%=className%>Column.<%=GetPropertyName(column.Name)%>:
            		<% if (column.AllowDBNull && !IsCSReferenceDataType(column)) {%>
            		return this.<%=GetPropertyName(column.Name)%>.Value.CompareTo(rhs.<%=GetPropertyName(column.Name)%>.Value);
            		<% } else { %>
            		return this.<%=GetPropertyName(column.Name)%>.CompareTo(rhs.<%=GetPropertyName(column.Name)%>);
            		<% } %>  
            		
            	<% } %>
            		                 
            	<% } //end foreach %>                
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<<%= keyClassName %>> Members
		
		// member variable for the EntityId property
		private <%= keyClassName %> _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public <%= keyClassName %> EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new <%= keyClassName %>(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"<%= className %>" <%
				for (int x=0; x < cols.Count;x++) { 
					if(cols[x].IsPrimaryKeyMember) {%>
					+ this.<%=GetPropertyName(cols[x].Name)%>.ToString()<%
					}// end if 
				} //end for each column %>;
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{<%=cols.Count+1%>}{<%=cols.Count%>}<% for (int x=0; x < cols.Count; x++) { Response.Write("- " + GetPropertyName(cols[x].Name) + ": {" + x + "}{" + cols.Count + "}" ); } %>", 
			<%for (int x=0; x < cols.Count; x++)
			  {
			    if ( cols[x].AllowDBNull )
				{%>
				(this.<%=GetPropertyName(cols[x].Name)%> == null) ? string.Empty : this.<%=GetPropertyName(cols[x].Name)%>.ToString(),
				<%} else { %>
				this.<%= GetPropertyName(cols[x].Name) %>,
			<% } // if ( cols[x].AllowDBNull )
			} // for (int x=0; x < cols.Count; x++) %>
				Environment.NewLine, 
				this.GetType());
		}
		
		#region Inner data class
		<%
			CodeTemplateCompiler compiler = new CodeTemplateCompiler(this.CodeTemplateInfo.DirectoryName + "\\EntityData.cst");
			compiler.Compile();
			CodeTemplate template = null;
			
			if (compiler.Errors.Count == 0)
			{
				template =  compiler.CreateInstance();
			}
			else
			{
				for (int i = 0; i < compiler.Errors.Count; i++)
				{
					Response.WriteLine(compiler.Errors[i].ToString());
				}
			}
	
			template.SetProperty("SourceTable", SourceTable);
			template.SetProperty("SourceTables", _sourceTables);
			template.SetProperty("NameSpace", NameSpace);
			template.SetProperty("IncludeRelations", IncludeRelations);
			template.SetProperty("IncludeManyToMany", IncludeManyToMany);
			template.SetProperty("StrippedTablePrefixes", StrippedTablePrefixes);
			template.SetProperty("AliasFilePath", AliasFilePath);
			
			template.SetProperty("EntityFormat", EntityFormat);
			template.SetProperty("CollectionFormat", CollectionFormat);
			template.SetProperty("ProviderFormat", ProviderFormat);
			template.SetProperty("InterfaceFormat", InterfaceFormat);
			template.SetProperty("BaseClassFormat", BaseClassFormat);
			template.SetProperty("EnumFormat", EnumFormat);
			template.SetProperty("ManyToManyFormat", ManyToManyFormat);
			template.SetProperty("AliasFilePath", AliasFilePath);
			template.SetProperty("StrippedTablePrefixes", StrippedTablePrefixes);
			
			Response.Write(template.RenderToString());
		%>
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		<% 
		for (int x=0; x < cols.Count; x++) 
		{
			string propertyName = GetPropertyName(cols[x].Name);
			
			if (! cols[x].AllowDBNull && IsCSReferenceDataType(cols[x])) 
			{%>
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"<%=propertyName%>");
			<%
			}
			
			if (CanCheckLength(cols[x]))
			{%>
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("<%=propertyName%>",<%=cols[x].Size%>));
			<%
			}
		}
		%>		
		}
   		#endregion
	
	} // End Class
	
	#region <%=className%>Comparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class <%=className%>Comparer : System.Collections.Generic.IComparer<<%=className%>>
	{
		<%=className%>Column whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:<%=className%>Comparer"/> class.
        /// </summary>
		public <%=className%>Comparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public <%=className%>Comparer(<%=className%>Column column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="<%=className%>"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="<%=className%>"/> to compare.</param>
        /// <param name="b">The second <c><%=className%></c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(<%=className%> a, <%=className%> b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(<%=className%> entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(<%=className%> a, <%=className%> b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public <%=className%>Column WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region <%= keyClassName %> Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="<%= className %>"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class <%= keyClassName %> : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the <%= keyClassName %> class.
		/// </summary>
		public <%= keyClassName %>()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the <%= keyClassName %> class.
		/// </summary>
		public <%= keyClassName %>(<%= abstractClassName %> entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				<% foreach ( ColumnSchema column in pkCols ) { %>
				this.<%= GetPrivateName(column.Name) %> = entity.<%= GetPropertyName(column.Name) %>;
				<% } %>
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the <%= keyClassName %> class.
		/// </summary>
		public <%= keyClassName %>(<%= GetFunctionHeaderParameters(pkCols) %>)
		{
			#region Init Properties

			<% foreach ( ColumnSchema column in pkCols ) { %>
			this.<%= GetPrivateName(column.Name) %> = <%= GetPrivateName(column.Name) %>;
			<% } %>

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private <%= abstractClassName %> _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public <%= abstractClassName %> Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		<% foreach ( ColumnSchema column in pkCols ) { %>
		// member variable for the <%= GetPropertyName(column.Name) %> property
		private <%= GetCSType(column) %> <%= GetPrivateName(column.Name) %>;
		
		/// <summary>
		/// Gets or sets the <%= GetPropertyName(column.Name) %> property.
		/// </summary>
		public <%= GetCSType(column) %> <%= GetPropertyName(column.Name) %>
		{
			get { return <%= GetPrivateName(column.Name) %>; }
			set
			{
				if ( Entity != null )
				{
					Entity.<%= GetPropertyName(column.Name) %> = value;
				}
				
				<%= GetPrivateName(column.Name) %> = value;
			}
		}
		
		<% } %>
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
			<% foreach ( ColumnSchema column in pkCols ) { %>
				<% if ( column.AllowDBNull ) { %>
				<%= GetPropertyName(column.Name) %> = (<%= GetCSType(column) %>) EntityUtil.ChangeType(values["<%= GetPropertyName(column.Name) %>"], typeof(<%= GetCSType(column) %>));
				<% } else { %>
				<%= GetPropertyName(column.Name) %> = ( values["<%= GetPropertyName(column.Name) %>"] != null ) ? (<%= GetCSType(column) %>) EntityUtil.ChangeType(values["<%= GetPropertyName(column.Name) %>"], typeof(<%= GetCSType(column) %>)) : <%= GetCSDefaultByType(column) %>;
				<% } %>
			<% } %>
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			<% foreach ( ColumnSchema column in pkCols ) { %>
			values.Add("<%= GetPropertyName(column.Name) %>", <%= GetPropertyName(column.Name) %>);
			<% } %>

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("<% for ( int i=0; i<pkCols.Count; i++ ) { %><%= GetPropertyName(pkCols[i].Name) %>: {<%= i %>}{<%= pkCols.Count %>}<% } %>",
						<% foreach ( ColumnSchema column in pkCols ) { %>
							<% if ( column.AllowDBNull ) { %>
								(<%= GetPropertyName(column.Name) %> ?? String.Empty),
							<% } else { %>
								<%= GetPropertyName(column.Name) %>,
							<% } %>
						<% } %>
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	
	
	/// <summary>
	/// Enumerate the <%=className%> columns.
	/// </summary>
	[Serializable]
	public enum <%=className%>Column
	{
		<% for (int x=0; x < cols.Count; x++) { %>
		/// <summary>
		/// <%=GetPropertyName(cols[x].Name)%> : <%=GetColumnXmlComment(cols[x],2)%>
		/// </summary>
		[EnumTextValue("<%= cols[x].Name %>")]
		<%=GetPropertyName(cols[x].Name)%><%if(x < cols.Count -1) {%>,<%}%>
		<% }// end for %>	
	}//End enum

} // end namespace

<script runat="template">
///<summary>
/// Many To Many Relationship Class Template Property String
///</summary>
protected static string MANY_TO_MANY = @"
		/// <summary>
		///	Holds a collection of {3} objects
		///	which are related to this object through the junction table {2}
		/// </summary>	
		[BindableAttribute(){4}]
		public {1} {0}
		{{
			get {{ return entityData.{0}; }}
			set {{ entityData.{0} = value; }}	
		}}
";

///<summary>
/// One to One Relationship Class Template Property String
///</summary>		
protected static string ONE_TO_ONE = @"
		/// <summary>
		///	Holds a {0} object
		///	which is related to this object through the relation {1}
		/// </summary>
		[BindableAttribute(){2}]
		public {0} {0}
		{{
			get {{ return entityData.{0}; }}
			set {{ entityData.{0} = value; }}	
		}}
";
		
///<summary>
/// One To Many Relationship Class Template Property String
///</summary>		
protected static string ONE_TO_MANY = @"	
		/// <summary>
		///	Holds a collection of {2} objects
		///	which are related to this object through the relation {1}
		/// </summary>	
		[BindableAttribute(){4}]
		public {0} {3}
		{{
			get {{ return entityData.{3}; }}
			set {{ entityData.{3} = value; }}	
		}}
";
		
///<summary>
///   Writes out the property string of all the relationship object collections.
///</summary>
private void WriteRelationshipPropertyString() {
		
		///Loop Child Collections
		foreach (CollectionInfo item in GetChildrenCollections(SourceTable, SourceTables))
		{
			
			///Assign by RelationshipType, Then Write to Response
			switch((int)item.CollectionRelationshipType)
			{
				///One To One Relationship
				case (int)RelationshipType.OneToOne:
					object[] oneToOneParams = {
								GetClassName(item.SecondaryTable), 
								GetClassName(item.PkIdxName),
								IncludeWCFDataAttributes ? ", DataMember" : string.Empty
					};
					item.PropertyString = string.Format(ONE_TO_ONE
						, oneToOneParams);
					break;
					
				///One To Many, Many To One
				case (int)RelationshipType.OneToMany:
				case (int)RelationshipType.ManyToOne:
				    object[] oneToManyParams = {
							GetCollectionClassName(item.SecondaryTable)
							, item.PkIdxName
							, GetClassName(item.SecondaryTable)
							, GetCollectionPropertyName(item.SecondaryTable)
							, IncludeWCFDataAttributes ? ", DataMember" : string.Empty
					};
				item.PropertyString = string.Format(ONE_TO_MANY, oneToManyParams);
				break;
				
				///Many To Many
				case (int)RelationshipType.ManyToMany:
					object[] manyToManyParams = {
							//GetCollectionPropertyName(item.CleanName) + "_From_" + GetClassName(item.JunctionTable), 
							item.CollectionName
							,	GetCollectionClassName(item.SecondaryTable)
							,	item.JunctionTable
							, item.CleanName
							, IncludeWCFDataAttributes ? ", DataMember" : string.Empty
					};
					item.PropertyString = string.Format(MANY_TO_MANY, manyToManyParams);
					break;
				default:
					break;
			}
			
			if (!RenderedChildren.Contains(item.CleanName))
			{
				///Write it out to the resonse stream
				Response.Write(item.PropertyString);	
				RenderedChildren.Add(item.CleanName);
			}
		}///End foreach loop
		
		///enable use for the next template
		RenderedChildren.Clear();
		}
</script>

