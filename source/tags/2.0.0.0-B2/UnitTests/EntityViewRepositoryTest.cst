<%--
 * $Id: EntityViewRepositoryTest.cst,v 1.2 2005/12/14 10:04:23 jroland Exp $
 * Last modified by $Author: goofsr $
 * Last modified at $Date: 2006-04-09 20:53:51 -0500 (Sun, 09 Apr 2006) $
 * $Revision: 120 $
--%>
<%@ CodeTemplate Src="..\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Generate nUnit test for the entity." Debug="False"  ResponseEncoding="UTF-8"%>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>

<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Optional="True"  Category="DataSource" Description="Tables that the stored procedures should be based on." %>
<%@ Property Name="SourceView" Type="SchemaExplorer.ViewSchema" Category="Connection" Description="Table that the data access class should be based on." %>
<%@ Property Name="NameSpace" Type="System.String" Category="Data" Description="Project root Namespace." %>
<%@ Property Name="DALNameSpace" Type="System.String" Category="Data" Description="Project root Namespace." %>
<%@ Property Name="UTNameSpace" Type="System.String" Category="Data" Description="Project root Namespace." %>

<%@ Property Name="IncludeCustoms" Type="System.Boolean" Default="True" Category="Options" Description="If true customs stored procedures will be generated as functions." %>
<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>

<%@ Property Name="IncludeUnitTest" Type="MoM.Templates.UnitTestStyle" Default="NUnit" Category="General" Description="Indicates type of Unit tests to be generated." %>

<%
	string className = GetClassName(SourceView.Name);
	string collectionClassName = GetViewCollectionClassName(SourceView.Name);
	string providerName = GetProviderClassName(SourceView.Name);
	string unitTestClassName = GetRepositoryTestClassName(SourceView.Name);
%>

<%
	string TestAssemblyNameSpace = (IncludeUnitTest == MoM.Templates.UnitTestStyle.NUnit) ? "NUnit.Framework" : "Microsoft.VisualStudio.TestTools.UnitTesting";
	
	string TestFixtureAttr = (IncludeUnitTest == MoM.Templates.UnitTestStyle.NUnit) ? "TestFixture" : "TestClass";
	string TestAttr = (IncludeUnitTest == MoM.Templates.UnitTestStyle.NUnit) ? "Test" : "TestMethod";
%>

#region Using directives

using System;
using System.IO;
using System.Xml;
using System.Xml.Serialization;
using <%=TestAssemblyNameSpace%>;
using <%=NameSpace%>;
using <%=DALNameSpace%>;

#endregion

namespace <%=UTNameSpace%>
{
    /// <summary>
    /// Provides tests for the and <see cref="<%=className%>"/> objects (entity, collection and repository).
    /// </summary>
	/// <remarks>
	/// This file is generated once and will never be overwritten.
	/// </remarks>
    [<%=TestFixtureAttr%>]
    public partial class <%=unitTestClassName%>
    {
		/// <summary>
		/// Creates a new <see cref="<%=unitTestClassName%>"/> instance.
		/// </summary>	
		public <%=unitTestClassName%>()
		{			
		}
      
		<% if (IncludeUnitTest == MoM.Templates.UnitTestStyle.VSTS) { %>
		private TestContext testContextInstance;

		///<summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext
		{
			get
			{
				return testContextInstance;
			}
			set
			{
				testContextInstance = value;
			}
		}
		<% } %>
		
		/// <summary>
		/// This method is used to construct the test environment prior to running the tests.
		/// </summary>
        <% if (IncludeUnitTest == MoM.Templates.UnitTestStyle.NUnit) { %>
		[TestFixtureSetUp]
		public void Init()
		<% } else { // VSTS Unit tests %>
		[ClassInitialize]
        static public void Init(TestContext context)
		<% } %>
        {
			Init_Generated();
        }
    
    	/// <summary>
		/// This method is used to restore the environment after the tests are completed.
		/// </summary>
        <% if (IncludeUnitTest == MoM.Templates.UnitTestStyle.NUnit) { %>
		[TestFixtureTearDown]
        public void Dispose()
		<% } else { // VSTS Unit tests %>
		[ClassCleanup]
		static public void CleanUp()
		<% } %>
        {       	
			CleanUp_Generated();
        }
        
		
		<% if (IncludeGetList) { %>
		/// <summary>
		/// Selects all <%=className%> objects of the database.
		/// </summary>
		[<%=TestAttr%>]
		public void Step_1_SelectAll()
		{
			Step_1_SelectAll_Generated();			
		}
		
		/// <summary>
		/// Selects all <%=className%> objects of the database.
		/// </summary>
		[<%=TestAttr%>]
		public void Step_2_Search()
		{
			Step_2_Search_Generated();
		}
		<% } %>
			
		
		#region Serialization tests
		
		/// <summary>
		/// Serialize the mock <%=className%> entity into a temporary file.
		/// </summary>
		[<%=TestAttr%>]
		public void Step_6_SerializeEntity()
		{
			Step_6_SerializeEntity_Generated();			
		}
		
		/// <summary>
		/// Deserialize the mock <%=className%> entity from a temporary file.
		/// </summary>
		[<%=TestAttr%>]
		public void Step_7_DeserializeEntity()
		{
			Step_7_DeserializeEntity_Generated();
		}
		
		/// <summary>
		/// Serialize a <%=className%> collection into a temporary file.
		/// </summary>
		[<%=TestAttr%>]
		public void Step_8_SerializeCollection()
		{
			Step_8_SerializeCollection_Generated();					
		}
		
		
		/// <summary>
		/// Deserialize a <%=className%> collection from a temporary file.
		/// </summary>
		[<%=TestAttr%>]
		public void Step_9_DeserializeCollection()
		{
			Step_9_DeserializeCollection_Generated();	
		}
		#endregion
    }
}
