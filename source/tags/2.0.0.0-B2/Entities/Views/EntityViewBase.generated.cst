<%--
 * $Id: EntityViewBase.generated.cst,v 1.1 2006/01/23 13:08:05 jroland Exp $
 * Last modified by $Author: jroland $
 * Last modified at $Date: 2006-03-16 16:53:08 -0600 (Thu, 16 Mar 2006) $
 * $Revision: 62 $
--%>
<%@ CodeTemplate Src="..\..\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Business object base class" ResponseEncoding="UTF-8"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>

<%@ Property Name="NameSpace" Optional="True" Type="System.String" Category="Style" Description="Object Namespace." %>
<%@ Property Name="SourceView" Type="SchemaExplorer.ViewSchema" Category="Connection" Description="Table Object should be based on." %>
<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Connection" Description="Tables of the sytem." %>
<%@ Property Name="IncludeRelations" Type="System.Boolean" Default="False" Category="Options" Description="Include Collections for Related Entities."%>
<%@ Property Name="IncludeWCFDataAttributes" Type="System.Boolean" Default="False" Category="02. Framework Generation - Optional" Description="Indicates if the WCF attributes, [DataContract] and [DataMember], should be included on the entity classes." %>
<%@ Property Name="IncludeXmlAttributes" Type="System.Boolean" Default="False" Category="02. Framework Generation - Optional" Description="Indicates if the Xml attributes, [XmlElement(IsNullable=true)], should be included on the entity classes." %>
<%
	string abstractClassName = GetAbstractClassName(SourceView.Name);	
	string className = GetClassName(SourceView.Name);
%>
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : <%=DateTime.Now.ToLongDateString()%>
	Important: Do not modify this file. Edit the file <%=className%>.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace <%=NameSpace%>
{
	///<summary>
	/// <% if(SourceView.Description.Length == 0 ) {%>An object representation of the '<%=SourceView.Name%>' view. [No description found in the database]<%} else {Response.Write(GetColumnXmlComment(SourceView,1));}%>	
	///</summary>
	<% if ( IncludeWCFDataAttributes ) { %>
	[DataContract]
	<% } %>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("<%=abstractClassName%>")]
	public abstract partial class <%=abstractClassName%> : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		<% for (int x=0; x < SourceView.Columns.Count; x++) { %>
		
		/// <summary>
		/// <%=SourceView.Columns[x].Name%> : <%=SourceView.Columns[x].Description%>
		/// </summary>
		private <%= GetCSType(SourceView.Columns[x]) %><%= Tab(2) %>  <%= GetMemberVariableName(SourceView.Columns[x].Name) %> = <% if ( SourceView.Columns[x].AllowDBNull && IsCSReferenceDataType(SourceView.Columns[x]) ) { %>null<% } else { %><%=GetCSDefaultByType(SourceView.Columns[x])%><% }%>;
		<%} //end for %>
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="<%=abstractClassName%>"/> instance.
		///</summary>
		public <%=abstractClassName%>()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="<%=abstractClassName%>"/> instance.
		///</summary>
		<% for (int x=0; x < SourceView.Columns.Count; x++) { %>
		///<param name="<%=GetPrivateName(SourceView.Columns[x].Name) %>"><%=SourceView.Columns[x].Description%></param>
		<% } %>
		public <%=abstractClassName%>(<% for (int x=0; x < SourceView.Columns.Count; x++) { %><%= GetCSType(SourceView.Columns[x]) %> <%= GetPrivateName(SourceView.Columns[x].Name) %><%if (x < SourceView.Columns.Count -1){%>, <%} } // end for %>)
		{
			<% for (int x=0; x < SourceView.Columns.Count; x++) { %>
			this.<%= GetMemberVariableName(SourceView.Columns[x].Name) %> = <%= GetPrivateName(SourceView.Columns[x].Name) %>;
			<% }// end for %>
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="<%=className%>"/> instance.
		///</summary>
		<% for (int x=0; x < SourceView.Columns.Count; x++) { %>
		///<param name="<%=GetPrivateName(SourceView.Columns[x].Name) %>"><%=SourceView.Columns[x].Description%></param>
		<% } %>
		public static <%=className%> Create<%=className%>(<% for (int x=0; x < SourceView.Columns.Count; x++) { %><%= GetCSType(SourceView.Columns[x]) %> <%= GetPrivateName(SourceView.Columns[x].Name) %><%if (x < SourceView.Columns.Count -1){%>, <%} else {%>)<%}%><% }// end for %>
		{
			<%=className%> new<%=className%> = new <%=className%>();
			<% for (int x=0; x < SourceView.Columns.Count; x++) { %>
			new<%=className%>.<%= GetPropertyName(SourceView.Columns[x].Name) %> = <%= GetPrivateName(SourceView.Columns[x].Name) %>;
			<% }// end for %>
			return new<%=className%>;
		}
				
		#endregion Constructors
		
		#region Properties	
		<% for (int x=0; x < SourceView.Columns.Count; x++) { %>
		/// <summary>
		/// 	Gets or Sets the <%= SourceView.Columns[x].Name %> property. 
		///		<%=SourceView.Columns[x].Description%>
		/// </summary>
		/// <value>This type is <%=SourceView.Columns[x].NativeType%></value>
		/// <remarks>
		/// This property can<%if (!SourceView.Columns[x].AllowDBNull) {%> not<%}%> be set to null. <%if (SourceView.Columns[x].AllowDBNull && !IsCSReferenceDataType(SourceView.Columns[x])) {%>
		/// If this column is null, this property will return <%=GetCSDefaultByType(SourceView.Columns[x])%>. It is up to the developer
		/// to check the value of Is<%=GetPropertyName(SourceView.Columns[x].Name)%>Null() and perform business logic appropriately.<%}%>
		/// </remarks>
		<%if (! SourceView.Columns[x].AllowDBNull && IsCSReferenceDataType(SourceView.Columns[x]) ) {%>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		<%}%>
		<% if ( IncludeWCFDataAttributes ) { %>
		[DataMember]
		<% } %>
		<% if ( IncludeXmlAttributes && SourceView.Columns[x].AllowDBNull ) { %>
		[XmlElement(IsNullable=true)]
		<% } %>
		[DescriptionAttribute("<%=GetDescriptionAttributeText(SourceView.Columns[x].Description)%>"), BindableAttribute()]
		public virtual <%= GetCSType(SourceView.Columns[x])%> <%= GetPropertyName(SourceView.Columns[x].Name) %>
		{
			get
			{
				return this.<%= GetMemberVariableName(SourceView.Columns[x].Name) %>; 
			}
			set
			{
				<%if (! SourceView.Columns[x].AllowDBNull && IsCSReferenceDataType(SourceView.Columns[x]) ) {%>
				if ( value == null )
					throw new ArgumentNullException("value", "<%= GetPropertyName(SourceView.Columns[x].Name) %> does not allow null values.");
				<%}
				if ( SourceView.Columns[x].AllowDBNull && !IsCSReferenceDataType(SourceView.Columns[x]) ) {%>
				if (<%= GetMemberVariableName(SourceView.Columns[x].Name) %> == value && <%=GetPropertyName(SourceView.Columns[x].Name)%> != null )
				<%}
				else
				{%>
				if (<%= GetMemberVariableName(SourceView.Columns[x].Name) %> == value)
				<%} // end if (! IsCSReferenceDataType(SourceView.Columns[x]) ) %>
					return;
					
				this.<%= GetMemberVariableName(SourceView.Columns[x].Name) %> = value;
				this._isDirty = true;	
				OnPropertyChanged(<%=className%>Column.<%=GetPropertyName(SourceView.Columns[x].Name) %>.ToString());
			}
		}
		
		<% }// end for %>
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "<%=SourceView.Name%>"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  TODO: Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges(){
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed <%=abstractClassName%> Entity 
		///</summary>
		public virtual <%=abstractClassName%> Copy()
		{
			//shallow copy entity
			<%=className%> copy = new <%=className%>();
			<% for (int x=0; x < SourceView.Columns.Count; x++) { %>
				copy.<%= GetPropertyName(SourceView.Columns[x].Name) %> = this.<%= GetPropertyName(SourceView.Columns[x].Name) %>;
			<% } %>
			copy.AcceptChanges();
			return (<%=className%>)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="<%=abstractClassName%>"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(<%=abstractClassName%> toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="<%=abstractClassName%>"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="<%=abstractClassName%>"/> to compare.</param>
		///<param name="Object2">The second <see cref="<%=abstractClassName%>"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(<%=abstractClassName%> Object1, <%=abstractClassName%> Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
		<% for (int x=0; x < SourceView.Columns.Count; x++) {
			    if ( SourceView.Columns[x].AllowDBNull )
				{ %>
			if (Object1.<%=GetPropertyName(SourceView.Columns[x].Name)%> != null && Object2.<%=GetPropertyName(SourceView.Columns[x].Name)%> != null )
			{
				if (Object1.<%= GetPropertyName(SourceView.Columns[x].Name) %> != Object2.<%= GetPropertyName(SourceView.Columns[x].Name) %>)
					equal = false;
			}
			else if (Object1.<%=GetPropertyName(SourceView.Columns[x].Name)%> == null ^ Object1.<%=GetPropertyName(SourceView.Columns[x].Name)%> == null )
			{
				equal = false;
			}
		      <%}
				else { %>
			if (Object1.<%= GetPropertyName(SourceView.Columns[x].Name) %> != Object2.<%= GetPropertyName(SourceView.Columns[x].Name) %>)
				equal = false;
			<% } // if ( SourceView.Columns[x].AllowDBNull ) %>
		<% }// end for %>	
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			// TODO compare each column
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (null != PropertyChanged)
			{
				PropertyChanged(this, e);
			}
		}
		
		#endregion
		
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{<%=SourceView.Columns.Count+1%>}{<%=SourceView.Columns.Count%>}<% for (int x=0; x < SourceView.Columns.Count; x++) { Response.Write("- " + GetPropertyName(SourceView.Columns[x].Name) + ": {" + x + "}{" + SourceView.Columns.Count + "}" ); } %>", 
			<%for (int x=0; x < SourceView.Columns.Count; x++)
			  {
			    if ( SourceView.Columns[x].AllowDBNull )
				{%>
				(this.<%=GetPropertyName(SourceView.Columns[x].Name)%> == null) ? string.Empty : this.<%=GetPropertyName(SourceView.Columns[x].Name)%>.ToString(),
			     
				<% } else { %>
				this.<%= GetPropertyName(SourceView.Columns[x].Name) %>,
			<% } // if ( SourceView.Columns[x].AllowDBNull )
			} // for (int x=0; x < SourceView.Columns.Count; x++) %>
				Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the <%=className%> columns.
	/// </summary>
	[Serializable]
	public enum <%=className%>Column
	{
		<% for (int x=0; x < SourceView.Columns.Count; x++) { %>
		/// <summary>
		/// <%=SourceView.Columns[x].Name%> : <%=SourceView.Columns[x].Description%>
		/// </summary>
		<%=GetPropertyName(SourceView.Columns[x].Name)%><%if(x < SourceView.Columns.Count -1) {%>,<%}%>
		<% }// end for %>	
	}//End enum

} // end namespace
