	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : mercredi 15 mars 2006
	Important: Do not modify this file. Edit the file Account.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace netTiers.PetShop
{
	#region AccountEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Account"/> object.
	/// </remarks>
	public class AccountEventArgs : System.EventArgs
	{
		private AccountColumn column;
		
		///<summary>
		/// Initalizes a new Instance of the AccountEventArgs class.
		///</summary>
		public AccountEventArgs(AccountColumn column)
		{
			this.column = column;
		}
		
		
		///<summary>
		/// The AccountColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AccountColumn" />
		public AccountColumn Column { get { return this.column; } }
	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all Account related events.
	///</summary>
	public delegate void AccountEventHandler(object sender, AccountEventArgs e);
			
	[Serializable]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(Account))]
	public abstract partial class AccountBase : EntityBase, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private AccountData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//AccountData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private AccountData backupData; 
		
		[NonSerialized]
		private TList<Account> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event AccountEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AccountEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AccountBase"/> instance.
		///</summary>
		public AccountBase()
		{
			this.entityData = new AccountData();
			this.backupData = null;
			
			AddValidationRules();
		}		
		
		///<summary>
		/// Creates a new <see cref="AccountBase"/> instance.
		///</summary>
		///<param name="accountId"></param>
		///<param name="accountFirstName"></param>
		///<param name="accountLastName"></param>
		///<param name="accountStreetAddress"></param>
		///<param name="accountPostalCode"></param>
		///<param name="accountCity"></param>
		///<param name="accountStateOrProvince"></param>
		///<param name="accountCountry"></param>
		///<param name="accountTelephoneNumber"></param>
		///<param name="accountEmail"></param>
		///<param name="accountLogin"></param>
		///<param name="accountPassword"></param>
		///<param name="accountIWantMyList"></param>
		///<param name="accountIWantPetTips"></param>
		///<param name="accountFavoriteLanguage"></param>
		///<param name="accountCreditCardId"></param>
		///<param name="accountFavoriteCategoryId"></param>
		public AccountBase(System.String accountId, System.String accountFirstName, System.String accountLastName, 
			System.String accountStreetAddress, System.String accountPostalCode, System.String accountCity, System.String accountStateOrProvince, 
			System.String accountCountry, System.String accountTelephoneNumber, System.String accountEmail, System.String accountLogin, 
			System.String accountPassword, System.Boolean? accountIWantMyList, System.Boolean? accountIWantPetTips, System.String accountFavoriteLanguage, 
			System.String accountCreditCardId, System.String accountFavoriteCategoryId)
		{
			this.entityData = new AccountData();
			this.backupData = null;
			
			AddValidationRules();
			
			this.Id = accountId;
			this.FirstName = accountFirstName;
			this.LastName = accountLastName;
			this.StreetAddress = accountStreetAddress;
			this.PostalCode = accountPostalCode;
			this.City = accountCity;
			this.StateOrProvince = accountStateOrProvince;
			this.Country = accountCountry;
			this.TelephoneNumber = accountTelephoneNumber;
			this.Email = accountEmail;
			this.Login = accountLogin;
			this.Password = accountPassword;
			this.IWantMyList = accountIWantMyList;
			this.IWantPetTips = accountIWantPetTips;
			this.FavoriteLanguage = accountFavoriteLanguage;
			this.CreditCardId = accountCreditCardId;
			this.FavoriteCategoryId = accountFavoriteCategoryId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Account"/> instance.
		///</summary>
		///<param name="accountId"></param>
		///<param name="accountFirstName"></param>
		///<param name="accountLastName"></param>
		///<param name="accountStreetAddress"></param>
		///<param name="accountPostalCode"></param>
		///<param name="accountCity"></param>
		///<param name="accountStateOrProvince"></param>
		///<param name="accountCountry"></param>
		///<param name="accountTelephoneNumber"></param>
		///<param name="accountEmail"></param>
		///<param name="accountLogin"></param>
		///<param name="accountPassword"></param>
		///<param name="accountIWantMyList"></param>
		///<param name="accountIWantPetTips"></param>
		///<param name="accountFavoriteLanguage"></param>
		///<param name="accountCreditCardId"></param>
		///<param name="accountFavoriteCategoryId"></param>
		public static Account CreateAccount(System.String accountId, System.String accountFirstName, System.String accountLastName, 
			System.String accountStreetAddress, System.String accountPostalCode, System.String accountCity, System.String accountStateOrProvince, 
			System.String accountCountry, System.String accountTelephoneNumber, System.String accountEmail, System.String accountLogin, 
			System.String accountPassword, System.Boolean? accountIWantMyList, System.Boolean? accountIWantPetTips, System.String accountFavoriteLanguage, 
			System.String accountCreditCardId, System.String accountFavoriteCategoryId)
		{
			Account newAccount = new Account();
			newAccount.Id = accountId;
			newAccount.FirstName = accountFirstName;
			newAccount.LastName = accountLastName;
			newAccount.StreetAddress = accountStreetAddress;
			newAccount.PostalCode = accountPostalCode;
			newAccount.City = accountCity;
			newAccount.StateOrProvince = accountStateOrProvince;
			newAccount.Country = accountCountry;
			newAccount.TelephoneNumber = accountTelephoneNumber;
			newAccount.Email = accountEmail;
			newAccount.Login = accountLogin;
			newAccount.Password = accountPassword;
			newAccount.IWantMyList = accountIWantMyList;
			newAccount.IWantPetTips = accountIWantPetTips;
			newAccount.FavoriteLanguage = accountFavoriteLanguage;
			newAccount.CreditCardId = accountCreditCardId;
			newAccount.FavoriteCategoryId = accountFavoriteCategoryId;
			return newAccount;
		}
				
		#endregion Constructors
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccountColumn"/> which has raised the event.</param>
		public void OnColumnChanging(AccountColumn column)
		{
			AccountEventHandler handler = ColumnChanging;
			if(handler != null)
			{
				handler(this, new AccountEventArgs(column));
			}
	
		}
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccountColumn"/> which has raised the event.</param>
		public void OnColumnChanged(AccountColumn column)
		{
			AccountEventHandler handler = ColumnChanged;
			if(handler != null)
			{
				handler(this, new AccountEventArgs(column));
			}
			
			// warn the parent list that i have changed
			OnEntityChanged();
	
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		public override System.String Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				//if ( value == null )
				//	throw new ArgumentNullException("value", "Id does not allow null values.");
				if (this.entityData.Id == value)
					return;
					
				//if (value.Length > 36)
				//{
    			//	throw new ArgumentOutOfRangeException("Id", "Id maximum length is 36.");
				//}
					
				OnColumnChanging(AccountColumn.Id);
				this.entityData.Id = value;
				//this._isDirty = true;
				if (this.state == EntityState.Unchanged)
				{
					this.state = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.Id);
				OnPropertyChanged(AccountColumn.Id.ToString());
			}
		}
		
		/// <summary>
		/// 	Get the original value of the Id property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the Id property.</remarks>
		/// <value>This type is char</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalId
		{
			get { return this.entityData.OriginalId; }
			set { this.entityData.OriginalId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the FirstName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.String FirstName
		{
			get
			{
				return this.entityData.FirstName; 
			}
			
			set
			{
				if (this.entityData.FirstName == value)
					return;
					
				//if (value != null &&value.Length > 255)
				//{
    			//	throw new ArgumentOutOfRangeException("FirstName", "FirstName maximum length is 255.");
				//}
					
				OnColumnChanging(AccountColumn.FirstName);
				this.entityData.FirstName = value;
				//this._isDirty = true;
				if (this.state == EntityState.Unchanged)
				{
					this.state = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.FirstName);
				OnPropertyChanged(AccountColumn.FirstName.ToString());
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.String LastName
		{
			get
			{
				return this.entityData.LastName; 
			}
			
			set
			{
				if (this.entityData.LastName == value)
					return;
					
				//if (value != null &&value.Length > 255)
				//{
    			//	throw new ArgumentOutOfRangeException("LastName", "LastName maximum length is 255.");
				//}
					
				OnColumnChanging(AccountColumn.LastName);
				this.entityData.LastName = value;
				//this._isDirty = true;
				if (this.state == EntityState.Unchanged)
				{
					this.state = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.LastName);
				OnPropertyChanged(AccountColumn.LastName.ToString());
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StreetAddress property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.String StreetAddress
		{
			get
			{
				return this.entityData.StreetAddress; 
			}
			
			set
			{
				if (this.entityData.StreetAddress == value)
					return;
					
				//if (value != null &&value.Length > 255)
				//{
    			//	throw new ArgumentOutOfRangeException("StreetAddress", "StreetAddress maximum length is 255.");
				//}
					
				OnColumnChanging(AccountColumn.StreetAddress);
				this.entityData.StreetAddress = value;
				//this._isDirty = true;
				if (this.state == EntityState.Unchanged)
				{
					this.state = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.StreetAddress);
				OnPropertyChanged(AccountColumn.StreetAddress.ToString());
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PostalCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.String PostalCode
		{
			get
			{
				return this.entityData.PostalCode; 
			}
			
			set
			{
				if (this.entityData.PostalCode == value)
					return;
					
				//if (value != null &&value.Length > 255)
				//{
    			//	throw new ArgumentOutOfRangeException("PostalCode", "PostalCode maximum length is 255.");
				//}
					
				OnColumnChanging(AccountColumn.PostalCode);
				this.entityData.PostalCode = value;
				//this._isDirty = true;
				if (this.state == EntityState.Unchanged)
				{
					this.state = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.PostalCode);
				OnPropertyChanged(AccountColumn.PostalCode.ToString());
			}
		}
		
		/// <summary>
		/// 	Gets or sets the City property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.String City
		{
			get
			{
				return this.entityData.City; 
			}
			
			set
			{
				if (this.entityData.City == value)
					return;
					
				//if (value != null &&value.Length > 255)
				//{
    			//	throw new ArgumentOutOfRangeException("City", "City maximum length is 255.");
				//}
					
				OnColumnChanging(AccountColumn.City);
				this.entityData.City = value;
				//this._isDirty = true;
				if (this.state == EntityState.Unchanged)
				{
					this.state = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.City);
				OnPropertyChanged(AccountColumn.City.ToString());
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StateOrProvince property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.String StateOrProvince
		{
			get
			{
				return this.entityData.StateOrProvince; 
			}
			
			set
			{
				if (this.entityData.StateOrProvince == value)
					return;
					
				//if (value != null &&value.Length > 255)
				//{
    			//	throw new ArgumentOutOfRangeException("StateOrProvince", "StateOrProvince maximum length is 255.");
				//}
					
				OnColumnChanging(AccountColumn.StateOrProvince);
				this.entityData.StateOrProvince = value;
				//this._isDirty = true;
				if (this.state == EntityState.Unchanged)
				{
					this.state = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.StateOrProvince);
				OnPropertyChanged(AccountColumn.StateOrProvince.ToString());
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Country property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.String Country
		{
			get
			{
				return this.entityData.Country; 
			}
			
			set
			{
				if (this.entityData.Country == value)
					return;
					
				//if (value != null &&value.Length > 255)
				//{
    			//	throw new ArgumentOutOfRangeException("Country", "Country maximum length is 255.");
				//}
					
				OnColumnChanging(AccountColumn.Country);
				this.entityData.Country = value;
				//this._isDirty = true;
				if (this.state == EntityState.Unchanged)
				{
					this.state = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.Country);
				OnPropertyChanged(AccountColumn.Country.ToString());
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TelephoneNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.String TelephoneNumber
		{
			get
			{
				return this.entityData.TelephoneNumber; 
			}
			
			set
			{
				if (this.entityData.TelephoneNumber == value)
					return;
					
				//if (value != null &&value.Length > 255)
				//{
    			//	throw new ArgumentOutOfRangeException("TelephoneNumber", "TelephoneNumber maximum length is 255.");
				//}
					
				OnColumnChanging(AccountColumn.TelephoneNumber);
				this.entityData.TelephoneNumber = value;
				//this._isDirty = true;
				if (this.state == EntityState.Unchanged)
				{
					this.state = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.TelephoneNumber);
				OnPropertyChanged(AccountColumn.TelephoneNumber.ToString());
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Email property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.String Email
		{
			get
			{
				return this.entityData.Email; 
			}
			
			set
			{
				if (this.entityData.Email == value)
					return;
					
				//if (value != null &&value.Length > 255)
				//{
    			//	throw new ArgumentOutOfRangeException("Email", "Email maximum length is 255.");
				//}
					
				OnColumnChanging(AccountColumn.Email);
				this.entityData.Email = value;
				//this._isDirty = true;
				if (this.state == EntityState.Unchanged)
				{
					this.state = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.Email);
				OnPropertyChanged(AccountColumn.Email.ToString());
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Login property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.String Login
		{
			get
			{
				return this.entityData.Login; 
			}
			
			set
			{
				if (this.entityData.Login == value)
					return;
					
				//if (value != null &&value.Length > 255)
				//{
    			//	throw new ArgumentOutOfRangeException("Login", "Login maximum length is 255.");
				//}
					
				OnColumnChanging(AccountColumn.Login);
				this.entityData.Login = value;
				//this._isDirty = true;
				if (this.state == EntityState.Unchanged)
				{
					this.state = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.Login);
				OnPropertyChanged(AccountColumn.Login.ToString());
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Password property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.String Password
		{
			get
			{
				return this.entityData.Password; 
			}
			
			set
			{
				if (this.entityData.Password == value)
					return;
					
				//if (value != null &&value.Length > 255)
				//{
    			//	throw new ArgumentOutOfRangeException("Password", "Password maximum length is 255.");
				//}
					
				OnColumnChanging(AccountColumn.Password);
				this.entityData.Password = value;
				//this._isDirty = true;
				if (this.state == EntityState.Unchanged)
				{
					this.state = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.Password);
				OnPropertyChanged(AccountColumn.Password.ToString());
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IWantMyList property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIWantMyListNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.Boolean? IWantMyList
		{
			get
			{
				return this.entityData.IWantMyList; 
			}
			
			set
			{
				if (this.entityData.IWantMyList == value && this.entityData.IWantMyList != null )
					return;
					
					
				OnColumnChanging(AccountColumn.IWantMyList);
				this.entityData.IWantMyList = value;
				//this._isDirty = true;
				if (this.state == EntityState.Unchanged)
				{
					this.state = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.IWantMyList);
				OnPropertyChanged(AccountColumn.IWantMyList.ToString());
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IWantPetTips property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIWantPetTipsNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.Boolean? IWantPetTips
		{
			get
			{
				return this.entityData.IWantPetTips; 
			}
			
			set
			{
				if (this.entityData.IWantPetTips == value && this.entityData.IWantPetTips != null )
					return;
					
					
				OnColumnChanging(AccountColumn.IWantPetTips);
				this.entityData.IWantPetTips = value;
				//this._isDirty = true;
				if (this.state == EntityState.Unchanged)
				{
					this.state = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.IWantPetTips);
				OnPropertyChanged(AccountColumn.IWantPetTips.ToString());
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FavoriteLanguage property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.String FavoriteLanguage
		{
			get
			{
				return this.entityData.FavoriteLanguage; 
			}
			
			set
			{
				if (this.entityData.FavoriteLanguage == value)
					return;
					
				//if (value != null &&value.Length > 255)
				//{
    			//	throw new ArgumentOutOfRangeException("FavoriteLanguage", "FavoriteLanguage maximum length is 255.");
				//}
					
				OnColumnChanging(AccountColumn.FavoriteLanguage);
				this.entityData.FavoriteLanguage = value;
				//this._isDirty = true;
				if (this.state == EntityState.Unchanged)
				{
					this.state = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.FavoriteLanguage);
				OnPropertyChanged(AccountColumn.FavoriteLanguage.ToString());
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreditCardId property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.String CreditCardId
		{
			get
			{
				return this.entityData.CreditCardId; 
			}
			
			set
			{
				if (this.entityData.CreditCardId == value)
					return;
					
				//if (value != null &&value.Length > 36)
				//{
    			//	throw new ArgumentOutOfRangeException("CreditCardId", "CreditCardId maximum length is 36.");
				//}
					
				OnColumnChanging(AccountColumn.CreditCardId);
				this.entityData.CreditCardId = value;
				//this._isDirty = true;
				if (this.state == EntityState.Unchanged)
				{
					this.state = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.CreditCardId);
				OnPropertyChanged(AccountColumn.CreditCardId.ToString());
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FavoriteCategoryId property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.String FavoriteCategoryId
		{
			get
			{
				return this.entityData.FavoriteCategoryId; 
			}
			
			set
			{
				if (this.entityData.FavoriteCategoryId == value)
					return;
					
				//if (value != null &&value.Length > 36)
				//{
    			//	throw new ArgumentOutOfRangeException("FavoriteCategoryId", "FavoriteCategoryId maximum length is 36.");
				//}
					
				OnColumnChanging(AccountColumn.FavoriteCategoryId);
				this.entityData.FavoriteCategoryId = value;
				//this._isDirty = true;
				if (this.state == EntityState.Unchanged)
				{
					this.state = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.FavoriteCategoryId);
				OnPropertyChanged(AccountColumn.FavoriteCategoryId.ToString());
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Timestamp property. 
		///		
		/// </summary>
		/// <value>This type is timestamp.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.Byte[] Timestamp
		{
			get
			{
				return this.entityData.Timestamp; 
			}
			
			set
			{
				if (this.entityData.Timestamp == value)
					return;
					
				//if (value != null &&value.Length > 8)
				//{
    			//	throw new ArgumentOutOfRangeException("Timestamp", "Timestamp maximum length is 8.");
				//}
					
				OnColumnChanging(AccountColumn.Timestamp);
				this.entityData.Timestamp = value;
				//this._isDirty = true;
				if (this.state == EntityState.Unchanged)
				{
					this.state = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.Timestamp);
				OnPropertyChanged(AccountColumn.Timestamp.ToString());
			}
		}
		

		#region "Source Foreign Key Property"
				
		private Category _favoriteCategoryIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Category"/>.
		/// </summary>
		/// <value>The source Category for FavoriteCategoryId.</value>
		[Browsable(false)]
		public Category FavoriteCategoryIdSource
		
      	{
            get { return this._favoriteCategoryIdSource; }
            set { this._favoriteCategoryIdSource = value; }
      	}
		private CreditCard _creditCardIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="CreditCard"/>.
		/// </summary>
		/// <value>The source CreditCard for CreditCardId.</value>
		[Browsable(false)]
		public CreditCard CreditCardIdSource
		
      	{
            get { return this._creditCardIdSource; }
            set { this._creditCardIdSource = value; }
      	}
		#endregion
			

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Account"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"Id", "FirstName", "LastName", "StreetAddress", "PostalCode", "City", "StateOrProvince", "Country", "TelephoneNumber", "Email", "Login", "Password", "IWantMyList", "IWantPetTips", "FavoriteLanguage", "CreditCardId", "FavoriteCategoryId", "Timestamp"};
			}
		}
		
		#endregion
		
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
            CancelAddNewEventHandler handler = CancelAddNew ;
            if (handler != null)
            {    
                handler(this, EventArgs.Empty) ;
            }
        }

		
		#region IEditableObject
		
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AccountData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.state == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Account) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.state = EntityState.Added ;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) this.state = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = (TList<Account>)value;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Account);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  TODO: Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public override void CancelChanges()
		{
			throw new NotImplementedException("Method currently not Supported.");
		}	
		
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AccountBase Entity 
		///</summary>
		public virtual AccountBase Copy()
		{
			//shallow copy entity
			Account copy = new Account();
			copy.Id = this.Id;
			copy.OriginalId = this.OriginalId;
			copy.FirstName = this.FirstName;
			copy.LastName = this.LastName;
			copy.StreetAddress = this.StreetAddress;
			copy.PostalCode = this.PostalCode;
			copy.City = this.City;
			copy.StateOrProvince = this.StateOrProvince;
			copy.Country = this.Country;
			copy.TelephoneNumber = this.TelephoneNumber;
			copy.Email = this.Email;
			copy.Login = this.Login;
			copy.Password = this.Password;
			copy.IWantMyList = this.IWantMyList;
			copy.IWantPetTips = this.IWantPetTips;
			copy.FavoriteLanguage = this.FavoriteLanguage;
			copy.CreditCardId = this.CreditCardId;
			copy.FavoriteCategoryId = this.FavoriteCategoryId;
			copy.Timestamp = this.Timestamp;
					
			copy.AcceptChanges();
			return (Account)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AccountBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AccountBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="AccountBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="AccountBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AccountBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(AccountBase Object1, AccountBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.FirstName != null && Object2.FirstName != null )
			{
				if (Object1.FirstName != Object2.FirstName)
					equal = false;
			}
			else if (Object1.FirstName == null ^ Object1.FirstName == null )
			{
				equal = false;
			}
			if ( Object1.LastName != null && Object2.LastName != null )
			{
				if (Object1.LastName != Object2.LastName)
					equal = false;
			}
			else if (Object1.LastName == null ^ Object1.LastName == null )
			{
				equal = false;
			}
			if ( Object1.StreetAddress != null && Object2.StreetAddress != null )
			{
				if (Object1.StreetAddress != Object2.StreetAddress)
					equal = false;
			}
			else if (Object1.StreetAddress == null ^ Object1.StreetAddress == null )
			{
				equal = false;
			}
			if ( Object1.PostalCode != null && Object2.PostalCode != null )
			{
				if (Object1.PostalCode != Object2.PostalCode)
					equal = false;
			}
			else if (Object1.PostalCode == null ^ Object1.PostalCode == null )
			{
				equal = false;
			}
			if ( Object1.City != null && Object2.City != null )
			{
				if (Object1.City != Object2.City)
					equal = false;
			}
			else if (Object1.City == null ^ Object1.City == null )
			{
				equal = false;
			}
			if ( Object1.StateOrProvince != null && Object2.StateOrProvince != null )
			{
				if (Object1.StateOrProvince != Object2.StateOrProvince)
					equal = false;
			}
			else if (Object1.StateOrProvince == null ^ Object1.StateOrProvince == null )
			{
				equal = false;
			}
			if ( Object1.Country != null && Object2.Country != null )
			{
				if (Object1.Country != Object2.Country)
					equal = false;
			}
			else if (Object1.Country == null ^ Object1.Country == null )
			{
				equal = false;
			}
			if ( Object1.TelephoneNumber != null && Object2.TelephoneNumber != null )
			{
				if (Object1.TelephoneNumber != Object2.TelephoneNumber)
					equal = false;
			}
			else if (Object1.TelephoneNumber == null ^ Object1.TelephoneNumber == null )
			{
				equal = false;
			}
			if ( Object1.Email != null && Object2.Email != null )
			{
				if (Object1.Email != Object2.Email)
					equal = false;
			}
			else if (Object1.Email == null ^ Object1.Email == null )
			{
				equal = false;
			}
			if ( Object1.Login != null && Object2.Login != null )
			{
				if (Object1.Login != Object2.Login)
					equal = false;
			}
			else if (Object1.Login == null ^ Object1.Login == null )
			{
				equal = false;
			}
			if ( Object1.Password != null && Object2.Password != null )
			{
				if (Object1.Password != Object2.Password)
					equal = false;
			}
			else if (Object1.Password == null ^ Object1.Password == null )
			{
				equal = false;
			}
			if ( Object1.IWantMyList != null && Object2.IWantMyList != null )
			{
				if (Object1.IWantMyList != Object2.IWantMyList)
					equal = false;
			}
			else if (Object1.IWantMyList == null ^ Object1.IWantMyList == null )
			{
				equal = false;
			}
			if ( Object1.IWantPetTips != null && Object2.IWantPetTips != null )
			{
				if (Object1.IWantPetTips != Object2.IWantPetTips)
					equal = false;
			}
			else if (Object1.IWantPetTips == null ^ Object1.IWantPetTips == null )
			{
				equal = false;
			}
			if ( Object1.FavoriteLanguage != null && Object2.FavoriteLanguage != null )
			{
				if (Object1.FavoriteLanguage != Object2.FavoriteLanguage)
					equal = false;
			}
			else if (Object1.FavoriteLanguage == null ^ Object1.FavoriteLanguage == null )
			{
				equal = false;
			}
			if ( Object1.CreditCardId != null && Object2.CreditCardId != null )
			{
				if (Object1.CreditCardId != Object2.CreditCardId)
					equal = false;
			}
			else if (Object1.CreditCardId == null ^ Object1.CreditCardId == null )
			{
				equal = false;
			}
			if ( Object1.FavoriteCategoryId != null && Object2.FavoriteCategoryId != null )
			{
				if (Object1.FavoriteCategoryId != Object2.FavoriteCategoryId)
					equal = false;
			}
			else if (Object1.FavoriteCategoryId == null ^ Object1.FavoriteCategoryId == null )
			{
				equal = false;
			}
			if ( Object1.Timestamp != null && Object2.Timestamp != null )
			{
				if (Object1.Timestamp != Object2.Timestamp)
					equal = false;
			}
			else if (Object1.Timestamp == null ^ Object1.Timestamp == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((AccountBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static AccountComparer GetComparer()
        {
            return new AccountComparer();
        }
        */

        // Comparer delegates back to Account
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Account rhs, AccountColumn which)
        {
            switch (which)
            {
            	
            	
            	case AccountColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case AccountColumn.FirstName:
            		return this.FirstName.CompareTo(rhs.FirstName);
            		
            		                 
            	
            	
            	case AccountColumn.LastName:
            		return this.LastName.CompareTo(rhs.LastName);
            		
            		                 
            	
            	
            	case AccountColumn.StreetAddress:
            		return this.StreetAddress.CompareTo(rhs.StreetAddress);
            		
            		                 
            	
            	
            	case AccountColumn.PostalCode:
            		return this.PostalCode.CompareTo(rhs.PostalCode);
            		
            		                 
            	
            	
            	case AccountColumn.City:
            		return this.City.CompareTo(rhs.City);
            		
            		                 
            	
            	
            	case AccountColumn.StateOrProvince:
            		return this.StateOrProvince.CompareTo(rhs.StateOrProvince);
            		
            		                 
            	
            	
            	case AccountColumn.Country:
            		return this.Country.CompareTo(rhs.Country);
            		
            		                 
            	
            	
            	case AccountColumn.TelephoneNumber:
            		return this.TelephoneNumber.CompareTo(rhs.TelephoneNumber);
            		
            		                 
            	
            	
            	case AccountColumn.Email:
            		return this.Email.CompareTo(rhs.Email);
            		
            		                 
            	
            	
            	case AccountColumn.Login:
            		return this.Login.CompareTo(rhs.Login);
            		
            		                 
            	
            	
            	case AccountColumn.Password:
            		return this.Password.CompareTo(rhs.Password);
            		
            		                 
            	
            	
            	case AccountColumn.IWantMyList:
            		return this.IWantMyList.Value.CompareTo(rhs.IWantMyList.Value);
            		
            		                 
            	
            	
            	case AccountColumn.IWantPetTips:
            		return this.IWantPetTips.Value.CompareTo(rhs.IWantPetTips.Value);
            		
            		                 
            	
            	
            	case AccountColumn.FavoriteLanguage:
            		return this.FavoriteLanguage.CompareTo(rhs.FavoriteLanguage);
            		
            		                 
            	
            	
            	case AccountColumn.CreditCardId:
            		return this.CreditCardId.CompareTo(rhs.CreditCardId);
            		
            		                 
            	
            	
            	case AccountColumn.FavoriteCategoryId:
            		return this.FavoriteCategoryId.CompareTo(rhs.FavoriteCategoryId);
            		
            		                 
            	
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{19}{18}- Id: {0}{18}- FirstName: {1}{18}- LastName: {2}{18}- StreetAddress: {3}{18}- PostalCode: {4}{18}- City: {5}{18}- StateOrProvince: {6}{18}- Country: {7}{18}- TelephoneNumber: {8}{18}- Email: {9}{18}- Login: {10}{18}- Password: {11}{18}- IWantMyList: {12}{18}- IWantPetTips: {13}{18}- FavoriteLanguage: {14}{18}- CreditCardId: {15}{18}- FavoriteCategoryId: {16}{18}- Timestamp: {17}{18}", 
				this.Id,
				(this.FirstName == null) ? string.Empty : this.FirstName.ToString(),
				(this.LastName == null) ? string.Empty : this.LastName.ToString(),
				(this.StreetAddress == null) ? string.Empty : this.StreetAddress.ToString(),
				(this.PostalCode == null) ? string.Empty : this.PostalCode.ToString(),
				(this.City == null) ? string.Empty : this.City.ToString(),
				(this.StateOrProvince == null) ? string.Empty : this.StateOrProvince.ToString(),
				(this.Country == null) ? string.Empty : this.Country.ToString(),
				(this.TelephoneNumber == null) ? string.Empty : this.TelephoneNumber.ToString(),
				(this.Email == null) ? string.Empty : this.Email.ToString(),
				(this.Login == null) ? string.Empty : this.Login.ToString(),
				(this.Password == null) ? string.Empty : this.Password.ToString(),
				(this.IWantMyList == null) ? string.Empty : this.IWantMyList.ToString(),
				(this.IWantPetTips == null) ? string.Empty : this.IWantPetTips.ToString(),
				(this.FavoriteLanguage == null) ? string.Empty : this.FavoriteLanguage.ToString(),
				(this.CreditCardId == null) ? string.Empty : this.CreditCardId.ToString(),
				(this.FavoriteCategoryId == null) ? string.Empty : this.FavoriteCategoryId.ToString(),
				(this.Timestamp == null) ? string.Empty : this.Timestamp.ToString(),
				Environment.NewLine, 
				this.GetType());
		}
		
		#region "Inner data class "
		
	/// <summary>
	///		The data structure representation of the 'Account' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class AccountData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// Id : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "Account"</remarks>
			public System.String Id;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.String OriginalId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// FirstName : 
		/// </summary>
		public System.String		  FirstName = null;
		
		/// <summary>
		/// LastName : 
		/// </summary>
		public System.String		  LastName = null;
		
		/// <summary>
		/// StreetAddress : 
		/// </summary>
		public System.String		  StreetAddress = null;
		
		/// <summary>
		/// PostalCode : 
		/// </summary>
		public System.String		  PostalCode = null;
		
		/// <summary>
		/// City : 
		/// </summary>
		public System.String		  City = null;
		
		/// <summary>
		/// StateOrProvince : 
		/// </summary>
		public System.String		  StateOrProvince = null;
		
		/// <summary>
		/// Country : 
		/// </summary>
		public System.String		  Country = null;
		
		/// <summary>
		/// TelephoneNumber : 
		/// </summary>
		public System.String		  TelephoneNumber = null;
		
		/// <summary>
		/// Email : 
		/// </summary>
		public System.String		  Email = null;
		
		/// <summary>
		/// Login : 
		/// </summary>
		public System.String		  Login = null;
		
		/// <summary>
		/// Password : 
		/// </summary>
		public System.String		  Password = null;
		
		/// <summary>
		/// IWantMyList : 
		/// </summary>
		public System.Boolean?		  IWantMyList = null;
		
		/// <summary>
		/// IWantPetTips : 
		/// </summary>
		public System.Boolean?		  IWantPetTips = null;
		
		/// <summary>
		/// FavoriteLanguage : 
		/// </summary>
		public System.String		  FavoriteLanguage = null;
		
		/// <summary>
		/// CreditCardId : 
		/// </summary>
		public System.String		  CreditCardId = null;
		
		/// <summary>
		/// FavoriteCategoryId : 
		/// </summary>
		public System.String		  FavoriteCategoryId = null;
		
		/// <summary>
		/// Timestamp : 
		/// </summary>
		public System.Byte[]		  Timestamp = null;
		#endregion
			
		#endregion "Variable Declarations"
		
		public Object Clone()
		{
			AccountData _tmp = new AccountData();
						
			_tmp.Id = this.Id;
			_tmp.OriginalId = this.OriginalId;
			
			_tmp.FirstName = this.FirstName;
			_tmp.LastName = this.LastName;
			_tmp.StreetAddress = this.StreetAddress;
			_tmp.PostalCode = this.PostalCode;
			_tmp.City = this.City;
			_tmp.StateOrProvince = this.StateOrProvince;
			_tmp.Country = this.Country;
			_tmp.TelephoneNumber = this.TelephoneNumber;
			_tmp.Email = this.Email;
			_tmp.Login = this.Login;
			_tmp.Password = this.Password;
			_tmp.IWantMyList = this.IWantMyList;
			_tmp.IWantPetTips = this.IWantPetTips;
			_tmp.FavoriteLanguage = this.FavoriteLanguage;
			_tmp.CreditCardId = this.CreditCardId;
			_tmp.FavoriteCategoryId = this.FavoriteCategoryId;
			_tmp.Timestamp = this.Timestamp;
			
			return _tmp;
		}
		
	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"Id");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Id",36));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("FirstName",255));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("LastName",255));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("StreetAddress",255));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("PostalCode",255));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("City",255));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("StateOrProvince",255));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Country",255));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("TelephoneNumber",255));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Email",255));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Login",255));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Password",255));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("FavoriteLanguage",255));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("CreditCardId",36));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("FavoriteCategoryId",36));
		}
   		#endregion
	
	} // End Class
	
	#region "AccountComparer"
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AccountComparer : System.Collections.Generic.IComparer<Account>
	{
		AccountColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AccountComparer"/> class.
        /// </summary>
		public AccountComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AccountComparer(AccountColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Account"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Account"/> to compare.</param>
        /// <param name="b">The second <c>Account</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Account a, Account b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Account entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Account a, Account b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AccountColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	
	/// <summary>
	/// Enumerate the Account columns.
	/// </summary>
	[Serializable]
	public enum AccountColumn
	{
		/// <summary>
		/// Id : 
		/// </summary>
		Id,
		/// <summary>
		/// FirstName : 
		/// </summary>
		FirstName,
		/// <summary>
		/// LastName : 
		/// </summary>
		LastName,
		/// <summary>
		/// StreetAddress : 
		/// </summary>
		StreetAddress,
		/// <summary>
		/// PostalCode : 
		/// </summary>
		PostalCode,
		/// <summary>
		/// City : 
		/// </summary>
		City,
		/// <summary>
		/// StateOrProvince : 
		/// </summary>
		StateOrProvince,
		/// <summary>
		/// Country : 
		/// </summary>
		Country,
		/// <summary>
		/// TelephoneNumber : 
		/// </summary>
		TelephoneNumber,
		/// <summary>
		/// Email : 
		/// </summary>
		Email,
		/// <summary>
		/// Login : 
		/// </summary>
		Login,
		/// <summary>
		/// Password : 
		/// </summary>
		Password,
		/// <summary>
		/// IWantMyList : 
		/// </summary>
		IWantMyList,
		/// <summary>
		/// IWantPetTips : 
		/// </summary>
		IWantPetTips,
		/// <summary>
		/// FavoriteLanguage : 
		/// </summary>
		FavoriteLanguage,
		/// <summary>
		/// CreditCardId : 
		/// </summary>
		CreditCardId,
		/// <summary>
		/// FavoriteCategoryId : 
		/// </summary>
		FavoriteCategoryId,
		/// <summary>
		/// Timestamp : 
		/// </summary>
		Timestamp
	}//End enum

} // end namespace


