<%-- 
* $Id: AdminEntityUC_CodeBehind.cst,v 1.5 2006/01/04 20:14:17 bgjohnso Exp $
 * Last modified by $Author: jroland $
 * Last modified at $Date: 2006-03-16 16:53:08 -0600 (Thu, 16 Mar 2006) $
 * $Revision: 62 $

	Written By:
		Ben Johnson
	Description:
		This script generates an ASP.Net 2.0 user control that will perform CRUD operations
	Remarks:
		
--%>
<%@ CodeTemplate Src="..\..\TemplateLib\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Generate a ASP.Net 2.0 user control for administration." Debug="True" ResponseEncoding="UTF-8" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections" %>

<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Connection" Description="Tables of the system." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Connection" Description="Table that the data access class should be based on." %>

<%@ Property Name="NameSpace" Type="System.String" Category="Style" Description="Class Namespace." %>
<%@ Property Name="DALNameSpace" Type="System.String" Category="Data" Description="DAL Namespace." %>
<%

	// Collection of all columns in the table.
	ColumnSchemaCollection cols = SourceTable.Columns;
	
	// Collection of all columns in the table that are not primary keys.
	//ColumnSchemaCollection nonKeys = SourceTable.NonPrimaryKeyColumns;
	
	// Collection of all primary key columns.
	ColumnSchemaCollection keys = SourceTable.PrimaryKey.MemberColumns; 
	
	// Collection of ForeignKeys. Provides information about the foreign keys 
	//(keys where the current table is the foreign table) contained in the table. 
	TableKeySchemaCollection fkeys = SourceTable.ForeignKeys;
	
	//Provides information about the primary keys 
	//(keys where the current table is the primary table) contained in the table. 
	//TableKeySchemaCollection pkeys = SourceTable.PrimaryKeys;
	
	//Provides information about the indexes contained in the table. 
	//IndexSchemaCollection indexes = SourceTable.Indexes;
	
	ColumnSchemaCollection colsUpdatable = new ColumnSchemaCollection();
	foreach (ColumnSchema column in cols)
	{
		if ( ! IsIdentityColumn(column) && ! IsComputed(column) )
			colsUpdatable.Add(column);
	}
	
	//All the keys that have single column keys
	TableKeySchemaCollection fKeysSingle = new TableKeySchemaCollection();
	foreach(TableKeySchema tableKey in fkeys)
	{
		if ( tableKey.ForeignKeyMemberColumns.Count == 1)
			fKeysSingle.Add(tableKey);
	}

	string entityName = GetClassName(SourceTable);
	string className = NameSpace + "." + GetClassName(SourceTable);
	string collectionName = GetClassName(SourceTable, ClassNameFormat.Collection);
	string providerName = GetClassName(SourceTable, ClassNameFormat.Provider);
%>
#region Using directives
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using <%=NameSpace%>;
using <%=DALNameSpace%>;
#endregion

public partial class <%=entityName%>UC : System.Web.UI.UserControl
{
    protected void Page_Load(object sender, EventArgs e)
    {
		//Apply scripting element to show/hide the appropriate elements when the listbox index changes
    	this.ddlFilterColumn.Attributes.Add("OnChange", String.Format("ShowFilter('{0}');", this.ClientID));
		
		//Register a startup script to show the appropriate filter elements after a postback
		this.Page.ClientScript.RegisterStartupScript(typeof(Page), this.ClientID + "_OnLoad", String.Format("ShowFilter('{0}');", this.ClientID), true);
    }


	#region Private Properties
	
	/// <summary>
	///Hashtable to hold fields that should be set to null 
	/// </summary>
	private Hashtable _nullFields = new Hashtable();
	
	///<summary>
	///Private property to hold the last filter criteria
	///</summary>
	private string Filter
    {
        get
        {
            if (ViewState["Filter"] == null)
            {
                return String.Empty;
            }
            else
                return ViewState["Filter"].ToString();
        }
        set 
        {
            ViewState["Filter"] = value;
        }
    }
	#endregion
	
    #region Private Methods
	
	///<summary>
	///Cause the GridView to refresh it's data
	///</summary>
    private void RefreshGrid()
    {
        gvList.DataBind();
    }
    
	///<summary>
	///Displays the Editor control and hides the grid control
	///</summary>
    private void ShowEditor()
    {
        tblFilter.Visible = false;
        fvEditor.Visible = true;
    }

	///<summary>
	///Displays the grid control and hides the editor control
	///</summary>
    private void ShowGrid()
    {
        tblFilter.Visible = true;
        fvEditor.Visible = false;
    }

	///<summary>
	///Copies the values from the editor controls up to hidden fields for databinding.
	///</summary>
	/// <remarks>Remove this function once VS2005 bug is fixed.  Microsoft BugID: FDBK39573.</remarks>
	///<param name="container">Control object that contains the hidden fields</param>
	///<param name="fieldName">Then name of the control to extract the value from</param>
	///<param name="prefix1">The prefix of the Hidden field</param>
	///<param name="prefix2">The prefix of the editor control</param>
    private void SaveValues(Control container, string prefix1, string prefix2, string fieldName)
    {
        string saveValue = "";
        HiddenField hfSave = (HiddenField)container.FindControl(prefix1 + fieldName);
        if (hfSave != null)
        {
            Control ctrl = container.FindControl(prefix2 + fieldName);

            if (ctrl != null)
            {
                if (ctrl is TextBox)
                {
                    saveValue = ((TextBox)ctrl).Text;
                }
                else if (ctrl is CheckBox)
                {
                    saveValue = ((CheckBox)ctrl).Checked.ToString();
                }
                else if (ctrl is ListControl)
                {
                    saveValue = ((ListControl)ctrl).SelectedValue.ToString();
                }
                else if (ctrl is System.Web.UI.WebControls.Label)
                {
                    saveValue = ((System.Web.UI.WebControls.Label)ctrl).Text;
                }
                else if (ctrl is System.Web.UI.WebControls.HiddenField)
                {
                    saveValue = ((System.Web.UI.WebControls.HiddenField)ctrl).Value;
                }
                
                hfSave.Value = saveValue;
            }
           
        }
    }
	
	/// <summary>
	/// Binds the client-side code to display the calendar control
	/// </summary>
	/// <param name="prefix">Prefix of the editor control</param>
	private void BindDatePicker(string prefix)
    {
		//Bind each date-time field
		<%		
		foreach (ColumnSchema column in cols)
		{
			
			if ( (column.DataType == DbType.Date) || (column.DataType == DbType.DateTime) )
			{
				string propertyName = GetPropertyName(column);
			%>
		((ImageButton)fvEditor.FindControl("cal_data" + prefix + "<%=propertyName%>")).OnClientClick = String.Format("showCalendarControl(document.getElementById('{0}'));return false;", fvEditor.FindControl("data" + prefix + "<%=propertyName%>").ClientID);
			<%
			}
		}
		%>
    }
	
	/// <summary>
	/// Force an editor control's value to a something that represents a null
	/// </summary>
	/// <param name="ctrl">The control object to change.</param>
	private void SetControlNullDisplay(Control ctrl)
	{
		if (ctrl != null)
		{
			if (ctrl is TextBox)
			{
				((TextBox)ctrl).Text = String.Empty;
			}
			else if (ctrl is CheckBox)
			{
				((CheckBox)ctrl).Checked = false;
			}
			else if (ctrl is ListControl)
			{
				((ListControl)ctrl).SelectedIndex = 0;
			}
		}
	}
	
	/// <summary>
	/// Checks for null values and populates the _nullFields hashtable.  The values
	/// are also formatted so that databinding will work correctly.
	/// </summary>
	/// <remarks>This is called from the fvEditor_ItemUpdating and fvEditor_ItemInserting events.</remarks>
	/// <param name="values">OrderedDictionary of the values that will be sent to the database.</param>
	private void CheckForNulls(System.Collections.Specialized.OrderedDictionary values)
	{
		if ( values != null )
		{
			bool nullFound = false;

			//Clear out the old null values
			_nullFields.Clear();
			
			foreach (string key in values.Keys)
			{
				nullFound = false;
				switch (key)
				{ 
					<%
					foreach(ColumnSchema column in cols)
					{
						string propertyName = GetPropertyName(column);
					%>
					case "<%=propertyName%>":
					<%
						if ( column.DataType == System.Data.DbType.DateTime)
						{
							string privateName = GetFieldName(column);
						%>
						DateTime <%=privateName%>;

                  if (!DateTime.TryParse(values["<%=propertyName%>"].ToString(), out <%=privateName%>))
                  {
                     values[key] = DateTime.MinValue;
                     nullFound = true;
                  }
                  else
                  {
                     values["<%=propertyName%>"] = <%=privateName%>;
                  }
						<%
						}
						else if ( column.AllowDBNull )
						{
						%>
						//This field allows nulls, convert to default value
						<%
							if ( ! column.IsForeignKeyMember )
							{
						%>
						if (values[key].ToString() == String.Empty)
						<%
							}
							else
							{
						%>
						if (values[key].ToString() == Convert.ToString(<%=GetCSDefaultByType(column)%>))
						<%
							}
							%>
						
						{
							values[key] = <%=GetCSDefaultByType(column)%>;
							nullFound = true;
						}
						<%
						}
						%>
						
						break;
					<%
					}
					%>
				}
				//If the field should be set to null, add it's key to the hashtable
				if (nullFound)
				{
					_nullFields.Add(key, null);
				}
			}
		}
	}

	/// <summary>
	/// Calls the appropriate methods on the entity object to set the fields to null.
	/// </summary>
	/// <remarks>This is called from the objDsEdit_Updating and objDsEdit_Inserting events.</remarks>
	/// <param name="entity"><see cref="<%=entityName%>"><%=entityName%></see> object that is being databound</param>
	private void SetNullValues(<%=entityName%> entity)
	{
		if (entity != null)
		{ 
			//For any fields that accepts nulls, check for default values and act accordingly
			<%
			foreach(ColumnSchema column in cols)
			{
				string propertyName = GetPropertyName(column);
			%>
			<%
				if ( column.AllowDBNull /*&& !IsCSReferenceDataType(column)*/ )
				{
				%>
			if (_nullFields.ContainsKey("<%=propertyName%>"))entity.<%=propertyName%> = null;
				<%
				}
				%>
			<%
			}
			%>
		}
	}
	
	/// <summary>
	/// Get a string representation of the dataItem's value
	/// </summary>
	/// <remarks>Used in the gvList for formatting the value displayed in the grid.</remarks>
	/// <param name="dataItem"><see cref="<%=entityName%>"><%=entityName%></see> object to format</param>
	/// <param name="propertyName">Name of the property to format</param>
	/// <returns><see cref="string">String</see></returns>
	public string FormatField(object dataItem, string propertyName)
	{
		string rtn = string.Empty;
		if (dataItem is <%=entityName%>)
		{
			<%=entityName%> entity = (<%=entityName%>)dataItem;
			
			//Check for a Source property (in the format [PropertyNameSource].[PropertyName]
			if (propertyName.IndexOf(".") < 0)
			{
				switch (propertyName)
				{
					<%
					foreach(ColumnSchema column in cols)
					{
						string propertyName = GetPropertyName(column);
					%>
					case "<%=propertyName%>":
					<%
						if ( column.AllowDBNull /*&& !IsCSReferenceDataType(column)*/ )
						{
					%>
					
						if (entity.<%=propertyName%> == null)
						{
							rtn = string.Empty;
						}
						else
					<%
						}
					%>
						{
							<%
							if ( IsCSReferenceDataType(column) )
							{
							%>
							if ( entity.<%=propertyName%> != null )
							<%
							}
							%>
							{
								rtn = <%=GetFormatStatement(column)%>;
							}
						}
						break;
					<%
					}
					%>
					default:
						rtn = string.Format("Invalid Property: {0}",propertyName);
						break;
				}
			}
			else
			{ 
				//Source Property
				string sourceName = propertyName.Split(new char[] { '.' })[0];
				string sourceProperty= propertyName.Split(new char[] { '.' })[1];

				switch (sourceName)
				{ 
					//Use reflection to get the source property - not sure if this is the best way...
					//No formatting will be available at this time.
					<%
					foreach( TableKeySchema tableKey in fkeys)
					{
						string pKeyTableName = tableKey.PrimaryKeyTable.Name;
						string fkPropertyName = GetKeysName(tableKey.ForeignKeyMemberColumns);
							
					%>
					case "<%=fkPropertyName%>Source":
						rtn = GetReflectedPropertyValue(entity.<%=fkPropertyName%>Source, sourceProperty);
						break;
					<%
					}
					%>
					default:
						rtn = string.Format("Invalid Source property: {0}",propertyName);
						break;
				}
			}
			
		}

		return rtn;
	}
	
	/// <summary>
	/// Get a string representation of an entity's property using reflection
	/// </summary>
	/// <param name="entity">Entity to extract the value from</param>
	/// <param name="propertyName">Name of the property to extract</param>
	/// <returns><see cref="string">String</see></returns>
	private string GetReflectedPropertyValue(object entity, string propertyName)
	{
		string rtn = String.Empty;

		if (entity != null)
		{
			System.Reflection.PropertyInfo pi = entity.GetType().GetProperty(propertyName);
			rtn = pi.GetValue(entity, null).ToString();
		}

		return rtn;
	}

#endregion

#region Public Methods

    public object BindWithNull(object value, object nullValue)
    {
        if (value == null)
            return nullValue;
        else
            return value;
    }

    #endregion

	 #region objDsList Events
	
    protected void objDsList_ObjectCreating(object sender, ObjectDataSourceEventArgs e)
    {
        e.ObjectInstance = DataRepository.<%=providerName%>;
    }
	
    protected void objDsList_Selecting(object sender, ObjectDataSourceSelectingEventArgs e)
    {
        if (e.ExecutingSelectCount)
        {
				//You will get here the second time through when it's trying to get the number of records
        }
        else if (e.Arguments.MaximumRows > 0)
        {
            //Adjust the StartRowIndex method.  The GetPaged function expects
            //a page index rather than a row index.
            e.Arguments.StartRowIndex = e.Arguments.StartRowIndex / e.Arguments.MaximumRows;
				
				//Check the filter
            String filter = this.Filter;

            if (filter != String.Empty)
            {
                e.InputParameters["whereClause"] = filter;
            }
        }
    }
	
	protected void objDsList_Selected(object sender, ObjectDataSourceStatusEventArgs e)
    {
		if (e.Exception != null)
		{
			//Handle your exception here...
			//e.ExceptionHandled = true;
		}
		<%
		if ( fkeys.Count > 0 )
		{
		%>
		else
		{
			//Populate all XXXSource properties
        object o = e.ReturnValue;

        if (o is <%=collectionName%>)
        {
            <%=collectionName%> coll = (<%=collectionName%>)o;
            
            foreach(<%=entityName%> entity in coll)
            {
					<%
					foreach( TableKeySchema tableKey in fkeys)
					{
						string pKeyTableName = tableKey.PrimaryKeyTable.Name;
						string pKeyClassName = GetClassName(tableKey.PrimaryKeyTable);
						string pKeyProviderName = GetClassName(tableKey.PrimaryKeyTable, ClassNameFormat.Provider);
						string pKeyKeysNames = GetKeysName(tableKey.PrimaryKeyMemberColumns);
						string fkPropertyName = GetKeysName(tableKey.ForeignKeyMemberColumns);
						
						string keyParams = String.Empty;
						string converter = String.Empty;
						
						for (int i = 0; i < tableKey.ForeignKeyMemberColumns.Count;i++)
						{
							ColumnSchema fColumn = tableKey.ForeignKeyMemberColumns[i];
							
							//If the FK allows nulls and it's not a reference type,
							//use the GetValueOrDefault method to ensure the correct data type is returned.
							converter = (fColumn.AllowDBNull  && !(IsCSReferenceDataType(fColumn)))? ".GetValueOrDefault(" + GetCSDefaultByType(fColumn) + ")" : String.Empty;
						
							if ( keyParams != String.Empty ) keyParams += ", ";
								
							keyParams +="entity." + GetPropertyName(fColumn) + converter;
						}
						
					%>
                if (entity.<%=fkPropertyName%>Source == null)
                {
                    <%=pKeyClassName%> source = DataRepository.<%=pKeyProviderName%>.GetBy<%=pKeyKeysNames%>(<%=keyParams%>);
                    entity.<%=fkPropertyName%>Source = source;
                }
					<%
					}
					%>
            }

        }
		}
		<%
		}
		%>
    }
	
	protected void objDsList_Deleted(object sender, ObjectDataSourceStatusEventArgs e)
	{
		if (e.Exception != null)
		{
			//Handle your exception here...
			//e.ExceptionHandled = true;
		}
	}
    #endregion
	
	#region objDsEdit Events
	
	protected void objDsEdit_ObjectCreating(object sender, ObjectDataSourceEventArgs e)
    {
        e.ObjectInstance = DataRepository.<%=providerName%>;
    }
	
	protected void objDsEdit_Updating(object sender, ObjectDataSourceMethodEventArgs e)
	{
		<%=entityName%> entity = (<%=entityName%>)e.InputParameters[0];

		SetNullValues(entity);

	}

	protected void objDsEdit_Inserting(object sender, ObjectDataSourceMethodEventArgs e)
	{
		<%=entityName%> entity = (<%=entityName%>)e.InputParameters[0];

		SetNullValues(entity);
	}
	
	
	protected void objDsEdit_Updated(object sender, ObjectDataSourceStatusEventArgs e)
	{
		if (e.Exception != null)
		{ 
			//Handle your exception here...
			//e.ExceptionHandled = true;
		}
		
		//Data has been updated, clear the hashtable
		_nullFields.Clear();
	}

	protected void objDsEdit_Selected(object sender, ObjectDataSourceStatusEventArgs e)
	{
		if (e.Exception != null)
		{
			//Handle your exception here...
			//e.ExceptionHandled = true;
		}
	}

	protected void objDsEdit_Inserted(object sender, ObjectDataSourceStatusEventArgs e)
	{
		if (e.Exception != null)
		{
			//Handle your exception here...
			//e.ExceptionHandled = true;
		}
	}
	protected void objDsEdit_Deleted(object sender, ObjectDataSourceStatusEventArgs e)
	{
		if (e.Exception != null)
		{
			//Handle your exception here...
			//e.ExceptionHandled = true;
		}
	}
	
	#endregion

    #region Grid Methods
    protected void gvList_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        switch (e.CommandName.ToUpper())
        { 
            case "NEW":
                fvEditor.ChangeMode(FormViewMode.Insert);
                break;
            case "SELECT":
                fvEditor.ChangeMode(FormViewMode.Edit);   
                break;
            default:
                return;
        }

        ShowEditor();
    }

    #endregion

    #region FormView Methods
    protected void fvEditor_ItemCommand(object sender, FormViewCommandEventArgs e)
    {
        switch (e.CommandName.ToUpper())
        {
            case "UPDATE":
                //Save the values to the hidden fields
                //This is required due to a bug with VS 2005 (MS BugID: FDBK39573)
                #region VS2005 Bug Fix
					<%
					foreach (ColumnSchema column in keys)
					{
						
					%>
                SaveValues(fvEditor, "update", "data", "<%=GetPropertyName(column)%>");
					<%
					}
					%>
					<%
					foreach (ColumnSchema column in colsUpdatable)
					{
						if ( ! column.IsPrimaryKeyMember )
						{
					%>
                SaveValues(fvEditor, "update", "data", "<%=GetPropertyName(column)%>");
					<%
						}
					}
					%>
                #endregion
                break;
            case "INSERT":
                //Save the values to the hidden fields
                //This is required due to a bug with VS 2005 (MS BugID: FDBK39573)
                #region VS2005 Bug Fix
					<%
					foreach (ColumnSchema column in colsUpdatable)
					{
						
					%>
                SaveValues(fvEditor, "insert", "dataInsert", "<%=GetPropertyName(column)%>");
					<%
					}
					%>
                #endregion
                break;
            case "CANCEL":
                ShowGrid();
                break;
        }

        ShowGrid();
    }

    protected void fvEditor_ItemDeleted(object sender, FormViewDeletedEventArgs e)
    {
        RefreshGrid();
        ShowGrid();
    }
    protected void fvEditor_ItemInserted(object sender, FormViewInsertedEventArgs e)
    {
        RefreshGrid();
        ShowGrid();
    }
    protected void fvEditor_ItemUpdated(object sender, FormViewUpdatedEventArgs e)
    {
        RefreshGrid();
        ShowGrid();
    }
	
	 protected void fvEditor_DataBound(object sender, EventArgs e)
    {
        switch (fvEditor.CurrentMode)
        { 
            case FormViewMode.Insert:
					BindDatePicker("Insert");
					break;
            case FormViewMode.Edit:
					BindDatePicker("");
					
					//Special formatting required for fields accepting nulls.
					if ( sender is FormView)
					{
						FormView fv = (FormView)sender;

						if (fv.DataItem is <%=entityName%>)
						{
							<%=entityName%> entity = (<%=entityName%>)fv.DataItem;
							//Check for null values and format the editor control appropriately
							<%
							foreach(ColumnSchema column in colsUpdatable)
							{
								if ( column.AllowDBNull)
								{
									string propertyName = GetPropertyName(column);
							%>
							if ( entity.<%=propertyName%> == null ) SetControlNullDisplay(fv.FindControl("data<%=propertyName%>"));
							<%
								}
							}
							%>
						}
				}
                break;
        }
    }
	
	protected void fvEditor_ItemUpdating(object sender, FormViewUpdateEventArgs e)
	{
		//Custom Validation
		System.Collections.Specialized.OrderedDictionary values = (System.Collections.Specialized.OrderedDictionary)e.NewValues;
		CheckForNulls(values);
	}

	protected void fvEditor_ItemInserting(object sender, FormViewInsertEventArgs e)
	{
		//Custom Validation
		System.Collections.Specialized.OrderedDictionary values = (System.Collections.Specialized.OrderedDictionary)e.Values;
		
		<%
		foreach ( ColumnSchema column in keys )
		{
			if ( IsGuidColumn(column) )
			{
				string propertyName = GetPropertyName(column);
		%>
		if (values["<%=propertyName%>"].ToString() == string.Empty) values["<%=propertyName%>"] = Guid.NewGuid();
		<%
			}
		}
		%>
		
		CheckForNulls(values);
	}	
	
    #endregion
	
    #region Filter Methods
    protected string GetFilter()
	{
		string filter = String.Empty;
		
		switch (ddlFilterColumn.SelectedValue)
		{
			<%
			foreach(TableKeySchema tableKey in fKeysSingle)
			{
				ColumnSchema column = tableKey.ForeignKeyMemberColumns[0];
				string propertyName = GetPropertyName(column);	
			%>
			case "<%=propertyName%>":
				<%
				if ( column.AllowDBNull )
				{
				%>
				//This column accepts nulls
				if (ddlFilter<%=propertyName%>.SelectedIndex == 0)
				{
					filter = String.Format("[{0}] IS NULL", ddlFilterColumn.SelectedValue);
				}
				else
				<%
				}
				%>
				filter = String.Format("[{0}] = '{1}'", ddlFilterColumn.SelectedValue, ddlFilter<%=propertyName%>.SelectedValue);
				break;
			<%
			}
			%>
			default:
				if (txtFilterCriteria.Text != String.Empty)
				{
					string wildCard = String.Empty;
					if (ddlFilterOperator.SelectedIndex == 0)
					{
						wildCard = "%";
					}
					filter = String.Format("[{0}] {1} '{2}{3}'", ddlFilterColumn.SelectedValue, ddlFilterOperator.SelectedValue, txtFilterCriteria.Text, wildCard);
				}
				break;
		}

		return filter;
	}
    protected void SetFilter(string filter)
    {
        if (filter == String.Empty)
        {
            txtFilterCriteria.Text = String.Empty;
        }
        this.Filter = filter;
        gvList.DataBind();
    }


    protected void btnFilter_Click(object sender, EventArgs e)
    {
        SetFilter(GetFilter());
    }

    protected void btnClearFilter_Click(object sender, EventArgs e)
    {
        SetFilter("");
    }

    #endregion
	
	#region Other ObjectDataSource Methods
	
	<%
	//For each foreign key, create a datasource control for binding a list
	foreach ( TableKeySchema tableKey in fKeysSingle)
	{
		string pKeyClassName = GetClassName(tableKey.PrimaryKeyTable);
		bool fKeyAllowDBNull = tableKey.ForeignKeyMemberColumns[0].AllowDBNull;
		string fKeyPropertyName = GetPropertyName(tableKey.ForeignKeyMemberColumns[0]);
		string pKeyCollectionName = GetClassName(tableKey.PrimaryKeyTable, ClassNameFormat.Collection);
	%>
	#region objDs<%=fKeyPropertyName%> Methods
	
	protected void objDs<%=fKeyPropertyName%>_ObjectCreating(object sender, ObjectDataSourceEventArgs e)
    {
        e.ObjectInstance = DataRepository.<%=pKeyClassName%>Provider;
    }
	
	<%
		if ( fKeyAllowDBNull )
		{
	%>
	protected void objDs<%=fKeyPropertyName%>_Selected(object sender, ObjectDataSourceStatusEventArgs e)
	{
		//This field allows nulls, so we must add a blank entity to the collection for databinding purposes.
		<%=pKeyCollectionName%> coll = (<%=pKeyCollectionName%>)e.ReturnValue;
		<%=pKeyClassName%> entity = new <%=pKeyClassName%>();
		<%
		foreach(ColumnSchema column in tableKey.PrimaryKeyMemberColumns)
		{
		%>
		entity.<%=GetPropertyName(column)%> = <%=GetCSDefaultByType(column)%>;
		<%
		}
		%>
		coll.Insert(0, entity);
	}
	<%
		}
	%>

	#endregion
	
	<%
	}
	%>
	
	#endregion
}

<script runat="template">
///<summary>
///   Returns a string representing the code to format a property for display in the grid.
///</summary>
public string GetFormatStatement(ColumnSchema column)
{
	string formatString = string.Empty;
	string propertyName = GetPropertyName(column);
	
	switch ( column.DataType )
	{
		case DbType.Boolean:
			formatString = string.Format("entity.{0} == true ?\"Yes\":\"No\"", propertyName);
			break;
		case DbType.AnsiString:
		case DbType.AnsiStringFixedLength:
		case DbType.String:
		case DbType.StringFixedLength:
			//Return a textbox control
			formatString = string.Format("entity.{0}.Length > 50? entity.{0}.Substring(0,50) + \"...\": entity.{0}",propertyName);
			break;
		
		case DbType.Currency:
			formatString = string.Format("string.Format(\"{{0:C}}\",entity.{0})",propertyName);
			break;
			
		case DbType.Decimal:
			formatString = string.Format("string.Format(\"{{0:F}}\",entity.{0})",propertyName);
			break;
			
		case DbType.Double:
			formatString = string.Format("string.Format(\"{{0:F}}\",entity.{0})",propertyName);
			break;
			
		case DbType.Single:
			formatString = string.Format("string.Format(\"{{0:F}}\",entity.{0})",propertyName);
			break;
			
		case DbType.Int16: 
			formatString = string.Format("string.Format(\"{{0:G}}\",entity.{0})",propertyName);
			break;
			
		case DbType.Int32:
			formatString = string.Format("string.Format(\"{{0:G}}\",entity.{0})",propertyName);
			break;
			
		case DbType.Int64: 
			formatString = string.Format("string.Format(\"{{0:G}}\",entity.{0})",propertyName);
			break;
			
		case DbType.Byte:
			formatString = string.Format("string.Format(\"{{0:G}}\",entity.{0})",propertyName);
			break;
		
		case DbType.Date:
		case DbType.DateTime:
			formatString = string.Format("string.Format(\"{{0:d}}\",entity.{0})",propertyName);
			break;
			
		/*
		case DbType.Binary: return new byte[] { };
		case DbType.Byte: return (byte)0;
		
		
		;
		case DbType.Guid: return Guid.Empty;
		
		case DbType.Object: return null;
		 return 0F;
		
		case DbType.Time: return DateTime.MinValue;
		case DbType.VarNumeric: return 0;*/
		default:
			formatString = string.Format("entity.{0}.ToString()",propertyName);
			break;
	
	}
	
	return formatString;
}

</script>
