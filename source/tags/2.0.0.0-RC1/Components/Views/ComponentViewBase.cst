<%--
 * $Id: EntityBase.cst,v 1.31 2005/06/27 12:12:42 jroland Exp $
 * Last modified by $Author: jroland $
 * Last modified at $Date: 2005/06/27 12:12:42 $
 * $Revision: 1.31 $

	Written By:
		Ryan Hurdon
	Description:
		This script will create data access layer classes. It requires stored procedures
		created from the procedure script. So for this code to work properly you need to run
		the procedure template, the rowobject template, and the rowcollection template on
		the same View. You can also optionally use the main script which will run them all
		for you.
--%>
<%@ CodeTemplate Src="..\..\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Debug="True" Language="C#" TargetLanguage="C#" Description="Component Object Class"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>

<%@ Property Name="SourceView" Type="SchemaExplorer.ViewSchema" Category="Connection" Description="View Object should be based on." %>
<%@ Property Name="SourceViews" Type="SchemaExplorer.ViewSchemaCollection" Category="Connection" Description="Views of the sytem." %>

<%@ Property Name="IncludeRelations" Type="System.Boolean" Default="True" Category="Options" Description="Include Collections for Related Entities."%>
<%@ Property Name="IncludeCustoms" Type="System.Boolean" Default="True" Category="Options" Description="If true customs stored procedures will be generated as functions." %>
<%@ Property Name="IncludeInsert" Type="System.Boolean" Default="True" Category="Options" Description="If true insert functions will be generated." %>
<%@ Property Name="IncludeUpdate" Type="System.Boolean" Default="True" Category="Options" Description="If true update functions will be generated." %>
<%@ Property Name="IncludeSave" Type="System.Boolean" Default="True" Category="Options" Description="If true combined insert/update functions will be generated." %>
<%@ Property Name="IncludeDelete" Type="System.Boolean" Default="True" Category="Options" Description="If true delete functions will be generated." %>
<%@ Property Name="IncludeManyToMany" Type="System.Boolean" Default="True" Category="Options" Description="If true select statements will be generated for any many to many relationship." %>
<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeGetListByFK" Type="System.Boolean" Default="True" Category="Options" Description="If true get functions will be generated." %>
<%@ Property Name="IncludeGetListByIX" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeFind" Type="System.Boolean" Default="True" Category="Options" Description="If true find functions will be generated." %>

<%@ Property Name="ComponentPattern" Optional="False" Type="MoM.Templates.ComponentPatternType" Category="Pattern" Description="Component Pattern Type." %>

<%@ Property Name="CustomNonMatchingReturnType" Type="CustomNonMatchingReturnType" Default="DataSet" Category="Options" Description="When using custom stored procedures, if the returned rows do not match the fields in an entity, a DataSet or IDataReader will be returned. Choose One.  This is useful if you've returned more than one resultset in a custom procedure; you can use a ConvertToDataSet(IDataReader) method in the Utility class to convert that to a DataSet." %>
<%@ Property Name="CustomProcedureStartsWith" Type="System.String" Default="_{0}_" Category="Options" Description="If you include custom stored procedures, this is the pattern that NetTiers will look for your custom stored procedures. A string format will be used to match the procedure pattern.  So, {0}=ViewName, {1}=StoredProc Prefix.  By default NetTiers will look at Views that starts with '_{0}_', which means it will detect the procedure _ViewName_GetByBirthdate and will be detected and generated." %>
<%@ Property Name="ProcedurePrefix" Optional="True" Type="System.String" Category="Style" Description="Prefix for Strored Procedures" %>

<%@ Property Name="NameSpace" Optional="True" Type="System.String" Category="Style" Description="Object Namespace." %>
<%@ Property Name="BLLNameSpace" Optional="True" Type="System.String" Category="Style" Description="Component Namespace." %>
<%@ Property Name="DALNameSpace" Optional="True" Type="System.String" Category="Style" Description="DAL Namespace." %>
	
<%@ Property Name="UsePartialClass" Type="System.Boolean" Default="true" Category="General" Description="Indicates if partial class should be generated." %>
<%
	string name;
		
	string className = GetClassName(SourceView.Name);
	string collectionClassName = GetCollectionClassName(SourceView.Name);
	string keyClassName = GetKeyClassName(SourceView.Name);
	string entitiesCollectionClassName = GetViewCollectionClassName(SourceView.Name).Replace("<", "<Entities.");
	
	string structName = GetStructName(SourceView.Name);
	string abstractClassName = GetAbstractClassName(SourceView.Name);
	string partialClassInternalPrefix = UsePartialClass ? "" : "";
	string constructorAccessModifier = ""; 
	string newCollectionClassName = "";
	string newCollectionClassNameEnd = "";
	
	if (ComponentPattern == MoM.Templates.ComponentPatternType.DomainModel)
	{		
		constructorAccessModifier =  "public static";
		newCollectionClassName = string.Format("new {0} (", collectionClassName);
		newCollectionClassNameEnd = ")";
	}
	else if (ComponentPattern == MoM.Templates.ComponentPatternType.ServiceLayer)
	{
		constructorAccessModifier = "public";
	}


	// Collection of all columns in the View.
	ViewColumnSchemaCollection cols = SourceView.Columns;
		
	//Provides information about the indexes contained in the View. 
	//IndexSchemaCollection indexes = SourceView.Indexes;
		
	ViewColumnSchemaCollection colsUpdaView = new ViewColumnSchemaCollection();
	foreach (ViewColumnSchema column in cols)
	{
			colsUpdaView.Add(column);
	}
	
	//Get the columns that are common to all Views
	//ColumnSchemaCollection commonColumns = GetCommonColumns(SourceViews);
	
	string today = DateTime.Now.ToLongDateString();

%>

/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : <%=DateTime.Now.ToLongDateString()%>
	Important: Do not modify this file. Edit the file <%=className%>.cs instead.
*/

#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Security;
using System.Data;

using <%=BLLNameSpace%>;
using <%=BLLNameSpace%>.Validation;
using Entities = <%=BLLNameSpace%>;
using <%=DALNameSpace%>;
using <%=DALNameSpace%>.Bases;


using Microsoft.Practices.EnterpriseLibrary.Logging;

#endregion 

namespace <%=NameSpace%>
{		
	
	///<summary>
	/// An object representation of the '<%=SourceView.Name%>' View.
	///</summary>
	/// <remarks>
	/// IMPORTANT!!! You should not modify this <% if (UsePartialClass) Response.Write("partial "); else Response.Write("base "); %> class, modify the <%= className%>.cs file instead.
	/// All custom implementations should be done in the <see cref="<%=className%>"/> class.
	/// </remarks>
	[DataObject]
	[CLSCompliant(true)]
	public <% if (UsePartialClass) Response.Write("partial "); %>class <%=abstractClassName%> : <%=BLLNameSpace%>.<%= className%>, IComponentEntity
	{
		#region Constructors
		///<summary>
		/// Creates a new <see cref="<%=className%>"/> instance .
		///</summary>
		public <%=abstractClassName%>() : base()
		{
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="<%=className%>"/> instance.
		///</summary>
		<% for (int x=0; x < colsUpdaView.Count; x++) { %>
		///<param name="<%=GetPrivateName(colsUpdaView[x].Name) %>"><%=colsUpdaView[x].Description%></param>
		<% } %>
		public static new <%=className%> Create<%=className%>(<% for (int x=0; x < colsUpdaView.Count; x++) { %><%= GetCSType(colsUpdaView[x]) %> <%= GetPrivateName(colsUpdaView[x].Name) %><%if (x < colsUpdaView.Count -1){%>, <%} }// end for %>)
		{
			<%=className%> newEntity<%=className%> = new <%=className%>();
			<% for (int x=0; x < colsUpdaView.Count; x++) { %>
			<%= GetObjectPropertyAccessor(colsUpdaView[x], "newEntity" + className) %>  = <%= GetPrivateName(colsUpdaView[x].Name) %>;
			<% }// end for %>
			return newEntity<%=className%>;
		}
		#endregion Constructors
		<%		
		// If the chosen pattern to implement is a domain pattern, go ahead 
		// and fill all data repository wrapper access here.
		
		CodeTemplateCompiler compiler = new CodeTemplateCompiler(this.CodeTemplateInfo.DirectoryName + "\\ComponentViewDataAccess.cst");
		compiler.Compile();
		CodeTemplate template = null;
		
		if (compiler.Errors.Count == 0)
		{
			template =  compiler.CreateInstance();
		}
		else
		{
			for (int i = 0; i < compiler.Errors.Count; i++)
			{
				Response.WriteLine(compiler.Errors[i].ToString());
			}
		}
		
		this.CopyPropertiesTo(template);
		template.SetProperty("RenderOverload", false);
		template.SetProperty("RenderImplementation", true);
		template.SetProperty("ComponentPattern", MoM.Templates.ComponentPatternType.DomainModel);
		
		Response.Write(template.RenderToString()); %>
	
	}//End Class
} // end namespace


