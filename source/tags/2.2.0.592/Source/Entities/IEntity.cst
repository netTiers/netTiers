<%--
 * $Id: IEntity.cst,v 1.13 2006/02/27 22:09:40 bgjohnso Exp $
 * Last modified by $Author: jroland $
 * Last modified at $Date: 2006-03-16 16:53:08 -0600 (Thu, 16 Mar 2006) $
 * $Revision: 62 $
--%>
<%@ CodeTemplate Src="..\TemplateLib\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="The interface that each business object of the domain implements." ResponseEncoding="UTF-8"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>

<%@ Property Name="NameSpace" Optional="False" Type="System.String" Category="Style" Description="Object Namespace." %>
<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Context" Description="Tables that the stored procedures should be based on." %>
<%@ Property Name="SourceViews" Type="SchemaExplorer.ViewSchemaCollection" Category="Context" Description="Tables that the stored procedures should be based on." %>
<%@ Assembly Name="SchemaExplorer" %>
<%		
	//Get the columns that are common to all tables
	ColumnSchemaCollection commonColumns = GetCommonTableColumns(SourceTables);
	
%>
using System;
using System.ComponentModel;

namespace <%=NameSpace%>
{
	/// <summary>
    /// List of possible state for an entity.
    /// </summary>
	public enum EntityState
    {
        /// <summary>
        /// Entity is unchanged
        /// </summary>
        Unchanged=0, 

        /// <summary>
        /// Entity is new
        /// </summary>
        Added=1, 

        /// <summary>
        /// Entity has been modified
        /// </summary>
        Changed=2, 

        /// <summary>
        /// Entity has been deleted
        /// </summary>
        Deleted=3
    }
	
	/// <summary>
	/// The interface that each business object of the model implements.
	/// </summary>
	public interface IEntity
	{
		/// <summary>
		///	The name of the underlying database table.
		/// </summary>
		string TableName { get;}

		/// <summary>
		///	Indicates if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		bool IsDirty {get;}
		
		/// <summary>
		///	Indicates if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		bool IsNew {get;}

		/// <summary>
		/// True if object has been marked as deleted. ReadOnly.
		/// </summary>
		bool IsDeleted {get;}

		/// <summary>
		/// Indicates if the object is in a valid state
		/// </summary>
		/// <value>True if object is valid; otherwise False.</value>
		bool IsValid { get;}
				
		/// <summary>
		/// Returns one of EntityState enum values - intended to replace IsNew, IsDirty, IsDeleted.
		/// </summary>
		EntityState EntityState {get;}
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		void AcceptChanges();
		
		/// <summary>
		/// Marks entity to be deleted.
		/// </summary>
		void MarkToDelete();
				 
		/// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
		object ParentCollection{get;set;}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		/// <value>A string array that holds the columns names.</value>
		string[] TableColumns {get;}
		
		<% 
		foreach (ColumnSchema col in commonColumns)
		{ 
			Response.Write ("\t\t/// <summary>" + Environment.NewLine);			
			Response.Write ("\t\t/// " + GetColumnXmlComment(col,2) + Environment.NewLine);			
			Response.Write ("\t\t/// </summary>" + Environment.NewLine);			
			Response.Write("\t\t" + GetCSType(col) + " " + GetPropertyName(col) + "{ get; }" + Environment.NewLine + Environment.NewLine);
		}
		%>
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		object Tag { get;set;}
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		event PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Determines whether this entity is being tracked.
		/// </summary>
		bool IsEntityTracked {	get;  set;	}
		
		///<summary>
		/// The tracking key used to with the <see cref="EntityLocator" />
		///</summary>
		string EntityTrackingKey {	get;  set;  }
	}
}
