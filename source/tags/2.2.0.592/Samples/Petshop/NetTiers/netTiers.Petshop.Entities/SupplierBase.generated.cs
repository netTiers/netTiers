	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Monday, July 24, 2006
	Important: Do not modify this file. Edit the file Supplier.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace netTiers.Petshop.Entities
{
	#region SupplierEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Supplier"/> object.
	/// </remarks>
	public class SupplierEventArgs : System.EventArgs
	{
		private SupplierColumn column;
		
		///<summary>
		/// Initalizes a new Instance of the SupplierEventArgs class.
		///</summary>
		public SupplierEventArgs(SupplierColumn column)
		{
			this.column = column;
		}
		
		
		///<summary>
		/// The SupplierColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SupplierColumn" />
		public SupplierColumn Column { get { return this.column; } }
	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all Supplier related events.
	///</summary>
	public delegate void SupplierEventHandler(object sender, SupplierEventArgs e);
	
	///<summary>
	/// An object representation of the 'Supplier' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(Supplier))]
	public abstract partial class SupplierBase : EntityBase, IEntityId<SupplierKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private SupplierEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//SupplierEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private SupplierEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<Supplier> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event SupplierEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SupplierEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SupplierBase"/> instance.
		///</summary>
		public SupplierBase()
		{
			this.entityData = new SupplierEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SupplierBase"/> instance.
		///</summary>
		///<param name="supplierSuppId"></param>
		///<param name="supplierName"></param>
		///<param name="supplierStatus"></param>
		///<param name="supplierAddr1"></param>
		///<param name="supplierAddr2"></param>
		///<param name="supplierCity"></param>
		///<param name="supplierState"></param>
		///<param name="supplierZip"></param>
		///<param name="supplierPhone"></param>
		public SupplierBase(System.Guid supplierSuppId, System.String supplierName, System.String supplierStatus, 
			System.String supplierAddr1, System.String supplierAddr2, System.String supplierCity, System.String supplierState, System.String supplierZip, 
			System.String supplierPhone)
		{
			this.entityData = new SupplierEntityData();
			this.backupData = null;

			this.SuppId = supplierSuppId;
			this.Name = supplierName;
			this.Status = supplierStatus;
			this.Addr1 = supplierAddr1;
			this.Addr2 = supplierAddr2;
			this.City = supplierCity;
			this.State = supplierState;
			this.Zip = supplierZip;
			this.Phone = supplierPhone;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Supplier"/> instance.
		///</summary>
		///<param name="supplierSuppId"></param>
		///<param name="supplierName"></param>
		///<param name="supplierStatus"></param>
		///<param name="supplierAddr1"></param>
		///<param name="supplierAddr2"></param>
		///<param name="supplierCity"></param>
		///<param name="supplierState"></param>
		///<param name="supplierZip"></param>
		///<param name="supplierPhone"></param>
		public static Supplier CreateSupplier(System.Guid supplierSuppId, System.String supplierName, System.String supplierStatus, 
			System.String supplierAddr1, System.String supplierAddr2, System.String supplierCity, System.String supplierState, System.String supplierZip, 
			System.String supplierPhone)
		{
			Supplier newSupplier = new Supplier();
			newSupplier.SuppId = supplierSuppId;
			newSupplier.Name = supplierName;
			newSupplier.Status = supplierStatus;
			newSupplier.Addr1 = supplierAddr1;
			newSupplier.Addr2 = supplierAddr2;
			newSupplier.City = supplierCity;
			newSupplier.State = supplierState;
			newSupplier.Zip = supplierZip;
			newSupplier.Phone = supplierPhone;
			return newSupplier;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SupplierColumn"/> which has raised the event.</param>
		public void OnColumnChanging(SupplierColumn column)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SupplierEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SupplierEventArgs(column));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SupplierColumn"/> which has raised the event.</param>
		public void OnColumnChanged(SupplierColumn column)
		{
			if (!SuppressEntityEvents)
			{
				SupplierEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SupplierEventArgs(column));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the SuppId property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true,false,false)]
		public virtual System.Guid SuppId
		{
			get
			{
				return this.entityData.SuppId; 
			}
			
			set
			{
				if (this.entityData.SuppId == value)
					return;
					
					
				OnColumnChanging(SupplierColumn.SuppId);
				this.entityData.SuppId = value;
				this.EntityId.SuppId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(SupplierColumn.SuppId);
				OnPropertyChanged("SuppId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SuppId property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SuppId property.</remarks>
		/// <value>This type is uniqueidentifier</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Guid OriginalSuppId
		{
			get { return this.entityData.OriginalSuppId; }
			set { this.entityData.OriginalSuppId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,true, 80)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
					
					
				OnColumnChanging(SupplierColumn.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(SupplierColumn.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,false, 2)]
		public virtual System.String Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
					
					
				OnColumnChanging(SupplierColumn.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(SupplierColumn.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Addr1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,true, 80)]
		public virtual System.String Addr1
		{
			get
			{
				return this.entityData.Addr1; 
			}
			
			set
			{
				if (this.entityData.Addr1 == value)
					return;
					
					
				OnColumnChanging(SupplierColumn.Addr1);
				this.entityData.Addr1 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(SupplierColumn.Addr1);
				OnPropertyChanged("Addr1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Addr2 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,true, 80)]
		public virtual System.String Addr2
		{
			get
			{
				return this.entityData.Addr2; 
			}
			
			set
			{
				if (this.entityData.Addr2 == value)
					return;
					
					
				OnColumnChanging(SupplierColumn.Addr2);
				this.entityData.Addr2 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(SupplierColumn.Addr2);
				OnPropertyChanged("Addr2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the City property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,true, 80)]
		public virtual System.String City
		{
			get
			{
				return this.entityData.City; 
			}
			
			set
			{
				if (this.entityData.City == value)
					return;
					
					
				OnColumnChanging(SupplierColumn.City);
				this.entityData.City = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(SupplierColumn.City);
				OnPropertyChanged("City");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the State property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,true, 80)]
		public virtual System.String State
		{
			get
			{
				return this.entityData.State; 
			}
			
			set
			{
				if (this.entityData.State == value)
					return;
					
					
				OnColumnChanging(SupplierColumn.State);
				this.entityData.State = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(SupplierColumn.State);
				OnPropertyChanged("State");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Zip property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,true, 5)]
		public virtual System.String Zip
		{
			get
			{
				return this.entityData.Zip; 
			}
			
			set
			{
				if (this.entityData.Zip == value)
					return;
					
					
				OnColumnChanging(SupplierColumn.Zip);
				this.entityData.Zip = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(SupplierColumn.Zip);
				OnPropertyChanged("Zip");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Phone property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,true, 40)]
		public virtual System.String Phone
		{
			get
			{
				return this.entityData.Phone; 
			}
			
			set
			{
				if (this.entityData.Phone == value)
					return;
					
					
				OnColumnChanging(SupplierColumn.Phone);
				this.entityData.Phone = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(SupplierColumn.Phone);
				OnPropertyChanged("Phone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Timestamp property. 
		///		
		/// </summary>
		/// <value>This type is timestamp.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,false)]
		public virtual System.Byte[] Timestamp
		{
			get
			{
				return this.entityData.Timestamp; 
			}
			
			set
			{
				if (this.entityData.Timestamp == value)
					return;
					
					
				OnColumnChanging(SupplierColumn.Timestamp);
				this.entityData.Timestamp = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(SupplierColumn.Timestamp);
				OnPropertyChanged("Timestamp");
			}
		}
		

		#region Source Foreign Key Property
				
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Supplier"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SuppId", "Name", "Status", "Addr1", "Addr2", "City", "State", "Zip", "Phone", "Timestamp"};
			}
		}
		#endregion 
		
	
		/// <summary>
		///	Holds a collection of Inventory objects
		///	which are related to this object through the relation FK_Inventory_Supplier
		/// </summary>	
		[BindableAttribute()]
		public TList<Inventory> InventoryCollection
		{
			get { return entityData.InventoryCollection; }
			set { entityData.InventoryCollection = value; }	
		}

		/// <summary>
		///	Holds a collection of ItemFromInventory objects
		///	which are related to this object through the junction table Inventory
		/// </summary>	
		[BindableAttribute()]
		public TList<Item> ItemCollection_From_Inventory
		{
			get { return entityData.ItemCollection_From_Inventory; }
			set { entityData.ItemCollection_From_Inventory = value; }	
		}
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SupplierEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Supplier) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = (TList<Supplier>)value;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Supplier);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  TODO: Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public override void CancelChanges()
		{
			throw new NotImplementedException("Method currently not Supported.");
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Supplier Entity 
		///</summary>
		public virtual Supplier Copy()
		{
			//shallow copy entity
			Supplier copy = new Supplier();
			copy.SuppId = this.SuppId;
			copy.OriginalSuppId = this.OriginalSuppId;
			copy.Name = this.Name;
			copy.Status = this.Status;
			copy.Addr1 = this.Addr1;
			copy.Addr2 = this.Addr2;
			copy.City = this.City;
			copy.State = this.State;
			copy.Zip = this.Zip;
			copy.Phone = this.Phone;
			copy.Timestamp = this.Timestamp;
					
			copy.AcceptChanges();
			return (Supplier)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed Supplier Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Supplier DeepCopy()
		{
			return EntityHelper.Clone<Supplier>(this as Supplier);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SupplierBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SupplierBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="SupplierBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="SupplierBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SupplierBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(SupplierBase Object1, SupplierBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SuppId != Object2.SuppId)
				equal = false;
			if ( Object1.Name != null && Object2.Name != null )
			{
				if (Object1.Name != Object2.Name)
					equal = false;
			}
			else if (Object1.Name == null ^ Object1.Name == null )
			{
				equal = false;
			}
			if (Object1.Status != Object2.Status)
				equal = false;
			if ( Object1.Addr1 != null && Object2.Addr1 != null )
			{
				if (Object1.Addr1 != Object2.Addr1)
					equal = false;
			}
			else if (Object1.Addr1 == null ^ Object1.Addr1 == null )
			{
				equal = false;
			}
			if ( Object1.Addr2 != null && Object2.Addr2 != null )
			{
				if (Object1.Addr2 != Object2.Addr2)
					equal = false;
			}
			else if (Object1.Addr2 == null ^ Object1.Addr2 == null )
			{
				equal = false;
			}
			if ( Object1.City != null && Object2.City != null )
			{
				if (Object1.City != Object2.City)
					equal = false;
			}
			else if (Object1.City == null ^ Object1.City == null )
			{
				equal = false;
			}
			if ( Object1.State != null && Object2.State != null )
			{
				if (Object1.State != Object2.State)
					equal = false;
			}
			else if (Object1.State == null ^ Object1.State == null )
			{
				equal = false;
			}
			if ( Object1.Zip != null && Object2.Zip != null )
			{
				if (Object1.Zip != Object2.Zip)
					equal = false;
			}
			else if (Object1.Zip == null ^ Object1.Zip == null )
			{
				equal = false;
			}
			if ( Object1.Phone != null && Object2.Phone != null )
			{
				if (Object1.Phone != Object2.Phone)
					equal = false;
			}
			else if (Object1.Phone == null ^ Object1.Phone == null )
			{
				equal = false;
			}
			if (Object1.Timestamp != Object2.Timestamp)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((SupplierBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static SupplierComparer GetComparer()
        {
            return new SupplierComparer();
        }
        */

        // Comparer delegates back to Supplier
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Supplier rhs, SupplierColumn which)
        {
            switch (which)
            {
            	
            	
            	case SupplierColumn.SuppId:
            		return this.SuppId.CompareTo(rhs.SuppId);
            		
            		                 
            	
            	
            	case SupplierColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case SupplierColumn.Status:
            		return this.Status.CompareTo(rhs.Status);
            		
            		                 
            	
            	
            	case SupplierColumn.Addr1:
            		return this.Addr1.CompareTo(rhs.Addr1);
            		
            		                 
            	
            	
            	case SupplierColumn.Addr2:
            		return this.Addr2.CompareTo(rhs.Addr2);
            		
            		                 
            	
            	
            	case SupplierColumn.City:
            		return this.City.CompareTo(rhs.City);
            		
            		                 
            	
            	
            	case SupplierColumn.State:
            		return this.State.CompareTo(rhs.State);
            		
            		                 
            	
            	
            	case SupplierColumn.Zip:
            		return this.Zip.CompareTo(rhs.Zip);
            		
            		                 
            	
            	
            	case SupplierColumn.Phone:
            		return this.Phone.CompareTo(rhs.Phone);
            		
            		                 
            	
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SupplierKey> Members
		
		// member variable for the EntityId property
		private SupplierKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public SupplierKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SupplierKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"Supplier" 
					+ this.SuppId.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{11}{10}- SuppId: {0}{10}- Name: {1}{10}- Status: {2}{10}- Addr1: {3}{10}- Addr2: {4}{10}- City: {5}{10}- State: {6}{10}- Zip: {7}{10}- Phone: {8}{10}- Timestamp: {9}{10}", 
				this.SuppId,
				(this.Name == null) ? string.Empty : this.Name.ToString(),
				this.Status,
				(this.Addr1 == null) ? string.Empty : this.Addr1.ToString(),
				(this.Addr2 == null) ? string.Empty : this.Addr2.ToString(),
				(this.City == null) ? string.Empty : this.City.ToString(),
				(this.State == null) ? string.Empty : this.State.ToString(),
				(this.Zip == null) ? string.Empty : this.Zip.ToString(),
				(this.Phone == null) ? string.Empty : this.Phone.ToString(),
				this.Timestamp,
				Environment.NewLine, 
				this.GetType());
		}
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Supplier' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class SupplierEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// SuppId : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "Supplier"</remarks>
			public System.Guid SuppId;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.Guid OriginalSuppId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String		  Name = null;
		
		/// <summary>
		/// Status : 
		/// </summary>
		public System.String		  Status = string.Empty;
		
		/// <summary>
		/// Addr1 : 
		/// </summary>
		public System.String		  Addr1 = null;
		
		/// <summary>
		/// Addr2 : 
		/// </summary>
		public System.String		  Addr2 = null;
		
		/// <summary>
		/// City : 
		/// </summary>
		public System.String		  City = null;
		
		/// <summary>
		/// State : 
		/// </summary>
		public System.String		  State = null;
		
		/// <summary>
		/// Zip : 
		/// </summary>
		public System.String		  Zip = null;
		
		/// <summary>
		/// Phone : 
		/// </summary>
		public System.String		  Phone = null;
		
		/// <summary>
		/// Timestamp : 
		/// </summary>
		public System.Byte[]		  Timestamp = new byte[] {};
		#endregion
			
		#endregion "Variable Declarations"
		
		public Object Clone()
		{
			SupplierEntityData _tmp = new SupplierEntityData();
						
			_tmp.SuppId = this.SuppId;
			_tmp.OriginalSuppId = this.OriginalSuppId;
			
			_tmp.Name = this.Name;
			_tmp.Status = this.Status;
			_tmp.Addr1 = this.Addr1;
			_tmp.Addr2 = this.Addr2;
			_tmp.City = this.City;
			_tmp.State = this.State;
			_tmp.Zip = this.Zip;
			_tmp.Phone = this.Phone;
			_tmp.Timestamp = this.Timestamp;
			
			return _tmp;
		}
		

		private TList<Inventory> inventory;
      public TList<Inventory> InventoryCollection
      {
         get
         {
            if (inventory == null)
            {
               inventory = new TList<Inventory>();
            }

            return inventory;
         }
         set { inventory = value; }
      }

		private TList<Item> item;
      public TList<Item> ItemCollection_From_Inventory
      {
         get
         {
            if (item == null)
            {
               item = new TList<Item>();
            }

            return item;
         }
         set { item = value; }
      }
	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Name",80));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"Status");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Status",2));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Addr1",80));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Addr2",80));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("City",80));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("State",80));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Zip",5));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Phone",40));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"Timestamp");
		}
   		#endregion
	
	} // End Class
	
	#region SupplierComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SupplierComparer : System.Collections.Generic.IComparer<Supplier>
	{
		SupplierColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SupplierComparer"/> class.
        /// </summary>
		public SupplierComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SupplierComparer(SupplierColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Supplier"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Supplier"/> to compare.</param>
        /// <param name="b">The second <c>Supplier</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Supplier a, Supplier b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Supplier entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Supplier a, Supplier b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SupplierColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SupplierKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Supplier"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SupplierKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SupplierKey class.
		/// </summary>
		public SupplierKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SupplierKey class.
		/// </summary>
		public SupplierKey(SupplierBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.suppId = entity.SuppId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SupplierKey class.
		/// </summary>
		public SupplierKey(System.Guid suppId)
		{
			#region Init Properties

			this.suppId = suppId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SupplierBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SupplierBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SuppId property
		private System.Guid suppId;
		
		/// <summary>
		/// Gets or sets the SuppId property.
		/// </summary>
		public System.Guid SuppId
		{
			get { return suppId; }
			set
			{
				if ( Entity != null )
				{
					Entity.SuppId = value;
				}
				
				suppId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SuppId = ( values["SuppId"] != null ) ? (System.Guid) EntityUtil.ChangeType(values["SuppId"], typeof(System.Guid)) : Guid.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SuppId", SuppId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SuppId: {0}{1}",
								SuppId,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	
	
	/// <summary>
	/// Enumerate the Supplier columns.
	/// </summary>
	[Serializable]
	public enum SupplierColumn
	{
		/// <summary>
		/// SuppId : 
		/// </summary>
		[EnumTextValue("SuppId")]
		SuppId,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		Name,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("Status")]
		Status,
		/// <summary>
		/// Addr1 : 
		/// </summary>
		[EnumTextValue("Addr1")]
		Addr1,
		/// <summary>
		/// Addr2 : 
		/// </summary>
		[EnumTextValue("Addr2")]
		Addr2,
		/// <summary>
		/// City : 
		/// </summary>
		[EnumTextValue("City")]
		City,
		/// <summary>
		/// State : 
		/// </summary>
		[EnumTextValue("State")]
		State,
		/// <summary>
		/// Zip : 
		/// </summary>
		[EnumTextValue("Zip")]
		Zip,
		/// <summary>
		/// Phone : 
		/// </summary>
		[EnumTextValue("Phone")]
		Phone,
		/// <summary>
		/// Timestamp : 
		/// </summary>
		[EnumTextValue("Timestamp")]
		Timestamp
	}//End enum

} // end namespace


