
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Generated on : Monday, July 24, 2006
	Important: Do not modify this file. Edit the file SqlOrdersProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using netTiers.Petshop.Entities;
using netTiers.Petshop.Data;
using netTiers.Petshop.Data.Bases;

#endregion

namespace netTiers.Petshop.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="Orders"/> entity.
	///</summary>
	public partial class SqlOrdersProviderBase : OrdersProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlOrdersProviderBase"/> instance.
		/// </summary>
		public SqlOrdersProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlOrdersProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlOrdersProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
	#endregion
	
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="orderId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="timestamp">The timestamp field used for concurrency check.</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
        /// <exception cref="DBConcurrencyException">The record has been modified by an other user. Please reload the instance before deleting.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 orderId, byte[] timestamp)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Orders_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@OrderId", DbType.Int32, orderId);
			database.AddInParameter(commandWrapper, "@Timestamp", DbType.Binary, timestamp);
			
			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(Orders)
					,orderId);
				EntityManager.StopTracking(entityKey);
			}
			
			if (results == 0)
			{
				throw new DBConcurrencyException ("The record has been modified by an other user. Please reload the instance before deleting.");
			}
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions
		/// <summary>
		/// 	Returns rows meeting the whereclause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND)</remarks>
		/// <returns>Returns a typed collection of netTiers.Petshop.Entities.Orders objects.</returns>
		public override netTiers.Petshop.Entities.TList<Orders> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new netTiers.Petshop.Entities.TList<Orders>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Orders_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf("OR") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@OrderId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AccountId", DbType.Guid, DBNull.Value);
		database.AddInParameter(commandWrapper, "@OrderDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipAddr1", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipAddr2", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipCity", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipState", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipZip", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipCountry", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillAddr1", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillAddr2", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillCity", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillState", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillZip", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillCountry", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CourierId", DbType.Guid, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TotalPrice", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillToFirstName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillToLastName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipToFirstName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipToLastName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreditCardId", DbType.Guid, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Locale", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Timestamp", DbType.Binary, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace("AND", "|").Replace("OR", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("orderid ") || clause.Trim().StartsWith("orderid="))
				{
					database.SetParameterValue(commandWrapper, "@OrderId", 
						clause.Replace("orderid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("accountid ") || clause.Trim().StartsWith("accountid="))
				{
					database.SetParameterValue(commandWrapper, "@AccountId", new Guid(
						clause.Replace("accountid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote)));
					continue;
				}
				if (clause.Trim().StartsWith("orderdate ") || clause.Trim().StartsWith("orderdate="))
				{
					database.SetParameterValue(commandWrapper, "@OrderDate", 
						clause.Replace("orderdate","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shipaddr1 ") || clause.Trim().StartsWith("shipaddr1="))
				{
					database.SetParameterValue(commandWrapper, "@ShipAddr1", 
						clause.Replace("shipaddr1","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shipaddr2 ") || clause.Trim().StartsWith("shipaddr2="))
				{
					database.SetParameterValue(commandWrapper, "@ShipAddr2", 
						clause.Replace("shipaddr2","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shipcity ") || clause.Trim().StartsWith("shipcity="))
				{
					database.SetParameterValue(commandWrapper, "@ShipCity", 
						clause.Replace("shipcity","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shipstate ") || clause.Trim().StartsWith("shipstate="))
				{
					database.SetParameterValue(commandWrapper, "@ShipState", 
						clause.Replace("shipstate","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shipzip ") || clause.Trim().StartsWith("shipzip="))
				{
					database.SetParameterValue(commandWrapper, "@ShipZip", 
						clause.Replace("shipzip","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shipcountry ") || clause.Trim().StartsWith("shipcountry="))
				{
					database.SetParameterValue(commandWrapper, "@ShipCountry", 
						clause.Replace("shipcountry","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billaddr1 ") || clause.Trim().StartsWith("billaddr1="))
				{
					database.SetParameterValue(commandWrapper, "@BillAddr1", 
						clause.Replace("billaddr1","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billaddr2 ") || clause.Trim().StartsWith("billaddr2="))
				{
					database.SetParameterValue(commandWrapper, "@BillAddr2", 
						clause.Replace("billaddr2","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billcity ") || clause.Trim().StartsWith("billcity="))
				{
					database.SetParameterValue(commandWrapper, "@BillCity", 
						clause.Replace("billcity","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billstate ") || clause.Trim().StartsWith("billstate="))
				{
					database.SetParameterValue(commandWrapper, "@BillState", 
						clause.Replace("billstate","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billzip ") || clause.Trim().StartsWith("billzip="))
				{
					database.SetParameterValue(commandWrapper, "@BillZip", 
						clause.Replace("billzip","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billcountry ") || clause.Trim().StartsWith("billcountry="))
				{
					database.SetParameterValue(commandWrapper, "@BillCountry", 
						clause.Replace("billcountry","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("courierid ") || clause.Trim().StartsWith("courierid="))
				{
					database.SetParameterValue(commandWrapper, "@CourierId", new Guid(
						clause.Replace("courierid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote)));
					continue;
				}
				if (clause.Trim().StartsWith("totalprice ") || clause.Trim().StartsWith("totalprice="))
				{
					database.SetParameterValue(commandWrapper, "@TotalPrice", 
						clause.Replace("totalprice","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billtofirstname ") || clause.Trim().StartsWith("billtofirstname="))
				{
					database.SetParameterValue(commandWrapper, "@BillToFirstName", 
						clause.Replace("billtofirstname","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billtolastname ") || clause.Trim().StartsWith("billtolastname="))
				{
					database.SetParameterValue(commandWrapper, "@BillToLastName", 
						clause.Replace("billtolastname","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shiptofirstname ") || clause.Trim().StartsWith("shiptofirstname="))
				{
					database.SetParameterValue(commandWrapper, "@ShipToFirstName", 
						clause.Replace("shiptofirstname","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shiptolastname ") || clause.Trim().StartsWith("shiptolastname="))
				{
					database.SetParameterValue(commandWrapper, "@ShipToLastName", 
						clause.Replace("shiptolastname","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("creditcardid ") || clause.Trim().StartsWith("creditcardid="))
				{
					database.SetParameterValue(commandWrapper, "@CreditCardId", new Guid(
						clause.Replace("creditcardid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote)));
					continue;
				}
				if (clause.Trim().StartsWith("locale ") || clause.Trim().StartsWith("locale="))
				{
					database.SetParameterValue(commandWrapper, "@Locale", 
						clause.Replace("locale","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("timestamp ") || clause.Trim().StartsWith("timestamp="))
				{
					database.SetParameterValue(commandWrapper, "@Timestamp", 
						clause.Replace("timestamp","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			netTiers.Petshop.Entities.TList<Orders> rows = new netTiers.Petshop.Entities.TList<Orders>();
	
				
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();				
			}
			return rows;
		}
		
		#endregion "Find Functions"
	
		#region GetList Functions
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of netTiers.Petshop.Entities.Orders objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override netTiers.Petshop.Entities.TList<Orders> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Orders_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			netTiers.Petshop.Entities.TList<Orders> rows = new netTiers.Petshop.Entities.TList<Orders>();
			
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region Paged Recordset
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of netTiers.Petshop.Entities.Orders objects.</returns>
		public override netTiers.Petshop.Entities.TList<Orders> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Orders_GetPaged", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			netTiers.Petshop.Entities.TList<Orders> rows = new netTiers.Petshop.Entities.TList<Orders>();
			
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByAccountId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Orders_Account key.
		///		FK_Orders_Account Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="accountId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of netTiers.Petshop.Entities.Orders objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override netTiers.Petshop.Entities.TList<Orders> GetByAccountId(TransactionManager transactionManager, System.Guid accountId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Orders_GetByAccountId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AccountId", DbType.Guid, accountId);
			
			IDataReader reader = null;
			netTiers.Petshop.Entities.TList<Orders> rows = new netTiers.Petshop.Entities.TList<Orders>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}	
		#endregion
	

		#region GetByCourierId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Orders_Courier key.
		///		FK_Orders_Courier Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="courierId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of netTiers.Petshop.Entities.Orders objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override netTiers.Petshop.Entities.TList<Orders> GetByCourierId(TransactionManager transactionManager, System.Guid courierId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Orders_GetByCourierId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@CourierId", DbType.Guid, courierId);
			
			IDataReader reader = null;
			netTiers.Petshop.Entities.TList<Orders> rows = new netTiers.Petshop.Entities.TList<Orders>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}	
		#endregion
	

		#region GetByCreditCardId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Orders_CreditCard key.
		///		FK_Orders_CreditCard Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="creditCardId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of netTiers.Petshop.Entities.Orders objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override netTiers.Petshop.Entities.TList<Orders> GetByCreditCardId(TransactionManager transactionManager, System.Guid creditCardId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Orders_GetByCreditCardId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@CreditCardId", DbType.Guid, creditCardId);
			
			IDataReader reader = null;
			netTiers.Petshop.Entities.TList<Orders> rows = new netTiers.Petshop.Entities.TList<Orders>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByOrderId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK__Orders__0CBAE877 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="orderId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="netTiers.Petshop.Entities.Orders"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override netTiers.Petshop.Entities.Orders GetByOrderId(TransactionManager transactionManager, System.Int32 orderId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Orders_GetByOrderId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@OrderId", DbType.Int32, orderId);
			
			IDataReader reader = null;
			netTiers.Petshop.Entities.TList<Orders> tmp = new netTiers.Petshop.Entities.TList<Orders>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Functions
		/// <summary>
		/// Lets you efficiently bulk many entity to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the netTiers.Petshop.Entities.Orders object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<netTiers.Petshop.Entities.Orders> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "Orders";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("OrderId", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("AccountId", typeof(System.Guid));
			col1.AllowDBNull = false;		
			DataColumn col2 = dataTable.Columns.Add("OrderDate", typeof(System.DateTime));
			col2.AllowDBNull = false;		
			DataColumn col3 = dataTable.Columns.Add("ShipAddr1", typeof(System.String));
			col3.AllowDBNull = false;		
			DataColumn col4 = dataTable.Columns.Add("ShipAddr2", typeof(System.String));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("ShipCity", typeof(System.String));
			col5.AllowDBNull = false;		
			DataColumn col6 = dataTable.Columns.Add("ShipState", typeof(System.String));
			col6.AllowDBNull = false;		
			DataColumn col7 = dataTable.Columns.Add("ShipZip", typeof(System.String));
			col7.AllowDBNull = false;		
			DataColumn col8 = dataTable.Columns.Add("ShipCountry", typeof(System.String));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("BillAddr1", typeof(System.String));
			col9.AllowDBNull = false;		
			DataColumn col10 = dataTable.Columns.Add("BillAddr2", typeof(System.String));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("BillCity", typeof(System.String));
			col11.AllowDBNull = false;		
			DataColumn col12 = dataTable.Columns.Add("BillState", typeof(System.String));
			col12.AllowDBNull = false;		
			DataColumn col13 = dataTable.Columns.Add("BillZip", typeof(System.String));
			col13.AllowDBNull = false;		
			DataColumn col14 = dataTable.Columns.Add("BillCountry", typeof(System.String));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("CourierId", typeof(System.Guid));
			col15.AllowDBNull = false;		
			DataColumn col16 = dataTable.Columns.Add("TotalPrice", typeof(System.Decimal));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("BillToFirstName", typeof(System.String));
			col17.AllowDBNull = false;		
			DataColumn col18 = dataTable.Columns.Add("BillToLastName", typeof(System.String));
			col18.AllowDBNull = false;		
			DataColumn col19 = dataTable.Columns.Add("ShipToFirstName", typeof(System.String));
			col19.AllowDBNull = false;		
			DataColumn col20 = dataTable.Columns.Add("ShipToLastName", typeof(System.String));
			col20.AllowDBNull = false;		
			DataColumn col21 = dataTable.Columns.Add("CreditCardId", typeof(System.Guid));
			col21.AllowDBNull = false;		
			DataColumn col22 = dataTable.Columns.Add("Locale", typeof(System.String));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("Timestamp", typeof(System.Byte[]));
			col23.AllowDBNull = false;		
			
			bulkCopy.ColumnMappings.Add("OrderId", "OrderId");
			bulkCopy.ColumnMappings.Add("AccountId", "AccountId");
			bulkCopy.ColumnMappings.Add("OrderDate", "OrderDate");
			bulkCopy.ColumnMappings.Add("ShipAddr1", "ShipAddr1");
			bulkCopy.ColumnMappings.Add("ShipAddr2", "ShipAddr2");
			bulkCopy.ColumnMappings.Add("ShipCity", "ShipCity");
			bulkCopy.ColumnMappings.Add("ShipState", "ShipState");
			bulkCopy.ColumnMappings.Add("ShipZip", "ShipZip");
			bulkCopy.ColumnMappings.Add("ShipCountry", "ShipCountry");
			bulkCopy.ColumnMappings.Add("BillAddr1", "BillAddr1");
			bulkCopy.ColumnMappings.Add("BillAddr2", "BillAddr2");
			bulkCopy.ColumnMappings.Add("BillCity", "BillCity");
			bulkCopy.ColumnMappings.Add("BillState", "BillState");
			bulkCopy.ColumnMappings.Add("BillZip", "BillZip");
			bulkCopy.ColumnMappings.Add("BillCountry", "BillCountry");
			bulkCopy.ColumnMappings.Add("CourierId", "CourierId");
			bulkCopy.ColumnMappings.Add("TotalPrice", "TotalPrice");
			bulkCopy.ColumnMappings.Add("BillToFirstName", "BillToFirstName");
			bulkCopy.ColumnMappings.Add("BillToLastName", "BillToLastName");
			bulkCopy.ColumnMappings.Add("ShipToFirstName", "ShipToFirstName");
			bulkCopy.ColumnMappings.Add("ShipToLastName", "ShipToLastName");
			bulkCopy.ColumnMappings.Add("CreditCardId", "CreditCardId");
			bulkCopy.ColumnMappings.Add("Locale", "Locale");
			bulkCopy.ColumnMappings.Add("Timestamp", "Timestamp");
			
			foreach(netTiers.Petshop.Entities.Orders entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["OrderId"] = entity.OrderId;
							
				
					row["AccountId"] = entity.AccountId;
							
				
					row["OrderDate"] = entity.OrderDate;
							
				
					row["ShipAddr1"] = entity.ShipAddr1;
							
				
					row["ShipAddr2"] = entity.ShipAddr2;
							
				
					row["ShipCity"] = entity.ShipCity;
							
				
					row["ShipState"] = entity.ShipState;
							
				
					row["ShipZip"] = entity.ShipZip;
							
				
					row["ShipCountry"] = entity.ShipCountry;
							
				
					row["BillAddr1"] = entity.BillAddr1;
							
				
					row["BillAddr2"] = entity.BillAddr2;
							
				
					row["BillCity"] = entity.BillCity;
							
				
					row["BillState"] = entity.BillState;
							
				
					row["BillZip"] = entity.BillZip;
							
				
					row["BillCountry"] = entity.BillCountry;
							
				
					row["CourierId"] = entity.CourierId;
							
				
					row["TotalPrice"] = entity.TotalPrice.HasValue ? (object) entity.TotalPrice  : System.DBNull.Value;
							
				
					row["BillToFirstName"] = entity.BillToFirstName;
							
				
					row["BillToLastName"] = entity.BillToLastName;
							
				
					row["ShipToFirstName"] = entity.ShipToFirstName;
							
				
					row["ShipToLastName"] = entity.ShipToLastName;
							
				
					row["CreditCardId"] = entity.CreditCardId;
							
				
					row["Locale"] = entity.Locale;
							
				
					row["Timestamp"] = entity.Timestamp;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(netTiers.Petshop.Entities.Orders entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a netTiers.Petshop.Entities.Orders object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">netTiers.Petshop.Entities.Orders object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the netTiers.Petshop.Entities.Orders object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, netTiers.Petshop.Entities.Orders entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Orders_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@OrderId", DbType.Int32, 4);
			database.AddInParameter(commandWrapper, "@AccountId", DbType.Guid, entity.AccountId );
			database.AddInParameter(commandWrapper, "@OrderDate", DbType.DateTime, entity.OrderDate );
			database.AddInParameter(commandWrapper, "@ShipAddr1", DbType.AnsiString, entity.ShipAddr1 );
			database.AddInParameter(commandWrapper, "@ShipAddr2", DbType.AnsiString, entity.ShipAddr2 );
			database.AddInParameter(commandWrapper, "@ShipCity", DbType.AnsiString, entity.ShipCity );
			database.AddInParameter(commandWrapper, "@ShipState", DbType.AnsiString, entity.ShipState );
			database.AddInParameter(commandWrapper, "@ShipZip", DbType.AnsiString, entity.ShipZip );
			database.AddInParameter(commandWrapper, "@ShipCountry", DbType.AnsiString, entity.ShipCountry );
			database.AddInParameter(commandWrapper, "@BillAddr1", DbType.AnsiString, entity.BillAddr1 );
			database.AddInParameter(commandWrapper, "@BillAddr2", DbType.AnsiString, entity.BillAddr2 );
			database.AddInParameter(commandWrapper, "@BillCity", DbType.AnsiString, entity.BillCity );
			database.AddInParameter(commandWrapper, "@BillState", DbType.AnsiString, entity.BillState );
			database.AddInParameter(commandWrapper, "@BillZip", DbType.AnsiString, entity.BillZip );
			database.AddInParameter(commandWrapper, "@BillCountry", DbType.AnsiString, entity.BillCountry );
			database.AddInParameter(commandWrapper, "@CourierId", DbType.Guid, entity.CourierId );
			database.AddInParameter(commandWrapper, "@TotalPrice", DbType.Decimal, (entity.TotalPrice.HasValue ? (object) entity.TotalPrice  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@BillToFirstName", DbType.AnsiString, entity.BillToFirstName );
			database.AddInParameter(commandWrapper, "@BillToLastName", DbType.AnsiString, entity.BillToLastName );
			database.AddInParameter(commandWrapper, "@ShipToFirstName", DbType.AnsiString, entity.ShipToFirstName );
			database.AddInParameter(commandWrapper, "@ShipToLastName", DbType.AnsiString, entity.ShipToLastName );
			database.AddInParameter(commandWrapper, "@CreditCardId", DbType.Guid, entity.CreditCardId );
			database.AddInParameter(commandWrapper, "@Locale", DbType.AnsiString, entity.Locale );
			database.AddOutParameter(commandWrapper, "@Timestamp", DbType.Binary, 8);
			
			int results = 0;
			
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			entity.OrderId = (System.Int32)database.GetParameterValue(commandWrapper, "@OrderId");
			entity.Timestamp = (System.Byte[])database.GetParameterValue(commandWrapper, "@Timestamp");
			
			entity.AcceptChanges();
	
			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Functions
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">netTiers.Petshop.Entities.Orders object to update.</param>
		/// <remarks>
		///		After updating the datasource, the netTiers.Petshop.Entities.Orders object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, netTiers.Petshop.Entities.Orders entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Orders_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@OrderId", DbType.Int32, entity.OrderId );
			database.AddInParameter(commandWrapper, "@AccountId", DbType.Guid, entity.AccountId );
			database.AddInParameter(commandWrapper, "@OrderDate", DbType.DateTime, entity.OrderDate );
			database.AddInParameter(commandWrapper, "@ShipAddr1", DbType.AnsiString, entity.ShipAddr1 );
			database.AddInParameter(commandWrapper, "@ShipAddr2", DbType.AnsiString, entity.ShipAddr2 );
			database.AddInParameter(commandWrapper, "@ShipCity", DbType.AnsiString, entity.ShipCity );
			database.AddInParameter(commandWrapper, "@ShipState", DbType.AnsiString, entity.ShipState );
			database.AddInParameter(commandWrapper, "@ShipZip", DbType.AnsiString, entity.ShipZip );
			database.AddInParameter(commandWrapper, "@ShipCountry", DbType.AnsiString, entity.ShipCountry );
			database.AddInParameter(commandWrapper, "@BillAddr1", DbType.AnsiString, entity.BillAddr1 );
			database.AddInParameter(commandWrapper, "@BillAddr2", DbType.AnsiString, entity.BillAddr2 );
			database.AddInParameter(commandWrapper, "@BillCity", DbType.AnsiString, entity.BillCity );
			database.AddInParameter(commandWrapper, "@BillState", DbType.AnsiString, entity.BillState );
			database.AddInParameter(commandWrapper, "@BillZip", DbType.AnsiString, entity.BillZip );
			database.AddInParameter(commandWrapper, "@BillCountry", DbType.AnsiString, entity.BillCountry );
			database.AddInParameter(commandWrapper, "@CourierId", DbType.Guid, entity.CourierId );
			database.AddInParameter(commandWrapper, "@TotalPrice", DbType.Decimal, (entity.TotalPrice.HasValue ? (object) entity.TotalPrice : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@BillToFirstName", DbType.AnsiString, entity.BillToFirstName );
			database.AddInParameter(commandWrapper, "@BillToLastName", DbType.AnsiString, entity.BillToLastName );
			database.AddInParameter(commandWrapper, "@ShipToFirstName", DbType.AnsiString, entity.ShipToFirstName );
			database.AddInParameter(commandWrapper, "@ShipToLastName", DbType.AnsiString, entity.ShipToLastName );
			database.AddInParameter(commandWrapper, "@CreditCardId", DbType.Guid, entity.CreditCardId );
			database.AddInParameter(commandWrapper, "@Locale", DbType.AnsiString, entity.Locale );
			database.AddInParameter(commandWrapper, "@Timestamp", DbType.Binary, entity.Timestamp );
			database.AddOutParameter(commandWrapper, "@ReturnedTimestamp", DbType.Binary, 8);
			
			int results = 0;
			
			
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			if (results == 0)
			{
				throw new DBConcurrencyException("Concurrency exception");
			}
		
			entity.Timestamp = (System.Byte[])database.GetParameterValue(commandWrapper, "@ReturnedTimestamp");
			
			entity.AcceptChanges();
	
			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
