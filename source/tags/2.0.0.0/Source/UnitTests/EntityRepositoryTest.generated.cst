<%--
 * $Id: EntityRepositoryTest.cst,v 1.3 2006/02/09 23:35:11 bgjohnso Exp $
 * Last modified by $Author: jroland $
 * Last modified at $Date: 2006-03-16 23:53:08 +0100 (jeu., 16 mars 2006) $
 * $Revision: 62 $
--%>
<%@ CodeTemplate Src="..\TemplateLib\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Generate nUnit test for the entity." Debug="False"  ResponseEncoding="UTF-8"%>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>

<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Optional="True"  Category="DataSource" Description="Tables that the stored procedures should be based on." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Connection" Description="Table that the data access class should be based on." %>
<%@ Property Name="NameSpace" Type="System.String" Category="Data" Description="Project root Namespace." %>
<%@ Property Name="DALNameSpace" Type="System.String" Category="Data" Description="Project root Namespace." %>
<%@ Property Name="UTNameSpace" Type="System.String" Category="Data" Description="Project root Namespace." %>

<%@ Property Name="IncludeInsert" Type="System.Boolean" Default="True" Category="Options" Description="If true insert functions will be generated." %>
<%@ Property Name="IncludeUpdate" Type="System.Boolean" Default="True" Category="Options" Description="If true update functions will be generated." %>
<%@ Property Name="IncludeSave" Type="System.Boolean" Default="True" Category="Options" Description="If true combined insert/update functions will be generated." %>
<%@ Property Name="IncludeDelete" Type="System.Boolean" Default="True" Category="Options" Description="If true delete functions will be generated." %>
<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeManyToMany" Type="System.Boolean" Default="True" Category="Options" Description="If true many2many functions will be generated." %>
<%@ Property Name="IncludeGetListByFK" Type="System.Boolean" Default="True" Category="CRUD Options" Description="If true get statements will be generated." %>
<%@ Property Name="IncludeGetListByIX" Type="System.Boolean" Default="True" Category="CRUD Options" Description="If true get statements will be generated." %>
<%@ Property Name="IncludeRelations" Type="System.Boolean" Default="True" Category="CRUD Options" Description="If true deep load will be tested" %>

<%@ Property Name="IncludeUnitTest" Type="MoM.Templates.UnitTestStyle" Default="NUnit" Category="General" Description="Indicates type of Unit tests to be generated." %>

<%
	string className = GetClassName(SourceTable.Name);
	string collectionClassName = GetCollectionClassName(SourceTable.Name);
	string providerName = GetProviderClassName(SourceTable.Name);
	string unitTestClassName = GetRepositoryTestClassName(SourceTable.Name);
	string TestAssemblyNameSpace = (IncludeUnitTest == MoM.Templates.UnitTestStyle.NUnit) ? "NUnit.Framework" : "Microsoft.VisualStudio.TestTools.UnitTesting";
%>

<%
	// Collection of all columns in the table.
	ColumnSchemaCollection cols = SourceTable.Columns;
	
	// Collection of all columns in the table that are not primary keys.
	ColumnSchemaCollection nonKeys = SourceTable.NonPrimaryKeyColumns;
	
	// Collection of all primary key columns.
	ColumnSchemaCollection keys = SourceTable.PrimaryKey.MemberColumns;
	
	// Collection of ForeignKeys. Provides information about the foreign keys 
	//(keys where the current table is the foreign table) contained in the table. 
	TableKeySchemaCollection fkeys = SourceTable.ForeignKeys;
	
	//Provides information about the primary keys 
	//(keys where the current table is the primary table) contained in the table. 
	TableKeySchemaCollection pkeys = SourceTable.PrimaryKeys;
	
	//Provides information about the indexes contained in the table. 
	IndexSchemaCollection indexes = SourceTable.Indexes;
	
	// this array store each Get BY MemberColumns in order to avoid to create doublon Get methods
	System.Collections.ArrayList getbyKeys = new System.Collections.ArrayList();
%>
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Generated on : <%=DateTime.Now.ToLongDateString()%>
	Important: Do not modify this file. Edit the file <%=unitTestClassName%>.cs instead.
*/

#region Using directives

using System;
using System.IO;
using System.Xml;
using System.Xml.Serialization;
using <%=TestAssemblyNameSpace%>;
using <%=NameSpace%>;
using <%=DALNameSpace%>;

#endregion

namespace <%=UTNameSpace%>
{
    /// <summary>
    /// Provides tests for the and <see cref="<%=className%>"/> objects (entity, collection and repository).
    /// </summary>
   public partial class <%=unitTestClassName%>
    {
    	// the <%=className%> instance used to test the repository.
		static private <%=className%> mock;
		
		// the <%=collectionClassName%> instance used to test the repository.
		static <%=collectionClassName%> mockCollection;
		
		static TransactionManager transactionManager = null;
        
        /// <summary>
		/// This method is used to construct the test environment prior to running the tests.
		/// </summary>        
        static public void Init_Generated()
        {
			mock = (<%=className%>)CreateMockInstance();						
			
        	if (DataRepository.Provider.IsTransactionSupported)
			{
				transactionManager = DataRepository.Provider.CreateTransaction();
				transactionManager.BeginTransaction();
			}
			
			System.Console.WriteLine(new String('-', 75));
			System.Console.WriteLine("-- Testing the <%=className%> Entity with the {0} --", <%=DALNameSpace%>.DataRepository.Provider.Name);
			System.Console.WriteLine(new String('-', 75));
        }
    
    	/// <summary>
		/// This method is used to restore the environment after the tests are completed.
		/// </summary>
		static public void CleanUp_Generated()
        {   
        	if (DataRepository.Provider.IsTransactionSupported && transactionManager!=null && transactionManager.IsOpen)
			{
				transactionManager.Rollback();
			}
			
			System.Console.WriteLine();
			System.Console.WriteLine();
        }
    
    
		<% if (IncludeInsert) { %>
		/// <summary>
		/// Inserts a mock <%=className%> entity into the database.
		/// </summary>
		private void Step_01_Insert_Generated()
		{
			Assert.IsTrue(DataRepository.<%=providerName%>.<%= MethodNames.Insert %>(transactionManager, mock), "Insert failed");
									
			System.Console.WriteLine("DataRepository.<%=providerName%>.<%= MethodNames.Insert %>(mock):");			
			System.Console.WriteLine(mock);			
		}
		<% } %>
		
		
		<% if (IncludeGetList) { %>
		/// <summary>
		/// Selects all <%=className%> objects of the database.
		/// </summary>
		private void Step_02_SelectAll_Generated()
		{
			mockCollection = DataRepository.<%=providerName%>.<%= MethodNames.GetAll %>(transactionManager);
			Assert.IsTrue(mockCollection.Count > 0, "No records returned.");
			System.Console.WriteLine("DataRepository.<%=providerName%>.<%= MethodNames.GetAll %>():");			
			System.Console.WriteLine(mockCollection);
					
			
			// get paged
			int count = 0;
			DataRepository.<%=providerName%>.<%= MethodNames.GetPaged %>(transactionManager, 0, 10, out count);
			System.Console.WriteLine("#get paged count: " + count.ToString());
		}
		<% } %>
		
		
		
		<% if (IncludeRelations && IncludeGetListByFK) { %>
		
		/// <summary>
		/// Deep load all <%=className%> children.
		/// </summary>
		private void Step_03_DeepLoad_Generated()
		{
			if (mockCollection.Count > 0)
			{
				//mockCollection.Shuffle();			
				DataRepository.<%=providerName%>.<%= MethodNames.DeepLoad %>(mockCollection[0]);
				System.Console.WriteLine("<%=className%> instance correctly deep loaded at 1 level.");
								
				<% if (false)
				{%>
				//mockCollection.Shuffle();
				DataRepository.<%=providerName%>.<%= MethodNames.DeepLoad %>(mockCollection[0], true);
				System.Console.WriteLine("<%=className%> instance correctly deep loaded at N level.");
				<% } %>
				mockCollection.Add(mock);
				<% if (IncludeSave)
				{ %>
				DataRepository.<%=providerName%>.<%= MethodNames.DeepSave %>(transactionManager, mockCollection);
				<% } %>
			}			
		}
		<% } %>
		
		<% if (IncludeUpdate) { %>
		/// <summary>
		/// Updates a mock <%=className%> entity into the database.
		/// </summary>
		private void Step_04_Update_Generated()
		{
			UpdateMockInstance(mock);
			Assert.IsTrue(DataRepository.<%=providerName%>.<%= MethodNames.Update %>(transactionManager, mock), "Update failed.");			
		
			// TODO : select sur l'id
			// TODO : verif si l'object recup? est egal
			
			System.Console.WriteLine("DataRepository.<%=providerName%>.<%= MethodNames.Update %>(mock):");			
			System.Console.WriteLine(mock);
		}
		<% } %>
		
		
		<% if (IncludeDelete) { %>
		/// <summary>
		/// Delete the mock <%=className%> entity into the database.
		/// </summary>
		private void Step_05_Delete_Generated()
		{
			Assert.IsTrue(DataRepository.<%=providerName%>.<%= MethodNames.Delete %>(transactionManager, mock), "Delete failed.");
			System.Console.WriteLine("DataRepository.<%=providerName%>.<%= MethodNames.Delete %>(mock):");			
			System.Console.WriteLine(mock);
		}
		<% } %>
		
		#region Serialization tests
		
		/// <summary>
		/// Serialize the mock <%=className%> entity into a temporary file.
		/// </summary>
		private void Step_06_SerializeEntity_Generated()
		{
			string fileName = "temp_<%=className%>.xml";
		
			//XmlSerializer mySerializer = new XmlSerializer(typeof(<%=className%>)); 
			//StreamWriter myWriter = new StreamWriter(fileName); 
			//mySerializer.Serialize(myWriter, this.mock); 
			//myWriter.Close();
			EntityHelper.SerializeXml(mock, fileName);
			System.Console.WriteLine("mock correctly serialized to a temporary file.");			
		}
		
		/// <summary>
		/// Deserialize the mock <%=className%> entity from a temporary file.
		/// </summary>
		private void Step_07_DeserializeEntity_Generated()
		{
			string fileName = "temp_<%=className%>.xml";
		
			//XmlSerializer mySerializer = new XmlSerializer(typeof(<%=className%>)); 
			//FileStream myFileStream = new FileStream(fileName,  FileMode.Open); 
			//this.mock = (<%=className%>) mySerializer.Deserialize(myFileStream);
			//myFileStream.Close();
			StreamReader sr = File.OpenText(fileName);
			object item = EntityHelper.DeserializeEntityXml<<%=className%>>(sr.ReadToEnd());
			sr.Close();
			File.Delete(fileName);
			
			System.Console.WriteLine("mock correctly deserialized from a temporary file.");
		}
		
		/// <summary>
		/// Serialize a <%=className%> collection into a temporary file.
		/// </summary>
		private void Step_08_SerializeCollection_Generated()
		{
			string fileName = "temp_<%=GetCollectionPropertyName(SourceTable.Name)%>.xml";
		
			<%=collectionClassName%> mockCollection = new <%=collectionClassName%>();
			mockCollection.Add(mock);
		
			XmlSerializer mySerializer = new XmlSerializer(typeof(<%=collectionClassName%>)); 
			StreamWriter myWriter = new StreamWriter(fileName); 
			mySerializer.Serialize(myWriter, mockCollection); 
			myWriter.Close();
			
			System.Console.WriteLine("<%=collectionClassName%> correctly serialized to a temporary file.");					
		}
		
		
		/// <summary>
		/// Deserialize a <%=className%> collection from a temporary file.
		/// </summary>
		private void Step_09_DeserializeCollection_Generated()
		{
			string fileName = "temp_<%=GetCollectionPropertyName(SourceTable.Name)%>.xml";
		
			XmlSerializer mySerializer = new XmlSerializer(typeof(<%=collectionClassName%>)); 
			FileStream myFileStream = new FileStream(fileName,  FileMode.Open); 
			<%=collectionClassName%> mockCollection = (<%=collectionClassName%>) mySerializer.Deserialize(myFileStream);
			myFileStream.Close();
			File.Delete(fileName);
			System.Console.WriteLine("<%=collectionClassName%> correctly deserialized from a temporary file.");	
		}
		#endregion
		
		
		<% if (IncludeGetListByFK) { %>
		
		/// <summary>
		/// Check the foreign key dal methods.
		/// </summary>
		private void Step_10_FK_Generated()
		{
			<%=className%> entity = mockCollection[0].Clone() as <%=className%>;
			
			<% for (int j=0; j < fkeys.Count;j++)
			{
				if(IsForeignKeyCoveredByIndex(fkeys[j]))
					continue;
					
				getbyKeys.Add(GetKeysName(fkeys[j].ForeignKeyMemberColumns));
			%>
			<%=collectionClassName%> t<%=j%> = DataRepository.<%=providerName%>.GetBy<%=GetKeysName( fkeys[j].ForeignKeyMemberColumns)%>(transactionManager, <%= GetFunctionEntityParameters(fkeys[j].ForeignKeyMemberColumns) %>, 0, 10);
			<% } // endfor %>	
		}
		<% } %>
		
		<% if (IncludeGetListByIX) { %>
		
		/// <summary>
		/// Check the indexes dal methods.
		/// </summary>
		private void Step_11_IX_Generated()
		{
			<%=className%> entity = mockCollection[0].Clone() as <%=className%>;
			
			<%	
			/// this array store each Get BY index
			/// The goal is to avoid to create double bet by index function
			//System.Collections.ArrayList indexKeys = new System.Collections.ArrayList();
			
			for (int j=0; j < indexes.Count; j++)
			{
				//if(indexes[j].IsPrimaryKey)
					//continue;
				
				// Check if this key is not already generated
				if(getbyKeys.IndexOf(GetKeysName(indexes[j].MemberColumns)) >=0 )
				{
					continue;
				}
				else
				{
					// add this key to the index list
					getbyKeys.Add(GetKeysName(indexes[j].MemberColumns));
				}
				
				string returnType = collectionClassName;
				//bool isUnique = false;
					
				//if (IsPrimaryKey(indexes[j]))
				if (indexes[j].IsUnique || indexes[j].IsPrimaryKey)
				{
					returnType = className;
					//isUnique = true;
				}
		%>
			<%=returnType%> t<%=j%> = DataRepository.<%=providerName%>.GetBy<%=GetKeysName(indexes[j].MemberColumns)%>(transactionManager, <%= GetFunctionEntityParameters(indexes[j].MemberColumns) %>);
		<% } //end for %>
		}
		<% } %>
		
		/// <summary>
		/// Test methods exposed by the EntityHelper class.
		/// </summary>
		private void Step_20_TestEntityHelper_Generated()
		{
			<%=className%> entity = mock.Copy() as <%=className%>;
			entity = (<%=className%>)mock.Clone();
			Assert.IsTrue(entity.Equals(mock), "Clone is not working");
		}
		
		
						
		#region Mock Instance
		///<summary>
		///  Returns a Typed <%=className%> Entity with mock values.
		///</summary>
		static public <%=className%> CreateMockInstance()
		{		
			<%=className%> mock = new <%=className%>();
						
			<% for (int x=0; x < cols.Count; x++)
			{ %>
			<% if ( !cols[x].IsForeignKeyMember && !IsIdentityColumn(cols[x]) && !IsComputed(cols[x]) )
			{ %>
			mock.<%= GetPropertyName(cols[x].Name) %> = <%= GetCSMockValueByType(cols[x], RandomString(cols[x], false), false, Guid.NewGuid(), RandomNumber(1, 250), DateTime.Now) %>;
			<% } %>
			<% } %>
			
			<% if (IncludeGetList) { %>
			<% for (int x=0; x < fkeys.Count; x++){ if (SourceTables.Contains(fkeys[x].PrimaryKeyTable)) { %>
			<%=GetCollectionClassName(fkeys[x].PrimaryKeyTable.Name) %> _collection<%=x%> = DataRepository.<%=GetProviderClassName(fkeys[x].PrimaryKeyTable.Name)%>.<%= MethodNames.GetAll %>(transactionManager, 0, 10);
			//_collection<%=x%>.Shuffle();
			if (_collection<%=x%>.Count > 0)
			{
				<% for (int y=0;y<fkeys[x].ForeignKeyMemberColumns.Count; y++) { %>
				mock.<%= GetPropertyName(fkeys[x].ForeignKeyMemberColumns[y].Name) %> = _collection<%=x%>[0].<%=GetPropertyName(fkeys[x].PrimaryKeyMemberColumns[y].Name)%>;
				<% } %>
			}
			<% } //end if 
			} // end for fkeys
			} // end if ( IncludeGetList ) %>
		
			// create a temporary collection and add the item to it
			<%=collectionClassName%> tempMockCollection = new <%=collectionClassName%>();
			tempMockCollection.Add(mock);
			tempMockCollection.Remove(mock);
			
		
		   return (<%=className%>)mock;
		}
		
		
		///<summary>
		///  Update the Typed <%=className%> Entity with modified mock values.
		///</summary>
		static public void UpdateMockInstance(<%=className%> mock)
		{
			<% for (int x=0; x < cols.Count; x++)
			{ %>
			<% if ( !cols[x].IsForeignKeyMember && !IsIdentityColumn(cols[x]) && !IsComputed(cols[x]) )
			{ %>
			mock.<%= GetPropertyName(cols[x].Name) %> = <%= GetCSMockValueByType(cols[x], RandomString(cols[x], false) + "2", true, Guid.NewGuid(), RandomNumber(1, 250), DateTime.Now) %>;
			<% } %>
			<% } %>
			
			<% if (IncludeGetList) { %>
			<% for (int x=0; x < fkeys.Count; x++){ if (SourceTables.Contains(fkeys[x].PrimaryKeyTable)) { %>
			<%=GetCollectionClassName(fkeys[x].PrimaryKeyTable.Name) %> _collection<%=x%> = DataRepository.<%=GetProviderClassName(fkeys[x].PrimaryKeyTable.Name)%>.<%= MethodNames.GetAll %>(transactionManager, 0, 10);
			//_collection<%=x%>.Shuffle();
			if (_collection<%=x%>.Count > 0)
			{
				<% for (int y=0;y<fkeys[x].ForeignKeyMemberColumns.Count; y++) { %>
				mock.<%= GetPropertyName(fkeys[x].ForeignKeyMemberColumns[y].Name) %> = _collection<%=x%>[0].<%=GetPropertyName(fkeys[x].PrimaryKeyMemberColumns[y].Name)%>;
				<% } %>
			}
			<% } // end if in tables
			} // end for
			} // end if ( IncludeGetList ) %>
		}

		#endregion
    }
}
