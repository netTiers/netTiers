<%--
 * $Id: EntityAdminControl.cst,v 1.0 2006/03/21 12:00:00 bdiaz Exp $
 * Last modified by $Author: bdiaz $
 * Last modified at $Date: 2006-03-21 12:00:00 -0600 (Tue, 21 Mar 2006) $
 * $Revision: 1 $
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="..\..\TemplateLib\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Debug="True" Description="Generates a user control for data administration." %>

<%@ Property Name="BLLNameSpace" Optional="False" Type="System.String" Category="Style" Description="BLL Namespace." %>
<%@ Property Name="DALNameSpace" Optional="False" Type="System.String" Category="Style" Description="DAL Namespace." %>
<%@ Property Name="WebNameSpace" Optional="False" Type="System.String" Category="Style" Description="Web Namespace." %>

<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Connection" Description="Tables of the system." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Connection" Description="Table that the user control should be based on." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%
	// Collection of all columns in the table.
	ColumnSchemaCollection cols = SourceTable.Columns;
	
	// Collection of all primary key columns.
	ColumnSchemaCollection keys = SourceTable.PrimaryKey.MemberColumns; 
	
	// Collection of ForeignKeys. Provides information about the foreign keys 
	//(keys where the current table is the foreign table) contained in the table. 
	TableKeySchemaCollection fkeys = SourceTable.ForeignKeys;

	ColumnSchemaCollection colsUpdatable = new ColumnSchemaCollection();
	foreach (ColumnSchema column in cols)
	{
		if ( ! IsIdentityColumn(column) && ! IsComputed(column) )
			colsUpdatable.Add(column);
	}
	
	TableKeySchemaCollection fKeysSingle = new TableKeySchemaCollection();
	foreach(TableKeySchema tableKey in fkeys)
	{
		if ( tableKey.ForeignKeyMemberColumns.Count == 1)
			fKeysSingle.Add(tableKey);
	}

	string dataKeyNames = String.Empty;
	string propertyName;

	foreach(ColumnSchema column in keys)
	{
		propertyName = GetPropertyName(column);
		
		if (dataKeyNames != String.Empty)
			dataKeyNames += ",";
			
		dataKeyNames += propertyName;
	}

	string providerName = GetProviderName(SourceTable.Name);
	string entityName = GetClassName(SourceTable.Name);
	string className = BLLNameSpace + "." + entityName;
%>
<%%@ Control Language="C#" %%>
<%%@ Register TagPrefix="uc" TagName="EntityAdminControl" Src="../Common/EntityAdminControl.ascx" %%>

<uc:EntityAdminControl ID="SpecialtyAdminControl" runat="server"
	ProviderName="<%= providerName %>"
	EntityTypeName="<%= className %>, <%= BLLNameSpace %>"
	EntityKeyName="<%= dataKeyNames %>"
>
	<FilterColumnListItems>
		<% foreach(ColumnSchema column in cols) { %>
		<asp:ListItem Value="<%= column.Name %>" Text="<%= GetPropertyName(column.Name) %>" />
		<% } %>
	</FilterColumnListItems>
	
	<GridColumns>
		<asp:CommandField ShowEditButton="true" ShowDeleteButton="True" ButtonType="Button" EditText="Edit" ControlStyle-Width="55" />
		<% foreach(ColumnSchema column in cols) { %>
		<% propertyName = GetPropertyName(column.Name); %>
		<asp:<%= GetFieldType(column) %> DataField="<%= propertyName %>" SortExpression="<%= propertyName %>" HeaderText="<%= propertyName %>" />
		<% } %>
	</GridColumns>
	
	<DetailFields>
		<% foreach(ColumnSchema column in cols) { %>
		<% propertyName = GetPropertyName(column.Name); %>
		<asp:<%= GetFieldType(column) %> DataField="<%= propertyName %>" HeaderText="<%= propertyName %>" />
		<% } %>
		<asp:CommandField ShowInsertButton="True" ButtonType="Button" />
	</DetailFields>
</uc:EntityAdminControl>

<script runat="template">
public string GetFieldType(ColumnSchema column)
{
	string fieldType = null;
	
	switch ( column.DataType )
	{
		case DbType.Boolean:
			fieldType = "CheckBoxField";
			break;
		default:
			fieldType = "BoundField";
			break;
	}
	
	return fieldType;
}
</script>
