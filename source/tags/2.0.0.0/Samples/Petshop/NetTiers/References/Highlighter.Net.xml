<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Highlighter.Net</name>
    </assembly>
    <members>
        <member name="T:Lucene.Net.Search.Highlight.SimpleFragmenter">
            <summary> {@link Fragmenter} implementation which breaks text up into same-size 
            fragments with no concerns over spotting sentence boundaries.
            </summary>
            <author>  mark@searcharea.co.uk
            </author>
        </member>
        <member name="T:Lucene.Net.Search.Highlight.Fragmenter">
            <summary> Implements the policy for breaking text into multiple fragments for consideration
            by the {@link Highlighter} class. A sophisticated implementation may do this on the basis
            of detecting end of sentences in the text. 
            </summary>
            <author>  mark@searcharea.co.uk
            </author>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.Fragmenter.Start(System.String)">
            <summary> Initializes the Fragmenter</summary>
            <param name="">originalText
            </param>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.Fragmenter.IsNewFragment(Lucene.Net.Analysis.Token)">
            <summary> Test to see if this token from the stream should be held in a new TextFragment</summary>
            <param name="">nextToken
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.SimpleFragmenter.#ctor(System.Int32)">
            <summary> </summary>
            <param name="fragmentSize">size in bytes of each fragment
            </param>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.SimpleFragmenter.GetFragmentSize">
            <returns> size in bytes of each fragment
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.SimpleFragmenter.SetFragmentSize(System.Int32)">
            <param name="size">size in bytes of each fragment
            </param>
        </member>
        <member name="T:Lucene.Net.Search.Highlight.Highlighter">
            <summary> Class used to markup highlighted terms found in the best sections of a 
            text, using configurable {@link Fragmenter}, {@link Scorer}, {@link Formatter} 
            and tokenizers.
            </summary>
            <author>  mark@searcharea.co.uk
            </author>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.Highlighter.GetBestFragment(Lucene.Net.Analysis.TokenStream,System.String)">
            <summary> Highlights chosen terms in a text, extracting the most relevant section.
            The document text is analysed in chunks to record hit statistics
            across the document. After accumulating stats, the fragment with the highest score
            is returned
            
            </summary>
            <param name="tokenStream">  a stream of tokens identified in the text parameter, including offset information. 
            This is typically produced by an analyzer re-parsing a document's 
            text. Some work may be done on retrieving TokenStreams more efficently 
            by adding support for storing original text position data in the Lucene
            index but this support is not currently available (as of Lucene 1.4 rc2).  
            </param>
            <param name="text">text to highlight terms in
            
            </param>
            <returns> highlighted text fragment or null if no terms found
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.Highlighter.GetBestFragments(Lucene.Net.Analysis.TokenStream,System.String,System.Int32)">
            <summary> Highlights chosen terms in a text, extracting the most relevant sections.
            The document text is analysed in chunks to record hit statistics
            across the document. After accumulating stats, the fragments with the highest scores
            are returned as an array of strings in order of score (contiguous fragments are merged into 
            one in their original order to improve readability)
            
            </summary>
            <param name="text">       	text to highlight terms in
            </param>
            <param name="maxNumFragments"> the maximum number of fragments.
            
            </param>
            <returns> highlighted text fragments (between 0 and maxNumFragments number of fragments)
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.Highlighter.GetBestTextFragments(Lucene.Net.Analysis.TokenStream,System.String,System.Boolean,System.Int32)">
            <summary> Low level api to get the most relevant (formatted) sections of the document.
            This method has been made public to allow visibility of score information held in TextFragment objects.
            Thanks to Jason Calabrese for help in redefining the interface.  
            </summary>
            <param name="">tokenStream
            </param>
            <param name="">text
            </param>
            <param name="">maxNumFragments
            </param>
            <param name="">mergeContiguousFragments
            </param>
            <returns> 
            </returns>
            <throws>  IOException </throws>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.Highlighter.MergeContiguousFragments(Lucene.Net.Search.Highlight.TextFragment[])">
            <summary>Improves readability of a score-sorted list of TextFragments by merging any fragments 
            that were contiguous in the original text into one larger fragment with the correct order.
            This will leave a "null" in the array entry for the lesser scored fragment. 
            
            </summary>
            <param name="frag">An array of document fragments in descending score
            </param>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.Highlighter.GetBestFragments(Lucene.Net.Analysis.TokenStream,System.String,System.Int32,System.String)">
            <summary> Highlights terms in the  text , extracting the most relevant sections
            and concatenating the chosen fragments with a separator (typically "...").
            The document text is analysed in chunks to record hit statistics
            across the document. After accumulating stats, the fragments with the highest scores
            are returned in order as "separator" delimited strings.
            
            </summary>
            <param name="text">       text to highlight terms in
            </param>
            <param name="maxNumFragments"> the maximum number of fragments.
            </param>
            <param name="separator"> the separator used to intersperse the document fragments (typically "...")
            
            </param>
            <returns> highlighted text
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.Highlighter.GetMaxDocBytesToAnalyze">
            <returns> the maximum number of bytes to be tokenized per doc 
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.Highlighter.SetMaxDocBytesToAnalyze(System.Int32)">
            <param name="byteCount">the maximum number of bytes to be tokenized per doc
            (This can improve performance with large documents)
            </param>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.Highlighter.GetTextFragmenter">
            <returns>
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.Highlighter.SetTextFragmenter(Lucene.Net.Search.Highlight.Fragmenter)">
            <param name="">fragmenter
            </param>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.Highlighter.GetFragmentScorer">
            <returns> Object used to score each text fragment 
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.Highlighter.SetFragmentScorer(Lucene.Net.Search.Highlight.Scorer)">
            <param name="">scorer
            </param>
        </member>
        <member name="T:Lucene.Net.Search.Highlight.QueryTermExtractor">
            <summary> Utility class used to extract the terms used in a query, plus any weights.
            This class will not find terms for MultiTermQuery, RangeQuery and PrefixQuery classes
            so the caller must pass a rewritten query (see Query.rewrite) to obtain a list of 
            expanded terms. 
            
            </summary>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.QueryTermExtractor.GetTerms(Lucene.Net.Search.Query)">
            <summary> Extracts all terms texts of a given Query into an array of WeightedTerms
            
            </summary>
            <param name="query">     Query to extract term texts from
            </param>
            <returns> an array of the terms used in a query, plus their weights.
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.QueryTermExtractor.GetTerms(Lucene.Net.Search.Query,System.Boolean)">
            <summary> Extracts all terms texts of a given Query into an array of WeightedTerms
            
            </summary>
            <param name="query">     Query to extract term texts from
            </param>
            <param name="prohibited"><code>true</code> to extract "prohibited" terms, too
            </param>
            <returns> an array of the terms used in a query, plus their weights.
            </returns>
        </member>
        <member name="T:Lucene.Net.Search.Highlight.QueryScorer">
            <summary> {@link Scorer} implementation which scores text fragments by the number of unique query terms found.
            This class uses the {@link QueryTermExtractor} class to process determine the query terms and 
            their boosts to be used. 
            </summary>
            <author>  mark@searcharea.co.uk
            </author>
        </member>
        <member name="T:Lucene.Net.Search.Highlight.Scorer">
            <summary> Adds to the score for a fragment based on its tokens</summary>
            <author>  mark@searcharea.co.uk
            </author>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.Scorer.StartFragment(Lucene.Net.Search.Highlight.TextFragment)">
            <summary> called when a new fragment is started for consideration</summary>
            <param name="">newFragment
            </param>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.Scorer.GetTokenScore(Lucene.Net.Analysis.Token)">
            <summary> Called for each token in the current fragment</summary>
            <param name="token">The token to be scored
            </param>
            <returns> a score which is passed to the Highlighter class to influence the mark-up of the text
            (this return value is NOT used to score the fragment)
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.Scorer.GetFragmentScore">
            <summary> Called when the highlighter has no more tokens for the current fragment - the scorer returns
            the weighting it has derived for the most recent fragment, typically based on the tokens
            passed to getTokenScore(). 
            
            </summary>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.QueryScorer.#ctor(Lucene.Net.Search.Query)">
            <summary> </summary>
            <param name="query">a Lucene query (ideally rewritten using query.rewrite 
            before being passed to this class and the searcher)
            </param>
        </member>
        <member name="T:Lucene.Net.Search.Highlight.SimpleHTMLFormatter">
            <summary> Simple {@link Formatter} implementation to highlight terms with a pre and post tag</summary>
            <author>  MAHarwood
            
            </author>
        </member>
        <member name="T:Lucene.Net.Search.Highlight.Formatter">
            <summary> Processes terms found in the original text, typically by applying some form 
            of mark-up to highlight terms in HTML search results pages.
            
            </summary>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.Formatter.HighlightTerm(System.String,Lucene.Net.Search.Highlight.TokenGroup)">
            <param name="originalText">The section of text being considered for markup
            </param>
            <param name="tokenGroup">contains one or several overlapping Tokens along with
            their scores and positions.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.SimpleHTMLFormatter.#ctor">
            <summary> Default constructor uses HTML: &lt;B&gt; tags to markup terms
            
            
            </summary>
        </member>
        <member name="T:Lucene.Net.Search.Highlight.TokenGroup">
            <summary> One, or several overlapping tokens, along with the score(s) and the
            scope of the original text
            </summary>
            <author>  MAHarwood
            </author>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.TokenGroup.GetToken(System.Int32)">
            <summary> </summary>
            <param name="index">a value between 0 and numTokens -1
            </param>
            <returns> the "n"th token
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.TokenGroup.GetScore(System.Int32)">
            <summary> </summary>
            <param name="index">a value between 0 and numTokens -1
            </param>
            <returns> the "n"th score
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.TokenGroup.GetEndOffset">
            <returns> the end position in the original text
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.TokenGroup.GetNumTokens">
            <returns> the number of tokens in this group
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.TokenGroup.GetStartOffset">
            <returns> the start position in the original text
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.TokenGroup.GetTotalScore">
            <returns>
            </returns>
        </member>
        <member name="T:Lucene.Net.Search.Highlight.WeightedTerm">
            <summary>Lightweight class to hold term and a weight value used for scoring this term </summary>
            <author>  Mark Harwood
            </author>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.WeightedTerm.GetTerm">
            <returns> the term value (stemmed)
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.WeightedTerm.GetWeight">
            <returns> the weight associated with this term
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.WeightedTerm.SetTerm(System.String)">
            <param name="term">the term value (stemmed)
            </param>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.WeightedTerm.SetWeight(System.Single)">
            <param name="weight">the weight associated with this term
            </param>
        </member>
        <member name="T:Lucene.Net.Search.Highlight.TextFragment">
            <summary> Low-level class used to record information about a section of a document 
            with a score.
            </summary>
            <author>  MAHarwood
            
            
            </author>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.TextFragment.Merge(Lucene.Net.Search.Highlight.TextFragment)">
            <param name="frag2">Fragment to be merged into this one
            </param>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.TextFragment.Follows(Lucene.Net.Search.Highlight.TextFragment)">
            <param name="fragment">
            </param>
            <returns> true if this fragment follows the one passed
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Highlight.TextFragment.GetFragNum">
            <returns> the fragment sequence number
            </returns>
        </member>
    </members>
</doc>
