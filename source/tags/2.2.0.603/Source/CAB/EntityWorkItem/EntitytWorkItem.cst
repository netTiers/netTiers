<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="Generate a CAB WorkItem." Debug="True" ResponseEncoding="UTF-8" NoWarn="0108,0618,1572,1573,1574,0162,2002"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Text" %>

<%@ Property Name="EntityName" Type="System.String" Category="Data" Description="Namespace." %>
<%@ Property Name="EntityNameSpace" Type="System.String" Category="Style" Description="Root Namespace." %>
<%@ Property Name="WorkItemNameSpace" Type="System.String" Category="Style" Description="Root Namespace." %>
<%@ Property Name="WorkItemClassName" Type="System.String" Category="Style" Description="Root Namespace." %>
<%@ Property Name="ViewClassName" Type="System.String" Category="Style" Description="Root Namespace." %>
<%@ Property Name="IsList" Type="System.Boolean" Category="Style" %>

using System;
using System.Collections.Generic;
using System.Text;

using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.CompositeUI.EventBroker;
using Microsoft.Practices.ObjectBuilder;

using <%=EntityNameSpace%>;

namespace <%=WorkItemNameSpace%>
{
    public class <%=WorkItemClassName%> : WorkItem
    {
        private <%=ViewClassName%> _view;
        private IWorkspace _workspace;

        #region State definition
        
        <% if (IsList) { %>
        	
        	/// <summary>
        /// State that is inject in the workitem.
        /// The State is set this way so child items
        /// can get inject with the state.
        /// </summary>
        public TList<<%=EntityName%>> <%=EntityName%>List
        {
            get { return (TList<<%=EntityName%>>)State["<%=EntityName%>List"]; }
            set { State["<%=EntityName%>List"] = value; }
        }
        	
        <% } else { %>
        
        /// <summary>
        /// State that is inject in the workitem.
        /// The State is set this way so child items
        /// can get inject with the state.
        /// </summary>
        public <%=EntityName%> <%=EntityName%>
        {
            get { return (<%=EntityName%>)State["<%=EntityName%>"]; }
            set { State["<%=EntityName%>"] = value; }
        }
					
				<% } %>

        #endregion

        /// <summary>
        /// Starts the workitem in the specified Workspace.
        /// </summary>
        /// <param name="workspace">The workspace that will display the smartparts of the workitem</param>
        public void Run(IWorkspace workspace)
        {
			this._workspace = workspace;
            this._view = this.Items.Get<<%=ViewClassName%>>("<%=ViewClassName%>") ?? this.Items.AddNew<<%=ViewClassName%>>("<%=ViewClassName%>");
			this._view.Disposed += new EventHandler(OnViewDisposed); 
			
            //Make the smartpart visible in the workspace.
			ISmartPartInfo smartPartInfo = new SmartPartInfo("<%=ViewClassName%>", "");
			RegisterSmartPartInfo(this._view, smartPartInfo);
			workspace.Show(this._view, smartPartInfo);
			
			<% if (IsList == false) { %>
			<%=EntityName%>.ColumnChanged += new <%=EntityName%>EventHandler(On<%=EntityName%>ColumnChanged);
			<% } %>
        }        
		
		/// <summary>
		/// Handles the Disposed event of the _view control.
		/// </summary>
		/// <remark>We use this event to terminate the workitem when the smartpart is disposed</remark>
		/// <param name="sender">The source of the event.</param>
		/// <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
		void OnViewDisposed(object sender, EventArgs e)
        {
            if (this.Status != Microsoft.Practices.CompositeUI.WorkItemStatus.Terminated)
            {
                Terminate();
            }
        }
		
		<% if (IsList == false) { %>
		
		void On<%=EntityName%>ColumnChanged(object sender, <%=EntityName%>EventArgs e)
		{
			UpdateSmartPartTitle();
		}	
		
		internal void UpdateSmartPartTitle()
		{
			SmartPartInfo smartPartInfo = GetSmartPartInfo<SmartPartInfo>(this._view);
			string oldTitle = smartPartInfo.Title;
			smartPartInfo.Title = <%=EntityName%>.Name + (<%=EntityName%>.IsDirty ? " *" : string.Empty);
			if (oldTitle != smartPartInfo.Title)
			{
				_workspace.Show(this._view, smartPartInfo);
			}
		}

		[EventSubscription(Constants.EventTopics.SaveRequested, ThreadOption.UserInterface)]
		public void SaveRequestedHandler(object sender, EventArgs e)
		{
			if (Workspaces["MainWorkspace"].ActiveSmartPart == _view)
			{
				_view.Save();
			}
		}

		internal void Save<%=EntityName%>()
		{
			Data.DataRepository.<%=EntityName%>Provider.Save(<%=EntityName%>);
			UpdateSmartPartTitle();
		}
		
		<% } %>
    }
}
