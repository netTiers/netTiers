
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Generated on : Monday, July 24, 2006
	Important: Do not modify this file. Edit the file ExtendedItemTest.cs instead.
*/
#region Using directives

using System;
using System.IO;
using System.Xml;
using System.Xml.Serialization;
using NUnit.Framework;
using netTiers.Petshop.Entities;
using netTiers.Petshop.Data;

#endregion

namespace netTiers.Petshop.UnitTests
{
    /// <summary>
    /// Provides tests for the and <see cref="ExtendedItem"/> objects (entity, collection and repository).
    /// </summary>
    public partial class ExtendedItemTest
    {
    	// the ExtendedItem instance used to test the repository.
		static private ExtendedItem mock;
		
		// the VList<ExtendedItem> instance used to test the repository.
		static VList<ExtendedItem> mockCollection;		
        
        /// <summary>
		/// This method is used to construct the test environment prior to running the tests.
		/// </summary>
        static private void Init_Generated()
        {
			mock = (ExtendedItem)CreateMockInstance();	
			
			System.Console.WriteLine(new String('-', 75));
			System.Console.WriteLine("-- Testing the ExtendedItem Entity with the {0} --", netTiers.Petshop.Data.DataRepository.Provider.Name);
			System.Console.WriteLine(new String('-', 75));
        }
    
    	/// <summary>
		/// This method is used to restore the environment after the tests are completed.
		/// </summary>
        static private void CleanUp_Generated()
        {       	
			System.Console.WriteLine();
			System.Console.WriteLine();
        }
		
		/// <summary>
		/// Selects all ExtendedItem objects of the database.
		/// </summary>
		private void Step_1_SelectAll_Generated()
		{
			mockCollection = DataRepository.ExtendedItemProvider.GetAll(0, 10);
			Assert.IsTrue(mockCollection.Count > 0, "No records returned.");
			System.Console.WriteLine("DataRepository.ExtendedItemProvider.GetAll():");			
			System.Console.WriteLine(mockCollection);			
		}
		
		/// <summary>
		/// Selects all ExtendedItem objects of the database.
		/// </summary>
		private void Step_2_Search_Generated()
		{
			mockCollection = DataRepository.ExtendedItemProvider.Get(0, 10);
			Assert.IsTrue(mockCollection.Count > 0, "No records returned.");
			System.Console.WriteLine("DataRepository.ExtendedItemProvider.Get():");			
			System.Console.WriteLine(mockCollection);
					
		}
			
		
		#region Serialization tests
		
		/// <summary>
		/// Serialize the mock ExtendedItem entity into a temporary file.
		/// </summary>
		private void Step_6_SerializeEntity_Generated()
		{
			string fileName = "temp_ExtendedItem.xml";
		
			XmlSerializer mySerializer = new XmlSerializer(typeof(ExtendedItem)); 
			StreamWriter myWriter = new StreamWriter(fileName); 
			mySerializer.Serialize(myWriter, mock); 
			myWriter.Close();
			System.Console.WriteLine("mock correctly serialized to a temporary file.");			
		}
		
		/// <summary>
		/// Deserialize the mock ExtendedItem entity from a temporary file.
		/// </summary>
		private void Step_7_DeserializeEntity_Generated()
		{
			string fileName = "temp_ExtendedItem.xml";
		
			XmlSerializer mySerializer = new XmlSerializer(typeof(ExtendedItem)); 
			FileStream myFileStream = new FileStream(fileName,  FileMode.Open); 
			mock = (ExtendedItem) mySerializer.Deserialize(myFileStream);
			myFileStream.Close();
			File.Delete(fileName);
			
			System.Console.WriteLine("mock correctly deserialized from a temporary file.");
		}
		
		/// <summary>
		/// Serialize a ExtendedItem collection into a temporary file.
		/// </summary>
		private void Step_8_SerializeCollection_Generated()
		{
			string fileName = "temp_ExtendedItemCollection.xml";
		
			VList<ExtendedItem> mockCollection = new VList<ExtendedItem>();
			mockCollection.Add(mock);
		
			XmlSerializer mySerializer = new XmlSerializer(typeof(VList<ExtendedItem>)); 
			StreamWriter myWriter = new StreamWriter(fileName); 
			mySerializer.Serialize(myWriter, mockCollection); 
			myWriter.Close();
			
			System.Console.WriteLine("VList<ExtendedItem> correctly serialized to a temporary file.");					
		}
		
		
		/// <summary>
		/// Deserialize a ExtendedItem collection from a temporary file.
		/// </summary>
		private void Step_9_DeserializeCollection_Generated()
		{
			string fileName = "temp_ExtendedItemCollection.xml";
		
			XmlSerializer mySerializer = new XmlSerializer(typeof(VList<ExtendedItem>)); 
			FileStream myFileStream = new FileStream(fileName,  FileMode.Open); 
			VList<ExtendedItem> mockCollection = (VList<ExtendedItem>) mySerializer.Deserialize(myFileStream);
			myFileStream.Close();
			File.Delete(fileName);
			System.Console.WriteLine("VList<ExtendedItem> correctly deserialized from a temporary file.");	
		}
		#endregion
		
		#region Mock Instance
		///<summary>
		///  Returns a Typed ExtendedItem Entity with mock values.
		///</summary>
		static public ExtendedItem CreateMockInstance()
		{		
			ExtendedItem mock = new ExtendedItem();
						
			mock.ItemId = new Guid("e99dd87a-fe92-482b-9deb-63f4748d0375");
			mock.ItemName = "OUWMCRJRPTDWHBFTWDCDPUHBBPHUJOSRZERGKGYNGTFOJUFLMXBNFELVNVKOLQIABMXDKZIPFPXWOUSIJWIMNFMVTWTQWKCQLFNWXDBNOMIQIPGTCDEPIWNWBCKOGS";
			mock.ItemDescription = "OUWMCRJRPTDWHBFTWDCDPUHBBPHUJOSRZERGKGYNGTFOJUFLMXBNFELVNVKOLQIABMXDKZIPFPXWOUSIJWIMNFMVTWTQWKCQLFNWXDBNOMIQIPGTCDEPIWNWBCKOGS";
			mock.ItemPrice = 1.0f;
			mock.ItemPhoto = "OUWMCRJRPTDWHBFTWDCDPUHBBPHUJOSRZERGKGYNGTFOJUFLMXBNFELVNVKOLQIABMXDKZIPFPXWOUSIJWIMNFMVTWTQWKCQLFNWXDBNOMIQIPGTCDEPIWNWBCKOGS";
			mock.ProductId = new Guid("76f72d35-513b-4aa5-93a4-089ca4a8934e");
			mock.ProductName = "OUWMCRJRPTDWHBFTWDCDPUHBBPHUJOSRZERGKGYNGTFOJUFLMXBNFELVNVKOLQIABMXDKZIPFPXWOUSIJWIMNFMVTWTQWKCQLFNWXDBNOMIQIPGTCDEPIWNWBCKOGS";
			mock.ProductDescription = "OUWMCRJRPTDWHBFTWDCDPUHBBPHUJOSRZERGKGYNGTFOJUFLMXBNFELVNVKOLQIABMXDKZIPFPXWOUSIJWIMNFMVTWTQWKCQLFNWXDBNOMIQIPGTCDEPIWNWBCKOGS";
			mock.CategoryId = new Guid("ff3eb6ab-0f5f-496a-99e4-c473c67f94aa");
			mock.CategoryName = "OUWMCRJRPTDWHBFTWDCDPUHBBPHUJOSRZERGKGYNGTFOJUFLMXBNFELVNVKOLQIABMXDKZIPFPXWOUSIJWIMNFMVTWTQWKCQLFNWXDBNOMIQIPGTCDEPIWNWBCKOGS";
		   return (ExtendedItem)mock;
		}
		

		#endregion
    }
}
