<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Practices.EnterpriseLibrary.Common</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AppDomainNameFormatter">
            <summary>
            Provides the friendly name of the app domain as the prefix in formatting a 
            particular instance of a performance counter.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter">
            <summary>
            Provides a pluggable way to format the name given to a particular instance of a performance counter.
            Each instance of a performance counter in Enterprise Library is given a name of the format
            "Name prefix - counter name"
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter.CreateName(System.String)">
            <summary>
            Creates the formatted instance name for a performance counter, providing the prefix for the
            instance.
            </summary>
            <param name="nameSuffix">Performance counter name, as defined during installation of the counter</param>
            <returns>Formatted instance name in form of "prefix - nameSuffix"</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AppDomainNameFormatter.CreateName(System.String)">
            <summary>
            Creates the formatted instance name for a performance counter, providing the Application
            Domain friendly name for the prefix for the instance.
            </summary>
            <param name="nameSuffix">Performance counter name, as defined during installation of the counter</param>
            <returns>Formatted instance name in form of "appDomainFriendlyName - nameSuffix"</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter">
            <summary>
            Provides a virtual PerformanceCounter interface that allows an application to maintain both individually 
            named counter instances and a single counter total instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.#ctor(System.String,System.String)">
            <summary>
            Initializes a single performance counter instance named "Total"
            </summary>
            <param name="counterCategoryName">Performance counter category name, as defined during installation</param>
            <param name="counterName">Performance counter name, as defined during installation</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.#ctor(System.String,System.String,System.String[])">
            <summary>
            Initializes multiple instances of performance counters to be managed by this object. 
            Creates a "Total" counter as well as individual instances as defined in the <paramref name="instanceNames"></paramref>
            </summary>
            <param name="counterCategoryName">Performance counter category name, as defined during installation</param>
            <param name="counterName">Performance counter name, as defined during installation</param>
            <param name="instanceNames">Param array of instance names to be managed</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.#ctor(System.Diagnostics.PerformanceCounter[])">
            <summary>
            Initializes this object with performance counters created externally. It is the responsibility of the external
            counter factory to create an instance for the "Total" counter.
            </summary>
            <param name="counters">Param array of already initialized <see cref="T:System.Diagnostics.PerformanceCounter"></see>s to be managed 
            by this instance.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.Clear">
            <summary>
            Clears the raw count associated with all managed performance counters
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.Increment">
            <summary>
            Increments each performance counter managed by this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.IncrementBy(System.Int64)">
            <summary>
            Increments by the given <paramref name="value"></paramref> each performance counter managed by this instance.
            </summary>
            <param name="value">Amount by which to increment each counter</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.GetValueFor(System.String)">
            <summary>
            Gets the current value of the given performance counter instance.
            </summary>
            <param name="instanceName">Instance name of counter for which to get value.</param>
            <returns>Value of the given performance counter.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.SetValueFor(System.String,System.Int64)">
            <summary>
            Sets the value of the given performance counter instance.
            </summary>
            <param name="instanceName">Instance name of counter for which to set the value.</param>
            <param name="value">Value to which the given instance should be set.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.InstantiateCounter(System.String)">
            <summary>
            Instantiates a performance counter, giving it the specified <paramref name="instanceName"></paramref>.
            </summary>
            <param name="instanceName">Instance name to be given to the instantiated <see cref="T:System.Diagnostics.PerformanceCounter"></see></param>.
            <returns>Initialized <see cref="T:System.Diagnostics.PerformanceCounter"></see></returns>.
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.Counters">
            <summary>
            Gets the list of performance counter instances managed by this object.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.Value">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventBinder">
            <summary>
            Binds an event source to an event handler.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventBinder.#ctor(System.Object,System.Object)">
            <summary>
            Initializes this object with the source and listener objects to be bound together.
            </summary>
            <param name="source">Object owning the event that will be bound to</param>
            <param name="listener">Object owning the method that will be added as a handler for specified event.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventBinder.Bind(System.Reflection.EventInfo,System.Reflection.MethodInfo)">
            <summary>
            Adds specified <paramref name="listenerMethod"></paramref> as an event handler for 
            the <paramref name="sourceEvent"></paramref>.
            </summary>
            <param name="sourceEvent">Event on source object to which <paramref name="listenerMethod"></paramref> will be added.</param>
            <param name="listenerMethod">Method to be added as event handler for <paramref name="listenerMethod"></paramref>.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationBaseAttribute">
            <summary>
            Base class for attributes used to identify instrumentation producers or consumers.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationBaseAttribute.#ctor(System.String)">
            <summary>
            Initializes this instance with the instrumentation subject name.
            </summary>
            <param name="subjectName">Subject name being produced or consumed</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationBaseAttribute.SubjectName">
            <summary>
            Gets the subject name
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationConsumerAttribute">
            <summary>
            Defines methods that are consuming instrumentation events.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationConsumerAttribute.#ctor(System.String)">
            <summary>
            Initializes this instance with the instrumentation subject name being consumed.
            </summary>
            <param name="subjectName">Subject name of the event being consumed.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListenerAttribute">
            <summary>
            Defines a class that will listen for instrumentation events broadcast by other classes
            and report them to system services. This attribute is placed on the class that is to be
            listened to to define the class that will listen to it.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListenerAttribute.#ctor(System.Type)">
            <overloads>
            Initializes attribute with given <paramref name="listenerType"></paramref>. 
            </overloads>
            <summary>
            Initializes attribute with given <paramref name="listenerType"></paramref>. 
            </summary>
            <param name="listenerType">Instrumentation listener type to instantiate.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListenerAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes attribute with given <paramref name="listenerType"></paramref>. Use when
            you need to specify an explicit binder class.
            </summary>
            <param name="listenerType">Instrumentation listener type to instantiate.</param>
            <param name="listenerBinderType">Instrumentation binder listener type to instantiate.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListenerAttribute.ListenerType">
            <summary>
            Gets type of class to instantiate to listen for events.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListenerAttribute.ListenerBinderType">
            <summary>
            Gets type of class to use to bind an instance of the attributed class to 
            an instance of the listener class
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationProviderAttribute">
            <summary>
            Defines events that are producing instrumentation events.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationProviderAttribute.#ctor(System.String)">
            <summary>
            Initializes this object with the instrumentation subject name being produced.
            </summary>
            <param name="subjectName">Subect name of event being produced.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.HasInstallableResourcesAttribute">
            <summary>
            Defines those classes and structs that have some sort of resources that need to be installed.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute">
            <summary>
            Defines a <see cref="T:System.Diagnostics.PerformanceCounter"></see>. Used by the reflection-based installers to 
            prepare a performance counter for installation.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.#ctor(System.String,System.String,System.Diagnostics.PerformanceCounterType)">
            <summary>
            Initializes this object with all data needed to install a <see cref="T:System.Diagnostics.PerformanceCounter"></see>.
            </summary>
            <param name="counterName">Performance counter name.</param>
            <param name="counterHelp">Name of Help resource string. This is not the help text itself, 
            but is the resource name used to look up the internationalized help text at install-time.</param>
            <param name="counterType">Performance Counter type.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.HasBaseCounter">
            <summary>
            Used to determine if the counter being installed has a base counter associated with it.
            </summary>
            <returns>True if counter being installed has a base counter associated with it.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.CounterType">
            <summary>
            Gets the <see cref="T:System.Diagnostics.PerformanceCounter"></see> type.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.CounterHelp">
            <summary>
            Get the name of Help resource string. This is not the help text itself, 
            but is the resource name used to look up the internationalized help text at install-time.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.CounterName">
            <summary>
            Gets the <see cref="T:System.Diagnostics.PerformanceCounter"></see> name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.BaseCounterType">
            <summary>
            Gets and sets the base <see cref="T:System.Diagnostics.PerformanceCounter"></see> type. This is an optional 
            property used when the counter being defined requires a base counter to operate, such as for 
            averages, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.BaseCounterHelp">
            <summary>
            Gets and sets the base <see cref="T:System.Diagnostics.PerformanceCounter"></see> help resource name. 
            This is not the help text itself, 
            but is the resource name used to look up the internationalized help text at install-time.
            This is an optional 
            property used when the counter being defined requires a base counter to operate, such as for 
            averages, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.BaseCounterName">
            <summary>
            Gets and sets the base <see cref="T:System.Diagnostics.PerformanceCounter"></see> name. This is an optional 
            property used when the counter being defined requires a base counter to operate, such as for 
            averages, etc.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ReflectionInstrumentationBinder">
            <summary>
            Binds together source events and listener handler methods through reflection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ReflectionInstrumentationBinder.Bind(System.Object,System.Object)">
            <summary>
            Binds together source events and listener handler methods through reflection.
            </summary>
            <param name="eventSource">Object containing events attributed with <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationProviderAttribute"></see>.</param>
            <param name="eventListener">Object containing handler methods attribute with <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationConsumerAttribute"></see>.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.NoPrefixNameFormatter">
            <summary>
            Provides a pluggable way to format the name given to a particular instance of a performance counter.
            This class does no formatting, returning the provided name suffix as the counter name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.NoPrefixNameFormatter.CreateName(System.String)">
            <summary>
            Returns the given <paramref name="nameSuffix"></paramref> as the created name.
            </summary>
            <param name="nameSuffix">Performance counter name, as defined during installation of the counter</param>
            <returns>Formatted instance name in form of "nameSuffix"</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.EventLogEntryExceptionTemplate">
            <summary>
              Looks up a localized string similar to The exception that occured was: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.EventLogEntryHeaderTemplate">
            <summary>
              Looks up a localized string similar to An error occurred in application {0} in the {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionArgumentShouldDeriveFromIDictionary">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; does not derive from IDictionary..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionArgumentShouldDeriveFromIList">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; does not derive from IList..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionAssemblerAttributeNotSet">
            <summary>
              Looks up a localized string similar to The [Assembler] attribute is not set in the configuration object type {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionAssemblerTypeNotCompatible">
            <summary>
              Looks up a localized string similar to The assembler configured for type {0} has type {2} which is not compatible with type {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionBaseConfigurationSourceElementIsInvalid">
            <summary>
              Looks up a localized string similar to The base ConfigurationSourceElement configuration type can not be used as a concrete configuration element..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionCanNotConvertType">
            <summary>
              Looks up a localized string similar to The AssemblyQualifiedTypeNameConverter can only convert values of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionConfigurationFileNotFound">
            <summary>
              Looks up a localized string similar to The section {0} could not be saved because the file does not exist..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionConfigurationLoadFileNotFound">
            <summary>
              Looks up a localized string similar to The configuration file {0} could not be found..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionConfigurationObjectIsNotCustomProviderData">
            <summary>
              Looks up a localized string similar to The configuration object for type &apos;{0}&apos; with name &apos;{1}&apos; has type &apos;{2}&apos; which is does not implement ICustomProviderData..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionConfigurationObjectWithTypeDoesNotHaveTypeSet">
            <summary>
              Looks up a localized string similar to The concrete type for polymorphic object named &apos;{1}&apos; in hierarchy {2} is not defined in configuration object {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionConfigurationSourceSectionNotFound">
            <summary>
              Looks up a localized string similar to The configuration source section is not found in the application configuration file..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionCustomFactoryAttributeNotFound">
            <summary>
              Looks up a localized string similar to The [CustomFactory] attribute was not found on type {0} while processing request for id &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionEventRaisingFailed">
            <summary>
              Looks up a localized string similar to There was an error raising an event in .
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionFactoryMethodHasInvalidReturnType">
            <summary>
              Looks up a localized string similar to The method with signature {0} is not a valid factory method to build type {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionInvalidType">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; cannot be resolved. Please verify the spelling is correct or that the full type name is provided..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionNamedConfigurationNotFound">
            <summary>
              Looks up a localized string similar to The configuration could not be found for name &apos;{0}&apos; in factory {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionNoConfigurationElementAttribute">
            <summary>
              Looks up a localized string similar to The type {0} does not contain the ConfigurationElementTypeAttribute..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionNoMethodAnnotatedForInjectionFound">
            <summary>
              Looks up a localized string similar to The type {0} does not have a public method annotated as an injection target as required by the use of injection..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionNoSuitableFactoryMethodFound">
            <summary>
              Looks up a localized string similar to The type {0} does not have a static method with a TargetConstructorAttribuite suitable to create an object of type {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionNoTypeAttribute">
            <summary>
              Looks up a localized string similar to The type attribute does not exist on the element {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionParameterNotAnnotatedForInjection">
            <summary>
              Looks up a localized string similar to The parameter &apos;{0}&apos; for injection target &apos;{1}&apos; in type &apos;{2}&apos; is missing the injection interpretation attribute..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionPerformanceCounterRedefined">
            <summary>
              Looks up a localized string similar to The performance counter &apos;{0}&apos; in category &apos;{1}&apos; is redefined in type {2} with a different configuration..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionPropertyNotFound">
            <summary>
              Looks up a localized string similar to e {2}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionRetrievalAttributeNotFound">
            <summary>
              Looks up a localized string similar to The type {0} does not contain the ConfigurationDataRetrievalAttribute required to resolve named references..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionSourcePropertyDoesNotExist">
            <summary>
              Looks up a localized string similar to Could not retrieve parameter value. The property {0} does not exist for type {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionStringNullOrEmpty">
            <summary>
              Looks up a localized string similar to The value can not be null or string or empty..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionSystemSourceNotDefined">
            <summary>
              Looks up a localized string similar to The system configuration source is not defined in the configuration file..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionTypeCouldNotBeCreated">
            <summary>
              Looks up a localized string similar to The type {0} from configuration could not be created..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionTypeNotCustomFactory">
            <summary>
              Looks up a localized string similar to Type {0} is not an implementation of ICustomFactory for CustomFactoryAttribute..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionTypeNotNameMapper">
            <summary>
              Looks up a localized string similar to Type {0} is not an implementation of IConfigurationNameMapper for ConfigurationNameMapperAttribute..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionTypeNotRetriever">
            <summary>
              Looks up a localized string similar to Type {0} is not an implementation of IConfigurationDataRetriever for ConfigurationDataRetrievalAttribute..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionUnexpectedType">
            <summary>
              Looks up a localized string similar to The expected type &apos;{0}&apos; was not provided..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.FileConfigurationSourceName">
            <summary>
              Looks up a localized string similar to File Configuration Source.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.SystemConfigurationSourceName">
            <summary>
              Looks up a localized string similar to System Configuration Source.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.AssemblyQualifiedTypeNameConverter">
            <summary>
            Represents a configuration converter that converts a string to <see cref="T:System.Type"/> based on a fully qualified name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.AssemblyQualifiedTypeNameConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Returns the assembly qualified name for the passed in Type.
            </summary>
            <param name="context">The container representing this System.ComponentModel.TypeDescriptor.</param>
            <param name="culture">Culture info for assembly</param>
            <param name="value">Value to convert.</param>
            <param name="destinationType">Type to convert to.</param>
            <returns>Assembly Qualified Name as a string</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.AssemblyQualifiedTypeNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Returns a type based on the assembly qualified name passed in as data.
            </summary>
            <param name="context">The container representing this System.ComponentModel.TypeDescriptor.</param>
            <param name="culture">Culture info for assembly.</param>
            <param name="value">Data to convert.</param>
            <returns>Type of the data</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation">
            <summary>
            This type supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Represents the implementation details for file-based configuration sources.
            </summary>
            <remarks>
            This implementation deals with setting up the watcher over the configuration files to detect changes and update
            the configuration representation. It also manages the change notification features provided by the file based 
            configuration sources.
            </remarks>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.NullConfigSource">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.		
            ConfigSource value for sections that existed in configuration but were later removed.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.#ctor(System.String,System.Boolean)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceImplementation"/> class.
            </summary>
            <param name="configurationFilepath">The path for the main configuration file.</param>
            <param name="refresh"><b>true</b>if runtime changes should be refreshed, <b>false</b> otherwise.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.#ctor(System.String)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceImplementation"/> class.
            </summary>
            <param name="configurationFilepath">The path for the main configuration file.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.GetSection(System.String)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration file, and starts watching for 
            its changes if not watching already.
            </summary>
            <param name="sectionName">The section name.</param>
            <returns>The section, or <see langword="null"/> if it doesn't exist.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.SetConfigurationWatchers(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Sets up a watcher for <paramref name="configurationSection"/> under the name <paramref name="sectionName"/>.
            </summary>
            <remarks>
            A watcher will be created if the section is not already being watched. The watcher will be watching the file specified
            by <see cref="P:System.Configuration.ConfigurationSection.SectionInformation"/>.
            </remarks>
            <param name="sectionName">The name of the configuration section to watch.</param>
            <param name="configurationSection">The configuration section to watch.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.AddSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Adds a handler to be called when changes to section <code>sectionName</code> are detected.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.RemoveSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Remove a handler to be called when changes to section <code>sectionName</code> are detected.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.ConfigSourceChanged(System.String)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="configSource">The name of the updated configuration source.</param>
            <devdoc>
            Only needs to deal with concurrency to get the current sections and to update the watchers.
            
            Rationale:
            - Sections' are only added or updated.
            - For this notification, all sections in the config file must be updated, and sections in external 
            files must be refreshed only if the config source changed.
            - why not check after the original set of sections is retrieved?
            -- Sections might have been added to the listener set after the original set is retrieved, but...
            -- If they were added after the original set was retrieved, then they are up to date.
            --- For this to happen, they couldn't have been read before the o.s., otherwise they would be a listener for them.
            --- So, the retrieved information must be fresh (checked this with a test). 
            -- What about other changes?
            --- Erased sections: only tested in the config file watching thread, because the meta configuration 
            is kept in the configuration file.
            ---- Even if the external file an external is deleted because of the deletion, and this change is processed
            before the config file change, the refresh for the external section will refresh all the sections for the file and 
            notify a change, without need for checking the change. The change would later be picked up by the config file watcher 
            which will notify again. This shouldn't be a problem.
            --- External sections with changed sources. If they existed before, they must have been in the config file and there 
            was an entry in the bookeeping data structures.
            - Concurrent updates for sections values should be handled by the system.config fx
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.RefreshAndValidateSections(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ICollection{System.String}@,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Refreshes the configuration sections from the main configuration file and determines which sections have suffered notifications
            and should be notified to registered handlers.
            </summary>
            <param name="localSectionsToRefresh">A dictionary with the configuration sections residing in the main configuration file that must be refreshed.</param>
            <param name="externalSectionsToRefresh">A dictionary with the configuration sections residing in external files that must be refreshed.</param>
            <param name="sectionsToNotify">A new collection with the names of the sections that suffered changes and should be notified.</param>
            <param name="sectionsWithChangedConfigSource">A new dictionary with the names and file names of the sections that have changed their location.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.RefreshExternalSections(System.String[])">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Refreshes the configuration sections from an external configuration file.
            </summary>
            <param name="sectionsToRefresh">A collection with the names of the sections that suffered changes and should be refreshed.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.ExternalConfigSourceChanged(System.String)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="configSource">The name of the updated configuration source.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BaseFileConfigurationSourceImplementation.Dispose">
            <summary>
            Releases the resources used by the change watchers.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ByteArrayTypeConverter">
            <summary>
            Represents a configuration converter that converts a byte array to and from a string representation by using base64 encoding.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ByteArrayTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> object.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. </param>
            <returns><see langword="true"/> if this converter can perform the conversion; otherwise, <see langword="falase"/>. </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ByteArrayTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> object.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> object.</param>
            <param name="value">An <see cref="T:System.Object"/> that represents the converted value. </param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value. </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ByteArrayTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> object.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to..</param>
            <returns><b>true</b> if the converter can convert to the specified type, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ByteArrayTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the arguments. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> object.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> object.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the value parameter to.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileSourceWatcher">
            <summary>
            Watcher for configuration sections in configuration files.
            </summary>
            <remarks>
            This implementation uses a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> to watch for changes 
            in the configuration files.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher">
            <summary>
            Reacts to changes on the medium on which a set of configuration sections are serialized.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher.configWatcher">
            <summary>
            The watcher on the underlying medium.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher.#ctor(System.String,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher"/> class.
            </summary>
            <param name="configSource">The identification of the medium.</param>
            <param name="refresh"><b>true</b> if changes should be notified, <b>false</b> otherwise.</param>
            <param name="changed">The callback for changes notification.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher.StartWatching">
            <summary>
            Starts watching for changes on the serialization medium.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher.StopWatching">
            <summary>
            Stops watching for changes on the serialization medium.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher.ConfigSource">
            <summary>
            Gets or sets the identification of the medium where the watched set of configuration sections is stored.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher.WatchedSections">
            <summary>
            Gets or sets the collection of watched sections.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher.Watcher">
            <summary>
            Gets the watcher over the serialization medium.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileSourceWatcher.#ctor(System.String,System.String,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileSourceWatcher"/> class.
            </summary>
            <param name="configurationFilepath">The path for the configuration file to watch.</param>
            <param name="configSource">The identification of the configuration source.</param>
            <param name="refresh"><b>true</b> if changes should be notified, <b>false</b> otherwise.</param>
            <param name="changed">The callback for changes notification.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileSourceWatcher.GetFullFileName(System.String,System.String)">
            <summary>
            Gets the full file name associated to the configuration source.
            </summary>
            <param name="configurationFilepath">The path for the main configuration file.</param>
            <param name="configSource">The configuration source to watch.</param>
            <returns>The path to the configuration file to watch. It will be the same as <paramref name="configurationFilePath"/>
            if <paramref name="configSource"/> is empty, or the full path for <paramref name="configSource"/> considered as a 
            file name relative to the main configuration file.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement">
            <summary>
            Represents the configuration settings that describe an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement">
            <summary>
            Represents a <see cref="T:System.Configuration.ConfigurationElement"/> that has a name and type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement">
            <summary>
            Represents a named <see cref="T:System.Configuration.ConfigurationElement"/> wher the name is the key to a collection.
            </summary>
            <remarks>
            This class is used in conjunction with a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithName">
            <summary>
            Represents the abstraction of an object with a name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithName.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.nameProperty">
            <summary>
            Name of the property that holds the name of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.#ctor">
            <summary>
            Initialize a new instance of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.#ctor(System.String)">
            <summary>
            Intialize a new instance of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> class with a name.
            </summary>
            <param name="name">The name of the element.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.DeserializeElement(System.Xml.XmlReader)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Updates the configuration properties of the receiver with the information in the current element in the <paramref name="reader"/>.
            </summary>
            <param name="reader">The reader over the configuration file.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.Name">
            <summary>
            Gets or sets the name of the element.
            </summary>
            <value>
            The name of the element.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithNameAndType">
            <summary>
            Represents the abstraction of an object with a name and a type.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithNameAndType.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.typeProperty">
            <summary>
            Name of the property that holds the type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.#ctor">
            <summary>
            Intialzie an instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.#ctor(System.String,System.Type)">
            <summary>
            Initialize an instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> class
            </summary>
            <param name="name">The name of the element.</param>
            <param name="type">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.Type"/> that this element is the configuration for.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.Type">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.Type"/> the element is the configuration for.
            </summary>
            <value>
            The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.Type"/> the element is the configuration for.
            </value>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement"/> class with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement"/> class with a name and an type.
            </summary>
            <param name="name">The instance name.</param>
            <param name="type">The type for the represented <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement.CreateSource">
            <summary>
            Returns a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> configured with the receiver's settings.
            </summary>
            <returns>A new configuration source.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceFactory">
            <summary>
            Contains factory methods to create configuration sources.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceFactory.Create(System.String)">
            <summary>
            Creates a new configuration sources based on the configuration information from the application's default
            configuration file.
            </summary>
            <param name="name">The name for the desired configuration source.</param>
            <returns>The new configuration source instance described in the configuration file.</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">when no configuration information is found for name <paramref name="name"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="name"/> is null or empty.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceFactory.Create">
            <summary>
            Creates a new configuration sources based on the default configuration information from the 
            application's default configuration file.
            </summary>
            <returns>The new configuration source instance described as the default in the configuration file,
            or a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/> if the is no configuration sources configuration.</returns>
            <exception cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection">when there is a configuration section but it does not define
            a default configurtion source, or when the configuration for the defined default configuration source is not found.</exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection">
            <summary>
            Configuration section for the configuration sources.
            </summary>
            <remarks>
            This configuration must reside in the application's default configuration file.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SerializableConfigurationSection">
            <summary>
            Represents a configuration section that can be serialized and deserialized to XML.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SerializableConfigurationSection.GetSchema">
            <summary>
            Returns the XML schema for the configuration section.
            </summary>
            <returns>A string with the XML schema, or <see langword="null"/> (<b>Nothing</b> 
            in Visual Basic) if there is no schema.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SerializableConfigurationSection.ReadXml(System.Xml.XmlReader)">
            <summary>
            Updates the configuration section with the values from an <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> that reads the configuration source located at the element that describes the configuration section.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SerializableConfigurationSection.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the configuration section values as an XML element to an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> that writes to the configuration source.</param>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection.SectionName">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection.GetConfigurationSourceSection">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection"/> from the application's default configuration file.
            </summary>
            <returns>The section from the configuration file, or <see langword="null"/> (<b>Nothing</b> in Visual Basic) if the section is not present in the configuration file.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection.SelectedSource">
            <summary>
            Gets or sets the name for the default configuration source.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection.Sources">
            <summary>
            Gets the collection of defined configuration sources.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler">
            <summary>
            Event handler called after a configuration has changed.
            </summary>
            <param name="sender">
            <para>The source of the event.</para>
            </param>
            <param name="e">
            <para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventArgs"/> that contains the event data.</para>
            </param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventArgs">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventArgs.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangingEventArgs"/> class with the section name</para>
            </summary>
            <param name="sectionName"><para>The section name of the changes.</para></param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventArgs.SectionName">
            <summary>
            <para>Gets the section name where the changes occurred.</para>
            </summary>
            <value>
            <para>The section name where the changes occurred.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangingEventArgs">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangingEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangingEventArgs"/> class with the configuration file, the section name, the old value, and the new value of the changes.</para>
            </summary>
            <param name="sectionName"><para>The section name of the changes.</para></param>
            <param name="oldValue"><para>The old value.</para></param>
            <param name="newValue"><para>The new value.</para></param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangingEventArgs.OldValue">
            <summary>
            <para>Gets the old value.</para>
            </summary>
            <value>
            <para>The old value.</para>
            </value>
            <remarks>
            <value>If no old value existed this value will be <see langword="null"/>.</value>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangingEventArgs.NewValue">
            <summary>
            <para>Gets the new value.</para>
            </summary>
            <value>
            <para>The new value.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangingEventArgs.Cancel">
            <summary>
            <para>Determines if the changes should be cancled.</para>
            </summary>
            <value>
            <para><see langword="true"/> if the changes should be cancled; otherwise, <see langword="false"/>.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangingEventHandler">
            <summary>
            Event handler called before the configuration is changed. 
            </summary>
            <param name="sender">
            <para>The source of the event.</para>
            </param>
            <param name="e">
            <para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangingEventArgs"/> that contains the event data.</para>
            </param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute">
            <summary>
            Indicates the configuration object type that is used for the attributed object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute.#ctor(System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute"/> class with the configuration object type.
            </summary>
            <param name="configurationType">The <see cref="T:System.Type"/> of the configuration object.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute.ConfigurationType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the configuration object.
            </summary>
            <value>
            The <see cref="T:System.Type"/> of the configuration object.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileChangedEventArgs">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileChangedEventArgs.#ctor(System.String,System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangingEventArgs"/> class with the configuration file, the section name, the old value, and the new value of the changes.</para>
            </summary>
            <param name="configurationFile"><para>The configuration file where the change occured.</para></param>
            <param name="sectionName"><para>The section name of the changes.</para></param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileChangedEventArgs.ConfigurationFile">
            <summary>
            <para>Gets the configuration file of the data that is changing.</para>
            </summary>
            <value>
            <para>The configuration file of the data that is changing.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileChangingEventArgs">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileChangingEventArgs.#ctor(System.String,System.String,System.Object,System.Object)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangingEventArgs"/> class with the configuration file, the section name, the old value, and the new value of the changes.</para>
            </summary>
            <param name="configurationFile"><para>The configuration file where the change occured.</para></param>
            <param name="sectionName"><para>The section name of the changes.</para></param>
            <param name="oldValue"><para>The old value.</para></param>
            <param name="newValue"><para>The new value.</para></param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileChangingEventArgs.ConfigurationFile">
            <summary>
            <para>Gets the configuration file of the data that is changing.</para>
            </summary>
            <value>
            <para>The configuration file of the data that is changing.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1">
            <summary>
            Generic helper class for custom provider configuration objects.
            </summary>
            <remarks>
            The helper class encapsulates the logic to manage an unknown set of properties in <see cref="T:System.Configuration.ConfigurationElement"/>s.
            This logic cannot be inherited by the configuration objects because these objects must inherit from the base configuration 
            object type for the hierarchy of providers the configuration object represents.
            </remarks>
            <typeparam name="T">The type of the custom provider configuration object.</typeparam>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.propertiesCollection">
            <summary>
            Collection of managed properties
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1"/> class for a configuration object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.HandleIsModified">
            <summary>
            Concrete implementation of <see cref="M:System.Configuration.ConfigurationElement.IsModified"/>.
            </summary>
            <returns><b>true</b> if the managed element has been modified.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.HandleOnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Concrete implementation of <see cref="M:System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)"/>.
            </summary>
            <param name="name">The name of the unrecognized attribute.</param>
            <param name="value">The value of the unrecognized attribute.</param>
            <returns><code>true</code> when an unknown attribute is encountered while deserializing.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.HandleReset(System.Configuration.ConfigurationElement)">
            <summary>
            Concrete implementation of <see cref="M:System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)"/>.
            </summary>
            <param name="parentElement">The parent node of the configuration element.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.HandleSetAttributeValue(System.String,System.String)">
            <summary>
            Sets the value to the specified attribute and updates the properties collection.
            </summary>
            <param name="key">The key of the attribute to set.</param>
            <param name="value">The value to set for the attribute.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.HandleUnmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Concrete implementation of <see cref="M:System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)"/>.
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">The parent <see cref="T:System.Configuration.ConfigurationElement"/> object, or a <see langword="null"/> reference if this is the top level.</param>
            <param name="saveMode">A <see cref="T:System.Configuration.ConfigurationSaveMode"/> object that determines which property values to include.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.IsKnownPropertyName(System.String)">
            <summary>
            Returns whether the property name is known in advance, i.e. it is not a dynamic property.
            </summary>
            <param name="propertyName">The property name.</param>
            <returns><b>true</b> if the property is known in advance, <b>false</b> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.Attributes">
            <summary>
            Gets the collection of custom attributes.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.Properties">
            <summary>
            Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for this configuration element when implemented in a derived class. 
            </summary>
            <value>
            A <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for this configuration element when implemented in a derived class. 
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource">
            <summary>
            Represents a configuration source that is backed by a dictionary of named objects.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource">
            <summary>
            Represents a source for getting configuration information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.GetSection(System.String)">
            <summary>
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/>.
            </summary>
            <param name="sectionName">The name of the section to be retrieved.</param>
            <returns>The specified <see cref="T:System.Configuration.ConfigurationSection"/>, or <see langword="null"/> (<b>Nothing</b> in Visual Basic)
            if a section by that name is not found.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Add(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration source location specified by 
            <paramref name="saveParameter"/> and saves the configuration source.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists in the location specified by 
            <paramref name="saveParameter"/> it will be replaced.
            </remarks>
            <param name="saveParameter">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter"/> that represents the location where 
            to save the updated configuration.</param>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Remove(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String)">
            <summary>
            Removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration source location specified by 
            <paramref name="removeParameter"/> and saves the configuration source.
            </summary>
            <param name="removeParameter">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter"/> that represents the location where 
            to save the updated configuration.</param>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.AddSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Adds a handler to be called when changes to the section named <paramref name="sectionName"/> are detected.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler for the change event to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.RemoveSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Removes a handler to be called when changes to section <code>sectionName</code> are detected.
            </summary>
            <param name="sectionName">The name of the watched section.</param>
            <param name="handler">The handler for the change event to remove.</param>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.sections">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.eventHandlers">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.GetSection(System.String)">
            <summary>
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/>.
            </summary>
            <param name="sectionName">The name of the section to be retrieved.</param>
            <returns>The specified <see cref="T:System.Configuration.ConfigurationSection"/>, or <see langword="null"/> (<b>Nothing</b> in Visual Basic)
            if a section by that name is not found.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration source.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists it will be replaced.
            </remarks>
            <param name="name">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="section">The configuration section to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.Remove(System.String)">
            <summary>
            Removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration source.
            </summary>
            <param name="name">The name of the section to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.Remove(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String)">
            <summary>
            Removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration source.
            </summary>
            <param name="removeParameter">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter"/> that represents the location where 
            to save the updated configuration. It is ignored in by implementation.</param>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.Contains(System.String)">
            <summary>
            Determines if a section name exists in the source.
            </summary>
            <param name="name">The section name to find.</param>
            <returns><b>true</b> if the section exists; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.Add(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration source.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists it will be replaced.
            </remarks>
            <param name="saveParameter">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter"/> that represents the location where 
            to save the updated configuration. It is ignored in by implementation.</param>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.AddSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Adds a handler to be called when changes to the section named <paramref name="sectionName"/> are detected.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler for the change event to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.RemoveSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Removes a handler to be called when changes to section <code>sectionName</code> are detected.
            </summary>
            <param name="sectionName">The name of the watched section.</param>
            <param name="handler">The handler for the change event to remove.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationParameter">
            <summary>
            Configuration parameter for file-based configuration sources.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter">
            <summary>
            Represents a configuration parameter for an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            </summary>
            <remarks>
            Configuration parameters represent the configuration of a configuration source.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationParameter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationParameter"/> class with a file name.
            </summary>
            <param name="fileName">The file name.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationParameter.FileName">
            <summary>
            Gets the file name.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource">
            <summary>
            Represents a configuration source that retrieves configuration information from an arbitrary file.
            </summary>
            <remarks>
            This configuration source uses a <see cref="T:System.Configuration.Configuration"/> object to deserialize configuration, so 
            the configuration file must be a valid .NET Framework configuration file.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource"/> class with a configuration file path.
            </summary>
            <param name="configurationFilepath">The configuration file path. The path can be absolute or relative.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.GetSection(System.String)">
            <summary>
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/>.
            </summary>
            <param name="sectionName">The name of the section to be retrieved.</param>
            <returns>The specified <see cref="T:System.Configuration.ConfigurationSection"/>, or <see langword="null"/> (<b>Nothing</b> in Visual Basic)
            if a section by that name is not found.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.AddSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Adds a handler to be called when changes to section <code>sectionName</code> are detected.
            This call should always be followed by a <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.RemoveSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)"/>. Failure to remove change
            handlers will result in .Net resource leaks.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.RemoveSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Remove a handler to be called when changes to section <code>sectionName</code> are detected.
            This class should always follow a call to <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.AddSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)"/>. Failure
            to call these methods in pairs will result in .Net resource leaks.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.Save(System.String,System.String,System.Configuration.ConfigurationSection)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Adds or replaces <paramref name="configurationSection"/> under name <paramref name="section"/> in the configuration 
            file named <paramref name="fileName" /> and saves the configuration file.
            </summary>
            <param name="fileName">The name of the configuration file.</param>
            <param name="section">The name for the section.</param>
            <param name="configurationSection">The configuration section to add or replace.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.Remove(System.String,System.String)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Removes the configuration section named <paramref name="section"/> from the configuration file named
            <paramref name="fileName"/> and saves the configuration file.
            </summary>
            <param name="fileName">The name of the configuration file.</param>
            <param name="section">The name for the section.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.Add(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration source location specified by 
            <paramref name="saveParameter"/> and saves the configuration source.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists in the location specified by 
            <paramref name="saveParameter"/> it will be replaced.
            </remarks>
            <param name="saveParameter">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter"/> that represents the location where 
            to save the updated configuration. Must be an instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationParameter"/>.</param>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.Remove(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String)">
            <summary>
            Removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration source location specified by 
            <paramref name="removeParameter"/> and saves the configuration source.
            </summary>
            <param name="removeParameter">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter"/> that represents the location where 
            to save the updated configuration. Must be an instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationParameter"/>.</param>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement">
            <summary>
            Represents the configuration settings that describe a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement"/> class with a default name and an empty path.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement"/> class with a name and an path.
            </summary>
            <param name="name">The instance name.</param>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement.CreateSource">
            <summary>
            Returns a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource"/> configured with the receiver's settings.
            </summary>
            <returns>A new configuration source.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement.FilePath">
            <summary>
            Gets or sets the file path. This is a required field.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceImplementation">
            <summary>
            This type supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Represents the implementation details for configuration sources over arbitrary files.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceImplementation.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceImplementation"/>.
            </summary>
            <param name="configurationFilepath">The path for the main configuration file.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceImplementation.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceImplementation"/>.
            </summary>
            <param name="refresh">A bool indicating if runtime changes should be refreshed or not.</param>
            <param name="configurationFilepath">The path for the main configuration file.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceImplementation.GetSection(System.String)">
            <summary>
            Retrieves a section from System.Configuration, and starts watching for 
            its changes if not watching already.
            </summary>
            <param name="sectionName">The section name.</param>
            <returns>The section, or null if it doesn't exist.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceImplementation.RefreshAndValidateSections(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ICollection{System.String}@,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Refreshes the configuration sections from the main configuration file and determines which sections have suffered notifications
            and should be notified to registered handlers.
            </summary>
            <param name="localSectionsToRefresh">A dictionary with the configuration sections residing in the main configuration file that must be refreshed.</param>
            <param name="externalSectionsToRefresh">A dictionary with the configuration sections residing in external files that must be refreshed.</param>
            <param name="sectionsToNotify">A new collection with the names of the sections that suffered changes and should be notified.</param>
            <param name="sectionsWithChangedConfigSource">A new dictionary with the names and file names of the sections that have changed their location.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceImplementation.RefreshExternalSections(System.String[])">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Refreshes the configuration sections from an external configuration file.
            </summary>
            <param name="sectionsToRefresh">A collection with the names of the sections that suffered changes and should be refreshed.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.GenericEnumeratorWrapper`1">
            <devdoc>
            Represents a genereic enumerator for the NamedElementCollection.
            </devdoc>	
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICustomProviderData">
            <summary>
            Represents the configuration settings for a custom provider.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICustomProviderData.Name">
            <summary>
            Gets the name for the represented provider.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICustomProviderData.Attributes">
            <summary>
            Gets the attributes for the represented provider.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1">
            <summary>
            This interface must be implemented by configuration objects for custom providers that rely
            on a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1"/> to perform the dynamic properties management.
            </summary>
            <remarks>
            This interface is generic so that the helper can be strongly typed.
            </remarks>
            <typeparam name="T">The configuration object type. It must match the type implementing the interface.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1.BaseGetPropertyValue(System.Configuration.ConfigurationProperty)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Returns the value for the specified property using the inherited implementation.
            </summary>
            <param name="property">The property to get the value from.</param>
            <returns>The value for the property.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1.BaseIsModified">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Returns the modification status using the inherited implementation.
            </summary>
            <returns><b>true</b> if the configuration element has been modified, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1.BaseReset(System.Configuration.ConfigurationElement)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Resets the internal state of the configuration object using the inherited implementation.
            </summary>
            <param name="parentElement">The parent node of the configuration element.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1.BaseSetPropertyValue(System.Configuration.ConfigurationProperty,System.Object)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Sets the value for the specified property using the inherited implementation.
            </summary>
            <param name="property">The property to set the value to.</param>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1.BaseUnmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Modifies the <b>ConfigurationElement</b> object to remove all values that should not be saved using the inherited implementation.
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">The parent <b>ConfigurationElement</b> object, or a null reference (Nothing in Visual Basic) if this is the top level.</param>
            <param name="saveMode">A <see cref="T:System.Configuration.ConfigurationSaveMode"/> object that determines which property values to include.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1.Helper">
            <summary>
            Gets the helper that manages the configuration information.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1">
            <summary>
            Represents a collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> objects.
            </summary>
            <typeparam name="T">A newable object that inherits from <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/>.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the collection.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.Get(System.Int32)">
            <summary>
            Gets the configuration element at the specified index location. 
            </summary>
            <param name="index">The index location of the <see name="T"/> to return. </param>
            <returns>The <see name="T"/> at the specified index. </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.Add(`0)">
            <summary>
            Add an instance of <typeparamref name="T"/> to the collection.
            </summary>
            <param name="element">An instance of <typeparamref name="T"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.Get(System.String)">
            <summary>
            Gets the named instance of <typeparamref name="T"/> from the collection.
            </summary>
            <param name="name">The name of the <typeparamref name="T"/> instance to retrieve.</param>
            <returns>The instance of <typeparamref name="T"/> with the specified key; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.Contains(System.String)">
            <summary>
            Determines if the name exists in the collection.
            </summary>
            <param name="name">The name to search.</param>
            <returns><see langword="true"/> if the name is contained in the collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.Remove(System.String)">
            <summary>
            Remove the named element from the collection.
            </summary>
            <param name="name">The name of the element to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.Clear">
            <summary>
            Clear the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection. 
            </summary>
            <returns>An enumerator that iterates through the collection.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.CreateNewElement">
            <summary>
            Creates a new instance of a <typeparamref name="T"/> object.
            </summary>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class. 
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. </param>
            <returns>An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElementCollection`1">
            <summary>
            Represesnts a collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> objects.
            </summary>
            <typeparam name="T">The type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> object this collection contains.</typeparam>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1">
            <summary>
            Represents the base class from which all implementations of polymorphic configuration collections must derive. 
            </summary>
            <typeparam name="T">The type contained in the collection.</typeparam>	
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            Called when an unknown element is encountered while deserializing the <see cref="T:System.Configuration.ConfigurationElement"/> object.
            </summary>
            <param name="elementName">The name of the element.</param>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> used to deserialize the element.</param>
            <returns><see langword="true"/> if the element was handled; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1.RetrieveConfigurationElementType(System.Xml.XmlReader)">
            <summary>
            When overriden in a class, get the configuration object for each <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> object in the collection.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> that is deserializing the element.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1.CreateNewElement">
            <summary>
            Creates a new <see cref="T:System.Configuration.ConfigurationElement"/>. 
            </summary>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1.CreateNewElement(System.String)">
            <summary>
            Creates a new named <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <param name="elementName">The name of the element to create.</param>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Reverses the effect of merging configuration information from different levels of the configuration hierarchy.
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">The parent <see cref="T:System.Configuration.ConfigurationElement"/> object of the current element, or a <see langword="null"/> reference (Nothing in Visual Basic) if this is the top level.</param>		
            <param name="saveMode">One of the <see cref="T:System.Configuration.ConfigurationSaveMode"/> values.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElementCollection`1.RetrieveConfigurationElementType(System.Xml.XmlReader)">
            <summary>
            Get the configuration object for each <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> object in the collection.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> that is deserializing the element.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource">
            <summary>
            Represents a null configuration source that always returns null for a section.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource.GetSection(System.String)">
            <summary>
            Returns null for the section.
            </summary>
            <param name="sectionName">The section name to retrieve.</param>
            <returns>Always <see langword="null"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource.Add(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Null implementation of <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Add(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String,System.Configuration.ConfigurationSection)"/> that 
            ignores the request.
            </summary>
            <param name="saveParameter">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter"/> that represents the location where 
            to save the updated configuration.</param>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource.Remove(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String)">
            <summary>
            Null implementation of <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Remove(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String)"/> that 
            ignores the request.
            </summary>
            <param name="removeParameter">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter"/> that represents the location where 
            to save the updated configuration.</param>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource.AddSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Adds a handler to be called when changes to section <code>sectionName</code> are detected.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource.RemoveSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Remove a handler to be called when changes to section <code>sectionName</code> are detected.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerAttribute">
            <summary>
            Specifies what assembler type to use to build a concrete type in a polymorphic provider hierarchy for the type described by 
            the configuration object this attribute is bound to. This class cannot be inherited.
            The specified type must implement the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IAssembler`2"/> interface.
            </summary>
            <remarks>
            The attribute is used on configuration objects to specify the build process create a provider based on the information 
            in the configuration object.
            The attribute is used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerBasedCustomFactory`2"/> implementation of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ICustomFactory"/> interface,
            that provides a generic way to build polymorphic providers.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerAttribute"/> class.
            </summary>
            <param name="assemblerType">The type that implements the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IAssembler`2"/> interface.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerAttribute.AssemblerType">
            <summary>
            Returns the assembler type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerBasedCustomFactory`2">
            <summary>
            Represents a generic process to build objects of a polymorphic hierarchy based on a single configuration object.
            </summary>
            <remarks>
            This custom factory will rely assemblers to do the actual building out for a concrete type. Assemblers are implementations of the 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IAssembler`2"/> interface. Concrete configuration objects must have an 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerAttribute">Assembler</see> attribute to allow the factory to determine how the configuration should be interpreted.
            </remarks>
            <typeparam name="TObject">The interface or the base type to build.</typeparam>
            <typeparam name="TConfiguration">The base configuration object type.</typeparam>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerBasedObjectFactory`2">
            <summary>
            Represents a generic process to build objects of a polymorphic hierarchy based on a single configuration object.
            </summary>
            <remarks>
            This custom factory will rely assemblers to do the actual building out for a concrete type. Assemblers are implementations of the 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IAssembler`2"/> interface. Concrete configuration objects must have an 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerAttribute">Assembler</see> attribute to allow the factory to determine how the configuration should be interpreted.
            </remarks>
            <typeparam name="TObject">The interface or the base type to build.</typeparam>
            <typeparam name="TConfiguration">The base configuration object type.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerBasedObjectFactory`2.Create(Microsoft.Practices.ObjectBuilder.IBuilderContext,`1,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Returns a new instance of a concrete subtype of <typeparamref name="TObject"/>, described by the matching configuration object 
            of a concrete subtype of <typeparamref name="TConfiguration"/> in <paramref name="objectConfiguration"/>.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilderContext"/> that represents the current building process.</param>
            <param name="objectConfiguration">The configuration object that describes the object to build.</param>
            <param name="configurationSource">The source for configuration objects.</param>
            <param name="reflectionCache">The cache to use retrieving reflection information.</param>
            <returns>A new instance of the appropriate subtype of <typeparamref name="Tobject"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ICustomFactory">
            <summary>
            Represents the process to build instances of a type.
            </summary>
            <remarks>
            Custom factories are used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfiguredObjectStrategy"/> strategy to create Enterprise Library objects.
            Usually factories will query a configuration source for the configuration objects that describe the requested object, 
            and will perform the necessary conversions on the configuration information to create an instance of the type.
            The objects the factory can build can be part of a hierarchy. Type <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerBasedCustomFactory`2"/> provides 
            a generic implementation of a factory that builds polymorphic hierarchies.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfiguredObjectStrategy"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.CustomFactoryAttribute"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerBasedCustomFactory`2"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ICustomFactory.CreateObject(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            Returns an new instance of the type the receiver knows how to build.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilderContext"/> that represents the current building process.</param>
            <param name="name">The name of the instance to build, or null.</param>
            <param name="configurationSource">The source for configuration objects.</param>
            <param name="reflectionCache">The cache to use retrieving reflection information.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerBasedCustomFactory`2.Create(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Returns a new instance of a concrete subtype of <typeparamref name="TObject"/>, described by the matching configuration object 
            of a concrete subtype of <typeparamref name="TConfiguration"/> found in the <paramref name="configurationSource"/> under 
            the name <paramref name="name"/>.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilderContext"/> that represents the current building process.</param>
            <param name="name">The name of the instance to build, or null.</param>
            <param name="configurationSource">The source for configuration objects.</param>
            <param name="reflectionCache">The cache to use retrieving reflection information.</param>
            <returns>A new instance of the appropriate subtype of <typeparamref name="Tobject"/>.</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">when the configuration is invalid or <paramref name="name"/> cannot be found.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerBasedCustomFactory`2.CreateObject(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Returns a new instance of a concrete subtype of <typeparamref name="TObject"/>, described by the matching configuration object 
            of a concrete subtype of <typeparamref name="TConfiguration"/> found in the <paramref name="configurationSource"/> under 
            the name <paramref name="name"/>.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilderContext"/> that represents the current building process.</param>
            <param name="name">The name of the instance to build, or null.</param>
            <param name="configurationSource">The source for configuration objects.</param>
            <param name="reflectionCache">The cache to use retrieving reflection information.</param>
            <returns>A new instance of the appropriate subtype of <typeparamref name="Tobject"/>.</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">when the configuration is invalid or <paramref name="name"/> cannot be found.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerBasedCustomFactory`2.GetConfiguration(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Returns the configuration object that represents the named <typeparamref name="TObject"/> instance in the configuration source.
            </summary>
            <param name="name">The name of the required instance.</param>
            <param name="configurationSource">The configuration source where to look for the configuration object.</param>
            <returns>The configuration object that represents the instance.</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">when the configuration is invalid or <paramref name="name"/> cannot be found.</exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache">
            <summary>
            Caches reflection information used by the building process.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache.GetCustomAttribute``1(System.Type)">
            <summary>
            Returns the attribute of type <typeparamref name="TAttribute"/> applied the given type.
            </summary>
            <remarks>
            The attribute will be retrieved from the cache, if it has been requested before.
            The query will not look for inherited attributes.
            </remarks>
            <typeparam name="TAttribute">The type of attribute required.</typeparam>
            <param name="type">The type to query for the attribute.</param>
            <returns>The attribute, or null if the attribute type is not applied to <paramref name="type"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache.HasCachedCustomAttribute``1(System.Type)">
            <summary>
            Returns true if there is a cached entry for the attribute type for the given type
            </summary>
            <remarks>
            A null cached entry will return true.
            </remarks>
            <typeparam name="TAttribute">The type of attribute required.</typeparam>
            <param name="type">The type to query for the attribute.</param>
            <returns><code>true</code> if the result for the attribute query is in the cache.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache.GetCustomAttribute``1(System.Type,System.Boolean)">
            <summary>
            Returns the attribute of type <typeparamref name="TAttribute"/> applied the given type.
            </summary>
            <remarks>
            The attribute will be retrieved from the cache, if it has been requested before.
            </remarks>
            <typeparam name="TAttribute">The type of attribute required.</typeparam>
            <param name="type">The type to query for the attribute.</param>
            <param name="inherit">Specifies whether to search the inheritance chain of the type to find the attributes.</param>
            <returns>The attribute, or null if the attribute type is not applied to <paramref name="type"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache.GetCustomFactory(System.Type)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Returns the custom factory associated to <paramref name="type"/>.
            </summary>
            <param name="type">The type to query for the custom factory.</param>
            <returns>The custom factory for <paramref name="type"/>, or null if the type does not have an 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerAttribute">Assembler</see> attribute.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache.GetConfigurationNameMapper(System.Type)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Returns the name mapper associated to <paramref name="type"/>.
            </summary>
            <param name="type">The type to query for the name mapper.</param>
            <returns>The name mapper for <paramref name="type"/>, or null if the type does not have a 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameMapperAttribute">ConfigurationNameMapper</see> attribute.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.CustomProviderAssembler`3">
            <summary>
            Represents the process to build a custom provider for type <typeparamref name="TObject"/> described by an instance of <typeparamref name="TConcreteConfiguration"/> configuration object.
            </summary>
            <typeparam name="TObject">The abstract provider type.</typeparam>
            <typeparam name="TConfiguration">The base configuration type for providers of type <typeparamref name="TObject"/>.</typeparam>
            <typeparam name="TConcreteConfiguration">The concrete configuration type for custom providers of type <typeparamref name="TObject"/>.</typeparam>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IAssembler`2">
            <summary>
            Represents the process to build an instance of a specific subtype of <typeparamref name="TObject"/> described by a 
            matching specific subtype of <typeparamref name="TConfiguration"/>.
            </summary>
            <typeparam name="TObject">The interface or the base type to build.</typeparam>
            <typeparam name="TConfiguration">The base configuration object type.</typeparam>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerBasedCustomFactory`2"/>.
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IAssembler`2.Assemble(Microsoft.Practices.ObjectBuilder.IBuilderContext,`1,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            Builds an instance of the subtype of <typeparamref name="TObject"/> type the receiver knows how to build,  based on 
            an a configuration object.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilderContext"/> that represents the current building process.</param>
            <param name="objectConfiguration">The configuration object that describes the object to build.</param>
            <param name="configurationSource">The source for configuration objects.</param>
            <param name="reflectionCache">The cache to use retrieving reflection information.</param>
            <returns>A fully initialized instance of the <typeparamref name="TObject"/> subtype.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.CustomProviderAssembler`3.Assemble(Microsoft.Practices.ObjectBuilder.IBuilderContext,`1,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Builds a custom provider for type <typeparamref name="TObject"/> based on an instance of <typeparamref name="TConcreteConfiguration"/>.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilderContext"/> that represents the current building process.</param>
            <param name="objectConfiguration">The configuration object that describes the object to build. Must be an instance of <typeparamref name="TConcreteConfiguration"/>.</param>
            <param name="configurationSource">The source for configuration objects.</param>
            <param name="reflectionCache">The cache to use retrieving reflection information.</param>
            <returns>A fully initialized custom provider for type <typeparamref name="TObject"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.CustomFactoryAttribute">
            <summary>
            Specifies what type to use to build instances of the type this attribute is bound to. This class cannot be inherited.
            </summary>
            <remarks>
            This attribute is used when building objects through ObjectBuilder. The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfiguredObjectStrategy"/> will query 
            the requested type for this attribute, and will use an instance of the specified factory type to build the requested instance.
            The specified type must implement the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ICustomFactory"/> interface.
            The attribute needs to be bound only to the types that will be requested to ObjectBuilder; 
            it is not necessary to bind the attribute to subclasses or implementations of interfaces.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ICustomFactory"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfiguredObjectStrategy"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryFactory"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.CustomFactoryAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.CustomFactoryAttribute"/> class with a factory type.
            </summary>
            <param name="factoryType">The factory type. Must implement <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ICustomFactory"/>.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.CustomFactoryAttribute.FactoryType">
            <summary>
            Gets the factory type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ExplicitInstrumentationAttacher">
            <summary>
            Binds properly attributed events in source object to properly attributed handler methods in
            listener object using an explicit binding object.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IInstrumentationAttacher">
            <summary>
            Responsible for binding attributed events in a source object to attributed handler methods in 
            a listener object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IInstrumentationAttacher.BindInstrumentation">
            <summary>
            Binds events from source object to appropriate handler methods in listener object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ExplicitInstrumentationAttacher.#ctor(System.Object,System.Type,System.Object[],System.Type)">
            <summary>
            Initializes this object as needed to allow it to explicitly bind together events and handlers
            from source and listener objects.
            </summary>
            <param name="source">Source object containing events to be bound.</param>
            <param name="listenerType">Type of listener object to instantiate. Contains handler methods to be bound to.</param>
            <param name="listenerConstructorArguments">Constructor arguments used to instantiate object referred to by <see paramref="listenerType"></see>.</param>
            <param name="explicitBinderType">Type to be used in explicitly binding events to handlers.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ExplicitInstrumentationAttacher.BindInstrumentation">
            <summary>
            Binds events to handling methods.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ReflectionInstrumentationAttacher">
            <summary>
            Binds properly attributed events in source object to properly attributed handler methods in
            listener object using reflection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ReflectionInstrumentationAttacher.#ctor(System.Object,System.Type,System.Object[])">
            <summary>
            Initializes this object as needed to allow it to explicitly bind together events and handlers
            from source and listener objects.
            </summary>
            <param name="source">Source object containing events to be bound.</param>
            <param name="listenerType">Type of listener object to instantiate. Contains handler methods to be bound to.</param>
            <param name="listenerConstructorArgs">Constructor arguments used to instantiate object referred to by <see paramref="listenerType"></see>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ReflectionInstrumentationAttacher.BindInstrumentation">
            <summary>
            Binds events to handling methods.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.NoBindingInstrumentationAttacher">
            <summary>
            Instrumentation binder that does nothing. Implementation of Null Object Pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.NoBindingInstrumentationAttacher.BindInstrumentation">
            <summary>
            Null implementation of interface contract method. Does no binding.
            On purpose. Really... Look up NullObject pattern for justification.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.LocatorNameTypeFactoryBase`1">
            <summary>
            Base class for instance factories that require a locator to provide singletons.
            </summary>
            <remarks>
            This class is used to create instances of types compatible with <typeparamref name="T"/> described 
            by a configuration source.
            The use of a <see cref="T:Microsoft.Practices.ObjectBuilder.IReadWriteLocator"/> enables singletons for the types that support them.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.LocatorNameTypeFactoryBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.LocatorNameTypeFactoryBase`1"/> class with the default configuration source
            and a locator.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.LocatorNameTypeFactoryBase`1.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.LocatorNameTypeFactoryBase`1"/> class with a configuration source 
            and a locator.
            </summary>
            <param name="configurationSource">The configuration source to use.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.LocatorNameTypeFactoryBase`1.CreateDefault">
            <summary>
            Returns an instance of <typeparamref name="T"/> based on the default instance configuration.
            </summary>
            <returns>
            A new instance of <typeparamref name="T"/>, or the singleton instance if <typeparamref name="T"/> allows singletons.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.LocatorNameTypeFactoryBase`1.Create(System.String)">
            <summary>
            Returns an new instance of <typeparamref name="T"/> based on the configuration for <paramref name="name"/>.
            </summary>
            <param name="name">The name of the required instance.</param>
            <returns>
            A new instance of <typeparamref name="T"/>, or the singleton instance if <typeparamref name="T"/> allows singletons.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryFactory">
            <summary>
            Static facade for the generic building mechanism based on ObjectBuilder.
            </summary>
            <remarks>
            The facade uses a shared stateless <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilder`1"/> instance configured with the strategies 
            that perform the creation of objects in the Enterprise Library.
            <para>
            The strategies used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryFactory"/> are:
            <list type="bullet">
            <item><see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameMappingStrategy"/> to deal with default instances.</item>
            <item><see cref="T:Microsoft.Practices.ObjectBuilder.SingletonStrategy"/> to deal with singletons.</item>
            <item><see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfiguredObjectStrategy"/> to perform the actual creation of the objects based on the available configuration.</item>
            <item><see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.InstrumentationStrategy"/> to attach instrumentation to the created objects.</item>
            </list>
            </para>
            <para>
            The creation request can provide an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> to be used by the strategies that need access to 
            configuration. If such a configuration source is not provided, a default configuration source will be requested 
            to the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceFactory"/>.
            In any case, the configuration source is made available to the strategies through a transient <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IConfigurationObjectPolicy"/>.
            </para>
            <para>
            The facade keeps a shared <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache"/> that is made available to the strategies through a transient 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IReflectionCachePolicy"/>.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfiguredObjectStrategy"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryFactory.BuildUp``1">
            <overloads>
            Returns an instance of type <typeparamref name="T"/>.
            </overloads>
            <summary>
            Returns a new default instance of type <typeparamref name="T"/> based on configuration information 
            from the default configuration source.
            </summary>
            <typeparam name="T">The type to build.</typeparam>
            <returns>A new instance of <typeparamref name="T"/> or any of it subtypes.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryFactory.BuildUp``1(Microsoft.Practices.ObjectBuilder.IReadWriteLocator)">
            <summary>
            Returns a default instance of type <typeparamref name="T"/> based on configuration information 
            from the default configuration source.
            </summary>
            <typeparam name="T">The type to build.</typeparam>
            <param name="locator">The locator to be used for this build operation.</param>
            <returns>A new instance of <typeparamref name="T"/> or any of it subtypes, or an existing instance
            if type <typeparamref name="T"/> is a singleton that is already present in the <paramref name="locator"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryFactory.BuildUp``1(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Returns a new default instance of type <typeparamref name="T"/> based on configuration information 
            from <paramref name="configurationSource"/>.
            </summary>
            <typeparam name="T">The type to build.</typeparam>
            <param name="configurationSource">The source for configuration information.</param>
            <returns>A new instance of <typeparamref name="T"/> or any of it subtypes.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryFactory.BuildUp``1(Microsoft.Practices.ObjectBuilder.IReadWriteLocator,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Returns a default instance of type <typeparamref name="T"/> based on configuration information 
            from <paramref name="configurationSource"/>.
            </summary>
            <typeparam name="T">The type to build.</typeparam>
            <param name="locator">The locator to be used for this build operation.</param>
            <param name="configurationSource">The source for configuration information.</param>
            <returns>A new instance of <typeparamref name="T"/> or any of it subtypes, or an existing instance
            if type <typeparamref name="T"/> is a singleton that is already present in the <paramref name="locator"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryFactory.BuildUp``1(System.String)">
            <summary>
            Returns a new default instance of type <typeparamref name="T"/> based on configuration information 
            from the default configuration source for <paramref name="id"/>.
            </summary>
            <typeparam name="T">The type to build.</typeparam>
            <param name="id">The id of the object to build.</param>
            <returns>A new instance of <typeparamref name="T"/> or any of it subtypes.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryFactory.BuildUp``1(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Returns a new default instance of type <typeparamref name="T"/> based on configuration information 
            from <paramref name="configurationSource"/> for <paramref name="id"/>.
            </summary>
            <typeparam name="T">The type to build.</typeparam>
            <param name="id">The id of the object to build.</param>
            <param name="configurationSource">The source for configuration information.</param>
            <returns>A new instance of <typeparamref name="T"/> or any of it subtypes.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryFactory.BuildUp``1(Microsoft.Practices.ObjectBuilder.IReadWriteLocator,System.String)">
            <summary>
            Returns a default instance of type <typeparamref name="T"/> based on configuration information 
            from the default configuration source for <paramref name="id"/>.
            </summary>
            <typeparam name="T">The type to build.</typeparam>
            <param name="id">The id of the object to build.</param>
            <param name="locator">The locator to be used for this build operation.</param>
            <returns>A new instance of <typeparamref name="T"/> or any of it subtypes, or an existing instance
            if type <typeparamref name="T"/> is a singleton that is already present in the <paramref name="locator"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryFactory.BuildUp``1(Microsoft.Practices.ObjectBuilder.IReadWriteLocator,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Returns a default instance of type <typeparamref name="T"/> based on configuration information 
            from <paramref name="configurationSource"/> for <paramref name="id"/>.
            </summary>
            <typeparam name="T">The type to build.</typeparam>
            <param name="id">The id of the object to build.</param>
            <param name="locator">The locator to be used for this build operation.</param>
            <param name="configurationSource">The source for configuration information.</param>
            <returns>A new instance of <typeparamref name="T"/> or any of it subtypes, or an existing instance
            if type <typeparamref name="T"/> is a singleton that is already present in the <paramref name="locator"/>.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameMapperAttribute">
            <summary>
            Specifies what type to use to map instance names for the type this attribute is bound to. This class cannot be inherited.
            </summary>
            <remarks>
            This attribute is used when building objects through ObjectBuilder. The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameMappingStrategy"/> will query 
            the requested type for this attribute, and will use an instance of the specified mapper type to map the instance name when necessary.
            The specified type must implement the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IConfigurationNameMapper"/> interface.
            The attribute needs to be bound only to the types that will be requested to ObjectBuilder that might need instance name mappings; 
            it is not necessary to bind the attribute to subclasses or implementations of interfaces.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IConfigurationNameMapper"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameMappingStrategy"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryFactory"/>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameMapperAttribute.NameMappingObjectType">
            <summary>
            The mapper type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameMapperAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameMapperAttribute"/> class with a mapper type.
            </summary>
            <param name="nameMappingObjectType">The mapper type. Must implement <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IConfigurationNameMapper"/>.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameMappingStrategy">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilderStrategy"/> which maps null instance names into a different name.
            </summary>
            <remarks>
            The strategy is used to deal with default names.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameMapperAttribute"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IConfigurationNameMapper"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryBuilderStrategy">
            <summary>
            This type supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Base class for custom strategies used with ObjectBuilder. Provides methods to retrieve useful information from the context.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryBuilderStrategy.GetConfigurationSource(Microsoft.Practices.ObjectBuilder.IBuilderContext)">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> instance from the context.
            </summary>
            <param name="context">The build context.</param>
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> in the context, or a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/> 
            if there is no such source in the context.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.EnterpriseLibraryBuilderStrategy.GetReflectionCache(Microsoft.Practices.ObjectBuilder.IBuilderContext)">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache"/> instance from the context.
            </summary>
            <param name="context">The build context.</param>
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache"/> in the context, or a new instance
            if there is no such cache in the context.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameMappingStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)">
            <summary>
            Override of <see cref="M:Microsoft.Practices.ObjectBuilder.IBuilderStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)"/>. Updates the instance name using a name mapper associated to type <paramref name="t"/>
            so later strategies in the build chain will use the updated instance name.
            </summary>
            <remarks>
            Will only update the instance name if it is <see langword="null"/>.
            </remarks>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilderContext"/> that represents the current building process.</param>
            <param name="t">The type to build.</param>
            <param name="existing">The existing object. Should be <see langword="null"/>.</param>
            <param name="id">The ID of the object to be created.</param>
            <returns>The created object.</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"> when the configuration required to do the mapping is not present or is 
            invalid in the configuration source.</exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameProvider">
            <summary>
            Manages the creation of names for anonymous instances.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameProvider.MakeUpName">
            <summary>
            Creates a new name.
            </summary>
            <returns>The created name.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameProvider.IsMadeUpName(System.String)">
            <summary>
            Tests a name to determine if it has been created.
            </summary>
            <param name="name">The name to test.</param>
            <returns><b>true</b> if the name was made up.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationObjectPolicy">
            <summary>
            A configuration object policy that holds a reference to an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IConfigurationObjectPolicy">
            <summary>
            Represents a policy that will provide an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            </summary>
            <remarks>
            This policy will be used by strategies that need to access a configuration source.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IConfigurationObjectPolicy.ConfigurationSource">
            <summary>
            Gets the configuration source.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationObjectPolicy.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationObjectPolicy"/> class with a configuration source.
            </summary>
            <param name="configurationSource">The configuration source.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationObjectPolicy.ConfigurationSource">
            <summary>
            Gets the configuration source.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfiguredObjectStrategy">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilderStrategy"/> which creates objects.
            </summary>
            <remarks>
            <para>The strategy looks for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.CustomFactoryAttribute">CustomFactory</see> attribute to 
            retrieve the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ICustomFactory"/> implementation needed to build the requested types based on 
            configuration.</para>
            <para>The provided context must have a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationObjectPolicy"/> holding a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>
            where to request the configuration information.</para>
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ICustomFactory"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.CustomFactoryAttribute"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationObjectPolicy"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfiguredObjectStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfiguredObjectStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfiguredObjectStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)">
            <summary>
            Override of <see cref="M:Microsoft.Practices.ObjectBuilder.IBuilderStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)"/>. Creates the requested object using the custom factory associated to type <paramref name="t"/>.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilderContext"/> that represents the current building process.</param>
            <param name="t">The type to build.</param>
            <param name="existing">The existing object. Should be <see langword="null"/>.</param>
            <param name="id">The ID of the object to be created.</param>
            <returns>The created object.</returns>
            <exception cref="T:System.InvalidOperationException"> when the requested type does not have the 
            required <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.CustomFactoryAttribute">CustomFactory</see> attribute.</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"> when the configuration for the requested ID is not present or is 
            invalid in the configuration source.</exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IConfigurationNameMapper">
            <summary>
            Represents an object that maps an instance name.
            </summary>
            <remarks>
            The mapping usually consists of getting the default instance name from configuration 
            when the requested name is <see langword="null"/>.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameMapperAttribute"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationNameMappingStrategy"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IConfigurationNameMapper.MapName(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Returns the mapped instance name, usually based on configuration information.
            </summary>
            <param name="name">The original instance name.</param>
            <param name="configSource">The configuration source to use to get configuration information.</param>
            <returns>The mapped instance name.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.InstrumentationAttachmentStrategy">
            <summary>
            Drives binding of instrumentation events to handler methods based on the attributes on the 
            source object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.InstrumentationAttachmentStrategy.AttachInstrumentation(System.Object,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <overloads>
            Attaches the instrumentation events in the <paramref name="createdObject"></paramref> to the 
            creating instance of the listener object, as defined by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListenerAttribute"></see>
            on the source class.
            </overloads>
            <summary>
            Attaches the instrumentation events in the <paramref name="createdObject"></paramref> to the 
            creating instance of the listener object, as defined by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListenerAttribute"></see>
            on the source class.
            </summary>
            <param name="createdObject">Source object used for instrumentation events.</param>
            <param name="configurationSource"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"></see> instance used to define whether
            instrumentation is enabled or disabled for application.</param>
            <param name="reflectionCache">Cache for instrumentation attributes discovered through reflection.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.InstrumentationAttachmentStrategy.AttachInstrumentation(System.String,System.Object,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            Attaches the instrumentation events in the <paramref name="createdObject"></paramref> to the 
            creating instance of the listener object, as defined by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListenerAttribute"></see>
            on the source class.
            </summary>
            <param name="instanceName">User-provided instance name given to the instrumenation listener during its instantiation.</param>
            <param name="createdObject">Source object used for instrumentation events.</param>
            <param name="configurationSource"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"></see> instance used to define whether
            instrumentation is enabled or disabled for application.</param>
            <param name="reflectionCache">Cache for instrumentation attributes discovered through reflection.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.InstrumentationStrategy">
            <summary>
            This type supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Adapter used to inject instrumentation attachment process into ObjectBuilder creation process
            for objects.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.InstrumentationAttachmentStrategy"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.InstrumentationStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)">
            <summary>
            Implementation of <see cref="M:Microsoft.Practices.ObjectBuilder.IBuilderStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)"/>.
            </summary>
            <remarks>
            This implementation will attach instrumentation to the created objects. 
            </remarks>
            <param name="context">The build context.</param>
            <param name="t">The type of the object being built.</param>
            <param name="existing">The existing instance of the object.</param>
            <param name="id">The ID of the object being built.</param>
            <returns>The built object.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.NameTypeFactoryBase`1">
            <summary>
            Base class for instance factories.
            </summary>
            <remarks>
            This class is used to create instances of types compatible with <typeparamref name="T"/> described 
            by a configuration source.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.NameTypeFactoryBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.NameTypeFactoryBase`1"/> class with the default configuration source.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.NameTypeFactoryBase`1.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.NameTypeFactoryBase`1"/> class with a configuration source.
            </summary>
            <param name="configurationSource">The configuration source to use.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.NameTypeFactoryBase`1.CreateDefault">
            <summary>
            Returns a new instance of <typeparamref name="T"/> based on the default instance configuration.
            </summary>
            <returns>
            A new instance of <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.NameTypeFactoryBase`1.Create(System.String)">
            <summary>
            Returns an new instance of <typeparamref name="T"/> based on the configuration for <paramref name="name"/>.
            </summary>
            <param name="name">The name of the required instance.</param>
            <returns>
            A new instance of <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.TypeInstantiationAssembler`2">
            <summary>
            Generic assembler that will just instantiate the type in a configuration element for polymorphic hierarchies.
            </summary>
            <typeparam name="TObject">The interface or the base type to build.</typeparam>
            <typeparam name="TConfiguration">The base configuration object type.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.TypeInstantiationAssembler`2.Assemble(Microsoft.Practices.ObjectBuilder.IBuilderContext,`1,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            Builds an instance of the subtype of <typeparamref name="TObject"/> type the receiver knows how to build by
            invoking the default constructor on the type specified by the configuration object.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilderContext"/> that represents the current building process.</param>
            <param name="objectConfiguration">The configuration object that describes the object to build.</param>
            <param name="configurationSource">The source for configuration objects.</param>
            <param name="reflectionCache">The cache to use retrieving reflection information.</param>
            <returns>A new instance of the <typeparamref name="TObject"/> subtype.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher">
            <summary>
            <para>Represents an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher"/> that watches a file.</para>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher">
            <summary>
            <para>Represents an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher"/> that watches a file.</para>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher">
            <summary>
            <para>Provides a way to watch for changes to configuration in storage.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher.StartWatching">
            <summary>
            When implemented by a subclass, starts the object watching for configuration changes
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher.StopWatching">
            <summary>
            When implemented by a subclass, stops the object from watching for configuration changes
            </summary>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher.ConfigurationChanged">
            <summary>
            Event raised when the underlying persistence mechanism for configuration notices that
            the persistent representation of configuration information has changed.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher.SectionName">
            <summary>
            When implemented by a subclass, returns the section name that is being watched.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.#ctor">
            <summary>
            <para>Initialize a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher"/> class</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.Finalize">
            <summary>
            <para>Allows an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> to attempt to free resources and perform other cleanup operations before the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> is reclaimed by garbage collection.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.StartWatching">
            <summary>
            <para>Starts watching the configuration file.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.StopWatching">
            <summary>
            <para>Stops watching the configuration file.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.Dispose">
            <summary>
            <para>Releases the unmanaged resources used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> and optionally releases the managed resources.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.Disposing(System.Boolean)">
            <summary>
            <para>Releases the unmanaged resources used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> and optionally releases the managed resources.</para>
            </summary>
            <param name="isDisposing">
            <para><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.OnConfigurationChanged">
            <summary>
            <para>Raises the <see cref="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.ConfigurationChanged"/> event.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.GetCurrentLastWriteTime">
            <summary>
            <para>Returns the <see cref="T:System.DateTime"/> of the last change of the information watched</para>
            </summary>
            <returns>The <see cref="T:System.DateTime"/> of the last modificaiton, or <code>DateTime.MinValue</code> if the information can't be retrieved</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.BuildThreadName">
            <summary>
            Returns the string that should be assigned to the thread used by the watcher
            </summary>
            <returns>The name for the thread</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.BuildEventData">
            <summary>
            Builds the change event data, in a suitable way for the specific watcher implementation
            </summary>
            <returns>The change event information</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.GetEventSourceName">
            <summary>
            Returns the source name to use when logging events
            </summary>
            <returns>The event source name</returns>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.ConfigurationChanged">
            <summary>
            Event raised when the underlying persistence mechanism for configuration notices that
            the persistent representation of configuration information has changed.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.SectionName">
            <summary>
            <para>Gets the name of the configuration section being watched.</para>
            </summary>
            <value>
            <para>The name of the configuration section being watched.</para>
            </value>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher.#ctor(System.String,System.String)">
            <summary>
            <para>Initialize a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> class with the path to the configuration file and the name of the section</para>
            </summary>
            <param name="configFilePath">
            <para>The full path to the configuration file.</para>
            </param>
            <param name="configurationSectionName">
            <para>The name of the configuration section to watch.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher.Finalize">
            <summary>
            <para>Allows an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> to attempt to free resources and perform other cleanup operations before the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> is reclaimed by garbage collection.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher.GetCurrentLastWriteTime">
            <summary>
            <para>Returns the <see cref="T:System.DateTime"/> of the last change of the information watched</para>
            <para>The information is retrieved using the watched file modification timestamp</para>
            </summary>
            <returns>The <see cref="T:System.DateTime"/> of the last modificaiton, or <code>DateTime.MinValue</code> if the information can't be retrieved</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher.BuildThreadName">
            <summary>
            Returns the string that should be assigned to the thread used by the watcher
            </summary>
            <returns>The name for the thread</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher.BuildEventData">
            <summary>
            Builds the change event data, including the full path of the watched file
            </summary>
            <returns>The change event information</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher.GetEventSourceName">
            <summary>
            Returns the source name to use when logging events
            </summary>
            <returns>The event source name</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher.SectionName">
            <summary>
            <para>Gets the name of the configuration section being watched.</para>
            </summary>
            <value>
            <para>The name of the configuration section being watched.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource">
            <summary>
            Represents an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> that retrieves the configuration information from the 
            application's default configuration file using the <see cref="T:System.Configuration.ConfigurationManager"/> API.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/> is a wrapper over the static configuration access API provided by 
            <see cref="T:System.Configuration.ConfigurationManager"/> and watches for changes in the configuration files to refresh the 
            configuration when a change is detected.
            </para>
            <para>
            It uses a shared instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceImplementation"/> to manage the access to the 
            configuration subsystem and to manage the file change watchers.
            </para>
            </remarks>
            <seealso cref="T:System.Configuration.ConfigurationManager"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceImplementation"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.GetSection(System.String)">
            <summary>
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/>.
            </summary>
            <param name="sectionName">The section name to retrieve.</param>
            <returns>The specified <see cref="T:System.Configuration.ConfigurationSection"/>, or <see langword="null"/> (<b>Nothing</b> in Visual Basic)
            if a section by that name is not found.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.AddSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Adds a handler to be called when changes to the section named <paramref name="sectionName"/> are detected.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler for the change event to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.RemoveSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Removes a handler to be called when changes to section <paramref name="sectionName"/> are detected.
            </summary>
            <param name="sectionName">The name of the watched section.</param>
            <param name="handler">The handler for the change event to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.Save(System.String,System.String,System.Configuration.ConfigurationSection)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Adds or replaces <paramref name="configurationSection"/> under name <paramref name="section"/> in the configuration 
            file named <paramref name="fileName" /> and saves the configuration file.
            </summary>
            <param name="fileName">The name of the configuration file.</param>
            <param name="section">The name for the section.</param>
            <param name="configurationSection">The configuration section to add or replace.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.Remove(System.String,System.String)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Removes the configuration section named <paramref name="section"/> from the configuration file named
            <paramref name="fileName"/> and saves the configuration file.
            </summary>
            <param name="fileName">The name of the configuration file.</param>
            <param name="section">The name for the section.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.Add(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration source location specified by 
            <paramref name="saveParameter"/> and saves the configuration source.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists in the location specified by 
            <paramref name="saveParameter"/> it will be replaced.
            </remarks>
            <param name="addParameter">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter"/> that represents the location where 
            to save the updated configuration. Must be an instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationParameter"/>.</param>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.Remove(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter,System.String)">
            <summary>
            Removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration source location specified by 
            <paramref name="removeParameter"/> and saves the configuration source.
            </summary>
            <param name="removeParameter">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationParameter"/> that represents the location where 
            to save the updated configuration. Must be an instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationParameter"/>.</param>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceElement">
            <summary>
            Represents the configuration settings that describe an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceElement"/> class with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceElement"/> class with a name and an type.
            </summary>
            <param name="name">The instance name.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceElement.CreateSource">
            <summary>
            Returns a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/>.
            </summary>
            <returns>A new configuration source.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceImplementation">
            <summary>
            This type supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Represents the implementation details for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceImplementation.#ctor">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceImplementation"/> class.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceImplementation"/> will use the current application configuration file as
            the main configuration file.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceImplementation.#ctor(System.Boolean)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceImplementation"/> class.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceImplementation"/> will use the current application's configuration file as
            the main configuration file.
            </remarks>
            <param name="refresh"><b>true</b>if runtime changes should be refreshed, <b>false</b> otherwise.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceImplementation.GetSection(System.String)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/> from the current application's configuration file, 
            and starts watching for its changes if not watching already.
            </summary>
            <param name="sectionName">The section name.</param>
            <returns>The section, or <see langword="null"/> if it doesn't exist.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceImplementation.RefreshAndValidateSections(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ICollection{System.String}@,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Refreshes the configuration sections from the main configuration file and determines which sections have suffered notifications
            and should be notified to registered handlers.
            </summary>
            <param name="localSectionsToRefresh">A dictionary with the configuration sections residing in the main configuration file that must be refreshed.</param>
            <param name="externalSectionsToRefresh">A dictionary with the configuration sections residing in external files that must be refreshed.</param>
            <param name="sectionsToNotify">A new collection with the names of the sections that suffered changes and should be notified.</param>
            <param name="sectionsWithChangedConfigSource">A new dictionary with the names and file names of the sections that have changed their location.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceImplementation.RefreshExternalSections(System.String[])">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Refreshes the configuration sections from an external configuration file.
            </summary>
            <param name="sectionsToRefresh">A collection with the names of the sections that suffered changes and should be refreshed.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.CommonWmiInstaller">
            <summary>
            This member supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Provides the installer for the Core library, installing WMI Events and event log sources defined for this library.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.CommonWmiInstaller.#ctor">
            <summary>
            Initializes the installer.
            This member supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.CommonWmiInstaller.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.CommonWmiInstaller.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.CommonWmiInstaller.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder">
            <summary>
            Base class for the reflection-based installers. These reflection-based installers 
            search through assemblies looking for the appropriate kinds of installable resources and
            arrange for them to be registered with the appropriate installer
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder.Fill(System.Configuration.Install.Installer)">
            <summary>
            Fills the given installer with other, more specific kinds of installers that have been
            filled with the appropriate kinds of installable resources
            </summary>
            <param name="installer">Outer installer to be filled with nested installers for specific resources</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder.#ctor(System.Type[],System.Type)">
            <summary>
            Initializes object by giving it access to an array of all available types and a specification of
            the more specific resource type that will be installed.
            </summary>
            <param name="availableTypes">Array of available types through which installer should look</param>
            <param name="instrumentationAttributeType">Attribute specifying the more specific resource type to search for</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder.ConfirmAttributeExists(System.Type,System.Type)">
            <summary>
            Helper method to determine if the given type is attributed with the necessary attributes to be installed
            for a given installer
            </summary>
            <param name="instrumentedType">Type in question</param>
            <param name="attributeType">More specific attribute used to match resource being installed</param>
            <returns>True if the attributes on the given <paramref name="instrumentedType"></paramref> matches <paramref name="attributeType"></paramref></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder.IsInstrumented(System.Type,System.Type)">
            <summary>
            Helper method to determine if the attributes for a given type match the attributes used to 
            specify a specific kind of installable resource. The type should be attributed with <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.HasInstallableResourcesAttribute"></see>
            and the attribute passed to this method call.
            </summary>
            <param name="instrumentedType">Type in question</param>
            <param name="instrumentedAttributeType">More specific attribute used to match resource being installed</param>
            <returns><b>true</b> if the type specifies intallable resources.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder.CreateInstallers(System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Creates one or more installers after iterating over the <paramref name="instrumentedTypes"></paramref>.
            The number of iterators returned depends on the specific needs of the particular installable type.
            </summary>
            <returns>Collection of installers created through iterating over included types</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder.InstrumentedTypes">
            <summary>
            Gets or sets a list of all instrumentented types found in a given assembly. Types are instrumented if they are
            attributed with <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.HasInstallableResourcesAttribute"></see>	 and another attribute specifying 
            another, more specific resource type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection">
            <summary>
            Configuration object for Instrumentation. This section defines the instrumentation behavior 
            for the entire application
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.SectionName">
            <summary>
            Section name
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes enabled state of the three forms of instrumentation
            </summary>
            <param name="performanceCountersEnabled">True if performance counter instrumentation is to be enabled</param>
            <param name="eventLoggingEnabled">True if event logging instrumentation is to be enabled</param>
            <param name="wmiEnabled">True if wmi instrumentation is to be enabled</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.#ctor">
            <summary>
            Initializes object to default settings of all instrumentation types disabled
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.PerformanceCountersEnabled">
            <summary>
            Gets and sets the value of PerformanceCountersEnabled
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.EventLoggingEnabled">
            <summary>
            Gets and sets the value of EventLoggingEnabled
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.WmiEnabled">
            <summary>
            Gets and sets value of WmiEnabled
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.DefaultEventLoggerCustomFactoryBase">
            <summary>
            Base for custom factories used to create default event loggers specific to individual blocks.
            These default event loggers are used when events need to be logged from static classes and methods
            that cannot participate in the normal instrumentation attachment process.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.DefaultEventLoggerCustomFactoryBase.CreateObject(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="context">Represents the context in which a build-up or tear-down runs.</param>
            <param name="name">Unused parameter</param>
            <param name="configurationSource">Represents a source for getting configuration</param>
            <param name="reflectionCache">Unused parameter.</param>
            <returns>Fully initialized instance of a default event logging object</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.DefaultEventLoggerCustomFactoryBase.DoCreateObject(Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Builds an initialized default event logging object.
            </summary>
            <param name="instrumentationConfigurationSection">The instrumentation section that is used as configuration.</param>
            <returns>A fully initialized instance of a default event logging object.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounterFactory">
            <summary>
            Factory for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter"></see>s. Individual <see cref="T:System.Diagnostics.PerformanceCounter"></see>
            instances are cached to prevent the same instance from being created multiple times.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounterFactory.CreateCounter(System.String,System.String,System.String[])">
            <summary>
            Creates an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter"></see> initialized with individual <see cref="T:System.Diagnostics.PerformanceCounter"></see>
            instances. Instances are named according to <paramref name="instanceNames"></paramref> passed to this method.
            </summary>
            <param name="categoryName">Performance counter category name, as defined during installation.</param>
            <param name="counterName">Performance counter name, as defined during installation.</param>
            <param name="instanceNames">Param array of instance names for which individual counters should be created.</param>
            <returns>The new counter instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounterFactory.ClearCachedCounters">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute">
            <summary>
            Defines an event source to be installed by the reflection based installer system. Each field
            in this attribute is a placeholder for the same field as defined in the <see cref="T:System.Diagnostics.EventLogInstaller"></see>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes this object with the event log name and source to be installed.
            </summary>
            <param name="logName">Event log name to which the source should be added.</param>
            <param name="sourceName">Event log source to be added.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.LogName">
            <summary>
            Gets the event log name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.SourceName">
            <summary>
            Gets the event source name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.CategoryCount">
            <summary>
            Gets and sets the category count.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.CategoryResourceFile">
            <summary>
            Gets the category resource file name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.MessageResourceFile">
            <summary>
            Gets and sets the message resource file name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.ParameterResourceFile">
            <summary>
            Gets and sets the parameter resource file name
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogEntryFormatter">
            <summary>
            Formats an event log entry to the defined format.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IEventLogEntryFormatter">
            <summary>
            Formats an event log entry for logging to event log.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IEventLogEntryFormatter.GetEntryText(System.String,System.String[])">
            <overloads>
            Creates a formatted message, suitable for logging to the event log.
            </overloads>
            <summary>
            Creates a formatted message, suitable for logging to the event log.
            </summary>
            <param name="message">Message to be formatted, with format tags embedded.</param>
            <param name="extraInformation">Extra strings to be matched up with the format tags provided in <paramref name="message"></paramref>.</param>
            <returns>Formatted message, suitable for logging to the event log.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IEventLogEntryFormatter.GetEntryText(System.String,System.Exception,System.String[])">
            <summary>
            Creates a formatted message, suitable for logging to the event log.
            </summary>
            <param name="message">Message to be formatted, with format tags embedded.</param>
            <param name="exception">Exception containing message text to be added to event log message produced by this method</param>
            <param name="extraInformation">Extra strings to be matched up with the format tags provided in <paramref name="message"></paramref>.</param>
            <returns>Formatted message, suitable for logging to the event log.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogEntryFormatter.#ctor(System.String)">
            <overloads>
            Initializes this object with the name of the specific block using this class.
            </overloads>
            <summary>
            Initializes this object with the name of the specific block using this class.
            </summary>
            <param name="blockName">Name of block using this functionality.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogEntryFormatter.#ctor(System.String,System.String)">
            <summary>
            Initializes this object	with the given application and block names.
            </summary>
            <param name="applicationName">Name of the application.</param>
            <param name="blockName">Name of the block using this functionality.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogEntryFormatter.GetEntryText(System.String,System.String[])">
            <overloads>
            Creates a formatted message, suitable for logging to the event log.
            </overloads>
            <summary>
            Creates a formatted message, suitable for logging to the event log.
            </summary>
            <param name="message">Message to be formatted, with format tags embedded.</param>
            <param name="extraInformation">Extra strings to be matched up with the format tags provided in <paramref name="message"></paramref>.</param>
            <returns>Formatted message, suitable for logging to the event log.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogEntryFormatter.GetEntryText(System.String,System.Exception,System.String[])">
            <summary>
            Creates a formatted message, suitable for logging to the event log.
            </summary>
            <param name="message">Message to be formatted, with format tags embedded.</param>
            <param name="exception">Exception containing message text to be added to event log message produced by this method</param>
            <param name="extraInformation">Extra strings to be matched up with the format tags provided in <paramref name="message"></paramref>.</param>
            <returns>Formatted message, suitable for logging to the event log.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogInstallerBuilder">
            <summary>
            Add event log source definitions for classes that have been attributed
            with HasInstallableResourceAttribute and EventLogDefinition attributes to EventLogInstallers.
            One installer is created for each unique event log source that is found.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogInstallerBuilder.#ctor(System.Type[])">
            <summary>
            Initializes this object with a list of <see cref="T:System.Type"></see>s that may potentially be attributed appropriately.
            </summary>
            <param name="potentialTypes">Array of types to inspect check for event log sources needing installation</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogInstallerBuilder.CreateInstallers(System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Creates <see cref="T:System.Diagnostics.EventLogInstaller"></see> instances for each separate event log source needing installation.
            </summary>
            <param name="instrumentedTypes">Collection of <see cref="T:System.Type"></see>s that represent types defining
            event log sources to be installed.</param>
            <returns>Collection of installers containing event log sources to be installed.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IInstrumentationEventProvider">
            <summary>
            Defines the contract implemented by objects that provide instrumentation events for block objects.
            An implementation of this interface is used when the block object itself cannot provide the
            instrumentation events itself for some reason and desires to delegate the responsibility for
            containing the instrumentations to another object. One important usage of instances of this class are
            when a block object wishes to pass the instrumentation events to a contained block object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IInstrumentationEventProvider.GetInstrumentationEventProvider">
            <summary>
            Returns the object to which the instrumentation events have been delegated.
            </summary>
            <returns>Object to which the instrumentation events have been delegated.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IExplicitInstrumentationBinder">
            <summary>
            Defines the contract to be implemented by explicit binders for individual blocks. 
            Explicit binders are used to define exactly how instrumentation event sources are bound to
            instrumentation event listeners. It is used for those instances when the implementor wishes to
            explicitly define how this binding happens, rather than allow the binding to occur through reflection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IExplicitInstrumentationBinder.Bind(System.Object,System.Object)">
            <summary>
            Adds specified <paramref name="listenerMethod"></paramref> as an event handler for 
            the <paramref name="sourceEvent"></paramref>.
            </summary>
            <param name="source">Event on source object to which <paramref name="listenerMethod"></paramref> will be added.</param>
            <param name="listener">Method to be added as event handler for <paramref name="listenerMethod"></paramref>.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener">
            <summary>
            Listens for events raised by block classes and reports them to appropriate instrumentation 
            services (WMI, EventLog, or PeformanceCounters).
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.#ctor(System.Boolean,System.Boolean,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter)">
            <summary>
            Base constructor for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener"></see>. 
            </summary>
            <overloads>
            Base constructor for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener"></see>. 
            </overloads>
            <param name="performanceCountersEnabled">True if performance counter reporting is enabled</param>
            <param name="eventLoggingEnabled">True if event logging is enabled</param>
            <param name="wmiEnabled">True if WMI logging is enabled</param>
            <param name="nameFormatter">Creates unique name for each <see cref="T:System.Diagnostics.PerformanceCounter"/> instance.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter)">
            <summary>
            Base constructor for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener"></see>. 
            </summary>
            <param name="instanceName">Unique name for this instance</param>
            <param name="performanceCountersEnabled">True if performance counter reporting is enabled</param>
            <param name="eventLoggingEnabled">True if event logging is enabled</param>
            <param name="wmiEnabled">True if WMI logging is enabled</param>
            <param name="nameFormatter">Creates unique name for each <see cref="T:System.Diagnostics.PerformanceCounter"/> instance.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.#ctor(System.String[],System.Boolean,System.Boolean,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter)">
            <summary>
            Base constructor for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener"></see>. 
            </summary>
            <param name="instanceNames">Unique names for th <see cref="T:System.Diagnostics.PerformanceCounter"></see> instances to be managed by this listener.</param>
            <param name="performanceCountersEnabled">True if performance counter reporting is enabled</param>
            <param name="eventLoggingEnabled">True if event logging is enabled</param>
            <param name="wmiEnabled">True if WMI logging is enabled</param>
            <param name="nameFormatter">Creates unique name for each <see cref="T:System.Diagnostics.PerformanceCounter"/> instance.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.GetEventSourceName">
            <summary>
            Gets the event source name as defined in the class metadata.
            </summary>
            <returns>The event source name.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.CreatePerformanceCounters(System.String[])">
            <summary>
            Instantiates the performance counter instances managed by this listener.
            </summary>
            <param name="instanceNames">Instance names for performance counters.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.CreateInstanceName(System.String)">
            <summary>
            Creates a unique name for a specific performance counter instance.
            </summary>
            <param name="nameSuffix">Instance name for a specific performance counter.</param>
            <returns>The created instance name.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.EventLoggingEnabled">
            <summary>
            Gets and sets the EventLoggingEnabled property
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.PerformanceCountersEnabled">
            <summary>
            Gets and sets the PerformanceCountersEnabled property
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.WmiEnabled">
            <summary>
            Gets and sets the WmiEnabled property
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstallerBuilder">
            <summary>
            Add event log source definitions for classes that have been attributed
            with HasInstallableResourceAttribute and EventLogDefinition attributes to EventLogInstallers.
            One installer is created for each unique performance counter category that is found.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstallerBuilder.#ctor(System.Type[])">
            <summary>
            Initializes this object with a list of <see cref="T:System.Type"></see>s that may potentially be attributed appropriately.
            </summary>
            <param name="availableTypes">Array of types to inspect check for performance counter definitions needing installation</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstallerBuilder.CreateInstallers(System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Creates <see cref="T:System.Diagnostics.PerformanceCounterInstaller"></see> instances for each separate performance counter definition needing installation.
            </summary>
            <param name="instrumentedTypes">Collection of <see cref="T:System.Type"></see>s that represent types defining
            performance counter definitions to be installed.</param>
            <returns>Collection of installers containing performance counter definitions to be installed.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstanceName">
            <summary>
            Constructs an instance name for a <see cref="T:System.Diagnostics.PerformanceCounter"></see> following embedded
            formatting rules.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstanceName.#ctor(System.String,System.String)">
            <overloads>
            Initializes this object with information needed to construct a <see cref="T:System.Diagnostics.PerformanceCounter"></see>\
            instance name.
            </overloads>
            <summary>
            Initializes this object with information needed to construct a <see cref="T:System.Diagnostics.PerformanceCounter"></see>\
            instance name.
            </summary>
            <param name="prefix">Counter name prefix.</param>
            <param name="suffix">Counter name suffix.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstanceName.ToString">
            <summary>
            Returns properly formatted counter name as a string.
            </summary>
            <returns>Formatted counter name.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute">
            <summary>
            Defines information needed to install a <see cref="T:System.Diagnostics.PerformanceCounterCategory"></see>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute.#ctor(System.String,System.String)">
             <overloads>
             Initializes this attribute with information needed to install this performance counter category.
             </overloads>
             <summary>
             Initializes this attribute with information needed to install this performance counter category.
             </summary>
             <param name="categoryName">Performance counter category name</param>
             <param name="categoryHelp">Counter category help resource name. 
             This is not the help text itself, 
             but is the resource name used to look up the internationalized help text at install-time.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute.#ctor(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType)">
             <summary>
             Initializes this attribute with information needed to install this performance counter category.
             </summary>
             <param name="categoryName">Performance counter category name</param>
             <param name="categoryHelp">Counter category help resource name. 
             This is not the help text itself, 
             but is the resource name used to look up the internationalized help text at install-time.
            </param>
             <param name="categoryType">Performance counter category type.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute.CategoryType">
            <summary>
            Gets the <see cref="T:System.Diagnostics.PerformanceCounter"></see> category type.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute.CategoryName">
            <summary>
            Gets the <see cref="T:System.Diagnostics.PerformanceCounter"></see> category name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute.CategoryHelp">
            <summary>
            Gets the <see cref="T:System.Diagnostics.PerformanceCounter"></see> category help resource name.
            This is not the help text itself, 
            but is the resource name used to look up the internationalized help text at install-time.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ReflectionInstaller`1">
            <summary>
            Generic installer wrapper around installer builder. Used to find and install 
            given type of installable resource.
            </summary>
            <typeparam name="TInstallerBuilder">Specific type of installer builder to instantiate</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ReflectionInstaller`1.Install(System.Collections.IDictionary)">
            <summary>
            Installs the instrumentation resources
            </summary>
            <param name="stateSaver">An <see cref="T:System.Collections.IDictionary"/> used to save information needed to perform a commit, rollback, or uninstall operation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ReflectionInstaller`1.Uninstall(System.Collections.IDictionary)">
            <summary>
            Uninstalls the instrumentation resources
            </summary>
            <param name="stateSaver">An <see cref="T:System.Collections.IDictionary"/> that contains the state of the computer after the installation was complete.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.BaseWmiEvent">
            <summary>
            Base class for Enterprise Library's WMI Events. 
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.BaseWmiEvent.UtcTimeStamp">
            <summary>
            Gets the timestamp for this WMI Event.
            </summary>
        </member>
    </members>
</doc>
