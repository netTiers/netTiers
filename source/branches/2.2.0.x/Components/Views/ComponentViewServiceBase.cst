<%--
	Written By:
		Rizaullah Mohammed (Riza)
	Description:
		This script will create Service layer classes. It requires stored procedures
		created from the procedure script. So for this code to work properly you need to run
		the procedure template, the rowobject template, and the rowcollection template on
		the same View. You can also optionally use the main script which will run them all
		for you.
--%>
<%@ CodeTemplate Src="..\..\TemplateLib\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Component Object Class" ResponseEncoding="UTF-8"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>

<%@ Property Name="NameSpace" Optional="True" Type="System.String" Category="Style" Description="Object Namespace." %>
<%@ Property Name="BLLNameSpace" Optional="True" Type="System.String" Category="Style" Description="Component Namespace." %>
<%@ Property Name="DALNameSpace" Optional="True" Type="System.String" Category="Style" Description="DAL Namespace." %>	
<%@ Property Name="UsePartialClass" Type="System.Boolean" Default="true" Category="General" Description="Indicates if partial class should be generated." %>

<%@ Property Name="SourceView" Type="SchemaExplorer.ViewSchema" Category="Connection" Description="View Object should be based on." %>

<%@ Property Name="IncludeRelations" Type="System.Boolean" Default="True" Category="Options" Description="Include Collections for Related Entities."%>
<%@ Property Name="IncludeCustoms" Type="System.Boolean" Default="True" Category="Options" Description="If true customs stored procedures will be generated as functions." %>
<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeFind" Type="System.Boolean" Default="True" Category="Options" Description="If true find functions will be generated." %>

<%@ Property Name="ComponentPattern" Optional="False" Type="MoM.Templates.ComponentPatternType" Category="Pattern" Description="Component Pattern Type." %>
<%@ Property Name="CustomNonMatchingReturnType" Type="CustomNonMatchingReturnType" Default="DataSet" Category="Options" Description="When using custom stored procedures, if the returned rows do not match the fields in an entity, a DataSet or IDataReader will be returned. Choose One.  This is useful if you've returned more than one resultset in a custom procedure; you can use a ConvertToDataSet(IDataReader) method in the Utility class to convert that to a DataSet." %>
<%		
	string className = GetClassName(SourceView);
	string collectionClassName = GetClassName(SourceView, ClassNameFormat.Collection);
	string keyClassName = GetClassName(SourceView, ClassNameFormat.Key);
	string entitiesCollectionClassName = GetClassName(SourceView, ClassNameFormat.Collection).Replace("<", "<Entities.");
	
	string structName = GetClassName(SourceView, ClassNameFormat.Struct);
	string abstractClassName = GetClassName(SourceView, ClassNameFormat.AbstractService);
	string partialClassInternalPrefix = UsePartialClass ? "" : "";
	string newCollectionClassName = "";
	
	if (ComponentPattern == MoM.Templates.ComponentPatternType.DomainModel)
		newCollectionClassName = string.Format("new {0} (", collectionClassName);


	// Collection of all columns in the View.
	ViewColumnSchemaCollection cols = SourceView.Columns;
		
	//Provides information about the indexes contained in the View. 
	//IndexSchemaCollection indexes = SourceView.Indexes;
		
	ViewColumnSchemaCollection colsUpdaView = new ViewColumnSchemaCollection();
	foreach (ViewColumnSchema column in cols)
	{
			colsUpdaView.Add(column);
	}
	
	//Get the columns that are common to all Views
	//ColumnSchemaCollection commonColumns = GetCommonColumns(SourceViews);
	
	string today = DateTime.Now.ToLongDateString();

%>

/*
	File generated by NetTiers templates [www.NetTiers.com]
	<%
	if( IncludeGeneratedDate)
	{
	%>
	Generated on : <%=DateTime.Now.ToLongDateString()%>
	<%
	}
	%>
	Important: Do not modify this file. Edit the file <%=className%>.cs instead.
*/

#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Security;
using System.Data;

using <%=BLLNameSpace%>;
using <%=BLLNameSpace%>.Validation;
using Entities = <%=BLLNameSpace%>;
using <%=DALNameSpace%>;
using <%=DALNameSpace%>.Bases;


using Microsoft.Practices.EnterpriseLibrary.Logging;

#endregion 

namespace <%=NameSpace%>
{		
	
	///<summary>
	/// An object representation of the '<%=SourceView.Name%>' View.
	///</summary>
	/// <remarks>
	/// IMPORTANT!!! You should not modify this <% if (UsePartialClass) Response.Write("partial "); else Response.Write("base "); %> class, modify the <%= className%>.cs file instead.
	/// All custom implementations should be done in the <see cref="<%=className%>"/> class.
	/// </remarks>
	[DataObject]
	public <% if (UsePartialClass) Response.Write("partial "); %>class <%=abstractClassName%> : ServiceViewBase<<%= className %>>
	{

		#region Constructors
		///<summary>
		/// Creates a new <see cref="<%=className%>"/> instance .
		///</summary>
		public <%=abstractClassName%>() : base()
		{
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="<%=className%>"/> instance.
		///</summary>
		<% for (int x=0; x < colsUpdaView.Count; x++) { %>
		///<param name="<%=GetFieldName(colsUpdaView[x]) %>"><%=GetColumnXmlComment(colsUpdaView[x],2)%></param>
		<% } %>
		public static <%=className%> Create<%=className%>(<% for (int x=0; x < colsUpdaView.Count; x++) { %><%= GetCSType(colsUpdaView[x]) %> <%= GetFieldName(colsUpdaView[x]) %><%if (x < colsUpdaView.Count -1){%>, <%} }// end for %>)
		{
			<%=className%> newEntity<%=className%> = new <%=className%>();
			<% for (int x=0; x < colsUpdaView.Count; x++) { %>
			<%= GetObjectPropertyAccessor(colsUpdaView[x], "newEntity" + className) %>  = <%= GetFieldName(colsUpdaView[x]) %>;
			<% }// end for %>
			return newEntity<%=className%>;
		}
		#endregion Constructors
		<%		
		// If the chosen pattern to implement is a domain pattern, go ahead 
		// and fill all data repository wrapper access here.
		
		CodeTemplate template = CodeTemplates["ComponentViewDataAccess.cst"];
		this.CopyPropertiesTo(template);
		template.SetProperty("RenderOverload", false);
		template.SetProperty("RenderImplementation", true);
		Response.Write(template.RenderToString()); 
		%>
	
	}//End Class
} // end namespace



