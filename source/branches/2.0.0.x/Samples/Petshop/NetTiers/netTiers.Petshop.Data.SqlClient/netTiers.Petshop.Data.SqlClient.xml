<?xml version="1.0"?>
<doc>
    <assembly>
        <name>netTiers.Petshop.Data.SqlClient</name>
    </assembly>
    <members>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlAccountProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:netTiers.Petshop.Entities.Account"/> entity.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlAccountProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlAccountProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlAccountProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlAccountProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlAccountProviderBase.Delete(netTiers.Petshop.Data.TransactionManager,System.Guid,System.Byte[])">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="timestamp">The timestamp field used for concurrency check.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
            <exception cref="T:System.Data.DBConcurrencyException">The record has been modified by an other user. Please reload the instance before deleting.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlAccountProviderBase.Find(netTiers.Petshop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Account objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlAccountProviderBase.GetAll(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Account objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlAccountProviderBase.GetPaged(netTiers.Petshop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Account objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlAccountProviderBase.GetByFavoriteCategoryId(netTiers.Petshop.Data.TransactionManager,System.Nullable{System.Guid},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Account_Category key.
            	FK_Account_Category Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="favoriteCategoryId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Account objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlAccountProviderBase.GetByCreditCardId(netTiers.Petshop.Data.TransactionManager,System.Nullable{System.Guid},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Account_CreditCard key.
            	FK_Account_CreditCard Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="creditCardId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Account objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlAccountProviderBase.GetById(netTiers.Petshop.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Account index.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Account"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlAccountProviderBase.GetByLogin(netTiers.Petshop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Account index.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="login"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Account"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlAccountProviderBase.GetByLastName(netTiers.Petshop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Account_LastName index.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="lastName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlAccountProviderBase.BulkInsert(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Account})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the netTiers.Petshop.Entities.Account object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlAccountProviderBase.Insert(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.Account)">
            <summary>
            	Inserts a netTiers.Petshop.Entities.Account object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="entity">netTiers.Petshop.Entities.Account object to insert.</param>
            <remarks>
            	After inserting into the datasource, the netTiers.Petshop.Entities.Account object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlAccountProviderBase.Update(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.Account)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="entity">netTiers.Petshop.Entities.Account object to update.</param>
            <remarks>
            	After updating the datasource, the netTiers.Petshop.Entities.Account object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlAccountProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlAccountProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlAccountProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlProductProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:netTiers.Petshop.Entities.Product"/> entity.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlProductProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlProductProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlProductProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlProductProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlProductProviderBase.Delete(netTiers.Petshop.Data.TransactionManager,System.Guid,System.Byte[])">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="timestamp">The timestamp field used for concurrency check.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
            <exception cref="T:System.Data.DBConcurrencyException">The record has been modified by an other user. Please reload the instance before deleting.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlProductProviderBase.Find(netTiers.Petshop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Product objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlProductProviderBase.GetAll(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Product objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlProductProviderBase.GetPaged(netTiers.Petshop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Product objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlProductProviderBase.GetByCategoryId(netTiers.Petshop.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Product_Category key.
            	FK_Product_Category Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="categoryId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Product objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlProductProviderBase.GetById(netTiers.Petshop.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Product index.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Product"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlProductProviderBase.BulkInsert(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Product})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the netTiers.Petshop.Entities.Product object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlProductProviderBase.Insert(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.Product)">
            <summary>
            	Inserts a netTiers.Petshop.Entities.Product object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="entity">netTiers.Petshop.Entities.Product object to insert.</param>
            <remarks>
            	After inserting into the datasource, the netTiers.Petshop.Entities.Product object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlProductProviderBase.Update(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.Product)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="entity">netTiers.Petshop.Entities.Product object to update.</param>
            <remarks>
            	After updating the datasource, the netTiers.Petshop.Entities.Product object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlProductProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlProductProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlProductProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlOrderStatusProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:netTiers.Petshop.Entities.OrderStatus"/> entity.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlOrderStatusProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:netTiers.Petshop.Entities.OrderStatus"/> entity.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrderStatusProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlOrderStatusProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrderStatusProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlOrderStatusProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrderStatusProviderBase.Delete(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32,System.Byte[])">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="orderId">. Primary Key.</param>	
            <param name="lineNum">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="timestamp">The timestamp field used for concurrency check.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
            <exception cref="T:System.Data.DBConcurrencyException">The record has been modified by an other user. Please reload the instance before deleting.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrderStatusProviderBase.Find(netTiers.Petshop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.OrderStatus objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrderStatusProviderBase.GetAll(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.OrderStatus objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrderStatusProviderBase.GetPaged(netTiers.Petshop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.OrderStatus objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrderStatusProviderBase.GetByOrderId(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK__OrderStat__Order__164452B1 key.
            	FK__OrderStat__Order__164452B1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="orderId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.OrderStatus objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrderStatusProviderBase.GetByOrderStatusId(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_OrderStatus_OrderStatusType key.
            	FK_OrderStatus_OrderStatusType Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="orderStatusId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.OrderStatus objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrderStatusProviderBase.GetByLineNumOrderId(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PkOrderStatus index.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="orderId"></param>
            <param name="lineNum"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.OrderStatus"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrderStatusProviderBase.BulkInsert(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.OrderStatus})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the netTiers.Petshop.Entities.OrderStatus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrderStatusProviderBase.Insert(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.OrderStatus)">
            <summary>
            	Inserts a netTiers.Petshop.Entities.OrderStatus object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="entity">netTiers.Petshop.Entities.OrderStatus object to insert.</param>
            <remarks>
            	After inserting into the datasource, the netTiers.Petshop.Entities.OrderStatus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrderStatusProviderBase.Update(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.OrderStatus)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="entity">netTiers.Petshop.Entities.OrderStatus object to update.</param>
            <remarks>
            	After updating the datasource, the netTiers.Petshop.Entities.OrderStatus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlOrderStatusProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlOrderStatusProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlOrderStatusProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrderStatusProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlOrderStatusProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlCreditCardProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:netTiers.Petshop.Entities.CreditCard"/> entity.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlCreditCardProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:netTiers.Petshop.Entities.CreditCard"/> entity.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCreditCardProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlCreditCardProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCreditCardProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlCreditCardProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCreditCardProviderBase.Delete(netTiers.Petshop.Data.TransactionManager,System.Guid,System.Byte[])">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="timestamp">The timestamp field used for concurrency check.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
            <exception cref="T:System.Data.DBConcurrencyException">The record has been modified by an other user. Please reload the instance before deleting.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCreditCardProviderBase.Find(netTiers.Petshop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.CreditCard objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCreditCardProviderBase.GetAll(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.CreditCard objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCreditCardProviderBase.GetPaged(netTiers.Petshop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.CreditCard objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCreditCardProviderBase.GetById(netTiers.Petshop.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CreditCard index.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.CreditCard"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCreditCardProviderBase.BulkInsert(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.CreditCard})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the netTiers.Petshop.Entities.CreditCard object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCreditCardProviderBase.Insert(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.CreditCard)">
            <summary>
            	Inserts a netTiers.Petshop.Entities.CreditCard object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="entity">netTiers.Petshop.Entities.CreditCard object to insert.</param>
            <remarks>
            	After inserting into the datasource, the netTiers.Petshop.Entities.CreditCard object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCreditCardProviderBase.Update(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.CreditCard)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="entity">netTiers.Petshop.Entities.CreditCard object to update.</param>
            <remarks>
            	After updating the datasource, the netTiers.Petshop.Entities.CreditCard object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlCreditCardProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlCreditCardProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlCreditCardProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCreditCardProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlCreditCardProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:netTiers.Petshop.Data.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:netTiers.Petshop.Data.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:netTiers.Petshop.Data.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:netTiers.Petshop.Data.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:netTiers.Petshop.Data.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlOrdersProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:netTiers.Petshop.Entities.Orders"/> entity.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlOrdersProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:netTiers.Petshop.Entities.Orders"/> entity.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrdersProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlOrdersProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrdersProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlOrdersProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrdersProviderBase.Delete(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Byte[])">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="orderId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="timestamp">The timestamp field used for concurrency check.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
            <exception cref="T:System.Data.DBConcurrencyException">The record has been modified by an other user. Please reload the instance before deleting.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrdersProviderBase.Find(netTiers.Petshop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Orders objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrdersProviderBase.GetAll(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Orders objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrdersProviderBase.GetPaged(netTiers.Petshop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Orders objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrdersProviderBase.GetByAccountId(netTiers.Petshop.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Orders_Account key.
            	FK_Orders_Account Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="accountId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Orders objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrdersProviderBase.GetByCourierId(netTiers.Petshop.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Orders_Courier key.
            	FK_Orders_Courier Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="courierId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Orders objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrdersProviderBase.GetByCreditCardId(netTiers.Petshop.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Orders_CreditCard key.
            	FK_Orders_CreditCard Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="creditCardId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Orders objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrdersProviderBase.GetByOrderId(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__Orders__0CBAE877 index.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="orderId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Orders"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrdersProviderBase.BulkInsert(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Orders})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the netTiers.Petshop.Entities.Orders object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrdersProviderBase.Insert(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.Orders)">
            <summary>
            	Inserts a netTiers.Petshop.Entities.Orders object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="entity">netTiers.Petshop.Entities.Orders object to insert.</param>
            <remarks>
            	After inserting into the datasource, the netTiers.Petshop.Entities.Orders object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrdersProviderBase.Update(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.Orders)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="entity">netTiers.Petshop.Entities.Orders object to update.</param>
            <remarks>
            	After updating the datasource, the netTiers.Petshop.Entities.Orders object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlOrdersProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlOrdersProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlOrdersProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrdersProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlOrdersProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlInventoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:netTiers.Petshop.Entities.Inventory"/> entity.
            </summary>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlInventoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:netTiers.Petshop.Entities.Inventory"/> entity.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlInventoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlInventoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlInventoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlInventoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlInventoryProviderBase.Delete(netTiers.Petshop.Data.TransactionManager,System.Guid,System.Guid,System.Byte[])">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="itemId">. Primary Key.</param>	
            <param name="suppId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="timestamp">The timestamp field used for concurrency check.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
            <exception cref="T:System.Data.DBConcurrencyException">The record has been modified by an other user. Please reload the instance before deleting.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlInventoryProviderBase.Find(netTiers.Petshop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Inventory objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlInventoryProviderBase.GetAll(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Inventory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlInventoryProviderBase.GetPaged(netTiers.Petshop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Inventory objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlInventoryProviderBase.GetByItemId(netTiers.Petshop.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Inventory_Item key.
            	FK_Inventory_Item Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="itemId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Inventory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlInventoryProviderBase.GetBySuppId(netTiers.Petshop.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Inventory_Supplier key.
            	FK_Inventory_Supplier Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="suppId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Inventory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlInventoryProviderBase.GetByItemIdSuppId(netTiers.Petshop.Data.TransactionManager,System.Guid,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Inventory index.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="itemId"></param>
            <param name="suppId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Inventory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlInventoryProviderBase.BulkInsert(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Inventory})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the netTiers.Petshop.Entities.Inventory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlInventoryProviderBase.Insert(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.Inventory)">
            <summary>
            	Inserts a netTiers.Petshop.Entities.Inventory object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="entity">netTiers.Petshop.Entities.Inventory object to insert.</param>
            <remarks>
            	After inserting into the datasource, the netTiers.Petshop.Entities.Inventory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlInventoryProviderBase.Update(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.Inventory)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="entity">netTiers.Petshop.Entities.Inventory object to update.</param>
            <remarks>
            	After updating the datasource, the netTiers.Petshop.Entities.Inventory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlInventoryProviderBase.GetMaxSupplier(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Guid})">
            <summary>
            This method wrap the 'CSP_Inventory_GetMaxSupplier' stored procedure. 
            </summary>	
            <param name="itemId"> A <c>System.Guid?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:netTiers.Petshop.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlInventoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlInventoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlInventoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlInventoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlInventoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlSupplierProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:netTiers.Petshop.Entities.Supplier"/> entity.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlSupplierProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlSupplierProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlSupplierProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlSupplierProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlSupplierProviderBase.GetByItemIdFromInventory(netTiers.Petshop.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Supplier objects from the datasource by ItemId in the
            	Inventory table. Table Supplier is related to table Item
            	through the (M:N) relationship defined in the Inventory table.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="itemId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns a <c>TList</c> of Supplier objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlSupplierProviderBase.Delete(netTiers.Petshop.Data.TransactionManager,System.Guid,System.Byte[])">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="suppId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="timestamp">The timestamp field used for concurrency check.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
            <exception cref="T:System.Data.DBConcurrencyException">The record has been modified by an other user. Please reload the instance before deleting.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlSupplierProviderBase.Find(netTiers.Petshop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Supplier objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlSupplierProviderBase.GetAll(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Supplier objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlSupplierProviderBase.GetPaged(netTiers.Petshop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Supplier objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlSupplierProviderBase.GetBySuppId(netTiers.Petshop.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__Supplier__0425A276 index.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="suppId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Supplier"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlSupplierProviderBase.BulkInsert(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Supplier})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the netTiers.Petshop.Entities.Supplier object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlSupplierProviderBase.Insert(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.Supplier)">
            <summary>
            	Inserts a netTiers.Petshop.Entities.Supplier object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="entity">netTiers.Petshop.Entities.Supplier object to insert.</param>
            <remarks>
            	After inserting into the datasource, the netTiers.Petshop.Entities.Supplier object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlSupplierProviderBase.Update(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.Supplier)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="entity">netTiers.Petshop.Entities.Supplier object to update.</param>
            <remarks>
            	After updating the datasource, the netTiers.Petshop.Entities.Supplier object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlSupplierProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlSupplierProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlSupplierProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlLineItemProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:netTiers.Petshop.Entities.LineItem"/> entity.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlLineItemProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlLineItemProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlLineItemProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlLineItemProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlLineItemProviderBase.Delete(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32,System.Byte[])">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="orderId">. Primary Key.</param>	
            <param name="lineNum">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="timestamp">The timestamp field used for concurrency check.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
            <exception cref="T:System.Data.DBConcurrencyException">The record has been modified by an other user. Please reload the instance before deleting.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlLineItemProviderBase.Find(netTiers.Petshop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.LineItem objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlLineItemProviderBase.GetAll(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.LineItem objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlLineItemProviderBase.GetPaged(netTiers.Petshop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.LineItem objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlLineItemProviderBase.GetByOrderId(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK__LineItem__OrderI__1367E606 key.
            	FK__LineItem__OrderI__1367E606 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="orderId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.LineItem objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlLineItemProviderBase.GetByItemId(netTiers.Petshop.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LineItem_Item key.
            	FK_LineItem_Item Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="itemId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.LineItem objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlLineItemProviderBase.GetByLineNumOrderId(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PkLineItem index.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="orderId"></param>
            <param name="lineNum"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.LineItem"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlLineItemProviderBase.BulkInsert(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.LineItem})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the netTiers.Petshop.Entities.LineItem object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlLineItemProviderBase.Insert(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.LineItem)">
            <summary>
            	Inserts a netTiers.Petshop.Entities.LineItem object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="entity">netTiers.Petshop.Entities.LineItem object to insert.</param>
            <remarks>
            	After inserting into the datasource, the netTiers.Petshop.Entities.LineItem object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlLineItemProviderBase.Update(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.LineItem)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="entity">netTiers.Petshop.Entities.LineItem object to update.</param>
            <remarks>
            	After updating the datasource, the netTiers.Petshop.Entities.LineItem object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlLineItemProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlLineItemProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlLineItemProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlOrderStatusTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:netTiers.Petshop.Entities.OrderStatusType"/> entity.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrderStatusTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlOrderStatusTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrderStatusTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlOrderStatusTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrderStatusTypeProviderBase.Delete(netTiers.Petshop.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="orderStatusId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrderStatusTypeProviderBase.Find(netTiers.Petshop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.OrderStatusType objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrderStatusTypeProviderBase.GetAll(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.OrderStatusType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrderStatusTypeProviderBase.GetPaged(netTiers.Petshop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.OrderStatusType objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrderStatusTypeProviderBase.GetByOrderStatusId(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__OrderStatusType__7C8480AE index.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="orderStatusId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.OrderStatusType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrderStatusTypeProviderBase.GetByOrderStatus(netTiers.Petshop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_OrderStatusType index.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="orderStatus"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.OrderStatusType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrderStatusTypeProviderBase.BulkInsert(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.OrderStatusType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the netTiers.Petshop.Entities.OrderStatusType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrderStatusTypeProviderBase.Insert(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.OrderStatusType)">
            <summary>
            	Inserts a netTiers.Petshop.Entities.OrderStatusType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="entity">netTiers.Petshop.Entities.OrderStatusType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the netTiers.Petshop.Entities.OrderStatusType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrderStatusTypeProviderBase.Update(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.OrderStatusType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="entity">netTiers.Petshop.Entities.OrderStatusType object to update.</param>
            <remarks>
            	After updating the datasource, the netTiers.Petshop.Entities.OrderStatusType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlOrderStatusTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlOrderStatusTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlOrderStatusTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlItemProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:netTiers.Petshop.Entities.Item"/> entity.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlItemProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlItemProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlItemProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlItemProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlItemProviderBase.GetBySuppIdFromInventory(netTiers.Petshop.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Item objects from the datasource by SuppId in the
            	Inventory table. Table Item is related to table Supplier
            	through the (M:N) relationship defined in the Inventory table.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="suppId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns a <c>TList</c> of Item objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlItemProviderBase.Delete(netTiers.Petshop.Data.TransactionManager,System.Guid,System.Byte[])">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="timestamp">The timestamp field used for concurrency check.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
            <exception cref="T:System.Data.DBConcurrencyException">The record has been modified by an other user. Please reload the instance before deleting.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlItemProviderBase.Find(netTiers.Petshop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Item objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlItemProviderBase.GetAll(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Item objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlItemProviderBase.GetPaged(netTiers.Petshop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Item objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlItemProviderBase.GetByProductId(netTiers.Petshop.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Item_Product key.
            	FK_Item_Product Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="productId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Item objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlItemProviderBase.GetById(netTiers.Petshop.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Item index.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Item"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlItemProviderBase.BulkInsert(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Item})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the netTiers.Petshop.Entities.Item object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlItemProviderBase.Insert(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.Item)">
            <summary>
            	Inserts a netTiers.Petshop.Entities.Item object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="entity">netTiers.Petshop.Entities.Item object to insert.</param>
            <remarks>
            	After inserting into the datasource, the netTiers.Petshop.Entities.Item object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlItemProviderBase.Update(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.Item)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="entity">netTiers.Petshop.Entities.Item object to update.</param>
            <remarks>
            	After updating the datasource, the netTiers.Petshop.Entities.Item object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlItemProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlItemProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlItemProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlCourierProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:netTiers.Petshop.Entities.Courier"/> entity.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCourierProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlCourierProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCourierProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlCourierProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCourierProviderBase.Delete(netTiers.Petshop.Data.TransactionManager,System.Guid,System.Byte[])">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="courierId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="timestamp">The timestamp field used for concurrency check.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
            <exception cref="T:System.Data.DBConcurrencyException">The record has been modified by an other user. Please reload the instance before deleting.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCourierProviderBase.Find(netTiers.Petshop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Courier objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCourierProviderBase.GetAll(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Courier objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCourierProviderBase.GetPaged(netTiers.Petshop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Courier objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCourierProviderBase.GetByCourierId(netTiers.Petshop.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Courier index.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="courierId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Courier"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCourierProviderBase.BulkInsert(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Courier})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the netTiers.Petshop.Entities.Courier object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCourierProviderBase.Insert(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.Courier)">
            <summary>
            	Inserts a netTiers.Petshop.Entities.Courier object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="entity">netTiers.Petshop.Entities.Courier object to insert.</param>
            <remarks>
            	After inserting into the datasource, the netTiers.Petshop.Entities.Courier object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCourierProviderBase.Update(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.Courier)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="entity">netTiers.Petshop.Entities.Courier object to update.</param>
            <remarks>
            	After updating the datasource, the netTiers.Petshop.Entities.Courier object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlCourierProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlCourierProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlCourierProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlLineItemProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:netTiers.Petshop.Entities.LineItem"/> entity.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlLineItemProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlLineItemProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <c cref="T:netTiers.Petshop.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(netTiers.Petshop.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(netTiers.Petshop.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(netTiers.Petshop.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(netTiers.Petshop.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(netTiers.Petshop.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(netTiers.Petshop.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(netTiers.Petshop.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(netTiers.Petshop.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(netTiers.Petshop.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(netTiers.Petshop.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(netTiers.Petshop.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(netTiers.Petshop.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <c cref="T:netTiers.Petshop.Data.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.AccountProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:netTiers.Petshop.Entities.Account"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SqlAccountProvider">
            <summary>
            Gets the current <c cref="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SqlAccountProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.CategoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:netTiers.Petshop.Entities.Category"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SqlCategoryProvider">
            <summary>
            Gets the current <c cref="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SqlCategoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.CourierProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:netTiers.Petshop.Entities.Courier"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SqlCourierProvider">
            <summary>
            Gets the current <c cref="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SqlCourierProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.CreditCardProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:netTiers.Petshop.Entities.CreditCard"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SqlCreditCardProvider">
            <summary>
            Gets the current <c cref="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SqlCreditCardProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.InventoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:netTiers.Petshop.Entities.Inventory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SqlInventoryProvider">
            <summary>
            Gets the current <c cref="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SqlInventoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ItemProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:netTiers.Petshop.Entities.Item"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SqlItemProvider">
            <summary>
            Gets the current <c cref="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SqlItemProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.LineItemProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:netTiers.Petshop.Entities.LineItem"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SqlLineItemProvider">
            <summary>
            Gets the current <c cref="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SqlLineItemProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.OrdersProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:netTiers.Petshop.Entities.Orders"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SqlOrdersProvider">
            <summary>
            Gets the current <c cref="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SqlOrdersProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.OrderStatusProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:netTiers.Petshop.Entities.OrderStatus"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SqlOrderStatusProvider">
            <summary>
            Gets the current <c cref="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SqlOrderStatusProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.OrderStatusTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:netTiers.Petshop.Entities.OrderStatusType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SqlOrderStatusTypeProvider">
            <summary>
            Gets the current <c cref="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SqlOrderStatusTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ProductProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:netTiers.Petshop.Entities.Product"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SqlProductProvider">
            <summary>
            Gets the current <c cref="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SqlProductProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SupplierProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:netTiers.Petshop.Entities.Supplier"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SqlSupplierProvider">
            <summary>
            Gets the current <c cref="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SqlSupplierProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.ExtendedItemProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:netTiers.Petshop.Entities.ExtendedItem"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SqlExtendedItemProvider">
            <summary>
            Gets the current <c cref="P:netTiers.Petshop.Data.SqlClient.SqlNetTiersProvider.SqlExtendedItemProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlProductProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:netTiers.Petshop.Entities.Product"/> entity.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlProductProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlProductProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlOrderStatusTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:netTiers.Petshop.Entities.OrderStatusType"/> entity.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlOrderStatusTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlOrderStatusTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlSupplierProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:netTiers.Petshop.Entities.Supplier"/> entity.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlSupplierProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlSupplierProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlCategoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:netTiers.Petshop.Entities.Category"/> entity.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCategoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlCategoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCategoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlCategoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCategoryProviderBase.Delete(netTiers.Petshop.Data.TransactionManager,System.Guid,System.Byte[])">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="timestamp">The timestamp field used for concurrency check.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
            <exception cref="T:System.Data.DBConcurrencyException">The record has been modified by an other user. Please reload the instance before deleting.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCategoryProviderBase.Find(netTiers.Petshop.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Category objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCategoryProviderBase.GetAll(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Category objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCategoryProviderBase.GetPaged(netTiers.Petshop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of netTiers.Petshop.Entities.Category objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCategoryProviderBase.GetById(netTiers.Petshop.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Category index.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:netTiers.Petshop.Entities.Category"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCategoryProviderBase.BulkInsert(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.TList{netTiers.Petshop.Entities.Category})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the netTiers.Petshop.Entities.Category object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCategoryProviderBase.Insert(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.Category)">
            <summary>
            	Inserts a netTiers.Petshop.Entities.Category object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="entity">netTiers.Petshop.Entities.Category object to insert.</param>
            <remarks>
            	After inserting into the datasource, the netTiers.Petshop.Entities.Category object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCategoryProviderBase.Update(netTiers.Petshop.Data.TransactionManager,netTiers.Petshop.Entities.Category)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="entity">netTiers.Petshop.Entities.Category object to update.</param>
            <remarks>
            	After updating the datasource, the netTiers.Petshop.Entities.Category object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlCategoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlCategoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlCategoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlExtendedItemProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ExtendedItem objects.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlExtendedItemProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlExtendedItemProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlExtendedItemProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlExtendedItemProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlExtendedItemProviderBase.GetAll(netTiers.Petshop.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ExtendedItem objects.</returns>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlExtendedItemProviderBase.Get(netTiers.Petshop.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source</param>
            <param name="transactionManager"><see cref="T:netTiers.Petshop.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ExtendedItem objects.</returns>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlExtendedItemProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlExtendedItemProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:netTiers.Petshop.Data.SqlClient.SqlExtendedItemProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlItemProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:netTiers.Petshop.Entities.Item"/> entity.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlItemProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlItemProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlExtendedItemProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:netTiers.Petshop.Entities.ExtendedItem"/> entity.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlExtendedItemProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlExtendedItemProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlCategoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:netTiers.Petshop.Entities.Category"/> entity.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCategoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlCategoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlCourierProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:netTiers.Petshop.Entities.Courier"/> entity.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlCourierProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlCourierProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:netTiers.Petshop.Data.SqlClient.SqlAccountProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:netTiers.Petshop.Entities.Account"/> entity.
            </summary>
        </member>
        <member name="M:netTiers.Petshop.Data.SqlClient.SqlAccountProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:netTiers.Petshop.Data.SqlClient.SqlAccountProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
    </members>
</doc>
