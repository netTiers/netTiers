<%--
 * $Id: IEntity.cst,v 1.3 2006/01/22 20:22:38 jroland Exp $
 * Last modified by $Author$
 * Last modified at $Date$
 * $Revision$
--%>
<%@ CodeTemplate Src="..\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="The interface that each business object of the domain implements."%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>

<%@ Property Name="NameSpace" Optional="True" Type="System.String" Category="Style" Description="Object Namespace." %>
<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Context" Description="Tables that the stored procedures should be based on." %>
<%@ Property Name="SourceViews" Type="SchemaExplorer.ViewSchemaCollection" Category="Context" Description="Tables that the stored procedures should be based on." %>
<%@ Assembly Name="SchemaExplorer" %>
<%		
	ColumnSchemaCollection commonColumns = new ColumnSchemaCollection();
		
	/* 
		Search common columns.
	*/		
	if (SourceTables.Count > 0)
	{
		foreach(ColumnSchema col in SourceTables[0].Columns)
		{
			bool isInEveryTable = true;
			
			//System.Diagnostics.Debug.Write (col.Name + ":" + Environment.NewLine);
			
			for (int k = 1; k < SourceTables.Count ; k++)
			{
				TableSchema table = SourceTables[k];
				bool isInThisTable = false;
					
				// scan each column of this table to find this column
				foreach (ColumnSchema tCol in table.Columns)
				{					
					if (col.Name == tCol.Name && col.SystemType == tCol.SystemType && col.AllowDBNull == tCol.AllowDBNull)
					{
						isInThisTable= true;
					}
				}
				
				//System.Diagnostics.Debug.Write ("\t" + table.Name + " : " + isInThisTable.ToString() + Environment.NewLine);					
				isInEveryTable = isInEveryTable && isInThisTable;			
			}
			
			// If this column is present in every table, put it in the IEnity interface.
			if (isInEveryTable)
			{
				commonColumns.Add(col);
			}
		}
		
	}
	
%>
using System;
using System.ComponentModel;

namespace <%=NameSpace%>
{
	/// <summary>
    /// List of possible state for an entity.
    /// </summary>
	public enum EntityState
    {
        /// <summary>
        /// Entity is unchanged
        /// </summary>
        Unchanged=0, 

        /// <summary>
        /// Entity is new
        /// </summary>
        Added=1, 

        /// <summary>
        /// Entity has been modified
        /// </summary>
        Changed=2, 

        /// <summary>
        /// Entity has been deleted
        /// </summary>
        Deleted=3
    }
	
	/// <summary>
	/// The interface that each business object of the model implements.
	/// </summary>
	public interface IEntity
	{
		/// <summary>
		///	The name of the underlying database table.
		/// </summary>
		string TableName { get;}

		/// <summary>
		///	Indicates if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		bool IsDirty {get;}
		
		/// <summary>
		///	Indicates if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		bool IsNew {get;}

		/// <summary>
		/// True if object has been marked as deleted. ReadOnly.
		/// </summary>
		bool IsDeleted {get;}
	
		/// <summary>
		/// Returns one of EntityState enum values - intended to replace IsNew, IsDirty, IsDeleted.
		/// </summary>
		EntityState EntityState {get;}
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		void AcceptChanges();
		
		/// <summary>
		/// Marks entity to be deleted.
		/// </summary>
		void MarkToDelete();
				
		/// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
		object ParentCollection{get;set;}
		
		
		<% 
		foreach (ColumnSchema col in commonColumns)
		{ 
			Response.Write ("\t\t/// <summary>" + Environment.NewLine);			
			Response.Write ("\t\t/// " + GetColumnXmlComment(col,2) + Environment.NewLine);			
			Response.Write ("\t\t/// </summary>" + Environment.NewLine);			
			Response.Write("\t\t" + GetCSType(col) + " " + GetPropertyName(col.Name) + "{ get; }" + Environment.NewLine + Environment.NewLine);
		}
		%>
	}
}
