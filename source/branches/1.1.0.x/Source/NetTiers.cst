<%--
 * $Id: NetTiers.cst,v 1.20 2006/03/04 04:18:28 jcteague Exp $
 * Last modified by $Author$
 * Last modified at $Date$
 * $Revision$

	Description:
		NetTiers main templates. Internally call sub templates to genereate entities and dal.	
	
	Originally written By Ryan HurdonL
	ReWritten and maintained by John Roland since Oct. 2004
--%>
<%@ CodeTemplate Src="CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="Text" Description="NetTiers main template." Debug="True"%>

<%-- Namespaces Category --%>
<%@ Property Name="NameSpace" Optional="False" Type="System.String" Category="Namespaces" Description="Root namespace for generated c# classes." %>
<%@ Property Name="BusinessLogicLayerNameSpace" Type="System.String" Category="Namespaces" Description="The sub namespace that is added to the root namespace for the entities." Default="" Optional="true" %>
<%@ Property Name="DataAccessLayerNameSpace" Type="System.String" Category="Namespaces" Description="The sub namespace for the Data access layer components classes." Default="DataAccessLayer" %>
<%@ Property Name="UnitTestsNameSpace" Type="System.String" Category="Namespaces" Description="The sub namespace for the UnitTests classes." Default="UnitTests" %>

<%-- General Category --%>
<%@ Property Name="vsnetIntegration" Optional="False" Type="VSNetIntegration" Category="General" Description="Indicates the kind of VS.NET is wanted." Default="SeparatedProjects" %>
<%@ Property Name="vsnetVersion" Optional="False" Type="VSNetVersion" Category="General" Description="Indicates the VS.NET version." Default="v2003" %>

<%@ Property Name="CompanyName" Optional="True" Type="System.String" Category="Documentation" Description="The name of your company." %>
<%@ Property Name="CompanyURL" Optional="True" Type="System.String" Category="Documentation" Description="The URL of your company." %>

<%@ Property Name="ExecuteSql" Type="System.Boolean" Default="False" Category="General" Description="Indicates if sql file have to be run on the database" %>
<%@ Property Name="SQLFolderName" Type="System.String" Category="General" Description="The sub folder to output the SQL scripts" Default="SQL" %>

<%@ Property Name="IncludeUnitTest" Type="System.Boolean" Default="False" Category="General" Description="Indicates whether the Unit tests should be generated." %>

<%-- Datasource --%>
<%@ Property Name="EntireDatabase" Type="System.Boolean" Category="DataSource" Description="Should the entire database have CRUD procedures scripted?" %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Optional="False" Category="DataSource" 	Description="Database that the stored procedures should be based on." %>

<%-- Options --%>
<%@ Property Name="IncludeCustoms" Type="System.Boolean" Default="True" Category="CRUD Options" Description="If true custom stored procedures (that starts with '_TableName_') will be detected and generated." %>
<%@ Property Name="IncludeDrop" Type="System.Boolean" Default="True" Category="CRUD Options" Description="If true drop statements will be generated to drop existing stored procedures." %>
<%@ Property Name="IncludeInsert" Type="System.Boolean" Default="True" Category="CRUD Options" Description="If true insert procedures will be generated." %>
<%@ Property Name="IncludeUpdate" Type="System.Boolean" Default="True" Category="CRUD Options" Description="If true update procedures will be generated." %>
<%@ Property Name="IncludeSave" Type="System.Boolean" Default="True" Category="CRUD Options" Description="If true combined insert/update/delete procedures will be generated. In consequence, if this option is selected IncludeInsert, IncludeUpdate and IncludeDelete are automatically activated." %>
<%@ Property Name="IncludeDelete" Type="System.Boolean" Default="True" Category="CRUD Options" Description="If true delete procedures will be generated." %>
<%@ Property Name="IncludeGet" Type="System.Boolean" Default="True" Category="CRUD Options" Description="If true get procedures will be generated." %>
<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="CRUD Options" Description="If true getlist procedures will be generated." %>	
<%@ Property Name="IncludeGetListByFK" Type="System.Boolean" Default="True" Category="CRUD Options" Description="If true get statements will be generated." %>
<%@ Property Name="IncludeGetListByIX" Type="System.Boolean" Default="True" Category="CRUD Options" Description="If true getlist statements will be generated." %>
<%@ Property Name="IncludeFind" Type="System.Boolean" Default="False" Category="CRUD Options" Description="If true find statements will be generated." %>
<%@ Property Name="IncludeManyToMany" Type="System.Boolean" Default="True" Category="CRUD Options" Description="If true select statements will be generated for any many to many relationship." %>
<%@ Property Name="IncludeRelations" Type="System.Boolean" Default="True" Category="CRUD Options" Description="If true select statements will be generated for any many to many relationship." %>
<%@ Property Name="IsolationLevel" Type="TransactionIsolationLevelEnum" Default="None" Category="CRUD Options" Description="Isolation level to use in generated procedures." %>
<%@ Property Name="ExcludeFields" Type="System.String[]" Optional="True" Category="CRUD Options" Description="Enter a list of fields to exclude from parameter generation" %>

<%-- Style of stored procedures --%>
<%@ Property Name="InsertSuffix" Type="System.String" Default="_Insert" Category="Stored procedures style" Description="Suffix to use for all generated INSERT stored procedures." %>
<%@ Property Name="UpdateSuffix" Type="System.String" Default="_Update" Category="Stored procedures style" Description="Suffix to use for all generated UPDATE stored procedures." %>
<%@ Property Name="DeleteSuffix" Type="System.String" Default="_Delete" Category="Stored procedures style" Description="Suffix to use for all generated DELETE stored procedures." %>
<%@ Property Name="SelectSuffix" Type="System.String" Default="_Get" Category="Stored procedures style" Description="Suffix to use for all generated SELECT stored procedures." %>
<%@ Property Name="SelectAllSuffix" Type="System.String" Default="_List" Category="Stored procedures style" Description="Suffix to use for all generated SELECT stored procedures." %>
<%@ Property Name="FindSuffix" Type="System.String" Default="_Find" Category="Stored procedures style"Description="Suffix to use for all generated selective SELECT stored procedures." %>
<%@ Property Name="ProcedurePrefix" Type="System.String" Category="Stored procedures style" Description="The prefix to attach to the stored procs" Default="" Optional="True" %>
<%@ Property Name="GrantUser" Type="System.String" Category="Stored procedures style" Description="Optional user or role to GRANT EXEC Procedure permissions to" Default="" Optional="True" %>


<%-- webservice --%>
<%@ Property Name="GenerateWebservice" Type="System.Boolean" Default="false" Category="WebService" Description="Indicates if the webservice dataaccesslayer should be generated" %>
<%-- Property Name="WebServiceVirtualDirectoryName" Type="System.String" Category="WebService" Description="" Default="NetTiersWS" --%>
<%@ Property Name="WebServiceUrl" Type="System.String" Category="WebService" Description="The base url for the webservice, eg: http://localhost/NetTiersWS" Default="" Optional="true"%>

<%-- ASP.Net 2.0 Admin --%>
<%@ Property Name="GenerateWebAdmin" Type="System.Boolean" Default="false" Category="WebAdmin2.0" Description="Indicates if the web admin user controls should be generated." %>
<%@ Property Name="WebAdminOutputPath" Type="System.String" Category="WebAdmin2.0" Description="The full path for the the WebAdmin files" Optional="true"%>

<%@ Property Name="ViewReport" Type="System.Boolean" Default="True" Category="General" Description="Indicates if the html report should launched at the end of the generation." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Assembly Name="System.Web" %>
<%@ Assembly Name="System.Xml" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import NameSpace="System.Text" %>
<%@ Import NameSpace="System.Text.RegularExpressions" %>
<%@ Import NameSpace="System.Diagnostics" %>
<%@ Import NameSpace="System.Xml" %>
<%@ Import NameSpace="System.Xml.Xsl" %>
<%@ Import NameSpace="System.Xml.XPath" %>

<script runat="template">
	private string _outputDirectory = String.Empty;
	private string _WebServiceOutputPath = String.Empty; 
	
	private TableSchemaCollection _sourceTables;
	private ViewSchemaCollection _sourceViews;
	private TableSchemaCollection _enumTables;
   
		
	[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
	[CodeTemplateProperty(CodeTemplatePropertyOption.Optional)]
	[Category("General")]
	[Description("The directory to output the results to.")]
	[DefaultValue("")]
	public string OutputDirectory 
	{ 
		get
		{
			if (_outputDirectory.Length == 0)
			{
				return @"c:\NetTiers\" + (SourceDatabase != null ? SourceDatabase.Name : "Output");
			}
			else
			{
				return _outputDirectory;
			}
		}
		set
		{
			if (value.EndsWith("\\")) value = value.Substring(0, value.Length - 1);
			_outputDirectory = value;
		} 
	}
	
	[Category("DataSource")]
	[Description("The tables to generate.")]
	[CodeTemplateProperty(CodeTemplatePropertyOption.Optional)]
	public TableSchemaCollection SourceTables
	{
		get
		{
			if (this._sourceTables != null && this._sourceTables.Count > 0 )
				return this._sourceTables;
			else
				return null;
		}
		set
		{
			this._sourceTables = value;
		}
	}
	
	[Category("DataSource")]
	[Description("The tables to generate as enums.")]
	[CodeTemplateProperty(CodeTemplatePropertyOption.Optional)]
	public TableSchemaCollection EnumTables
	{
		get
		{
			if (this._enumTables != null && this._enumTables.Count > 0 )
				return this._enumTables;
			else
				return null;
		}
		set
		{			
			this._enumTables = value;
		}
	}
	
	[Category("DataSource")]
	[Description("The view to generate.")]
	[CodeTemplateProperty(CodeTemplatePropertyOption.Optional)]
	public ViewSchemaCollection SourceViews
	{
		get
		{
			if (this._sourceViews != null && this._sourceViews.Count > 0 )
				return this._sourceViews;
			else
				return null;
		}
		set
		{
			this._sourceViews = value;
		}
	}
	
	#region "Properties used by the wizard to report progression"
	
	private int _counter = 0;
	[Browsable(false)]
	public int Counter
	{
		get {return this._counter;}
	}
	
	private int _CurrentObjectIndex = 0;
	[Browsable(false)]
	public int CurrentObjectIndex
	{
		get {return this._CurrentObjectIndex;}
	}
	
	private string _CurrentPhase = string.Empty;
	[Browsable(false)]
	public string CurrentPhase
	{
		get {return this._CurrentPhase;}		
	}
	
	[Browsable(false)]
	public int TotalObjects
	{
		get {return (SourceTables != null ? SourceTables.Count : 0) + (SourceViews != null ? SourceViews.Count : 0);}		
	}
	
	private string _CurrentFileName = string.Empty;
	[Browsable(false)]
	public string CurrentFileName
	{
		get {return this._CurrentFileName;}		
	}
	
	[Browsable(false)]
	public int TotalTemplates
	{
		get {return _templatesFileNames.Length;}		
	}
		
	[Browsable(false)]
	public int CurrentTemplateIndex
	{
		get {return _CodeTemplates.Count;}		
	}	
	
	[Browsable(false)]
	public bool IsTargetingVisualStudio2003
	{
		get {return this.vsnetVersion == VSNetVersion.v2003;}
		set
		{
			if (value == true)
			{
				this.vsnetVersion = VSNetVersion.v2003;
			}
			else
			{
				this.vsnetVersion = VSNetVersion.v2005;
			}
		}	
	}
	
	
	#endregion
	
	[Category("General")]
	[Description("Should we use partials when generating .net 2.0 code?")]
	[CodeTemplateProperty(CodeTemplatePropertyOption.Optional)]
	public bool UsePartialClass
	{
		get
		{
			return _UsePartialClass;
		}
		set
		{
			_UsePartialClass = value;
		}
	}
	private bool _UsePartialClass;
	
	[Category("General")]
	[Description("Should overwrite partial stubs?")]
	[CodeTemplateProperty(CodeTemplatePropertyOption.Optional)]
	public bool OverwritePartialClassStub
	{
		get
		{
			return _OverwritePartialClassStub;
		}
		set
		{
			_OverwritePartialClassStub = value;
		}
	}
	private bool _OverwritePartialClassStub;

	
	[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
	[CodeTemplateProperty(CodeTemplatePropertyOption.Optional)]
	[Category("WebService")]
	[Description("The full path for the the WebService files. this path match with the webservice url.")]
	[DefaultValue("c:\\inetpub\\wwwroot\\WebServices")]
	public string WebServiceOutputPath 
	{ 
		get
		{
			//if (_outputDirectory.Length == 0) return this.CodeTemplateInfo.DirectoryName + "output";
			return _WebServiceOutputPath;
		}
		set
		{
			if (value.EndsWith("\\")) value = value.Substring(0, value.Length - 1);
			_WebServiceOutputPath = value;
		} 
	}
	
	
	public enum TransactionIsolationLevelEnum
	{
		None,
		ReadCommitted,
		ReadUncommitted,
		RepeatableRead,
		Serializable
	}
	
	public enum VSNetVersion
	{
		v2003
		,v2005
	}
	
	public enum VSNetIntegration
	{
		None,
		SingleProject,
		SeparatedProjects
	}
	/*
	[Browsable(false)]
	public VSNetIntegration vsnetIntegration
	{ 
		get { return VSNetIntegration.SeparatedProjects; }
	}*/
</script>


<script runat="template">
	private string sdkInstallRoot;
	
	public bool GenerateBusinessLogicLayer = true;
	
	public bool GenerateDataAccessLayer = true;
	
    public bool GenerateSql = true;
	
    
    // for the xml report
    public XmlDocument docOutput;
    public DateTime startTime = DateTime.Now;
	public DateTime lastTime = DateTime.Now;
    // end xml report
   
														
	private string[] _templatesFileNames = new string[] {
														"vsnet2003.project.cst",
														"vsnet2005.project.cst",
														"vsnet2003.solution.cst",
														"vsnet2005.solution.cst",
														"nAnt.cst",
														"AssemblyInfo.cst", 
																																										
														"Entities\\Enum.cst",
														"Entities\\IEntity.cst",
														"Entities\\Filter.cst",
														"Entities\\EntityHelper.cst",	
														"Entities\\EntityPropertyComparer.cst", 
														"Entities\\GenericTypeConverter.cst", 
														
														"Entities\\EntityBase.cst",
														"Entities\\EntityData.cst",
														"Entities\\Entity.cst",
														"Entities\\EntityCollectionBase.cst",
														"Entities\\EntityCollection.cst",
														
														"Entities\\Views\\EntityViewBase.cst",
														"Entities\\Views\\EntityView.cst",
														"Entities\\Views\\EntityViewCollectionBase.cst",
														"Entities\\Views\\EntityViewCollection.cst",
														
														"DataAccessLayer\\App.config.cst",
														"DataAccessLayer\\cachingConfiguration.config.cst",
														"DataAccessLayer\\dataconfiguration.config.cst",
														"DataAccessLayer\\nettiersconfigdata.config.cst", 
														
														"DataAccessLayer\\App.config.2005.cst",
														"DataAccessLayer\\cachingConfiguration.config.2005.cst",
														"DataAccessLayer\\dataconfiguration.config.2005.cst",
														"DataAccessLayer\\nettiersconfigdata.config.2005.cst", 
														
														"DataAccessLayer\\Configuration.cst",
														
																																										
														"DataAccessLayer\\DataRepository.cst",
														"DataAccessLayer\\Utility.cst",
														"DataAccessLayer\\TransactionManager.cst",
																																										
														"DataAccessLayer\\Bases\\DataProviderBase.cst",							
														
														"DataAccessLayer\\Bases\\EntityProviderBase.cst",														
														"DataAccessLayer\\Bases\\Views\\EntityViewProviderBase.cst",														
																																																							
														"DataAccessLayer.SqlClient\\SqlDataRepository.cst",
														"DataAccessLayer.SqlClient\\SqlDataProvider.cst",
														"DataAccessLayer.SqlClient\\SqlEntityProviderBase.cst",
														"DataAccessLayer.SqlClient\\SqlEntityProvider.cst",
														
														"DataAccessLayer.SqlClient\\StoredProcedureProvider.cst",
														"DataAccessLayer.SqlClient\\StoredProceduresXml.cst",
																												
														"DataAccessLayer.SqlClient\\Views\\SqlEntityViewProviderBase.cst",
														"DataAccessLayer.SqlClient\\Views\\SqlEntityViewProvider.cst",
														
														"DataAccessLayer.WebService\\WebService.cst",
														"DataAccessLayer.WebService\\WebInfo.cst",
														
														"DataAccessLayer.WebServiceClient\\WsDataProvider.cst",
														"DataAccessLayer.WebServiceClient\\WsEntityProvider.cst",
														"DataAccessLayer.WebServiceClient\\WsEntityProviderBase.cst",
														"DataAccessLayer.WebServiceClient\\Views\\WsEntityViewProvider.cst",
														"DataAccessLayer.WebServiceClient\\Views\\WsEntityViewProviderBase.cst",
														
																												
														"UnitTests\\EntityRepositoryTest.cst",
														"UnitTests\\EntityViewRepositoryTest.cst",
														
														"ASP.Net\\2.0\\AdminEntityUC_Designer.cst",
														"ASP.Net\\2.0\\AdminEntityUC_CodeBehind.cst"
														};
	
	// Compile and load all them in a collection
	private System.Collections.Hashtable _CodeTemplates = new System.Collections.Hashtable();
	
	
	public enum AccessibilityEnum
	{
	    Public,
	    Protected,
	    Internal,
	    ProtectedInternal,
	    Private
	}

public CodeTemplate CompileTemplate(string templateName)
{
	this._CurrentFileName = templateName;
		
	CodeTemplateCompiler compiler = new CodeTemplateCompiler(templateName);
	compiler.Compile();
	
	if (compiler.Errors.Count == 0)
	{
		return compiler.CreateInstance();
	}
	else
	{
		for (int i = 0; i < compiler.Errors.Count; i++)
		{
			Response.WriteLine(compiler.Errors[i].ToString());
		}
		return null;
	}
}

public void RenderToFile(string templateName, string path, bool overwrite)
{
	this._CurrentFileName = path;
	this.GetTemplate(templateName).RenderToFile(path, overwrite);
	this._counter++;
}

// load all the templates and put them into an hashtable
public void LoadTemplates()
{	
	foreach(string _templatesFileName in _templatesFileNames)
	{
		string key = System.IO.Path.GetFileName(_templatesFileName);
		
		if (_CodeTemplates.Contains(key))
		{
			continue;
		}
				
		_CodeTemplates.Add(key, this.CompileTemplate(this.CodeTemplateInfo.DirectoryName + _templatesFileName));
	
		// Set the properties that all the commonsqlcode inherited templates should set
		// TODO : use reflection to check that the templates inherits from commonsql
		try
		{
			((CodeSmith.Engine.CodeTemplate)_CodeTemplates[key]).SetProperty("EntityFormat", EntityFormat);
			((CodeSmith.Engine.CodeTemplate)_CodeTemplates[key]).SetProperty("CollectionFormat", CollectionFormat);
			((CodeSmith.Engine.CodeTemplate)_CodeTemplates[key]).SetProperty("ProviderFormat", ProviderFormat);
			((CodeSmith.Engine.CodeTemplate)_CodeTemplates[key]).SetProperty("InterfaceFormat", InterfaceFormat);
			((CodeSmith.Engine.CodeTemplate)_CodeTemplates[key]).SetProperty("BaseClassFormat", BaseClassFormat);
			((CodeSmith.Engine.CodeTemplate)_CodeTemplates[key]).SetProperty("EnumFormat", EnumFormat);
			((CodeSmith.Engine.CodeTemplate)_CodeTemplates[key]).SetProperty("ManyToManyFormat", ManyToManyFormat);
			((CodeSmith.Engine.CodeTemplate)_CodeTemplates[key]).SetProperty("AliasFilePath", AliasFilePath);
			((CodeSmith.Engine.CodeTemplate)_CodeTemplates[key]).SetProperty("StrippedTablePrefixes", StrippedTablePrefixes);
		}
		catch(Exception) {}
	}
}

public CodeTemplate GetTemplate(string templateType)
{
	return (CodeSmith.Engine.CodeTemplate)_CodeTemplates[templateType];
}

public void SafeCreateDirectory(string path)
{
	if (!Directory.Exists(path))
	{
		Directory.CreateDirectory(path);
	}
}

/// <summary>
/// Copy the specified file.
/// </summary>
public void SafeCopyFile(string path, string destination)
{
	FileInfo file1 = new FileInfo(path);
	file1.CopyTo(destination, true);
}

/// <summary>
/// The main function that do the generation process for each table and view.
/// </summary>
public void Go()
{	
	
	this.vsnetIntegration = VSNetIntegration.SeparatedProjects;
	
	_CurrentPhase = "Initialization";
	
	// some settings are only targeting framework 2
	if (vsnetVersion != VSNetVersion.v2005)
	{
		UsePartialClass = false;
		OverwritePartialClassStub = false;
	}
	
	
	
	// Build Namespaces
	if (BusinessLogicLayerNameSpace == null) BusinessLogicLayerNameSpace = string.Empty;
	string BLLNameSpace = NameSpace + (BusinessLogicLayerNameSpace.Length>0 ? "." + GetCleanName2(BusinessLogicLayerNameSpace) : string.Empty);
	string DALNameSpace = NameSpace + "." + (DataAccessLayerNameSpace.Length>0 ? GetCleanName2(DataAccessLayerNameSpace) : "DataAccessLayer");
	string DALSqlNameSpace = DALNameSpace  + ".SqlClient";
	string DALWSNameSpace = DALNameSpace  + ".WebServiceClient";
	string UTNameSpace = NameSpace + "." + (UnitTestsNameSpace.Length>0 ? GetCleanName2(UnitTestsNameSpace) : "UnitTests");
	string WSNameSpace = DALNameSpace + ".WebService";
	
	// Build output pathes
	string rootPathBLL = OutputDirectory + "\\" + BLLNameSpace;
	string rootPathDAL = OutputDirectory + "\\" + DALNameSpace;
	string rootPathDALSql = OutputDirectory + "\\" + DALSqlNameSpace;
	string rootPathDALWS = OutputDirectory + "\\" + DALWSNameSpace;
	string rootPathUT = OutputDirectory + "\\" + UTNameSpace;
	string rootPathSQL = OutputDirectory + (SQLFolderName.Length>0 ? "\\" + SQLFolderName : string.Empty);
	
	string rootPathWS  = WebServiceOutputPath; //OutputDirectory + "\\" + WebServiceVirtualDirectoryName;
	string specialPath = vsnetIntegration == VSNetIntegration.SeparatedProjects ? (IncludeUnitTest ? rootPathUT : rootPathDAL) : OutputDirectory;
	string rootPathWebAdmin = WebAdminOutputPath;
	
	if (ProcedurePrefix == null)	ProcedurePrefix = string.Empty;
	if (WebServiceUrl == null) WebServiceUrl = string.Empty;
	
	docOutput = new XmlDocument();
	docOutput.AppendChild(docOutput.CreateElement("NetTiersReport"));
	
	XmlAttribute att = docOutput.CreateAttribute("startTime");
	att.Value = DateTime.Now.ToFileTime().ToString();
	docOutput.DocumentElement.Attributes.Append(att);
	
	XmlElement initNode = docOutput.CreateElement("initialization");
	initNode.Attributes.Append(att);
	docOutput.DocumentElement.AppendChild(initNode);
		

	if (IncludeSave)
	{
		IncludeInsert = true;
		IncludeUpdate = true;
		IncludeDelete = true;
	}
	
	if (IncludeRelations == false)
	{
		IncludeGetListByFK = false;
		IncludeGetListByIX = false;
		IncludeManyToMany = false;
	}
	
	if (vsnetVersion == VSNetVersion.v2003) 
	{
		try
		{
			Microsoft.Win32.RegistryKey key = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\.NETFramework");
			sdkInstallRoot = string.Format("{0}\\Bin\\", key.GetValue("sdkInstallRootv1.1"));
			key.Close();
		}
		catch
		{
			sdkInstallRoot = @"C:\Program Files\Microsoft Visual Studio .NET 2003\SDK\v1.1\Bin\";
		}
	}
	if (vsnetVersion == VSNetVersion.v2005) 
	{
		try
		{
			Microsoft.Win32.RegistryKey key = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\.NETFramework");
			sdkInstallRoot = string.Format("{0}\\Bin\\", key.GetValue("sdkInstallRootv2.0"));
			key.Close();
		}
		catch
		{
			sdkInstallRoot = @"c:\Program Files\Microsoft Visual Studio 8\SDK\v2.0\Bin\";
		}		
	}
	
	System.Diagnostics.Debug.WriteLine(string.Format("sdkInstallRoot: {0}", sdkInstallRoot));
	
	//Validate necessary parameters
	_CurrentPhase = "Parameter Validation";
	XmlElement parametersNode = AddFileNode(initNode, "Validating parameters.");
	
	//Check to see if path has been specified
	if ( GenerateWebAdmin )
	{
		//If path has not been specified, set GenerateWebAdmin to false and log a message
		if ( rootPathWebAdmin == string.Empty )
		{
			AddMessageNode(parametersNode, 1, "WebAdminOutputPath has not been specified, so WebAdmin controls will not be generated.");
			GenerateWebAdmin = false;
		}
	}
	AddExecutionTime(parametersNode);
	// load all the sub templates
	XmlElement templatesNode = AddFileNode(initNode, "Loading templates.");
	_CurrentPhase = "Templates compilation";
	LoadTemplates();
	AddExecutionTime(templatesNode);
	
	
	_CurrentPhase = "Check datasource";
	
	
	
	// ----------------------------------------------------------------------------
	// Build the correct list of used tables (filtering tables without primary key)
	// ----------------------------------------------------------------------------
	if (EntireDatabase)
	{
		_sourceTables = new TableSchemaCollection();
		_sourceViews = new ViewSchemaCollection();
		
		for (int i=0; i < SourceDatabase.Tables.Count; i++)
		{
			_sourceTables.Add(SourceDatabase.Tables[i]);
		}
				
		for (int i=0; i < SourceDatabase.Views.Count; i++)
		{
			_sourceViews.Add(SourceDatabase.Views[i]);
		}
	}
	else 
	{
		if (SourceTables == null) _sourceTables = new TableSchemaCollection();
		if (SourceViews == null) _sourceViews = new ViewSchemaCollection();
	}
	
	
	// Remove tables with no primary key
	
	TableSchemaCollection _tmp = (TableSchemaCollection)_sourceTables.Clone();	 
	for (int i=0; i < _tmp.Count; i++)
	{
		try
		{
			if (_tmp[i].PrimaryKey == null || _tmp[i].PrimaryKey.MemberColumns.Count == 0)
			{
				AddMessageNode(initNode, 1, "Table " + _tmp[i].Name + " does not have a primary key, it will not be generated.");
				_sourceTables.Remove(_tmp[i]);
			}
		}
		catch(ApplicationException)
		{
			AddMessageNode(initNode, 1, "Table " + _tmp[i].Name + " does not have a primary key, it will not be generated.");
			_sourceTables.Remove(_tmp[i]);
		}
	}
	
	
	// if no tables, exit;		
	if (_sourceTables.Count == 0)
	{
		AddMessageNode(initNode, 2, "No valid tables in the selection.");
		return;
	}
	
	// check the enum tables format (int + text)
	if (_enumTables == null) _enumTables = new TableSchemaCollection();	
	TableSchemaCollection _enums = (TableSchemaCollection)_enumTables.Clone(); //new TableSchemaCollection();
	//Debugger.Break();
	for (int i=0; i < _enums.Count; i++)
	{
		try
		{
			ValidForEnum(_enums[i]);
			//Response.Write("table is valide");
		}
		catch(ApplicationException e)
		{
			//Response.Write(e.Message);
			//Debugger.Break();
			AddMessageNode(initNode, 1, "Table " + _enums[i].Name + " is not eligible for enum generation: " + e.Message);
			_enumTables.Remove(_enums[i]);
		}
	}

	
	_CurrentPhase = "CREATING FOLDERS AND COPYING DEPENDENCIES ";
	
	//----------------------------------------------------------------------------------------------------------------------------------------------
	// CREATING FOLDERS AND COPYING DEPENDENCIES.
	//----------------------------------------------------------------------------------------------------------------------------------------------
	AddFileNode(initNode, "Creating folders and copying dependencies.");
	SafeCreateDirectory(OutputDirectory + "\\References");
	
	if(GenerateBusinessLogicLayer)
	{
		SafeCreateDirectory(rootPathBLL);
		SafeCreateDirectory(rootPathBLL + "\\Views");	
	}
		
	if (GenerateDataAccessLayer)
	{
		// base classes for any provider implementations
		SafeCreateDirectory(rootPathDAL + "\\Bases");
		SafeCreateDirectory(rootPathDAL + "\\Bases\\Views");
		
		// sql implementation
		SafeCreateDirectory(rootPathDALSql);
		SafeCreateDirectory(rootPathDALSql + "\\Views");
				
		//SafeCreateDirectory(rootPathDAL + "\\SqlClient");
		//SafeCreateDirectory(rootPathDAL + "\\SqlClient\\Views");
		
		// ws implementation
		if (GenerateWebservice)
		{	
			SafeCreateDirectory(rootPathDALWS);
			SafeCreateDirectory(rootPathDALWS + "\\Views");
			SafeCreateDirectory(rootPathDALWS + "\\Web References\\WsProxy");
			
			//SafeCreateDirectory(rootPathDAL + "\\WebServiceClient");
			//SafeCreateDirectory(rootPathDAL + "\\WebServiceClient\\Views");
			//SafeCreateDirectory(specialPath + "\\Web References\\WsProxy");
		}
	}
	
	if (IncludeUnitTest)
	{
		SafeCreateDirectory(rootPathUT);
		SafeCreateDirectory(rootPathUT + "\\Views");
	}
	
	if (GenerateSql)
	{
		SafeCreateDirectory(rootPathSQL);
	}
	
	if (GenerateWebservice)
	{
		SafeCreateDirectory(rootPathWS);
		SafeCreateDirectory(rootPathWS + "\\Bin");
		
		// TODO check if the virtual directory exists, if not create it.
	}	
	
	if (GenerateWebAdmin)
	{
		SafeCreateDirectory(rootPathWebAdmin);
	}
		
	//----------------------------------------------------------------------------------------------------------------------------------------------
	// Copy Data Access Layer dependencies
	//----------------------------------------------------------------------------------------------------------------------------------------------
	if (vsnetVersion == VSNetVersion.v2003)
	{
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\Microsoft.Practices.EnterpriseLibrary.Configuration.dll", OutputDirectory + "\\References\\Microsoft.Practices.EnterpriseLibrary.Configuration.dll");
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\Microsoft.Practices.EnterpriseLibrary.Configuration.Design.dll", OutputDirectory + "\\References\\Microsoft.Practices.EnterpriseLibrary.Configuration.Design.dll");
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\Microsoft.Practices.EnterpriseLibrary.Common.dll", OutputDirectory + "\\References\\Microsoft.Practices.EnterpriseLibrary.Common.dll");
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\Microsoft.Practices.EnterpriseLibrary.Caching.dll", OutputDirectory + "\\References\\Microsoft.Practices.EnterpriseLibrary.Caching.dll");
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\Microsoft.Practices.EnterpriseLibrary.Data.dll", OutputDirectory + "\\References\\Microsoft.Practices.EnterpriseLibrary.Data.dll");
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\nunit.framework.dll", OutputDirectory + "\\References\\nunit.framework.dll");
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\NetTiers.Configuration.dll", OutputDirectory + "\\References\\NetTiers.Configuration.dll");
	}
	
	if (vsnetVersion == VSNetVersion.v2005)
	{
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\VS2005RC\\Microsoft.Practices.EnterpriseLibrary.Configuration.dll", OutputDirectory + "\\References\\Microsoft.Practices.EnterpriseLibrary.Configuration.dll");
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\VS2005RC\\Microsoft.Practices.EnterpriseLibrary.Configuration.Design.dll", OutputDirectory + "\\References\\Microsoft.Practices.EnterpriseLibrary.Configuration.Design.dll");
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\VS2005RC\\Microsoft.Practices.EnterpriseLibrary.Common.dll", OutputDirectory + "\\References\\Microsoft.Practices.EnterpriseLibrary.Common.dll");
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\VS2005RC\\Microsoft.Practices.EnterpriseLibrary.Caching.dll", OutputDirectory + "\\References\\Microsoft.Practices.EnterpriseLibrary.Caching.dll");
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\VS2005RC\\Microsoft.Practices.EnterpriseLibrary.Data.dll", OutputDirectory + "\\References\\Microsoft.Practices.EnterpriseLibrary.Data.dll");
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\VS2005RC\\nunit.framework.dll", OutputDirectory + "\\References\\nunit.framework.dll");
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\VS2005RC\\NetTiers.Configuration.2005.dll", OutputDirectory + "\\References\\NetTiers.Configuration.2005.dll");
	}
	
	

	//----------------------------------------------------------------------------------------------------------------------------------------------
	// Copy WebServices dependencies
	//----------------------------------------------------------------------------------------------------------------------------------------------
	/*if (GenerateWebservice)
	{
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\Microsoft.Practices.EnterpriseLibrary.Data.dll", rootPathWS + "\\Bin\\Microsoft.Practices.EnterpriseLibrary.Data.dll");
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\GotDotNet.ApplicationBlocks.Data.dll", rootPathWS + "\\Bin\\GotDotNet.ApplicationBlocks.Data.dll");
		SafeCopyFile(this.CodeTemplateInfo.DirectoryName + "\\References\\Microsoft.ApplicationBlocks.Data.dll", rootPathWS + "\\Bin\\Microsoft.ApplicationBlocks.Data.dll");
	}*/
	
	AddExecutionTime(initNode);
	//----------------------------------------------------------------------------------------------------------------------------------------------
	
	
	_CurrentPhase = "Generating global file ";
	
	//------------------------
	// start code generation
	XmlElement commonNode = docOutput.CreateElement("common");
	XmlAttribute att2 = docOutput.CreateAttribute("startTime");
	att2.Value = DateTime.Now.ToFileTime().ToString();
	commonNode.Attributes.Append(att2);	
	docOutput.DocumentElement.AppendChild(commonNode);
	
	
	//----------------------------------------------------------------------------------------------------------------------------------------------
	//-- IEntity interface file
	//----------------------------------------------------------------------------------------------------------------------------------------------
	XmlElement ientityNode = AddFileNode(commonNode, "IEntity.cs");
	this.GetTemplate("IEntity.cst").SetProperty("NameSpace", BLLNameSpace);
	this.GetTemplate("IEntity.cst").SetProperty("SourceTables", _sourceTables);
	this.GetTemplate("IEntity.cst").SetProperty("SourceViews", _sourceViews);
	//this.GetTemplate("IEntity.cst").RenderToFile(rootPathBLL + "\\IEntity.cs", true);
	this.RenderToFile("IEntity.cst", rootPathBLL + "\\IEntity.cs", true);
	
	//----------------------------------------------------------------------------------------------------------------------------------------------
	//-- Filter class
	//----------------------------------------------------------------------------------------------------------------------------------------------
	XmlElement filterNode = AddFileNode(commonNode, "Filter.cs");
	this.GetTemplate("Filter.cst").SetProperty("NameSpace", BLLNameSpace);
	this.RenderToFile("Filter.cst", rootPathBLL + "\\Filter.cs", true);
	
	//----------------------------------------------------------------------------------------------------------------------------------------------
	//-- EntityPropertyComparer class
	//----------------------------------------------------------------------------------------------------------------------------------------------
	XmlElement comparerNode = AddFileNode(commonNode, "EntityPropertyComparer.cs");
	this.GetTemplate("EntityPropertyComparer.cst").SetProperty("NameSpace", BLLNameSpace);
	this.RenderToFile("EntityPropertyComparer.cst", rootPathBLL + "\\EntityPropertyComparer.cs", true);
	
	//----------------------------------------------------------------------------------------------------------------------------------------------
	//-- GenericTypeConverter class
	//----------------------------------------------------------------------------------------------------------------------------------------------
	XmlElement converterNode = AddFileNode(commonNode, "GenericTypeConverter.cs");
	this.GetTemplate("GenericTypeConverter.cst").SetProperty("NameSpace", BLLNameSpace);
	this.RenderToFile("GenericTypeConverter.cst", rootPathBLL + "\\GenericTypeConverter.cs", true);
	
	//----------------------------------------------------------------------------------------------------------------------------------------------
	//-- Stored procedures
	//----------------------------------------------------------------------------------------------------------------------------------------------
	if (GenerateSql)
	{
		XmlElement spNode = AddFileNode(commonNode, "StoredProcedures.sql");
		this.GetTemplate("StoredProceduresXml.cst").SetProperty("SourceViews", _sourceViews);
		this.GetTemplate("StoredProceduresXml.cst").SetProperty("SourceTables", _sourceTables);
		
		this.GetTemplate("StoredProceduresXml.cst").SetProperty("IncludeDrop", IncludeDrop);
		this.GetTemplate("StoredProceduresXml.cst").SetProperty("IncludeInsert", IncludeInsert);
		this.GetTemplate("StoredProceduresXml.cst").SetProperty("IncludeUpdate", IncludeUpdate);
		this.GetTemplate("StoredProceduresXml.cst").SetProperty("IncludeManyToMany", IncludeManyToMany);
		this.GetTemplate("StoredProceduresXml.cst").SetProperty("IncludeDelete", IncludeDelete);
		this.GetTemplate("StoredProceduresXml.cst").SetProperty("IncludeUpdate", IncludeUpdate);
		this.GetTemplate("StoredProceduresXml.cst").SetProperty("IncludeGetList", IncludeGetList);
		this.GetTemplate("StoredProceduresXml.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);
		this.GetTemplate("StoredProceduresXml.cst").SetProperty("IncludeGetListByIX", IncludeGetListByIX);
		this.GetTemplate("StoredProceduresXml.cst").SetProperty("IncludeFind", IncludeFind);
		
		this.GetTemplate("StoredProceduresXml.cst").SetProperty("IsolationLevel", IsolationLevel);
		this.GetTemplate("StoredProceduresXml.cst").SetProperty("ExcludeFields", ExcludeFields);
		this.GetTemplate("StoredProceduresXml.cst").SetProperty("InsertSuffix", InsertSuffix);
		this.GetTemplate("StoredProceduresXml.cst").SetProperty("UpdateSuffix", UpdateSuffix);
		this.GetTemplate("StoredProceduresXml.cst").SetProperty("DeleteSuffix", DeleteSuffix);
		this.GetTemplate("StoredProceduresXml.cst").SetProperty("SelectSuffix", SelectSuffix);
		this.GetTemplate("StoredProceduresXml.cst").SetProperty("SelectAllSuffix", SelectAllSuffix);
		this.GetTemplate("StoredProceduresXml.cst").SetProperty("FindSuffix", FindSuffix);
		
		this.GetTemplate("StoredProceduresXml.cst").SetProperty("GrantUser", GrantUser);
				
		this.GetTemplate("StoredProceduresXml.cst").SetProperty("CompanyName", CompanyName);
		this.GetTemplate("StoredProceduresXml.cst").SetProperty("CompanyURL", CompanyURL);
		
		this.GetTemplate("StoredProceduresXml.cst").SetProperty("ProcedurePrefix", ProcedurePrefix.Replace(" ", ""));

		this.RenderToFile("StoredProceduresXml.cst", rootPathDALSql + "\\Procedures.xml", true);
		
		//AddMessageNode(spNode, 0, "Stored Procedures file created on the file system.");
		
		// Create the SQL File from the XML file
		XslTransform xslt = new XslTransform();
		xslt.Load(this.CodeTemplateInfo.DirectoryName + "\\DataAccessLayer.SqlClient\\scriptsql.xsl");               
		TextWriter writer = null;
		
		try
		{
			writer = new StreamWriter(rootPathSQL + "\\procedures.sql");
		
			//Create a new XPathDocument and load the XML data to be transformed.
			XPathDocument mydata = new XPathDocument(rootPathDALSql + "\\Procedures.xml");
			
			xslt.Transform(mydata, null, writer, null);
			writer.Close();
		}
		catch(Exception ex)
		{
			Response.WriteLine(ex);
		}
		finally
		{
			if (writer != null)
			{
				writer.Close();
			}
		}
	
		
		// Install the stored procedures.
		if (ExecuteSql)
		{
			try
			{				
				ExecuteSqlInFile(rootPathSQL + "\\procedures.sql", SourceDatabase.ConnectionString );
				//AddMessageNode(spNode, 0, "Stored Procedures created on the database.");
			}
			catch(System.Data.SqlClient.SqlException sex)
			{
				AddMessageNode(spNode, 2, string.Format("Error while execution Sql file. {0}", sex));
			}
			catch(Exception ex)
			{
				AddMessageNode(spNode, 2, string.Format("Error while execution Sql file. {0}", ex));
			}			
		}
		
		//AddExecutionTime(spNode);
	}
	//----------------------------------------------------------------------------------------------------------------------------------------------
	
	
	//----------------------------------------------------------------------------------------------------------------------------------------------
	// Generates common dataaccesslayer c-sharp files
	//----------------------------------------------------------------------------------------------------------------------------------------------
	if (GenerateDataAccessLayer)
	{
		
		// Generates the configuration files
		string configFileVersion = (vsnetVersion == VSNetVersion.v2005) ? "config.2005" : "config";
		
		// Configuration files for the unit test project
		if (IncludeUnitTest)
		{
			AddFileNode(commonNode, "Unit test configuration files");
			this.GetTemplate("App."+configFileVersion+".cst").SetProperty("IsWebConfig", false);
			//this.GetTemplate("App."+configFileVersion+".cst").RenderToFile(specialPath + "\\" + NameSpace + (vsnetIntegration == VSNetIntegration.SeparatedProjects && IncludeUnitTest ? "." + UnitTestsNameSpace : string.Empty) + ".dll.config", true);
			this.RenderToFile("App."+configFileVersion+".cst", specialPath + "\\" + NameSpace + (vsnetIntegration == VSNetIntegration.SeparatedProjects && IncludeUnitTest ? "." + UnitTestsNameSpace : string.Empty) + ".dll.config", true);
			
			this.GetTemplate("nettiersconfigdata."+configFileVersion+".cst").SetProperty("Url", WebServiceUrl);
			this.GetTemplate("nettiersconfigdata."+configFileVersion+".cst").SetProperty("DefaultProvider", DALNameSpace + ".SqlClient.SqlDataProvider, " + DALNameSpace + ".SqlClient");
			//this.GetTemplate("nettiersconfigdata."+configFileVersion+".cst").RenderToFile(specialPath + "\\nettiersconfigdata.config", true);
			this.RenderToFile("nettiersconfigdata."+configFileVersion+".cst", specialPath + "\\nettiersconfigdata.config", true);
					
			//this.GetTemplate("cachingConfiguration."+configFileVersion+".cst").RenderToFile(specialPath + "\\cachingConfiguration.config", true);
			this.RenderToFile("cachingConfiguration."+configFileVersion+".cst", specialPath + "\\cachingConfiguration.config", true);
			
			this.GetTemplate("dataconfiguration."+configFileVersion+".cst").SetProperty("ConnectionString", SourceDatabase.ConnectionString);
			//this.GetTemplate("dataconfiguration."+configFileVersion+".cst").RenderToFile(specialPath + "\\dataconfiguration.config", true);
			this.RenderToFile("dataconfiguration."+configFileVersion+".cst", specialPath + "\\dataconfiguration.config", true);
		}	
		
		// Configuration files for the webservice
		if (GenerateWebservice)
		{
			this.GetTemplate("App."+configFileVersion+".cst").SetProperty("IsWebConfig", true);
			//this.GetTemplate("App."+configFileVersion+".cst").RenderToFile(rootPathWS + "\\Web.config", true);
			this.RenderToFile("App."+configFileVersion+".cst", rootPathWS + "\\Web.config", true);
			
			this.GetTemplate("nettiersconfigdata."+configFileVersion+".cst").SetProperty("Url", WebServiceUrl);
			this.GetTemplate("nettiersconfigdata."+configFileVersion+".cst").SetProperty("DefaultProvider", DALNameSpace + ".SqlClient.SqlDataProvider, " + DALNameSpace + ".SqlClient");
			//this.GetTemplate("nettiersconfigdata."+configFileVersion+".cst").RenderToFile(rootPathWS + "\\nettiersconfigdata.config", true);
			this.RenderToFile("nettiersconfigdata."+configFileVersion+".cst", rootPathWS + "\\nettiersconfigdata.config", true);
				
			//this.GetTemplate("cachingConfiguration."+configFileVersion+".cst").RenderToFile(rootPathWS + "\\cachingConfiguration.config", true);
			this.RenderToFile("cachingConfiguration."+configFileVersion+".cst", rootPathWS + "\\cachingConfiguration.config", true);
			
			this.GetTemplate("dataconfiguration."+configFileVersion+".cst").SetProperty("ConnectionString", SourceDatabase.ConnectionString);
			//this.GetTemplate("dataconfiguration."+configFileVersion+".cst").RenderToFile(rootPathWS + "\\dataconfiguration.config", true);
			this.RenderToFile("dataconfiguration."+configFileVersion+".cst", rootPathWS + "\\dataconfiguration.config", true);
		}
				
				
		AddFileNode(commonNode, "Configuration.cs");
		this.GetTemplate("Configuration.cst").SetProperty("DALNameSpace", DALNameSpace);
		this.GetTemplate("Configuration.cst").SetProperty("DotNet2", vsnetVersion == VSNetVersion.v2005);
		this.RenderToFile("Configuration.cst", rootPathDAL + "\\Configuration.cs", true);
			
		AddFileNode(commonNode, "Utility.cs");
		this.GetTemplate("Utility.cst").SetProperty("DALNameSpace", DALNameSpace);
		this.GetTemplate("Utility.cst").SetProperty("NameSpace", BLLNameSpace);
		this.RenderToFile("Utility.cst", rootPathDAL + "\\Utility.cs", true);
		
		AddFileNode(commonNode, "StoredProcedureProvider.cs");
		this.GetTemplate("StoredProcedureProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
		this.RenderToFile("StoredProcedureProvider.cst", rootPathDALSql + "\\StoredProcedureProvider.cs", true);
						
		AddFileNode(commonNode, "TransactionManager.cs");
		this.GetTemplate("TransactionManager.cst").SetProperty("DALNameSpace", DALNameSpace);
		this.RenderToFile("TransactionManager.cst", rootPathDAL + "\\TransactionManager.cs", true);
		
		AddFileNode(commonNode, "DataRepository.cs");
		this.GetTemplate("DataRepository.cst").SetProperty("NameSpace", BLLNameSpace);
		this.GetTemplate("DataRepository.cst").SetProperty("DALNameSpace", DALNameSpace);
		this.GetTemplate("DataRepository.cst").SetProperty("SourceTables", _sourceTables);
		this.GetTemplate("DataRepository.cst").SetProperty("SourceViews", _sourceViews);
		this.RenderToFile("DataRepository.cst", rootPathDAL + "\\DataRepository.cs", true);
		
		AddFileNode(commonNode, "SqlDataRepository.cs");
		this.GetTemplate("SqlDataRepository.cst").SetProperty("NameSpace", BLLNameSpace);
		this.GetTemplate("SqlDataRepository.cst").SetProperty("DALNameSpace", DALNameSpace);
		this.GetTemplate("SqlDataRepository.cst").SetProperty("SourceTables", _sourceTables);
		this.GetTemplate("SqlDataRepository.cst").SetProperty("SourceViews", _sourceViews);
		this.RenderToFile("SqlDataRepository.cst", rootPathDALSql + "\\SqlDataRepository.cs", true);
				
		AddFileNode(commonNode, "DataProviderBase.cs");
		this.GetTemplate("DataProviderBase.cst").SetProperty("DALNameSpace", DALNameSpace);
		this.GetTemplate("DataProviderBase.cst").SetProperty("SourceTables", _sourceTables);
		this.GetTemplate("DataProviderBase.cst").SetProperty("SourceViews", _sourceViews);
		this.RenderToFile("DataProviderBase.cst", rootPathDAL + "\\Bases\\DataProviderBase.cs", true);
		
		AddFileNode(commonNode, "SqlClient\\SqlDataProvider.cs");
		this.GetTemplate("SqlDataProvider.cst").SetProperty("NameSpace", BLLNameSpace);
		this.GetTemplate("SqlDataProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
		this.GetTemplate("SqlDataProvider.cst").SetProperty("SourceTables", _sourceTables);
		this.GetTemplate("SqlDataProvider.cst").SetProperty("SourceViews", _sourceViews);
		this.RenderToFile("SqlDataProvider.cst", rootPathDALSql + "\\SqlDataProvider.cs", true);
		
		if (GenerateWebservice)
		{
			AddFileNode(commonNode, "WebServiceClient\\WsDataProvider.cs");
			this.GetTemplate("WsDataProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("WsDataProvider.cst").SetProperty("SourceTables", _sourceTables);
			this.GetTemplate("WsDataProvider.cst").SetProperty("SourceViews", _sourceViews);
			
			this.GetTemplate("WsDataProvider.cst").SetProperty("WebReferenceName", "WsProxy");
			this.GetTemplate("WsDataProvider.cst").SetProperty("ProxyClassName", SourceDatabase.Name + "Services");
			
			this.RenderToFile("WsDataProvider.cst", rootPathDALWS + "\\WsDataProvider.cs", true);
		}
	}
	
	
	//----------------------------------------------------------------------------------------------------------------------------------------------
	//-- Generating ASP.NET Webservice
	//----------------------------------------------------------------------------------------------------------------------------------------------
	if (GenerateWebservice)
	{
		
		AddFileNode(commonNode, SourceDatabase.Name + "Services.asmx");
		
		
		this.GetTemplate("WebService.cst").SetProperty("SourceViews", _sourceViews);
		this.GetTemplate("WebService.cst").SetProperty("SourceTables", _sourceTables);
		this.GetTemplate("WebService.cst").SetProperty("IncludeCustoms", IncludeCustoms);				
		this.GetTemplate("WebService.cst").SetProperty("IncludeInsert", IncludeInsert);
		this.GetTemplate("WebService.cst").SetProperty("IncludeUpdate", IncludeUpdate);
		this.GetTemplate("WebService.cst").SetProperty("IncludeDelete", IncludeDelete);
		this.GetTemplate("WebService.cst").SetProperty("IncludeUpdate", IncludeUpdate);
		this.GetTemplate("WebService.cst").SetProperty("IncludeManyToMany", IncludeManyToMany);
		this.GetTemplate("WebService.cst").SetProperty("IncludeGetList", IncludeGetList);
		this.GetTemplate("WebService.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);
		this.GetTemplate("WebService.cst").SetProperty("IncludeGetListByIX", IncludeGetListByIX);
		this.GetTemplate("WebService.cst").SetProperty("IncludeFind", IncludeFind);
							
		this.GetTemplate("WebService.cst").SetProperty("NameSpace", BLLNameSpace);
		this.GetTemplate("WebService.cst").SetProperty("DALNameSpace", DALNameSpace);
		this.GetTemplate("WebService.cst").SetProperty("BLLNameSpace", BLLNameSpace);
			
		this.GetTemplate("WebService.cst").SetProperty("ClassName", SourceDatabase.Name + "Services");
		this.GetTemplate("WebService.cst").SetProperty("WebServiceUrl", WebServiceUrl);
		
		this.RenderToFile("WebService.cst", rootPathWS + "\\" + GetClassName(SourceDatabase.Name) + "Services.asmx", true);
		
		// Writing the web.config of this webservice
		//AddFileNode(commonNode, "Web.config");
		//this.GetTemplate("Web.config.cst").SetProperty("ConnectionString", SourceDatabase.ConnectionString);
		//this.GetTemplate("Web.config.cst").RenderToFile(rootPathWS + "\\Web.config", true);
					
		
		/*
		//----------------------------------------------------------------------------------------------------------------------------------------------
		// Generating webreference for visual studio
		// 
		// 1. wsdl /out:c:\Web References\WsProxy\Reference.cs http://commerce.services/CustomerServices.asmx?WSDL
		// 2. disco /out:c:\Web References\WsProxy\ http://commerce.services/CustomerServices.asmx
		//----------------------------------------------------------------------------------------------------------------------------------------------
		
		AddFileNode(commonNode, "WSDL file");
		
		Process p = new Process();
		p.StartInfo.RedirectStandardOutput = true;
		p.StartInfo.UseShellExecute = false;
		p.StartInfo.FileName = "\"" + sdkInstallRoot + "wsdl\"";
		p.StartInfo.Arguments = "/out:\"" + rootPathWS + "\\Web References\\WsProxy\\Reference.cs\" \"" + WebServiceUrl + "?WSDL\"";
		p.Start();
		p.WaitForExit();
		
		//Response.Write(p.StartInfo.FileName);
		//Response.Write(p.StartInfo.Arguments);
				
		AddFileNode(commonNode, "DISCO file");
		
		//Response.WriteLine("2. Generating Web Reference file: DISCO.");
		//Response.WriteLine("\"" + sdkInstallRoot + "disco\" /out:\"" + rootPathDAL + "\\Web References\\WsProxy\" \"" + WebServiceUrl + "\"");
		Process p2 = new Process();
		p2.StartInfo.RedirectStandardOutput = true;
		p2.StartInfo.UseShellExecute = false;
		p2.StartInfo.FileName = "\"" + sdkInstallRoot + "disco\"";
		p2.StartInfo.Arguments = "/out:\"" + rootPathWS + "\\Web References\\WsProxy\" \"" + WebServiceUrl + "\"";
		p2.Start();
		p2.WaitForExit();
		//AddFileNode(discoNode, 0, p2.StandardOutput.ReadToEnd());
		*/
		
		// The WebInfo file for the WebService
		if (vsnetVersion != VSNetVersion.v2005)
		{
			this.GetTemplate("WebInfo.cst").SetProperty("WebServiceUrl", WebServiceUrl);
			this.GetTemplate("WebInfo.cst").SetProperty("NameSpace", NameSpace);
			this.GetTemplate("WebInfo.cst").SetProperty("DataAccessLayerNameSpace", DataAccessLayerNameSpace);
			//this.GetTemplate("WebInfo.cst").RenderToFile(rootPathWS + "\\" + NameSpace + "." + (DataAccessLayerNameSpace.Length>0 ? DataAccessLayerNameSpace : "DataAccessLayer") + ".WebService.csproj.webinfo", true);		
			this.RenderToFile("WebInfo.cst", rootPathWS + "\\" + NameSpace + "." + (DataAccessLayerNameSpace.Length>0 ? DataAccessLayerNameSpace : "DataAccessLayer") + ".WebService.csproj.webinfo", true);
		}
	}
	//----------------------------------------------------------------------------------------------------------------------------------------------
	
	
	// Hard coded Guid make it easier to maintain solution when regenerating projects
	// It may be intersting to put those value in global properties
	string bllGuid = "20E43088-4618-4F4A-B8AD-FC31B50D94CD"; //Guid.NewGuid().ToString();
	string dalGuid = "041C1BBE-0BFB-4D45-8125-9AB0BBC09A92"; //Guid.NewGuid().ToString();
	string DALSqlGuid = "8996A7B4-57D3-440B-A545-A701844B8C4A"; //Guid.NewGuid().ToString();
	string DALWSGuid = "061C1BBE-0BFB-4D45-8125-9AB0BBC09A92"; //Guid.NewGuid().ToString();
	string wsGuid  = "5E3CA58E-216A-4F53-BD23-5A48A6C44924"; //Guid.NewGuid().ToString();
	string utGuid  = "031D5BAE-0BFB-4D45-8125-9AB0BBC09A92"; //Guid.NewGuid().ToString();
		
	string projectTemplate = vsnetVersion == VSNetVersion.v2005 ? "vsnet2005.project.cst" : "vsnet2003.project.cst";
	string solutionTemplate = vsnetVersion == VSNetVersion.v2005 ? "vsnet2005.solution.cst" : "vsnet2003.solution.cst";
		
	
	//----------------------------------------------------------------------------------------------------------------------------------------------
	//-- Generating VS.Net projects and solution files
	//----------------------------------------------------------------------------------------------------------------------------------------------
	if (vsnetIntegration != VSNetIntegration.None && !File.Exists(OutputDirectory + "\\" + NameSpace + ".sln"))
	{
		AddFileNode(commonNode,  NameSpace + ".sln");
				
		//this.GetTemplate(solutionTemplate).SetProperty("RootNameSpace", NameSpace);
		this.GetTemplate(solutionTemplate).SetProperty("DALNameSpace", DALNameSpace);
		this.GetTemplate(solutionTemplate).SetProperty("BLLNameSpace", BLLNameSpace);
		this.GetTemplate(solutionTemplate).SetProperty("DALSqlNameSpace", DALSqlNameSpace);
		this.GetTemplate(solutionTemplate).SetProperty("DALWSNameSpace", DALWSNameSpace);
		this.GetTemplate(solutionTemplate).SetProperty("UTNameSpace", UTNameSpace);
		this.GetTemplate(solutionTemplate).SetProperty("WSNameSpace", WSNameSpace);
		
		this.GetTemplate(solutionTemplate).SetProperty("BLLGuid", bllGuid);
		this.GetTemplate(solutionTemplate).SetProperty("DALGuid", dalGuid);
		this.GetTemplate(solutionTemplate).SetProperty("DALSqlGuid", DALSqlGuid);
		this.GetTemplate(solutionTemplate).SetProperty("DALWSGuid", DALWSGuid);
		this.GetTemplate(solutionTemplate).SetProperty("WSGuid", wsGuid);
		this.GetTemplate(solutionTemplate).SetProperty("UTGuid", utGuid);
		
		this.GetTemplate(solutionTemplate).SetProperty("IncludeBll", GenerateBusinessLogicLayer);
		this.GetTemplate(solutionTemplate).SetProperty("IncludeDALBase", GenerateDataAccessLayer);	
		this.GetTemplate(solutionTemplate).SetProperty("IncludeSqlClient", GenerateDataAccessLayer);	
		this.GetTemplate(solutionTemplate).SetProperty("IncludeWebservice", GenerateWebservice);
		this.GetTemplate(solutionTemplate).SetProperty("IncludeWebserviceClient", GenerateWebservice);
		this.GetTemplate(solutionTemplate).SetProperty("IncludeUnitTest", IncludeUnitTest);
		
		this.GetTemplate(solutionTemplate).SetProperty("SingleProject", vsnetIntegration == VSNetIntegration.SingleProject);
		
		this.GetTemplate(solutionTemplate).SetProperty("WebServiceUrl", WebServiceUrl);
		this.GetTemplate(solutionTemplate).SetProperty("rootPathWS", rootPathWS);
						
		//this.GetTemplate(solutionTemplate).RenderToFile(OutputDirectory + "\\" + NameSpace + ".sln", true);
		this.RenderToFile(solutionTemplate, OutputDirectory + "\\" + NameSpace + ".sln", true);
	}
		
	
	if (vsnetIntegration == VSNetIntegration.SeparatedProjects)
	{			
		// Bll only project file
		if (GenerateBusinessLogicLayer) // && !File.Exists(rootPathBLL + "\\" + NameSpace + ".csproj"))
		{
			AddFileNode(commonNode, BLLNameSpace + ".csproj");
			
			this.GetTemplate(projectTemplate).SetProperty("SourceDatabase", SourceDatabase);
			this.GetTemplate(projectTemplate).SetProperty("SourceTables", _sourceTables);
			this.GetTemplate(projectTemplate).SetProperty("SourceViews", _sourceViews);
			this.GetTemplate(projectTemplate).SetProperty("EnumTables", _enumTables);
						
			this.GetTemplate(projectTemplate).SetProperty("BLLGuid", bllGuid);
			this.GetTemplate(projectTemplate).SetProperty("DALGuid", dalGuid);
			this.GetTemplate(projectTemplate).SetProperty("DALSqlGuid", DALSqlGuid);
			this.GetTemplate(projectTemplate).SetProperty("DALWSGuid", DALWSGuid);
			this.GetTemplate(projectTemplate).SetProperty("UTGuid", utGuid);
			this.GetTemplate(projectTemplate).SetProperty("WSGuid", wsGuid);
									
			this.GetTemplate(projectTemplate).SetProperty("IncludeBll", true);
			this.GetTemplate(projectTemplate).SetProperty("IncludeDALBase", false);	
			this.GetTemplate(projectTemplate).SetProperty("IncludeSqlClient", false);	
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebservice", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebserviceClient", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeUnitTest", false);
			
			this.GetTemplate(projectTemplate).SetProperty("SingleProject", false);
												
			this.GetTemplate(projectTemplate).SetProperty("WebServiceUrl", WebServiceUrl);
			this.GetTemplate(projectTemplate).SetProperty("rootPathWS", rootPathWS);
			
			this.GetTemplate(projectTemplate).SetProperty("NameSpace", NameSpace);
			this.GetTemplate(projectTemplate).SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate(projectTemplate).SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate(projectTemplate).SetProperty("DALSqlNameSpace", DALSqlNameSpace);
			this.GetTemplate(projectTemplate).SetProperty("DALWSNameSpace", DALWSNameSpace);
			this.GetTemplate(projectTemplate).SetProperty("UTNameSpace", UTNameSpace);
			this.GetTemplate(projectTemplate).SetProperty("WSNameSpace", WSNameSpace);
									
			this.GetTemplate(projectTemplate).SetProperty("OutputDirectory", OutputDirectory);
			
			this.GetTemplate(projectTemplate).SetProperty("UsePartialClass", UsePartialClass);
		
					
			//this.GetTemplate(projectTemplate).RenderToFile(rootPathBLL + "\\" + BLLNameSpace + ".csproj", true);
			this.RenderToFile(projectTemplate, rootPathBLL + "\\" + BLLNameSpace + ".csproj", true);
		}
		//----------------------------------------------------------------------------------------------------------------------------------------------
			
		
		// DAL only project file
		if (GenerateDataAccessLayer) // && !File.Exists(rootPathDAL + "\\" + NameSpace + ".DataAccessLayer.csproj"))
		{
			// dal base
			AddFileNode(commonNode, BLLNameSpace + "." + DataAccessLayerNameSpace + ".csproj");
			
			this.GetTemplate(projectTemplate).SetProperty("SourceDatabase", SourceDatabase);
			this.GetTemplate(projectTemplate).SetProperty("SourceTables", _sourceTables);
			this.GetTemplate(projectTemplate).SetProperty("SourceViews", _sourceViews);
			this.GetTemplate(projectTemplate).SetProperty("EnumTables", _enumTables);
						
			this.GetTemplate(projectTemplate).SetProperty("BLLGuid", bllGuid);
			this.GetTemplate(projectTemplate).SetProperty("DALGuid", dalGuid);
			this.GetTemplate(projectTemplate).SetProperty("DALSqlGuid", DALSqlGuid);
			this.GetTemplate(projectTemplate).SetProperty("DALWSGuid", DALWSGuid);
			this.GetTemplate(projectTemplate).SetProperty("UTGuid", utGuid);
			this.GetTemplate(projectTemplate).SetProperty("WSGuid", wsGuid);
						
			this.GetTemplate(projectTemplate).SetProperty("IncludeBll", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeDALBase", true);	
			this.GetTemplate(projectTemplate).SetProperty("IncludeSqlClient", false);			
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebservice", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebserviceClient", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeUnitTest", false);			
			
			this.GetTemplate(projectTemplate).SetProperty("SingleProject", false);
									
			this.GetTemplate(projectTemplate).SetProperty("WebServiceUrl", WebServiceUrl);
			this.GetTemplate(projectTemplate).SetProperty("rootPathWS", rootPathWS);
			
			this.GetTemplate(projectTemplate).SetProperty("NameSpace", NameSpace);
			this.GetTemplate(projectTemplate).SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate(projectTemplate).SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate(projectTemplate).SetProperty("DALSqlNameSpace", DALSqlNameSpace);
			this.GetTemplate(projectTemplate).SetProperty("DALWSNameSpace", DALWSNameSpace);
			this.GetTemplate(projectTemplate).SetProperty("UTNameSpace", UTNameSpace);
			this.GetTemplate(projectTemplate).SetProperty("WSNameSpace", WSNameSpace);
									
			this.GetTemplate(projectTemplate).SetProperty("OutputDirectory", OutputDirectory);
			
			this.GetTemplate(projectTemplate).SetProperty("UsePartialClass", UsePartialClass);
					
			//this.GetTemplate(projectTemplate).RenderToFile(rootPathDAL + "\\" + DALNameSpace + ".csproj", true);
			this.RenderToFile(projectTemplate, rootPathDAL + "\\" + DALNameSpace + ".csproj", true);
			
			
			// DAL sqlclient
			AddFileNode(commonNode, BLLNameSpace + "."+DataAccessLayerNameSpace+".SqlClient.csproj");
			
			this.GetTemplate(projectTemplate).SetProperty("SourceDatabase", SourceDatabase);
			this.GetTemplate(projectTemplate).SetProperty("SourceTables", _sourceTables);
			this.GetTemplate(projectTemplate).SetProperty("SourceViews", _sourceViews);
			this.GetTemplate(projectTemplate).SetProperty("EnumTables", _enumTables);
			
			
			this.GetTemplate(projectTemplate).SetProperty("BLLGuid", bllGuid);
			this.GetTemplate(projectTemplate).SetProperty("DALGuid", dalGuid);
			this.GetTemplate(projectTemplate).SetProperty("DALSqlGuid", DALSqlGuid);
			this.GetTemplate(projectTemplate).SetProperty("DALWSGuid", DALWSGuid);
			this.GetTemplate(projectTemplate).SetProperty("UTGuid", utGuid);
			this.GetTemplate(projectTemplate).SetProperty("WSGuid", wsGuid);
						
			this.GetTemplate(projectTemplate).SetProperty("IncludeBll", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeDALBase", false);	
			this.GetTemplate(projectTemplate).SetProperty("IncludeSqlClient", true);			
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebservice", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebserviceClient", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeUnitTest", false);			
			
			this.GetTemplate(projectTemplate).SetProperty("SingleProject", false);
									
			this.GetTemplate(projectTemplate).SetProperty("WebServiceUrl", WebServiceUrl);
			this.GetTemplate(projectTemplate).SetProperty("rootPathWS", rootPathWS);
			
			this.GetTemplate(projectTemplate).SetProperty("NameSpace", NameSpace);
			this.GetTemplate(projectTemplate).SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate(projectTemplate).SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate(projectTemplate).SetProperty("DALSqlNameSpace", DALSqlNameSpace);
			this.GetTemplate(projectTemplate).SetProperty("DALWSNameSpace", DALWSNameSpace);
			this.GetTemplate(projectTemplate).SetProperty("UTNameSpace", UTNameSpace);
			this.GetTemplate(projectTemplate).SetProperty("WSNameSpace", WSNameSpace);
			
			this.GetTemplate(projectTemplate).SetProperty("OutputDirectory", OutputDirectory);
			
			this.GetTemplate(projectTemplate).SetProperty("UsePartialClass", UsePartialClass);
		
			
			//this.GetTemplate(projectTemplate).RenderToFile(rootPathDALSql + "\\" + DALSqlNameSpace + ".csproj", true);
			this.RenderToFile(projectTemplate, rootPathDALSql + "\\" + DALSqlNameSpace + ".csproj", true);
			
		
			/*--------------------
				WebServiceClient
			-----------------------*/
			if (GenerateWebservice)
			{
				// webservice csproj is not needed with vs2005
				if (vsnetVersion != VSNetVersion.v2005)
				{
					AddFileNode(commonNode, rootPathWS + "\\" + NameSpace + "." + DataAccessLayerNameSpace + ".WebService.csproj");
					
					this.GetTemplate(projectTemplate).SetProperty("SourceDatabase", SourceDatabase);
					this.GetTemplate(projectTemplate).SetProperty("SourceTables", _sourceTables);
					this.GetTemplate(projectTemplate).SetProperty("SourceViews", _sourceViews);
					this.GetTemplate(projectTemplate).SetProperty("EnumTables", _enumTables);
									
					this.GetTemplate(projectTemplate).SetProperty("BLLGuid", bllGuid);
					this.GetTemplate(projectTemplate).SetProperty("DALGuid", dalGuid);
					this.GetTemplate(projectTemplate).SetProperty("DALSqlGuid", DALSqlGuid);
					this.GetTemplate(projectTemplate).SetProperty("DALWSGuid", DALWSGuid);
					this.GetTemplate(projectTemplate).SetProperty("UTGuid", utGuid);
					this.GetTemplate(projectTemplate).SetProperty("WSGuid", wsGuid);
										
					this.GetTemplate(projectTemplate).SetProperty("IncludeBll", false);
					this.GetTemplate(projectTemplate).SetProperty("IncludeDALBase", false);	
					this.GetTemplate(projectTemplate).SetProperty("IncludeSqlClient", false);			
					this.GetTemplate(projectTemplate).SetProperty("IncludeWebservice", true);
					this.GetTemplate(projectTemplate).SetProperty("IncludeWebserviceClient", false);
					this.GetTemplate(projectTemplate).SetProperty("IncludeUnitTest", false);			
					
					this.GetTemplate(projectTemplate).SetProperty("SingleProject", false);
											
					this.GetTemplate(projectTemplate).SetProperty("WebServiceUrl", WebServiceUrl);
					this.GetTemplate(projectTemplate).SetProperty("rootPathWS", rootPathWS);
					
					this.GetTemplate(projectTemplate).SetProperty("NameSpace", NameSpace);
					this.GetTemplate(projectTemplate).SetProperty("DALNameSpace", DALNameSpace);
					this.GetTemplate(projectTemplate).SetProperty("BLLNameSpace", BLLNameSpace);
					this.GetTemplate(projectTemplate).SetProperty("DALSqlNameSpace", DALSqlNameSpace);
					this.GetTemplate(projectTemplate).SetProperty("DALWSNameSpace", DALWSNameSpace);
					this.GetTemplate(projectTemplate).SetProperty("UTNameSpace", UTNameSpace);
					this.GetTemplate(projectTemplate).SetProperty("WSNameSpace", WSNameSpace);
											
					this.GetTemplate(projectTemplate).SetProperty("OutputDirectory", OutputDirectory);
					
					this.GetTemplate(projectTemplate).SetProperty("UsePartialClass", UsePartialClass);
							
					//this.GetTemplate(projectTemplate).RenderToFile(rootPathWS + "\\" + NameSpace + "." + DataAccessLayerNameSpace + ".WebService.csproj", true);
					this.RenderToFile(projectTemplate, rootPathWS + "\\" + NameSpace + "." + DataAccessLayerNameSpace + ".WebService.csproj", true);
				}	
				
				// webservice Client
				AddFileNode(commonNode, rootPathDALWS + "\\" + NameSpace + "." + DataAccessLayerNameSpace + ".WebServiceClient.csproj");
				
				this.GetTemplate(projectTemplate).SetProperty("SourceDatabase", SourceDatabase);
				this.GetTemplate(projectTemplate).SetProperty("SourceTables", _sourceTables);
				this.GetTemplate(projectTemplate).SetProperty("SourceViews", _sourceViews);
				this.GetTemplate(projectTemplate).SetProperty("EnumTables", _enumTables);
				
				
				this.GetTemplate(projectTemplate).SetProperty("BLLGuid", bllGuid);
				this.GetTemplate(projectTemplate).SetProperty("DALGuid", dalGuid);
				this.GetTemplate(projectTemplate).SetProperty("DALSqlGuid", DALSqlGuid);
				this.GetTemplate(projectTemplate).SetProperty("DALWSGuid", DALWSGuid);
				this.GetTemplate(projectTemplate).SetProperty("UTGuid", utGuid);
				this.GetTemplate(projectTemplate).SetProperty("WSGuid", wsGuid);
				
				this.GetTemplate(projectTemplate).SetProperty("IncludeBll", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeDALBase", false);	
				this.GetTemplate(projectTemplate).SetProperty("IncludeSqlClient", false);			
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebservice", false);
				this.GetTemplate(projectTemplate).SetProperty("IncludeWebserviceClient", true);
				this.GetTemplate(projectTemplate).SetProperty("IncludeUnitTest", false);			
				
				this.GetTemplate(projectTemplate).SetProperty("SingleProject", false);
										
				this.GetTemplate(projectTemplate).SetProperty("WebServiceUrl", WebServiceUrl);
				this.GetTemplate(projectTemplate).SetProperty("rootPathWS", rootPathWS);
				
				this.GetTemplate(projectTemplate).SetProperty("NameSpace", NameSpace);
				this.GetTemplate(projectTemplate).SetProperty("BLLNameSpace", BLLNameSpace);
				this.GetTemplate(projectTemplate).SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate(projectTemplate).SetProperty("DALSqlNameSpace", DALSqlNameSpace);
				this.GetTemplate(projectTemplate).SetProperty("DALWSNameSpace", DALWSNameSpace);
				this.GetTemplate(projectTemplate).SetProperty("UTNameSpace", UTNameSpace);
				this.GetTemplate(projectTemplate).SetProperty("WSNameSpace", WSNameSpace);
				
				this.GetTemplate(projectTemplate).SetProperty("OutputDirectory", OutputDirectory);
				
				this.GetTemplate(projectTemplate).SetProperty("UsePartialClass", UsePartialClass);
		
				
				//this.GetTemplate(projectTemplate).RenderToFile(rootPathDALWS + "\\" + DALWSNameSpace + ".csproj", true);
				this.RenderToFile(projectTemplate, rootPathDALWS + "\\" + DALWSNameSpace + ".csproj", true);
			}
		}
		
		// Unit tests only project file
		if (IncludeUnitTest) // && !File.Exists(rootPathDAL + "\\" + NameSpace + ".DataAccessLayer.csproj"))
		{
			AddFileNode(commonNode, NameSpace + "." + UnitTestsNameSpace + ".csproj");
			
			this.GetTemplate(projectTemplate).SetProperty("SourceDatabase", SourceDatabase);
			this.GetTemplate(projectTemplate).SetProperty("SourceTables", _sourceTables);
			this.GetTemplate(projectTemplate).SetProperty("SourceViews", _sourceViews);
			this.GetTemplate(projectTemplate).SetProperty("EnumTables", _enumTables);
						
			this.GetTemplate(projectTemplate).SetProperty("BLLGuid", bllGuid);
			this.GetTemplate(projectTemplate).SetProperty("DALGuid", dalGuid);
			this.GetTemplate(projectTemplate).SetProperty("DALSqlGuid", DALSqlGuid);
			this.GetTemplate(projectTemplate).SetProperty("DALWSGuid", DALWSGuid);
			this.GetTemplate(projectTemplate).SetProperty("UTGuid", utGuid);
			this.GetTemplate(projectTemplate).SetProperty("WSGuid", wsGuid);
					
			this.GetTemplate(projectTemplate).SetProperty("IncludeBll", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeDALBase", false);	
			this.GetTemplate(projectTemplate).SetProperty("IncludeSqlClient", false);			
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebservice", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeWebserviceClient", false);
			this.GetTemplate(projectTemplate).SetProperty("IncludeUnitTest", true);
			
			this.GetTemplate(projectTemplate).SetProperty("SingleProject", false);
			
			this.GetTemplate(projectTemplate).SetProperty("WebServiceUrl", WebServiceUrl);
			this.GetTemplate(projectTemplate).SetProperty("rootPathWS", rootPathWS);
			
			this.GetTemplate(projectTemplate).SetProperty("NameSpace", NameSpace);
			this.GetTemplate(projectTemplate).SetProperty("BLLNameSpace", BLLNameSpace);
			this.GetTemplate(projectTemplate).SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate(projectTemplate).SetProperty("DALSqlNameSpace", DALSqlNameSpace);
			this.GetTemplate(projectTemplate).SetProperty("DALWSNameSpace", DALWSNameSpace);
			this.GetTemplate(projectTemplate).SetProperty("UTNameSpace", UTNameSpace);
			this.GetTemplate(projectTemplate).SetProperty("WSNameSpace", WSNameSpace);
						
			this.GetTemplate(projectTemplate).SetProperty("OutputDirectory", OutputDirectory);
			
			this.GetTemplate(projectTemplate).SetProperty("UsePartialClass", UsePartialClass);
											
			//this.GetTemplate(projectTemplate).RenderToFile(rootPathUT + "\\" + UTNameSpace + ".csproj", true);
			this.RenderToFile(projectTemplate, rootPathUT + "\\" + UTNameSpace + ".csproj", true);
		}
	}
	/*else if (vsnetIntegration == VSNetIntegration.SingleProject) // && !File.Exists(OutputDirectory + "\\" + NameSpace + ".csproj"))
	{
		AddFileNode(commonNode, NameSpace + ".csproj");
		
		this.GetTemplate(projectTemplate).SetProperty("SourceDatabase", SourceDatabase);
		this.GetTemplate(projectTemplate).SetProperty("SourceTables", _sourceTables);
		this.GetTemplate(projectTemplate).SetProperty("SourceViews", _sourceViews);
		this.GetTemplate(projectTemplate).SetProperty("EnumTables", _enumTables);
			
		this.GetTemplate(projectTemplate).SetProperty("NameSpace", NameSpace);
			
		this.GetTemplate(projectTemplate).SetProperty("BLLGuid", bllGuid);
		this.GetTemplate(projectTemplate).SetProperty("DALGuid", dalGuid);		
		this.GetTemplate(projectTemplate).SetProperty("UTGuid", utGuid);
		
		this.GetTemplate(projectTemplate).SetProperty("OutputDirectory", OutputDirectory);
		
		this.GetTemplate(projectTemplate).SetProperty("BusinessLogicLayerFolderName", BusinessLogicLayerFolderName);
		this.GetTemplate(projectTemplate).SetProperty("DataAccessLayerNameSpace", DataAccessLayerNameSpace);
		this.GetTemplate(projectTemplate).SetProperty("UnitTestsNameSpace", UnitTestsNameSpace);
				
		this.GetTemplate(projectTemplate).SetProperty("IncludeBll", GenerateBusinessLogicLayer);
		this.GetTemplate(projectTemplate).SetProperty("IncludeSqlClient", GenerateDataAccessLayer);	
		this.GetTemplate(projectTemplate).SetProperty("IncludeWebservice", GenerateDataAccessLayer && GenerateWebservice);		
		this.GetTemplate(projectTemplate).SetProperty("IncludeUnitTest", IncludeUnitTest);
		
		this.GetTemplate(projectTemplate).SetProperty("SingleProject", true);
		
		this.GetTemplate(projectTemplate).SetProperty("WebServiceUrl", WebServiceUrl);
		
		this.GetTemplate(projectTemplate).RenderToFile(OutputDirectory + "\\" + NameSpace + ".csproj", true);
		
	}
	*/
	
	//----------------------------------------------------------------------------------------------------------------------------------------------
	
	//----------------------------------------------------------------------------------------------------------------------------------------------
	//-- Generating nAnt file
	//----------------------------------------------------------------------------------------------------------------------------------------------
	if (vsnetIntegration != VSNetIntegration.None && !File.Exists(OutputDirectory + "\\" + NameSpace + ".build"))
	{
		AddFileNode(commonNode, NameSpace + ".build");
				
		this.GetTemplate("nAnt.cst").SetProperty("CompanyName", CompanyName);
		this.GetTemplate("nAnt.cst").SetProperty("CompanyURL", CompanyURL);
		
		this.GetTemplate("nAnt.cst").SetProperty("IncludeBll", GenerateBusinessLogicLayer);
		this.GetTemplate("nAnt.cst").SetProperty("IncludeSqlClient", GenerateDataAccessLayer);
		this.GetTemplate("nAnt.cst").SetProperty("IncludeWebServiceClient", GenerateWebservice);
		this.GetTemplate("nAnt.cst").SetProperty("IncludeUnitTest", IncludeUnitTest);
		
		this.GetTemplate("nAnt.cst").SetProperty("NameSpace", NameSpace);
		this.GetTemplate("nAnt.cst").SetProperty("DALNameSpace", DALNameSpace);
		this.GetTemplate("nAnt.cst").SetProperty("BLLNameSpace", BLLNameSpace);
		this.GetTemplate("nAnt.cst").SetProperty("DALSqlNameSpace", DALSqlNameSpace);
		this.GetTemplate("nAnt.cst").SetProperty("DALWSNameSpace", DALWSNameSpace);
		this.GetTemplate("nAnt.cst").SetProperty("UTNameSpace", UTNameSpace);
		this.GetTemplate("nAnt.cst").SetProperty("WSNameSpace", WSNameSpace);
		
		this.GetTemplate("nAnt.cst").SetProperty("SingleProject", vsnetIntegration == VSNetIntegration.SingleProject);
		
		this.RenderToFile("nAnt.cst", OutputDirectory + "\\" + NameSpace + ".build", false);
	}
	
	//----------------------------------------------------------------------------------------------------------------------------------------------
	//-- EntityHelper.cs
	//----------------------------------------------------------------------------------------------------------------------------------------------
	XmlElement entityHelperNode = AddFileNode(commonNode, "EntityHelper.cs");
	this.GetTemplate("EntityHelper.cst").SetProperty("NameSpace", BLLNameSpace);
	this.GetTemplate("EntityHelper.cst").RenderToFile(rootPathBLL + "\\EntityHelper.cs", true);
	//AddExecutionTime(entityHelperNode);
	//----------------------------------------------------------------------------------------------------------------------------------------------
	
	string version = string.Empty;
	if (!File.Exists(OutputDirectory + "\\AssemblyInfo.cs"))
	{
		version = "1.0.0.0";
	}
	else
	{
		version = IncrementBuildVersion(OutputDirectory + "\\AssemblyInfo.cs");		
	}
	
	this.GetTemplate("AssemblyInfo.cst").SetProperty("NameSpace", NameSpace);
	this.GetTemplate("AssemblyInfo.cst").SetProperty("CompanyName", CompanyName);
	this.GetTemplate("AssemblyInfo.cst").SetProperty("CompanyURL", CompanyURL);
	this.GetTemplate("AssemblyInfo.cst").SetProperty("Version", version);
	this.RenderToFile("AssemblyInfo.cst", OutputDirectory + "\\AssemblyInfo.cs", true );
	
	if (GenerateWebservice)
	{
		//this.GetTemplate("AssemblyInfo.cst").RenderToFile(rootPathWS + "\\AssemblyInfo.cs", true);
		this.RenderToFile("AssemblyInfo.cst", rootPathWS + "\\AssemblyInfo.cs", true);
	}
		
	AddExecutionTime(commonNode);
	
	
	//----------------------------------------------------------------------------------------------------------------------------------------------
	// -- Process the By View templates
	// -----------------------------------
	
	for(int x=0; x < _sourceViews.Count; x++)
	{
		ViewSchema SourceView = _sourceViews[x];
		_CurrentPhase = string.Format("Generating {0} files", SourceView.Name);
		XmlElement tableNode = AddTableNode(SourceView.Name);
		
		//Debugger.Break();
	
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//-- Abstract Business Object
		//----------------------------------------------------------------------------------------------------------------------------------------------
		XmlElement boBaseNode = AddFileNode(tableNode, GetAbstractClassName(SourceView.Name) + ".cs");
				
		this.GetTemplate("EntityViewBase.cst").SetProperty("SourceView", SourceView);
		this.GetTemplate("EntityViewBase.cst").SetProperty("SourceTables", _sourceTables);
		this.GetTemplate("EntityViewBase.cst").SetProperty("NameSpace", BLLNameSpace);
		this.GetTemplate("EntityViewBase.cst").SetProperty("IncludeRelations", IncludeRelations);
		this.GetTemplate("EntityViewBase.cst").SetProperty("UsePartialClass", UsePartialClass);
		
		this.RenderToFile("EntityViewBase.cst", rootPathBLL + "\\Views\\" + (UsePartialClass ? GetPartialClassName(GetClassName(SourceView.Name)) : GetAbstractClassName(SourceView.Name)) + ".cs", true);
		
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//-- Business Object
		//----------------------------------------------------------------------------------------------------------------------------------------------
		if (!File.Exists(rootPathBLL + "\\Views\\" + GetClassName(SourceView.Name) + ".cs") && !OverwritePartialClassStub)
		{
			XmlElement boNode = AddFileNode(tableNode, GetClassName(SourceView.Name) + ".cs");
							
			this.GetTemplate("EntityView.cst").SetProperty("SourceView", SourceView);
			this.GetTemplate("EntityView.cst").SetProperty("NameSpace", BLLNameSpace);
			this.GetTemplate("EntityView.cst").SetProperty("UsePartialClass", UsePartialClass);			
			this.RenderToFile("EntityView.cst", rootPathBLL + "\\Views\\" + GetClassName(SourceView.Name) + ".cs", false);	
		}
		
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//	Abstract Collection of Business Object
		//----------------------------------------------------------------------------------------------------------------------------------------------
		XmlElement colBaseNode = AddFileNode(tableNode, GetAbstractCollectionClassName(SourceView.Name) + ".cs");
		this.GetTemplate("EntityViewCollectionBase.cst").SetProperty("SourceView", SourceView);
		this.GetTemplate("EntityViewCollectionBase.cst").SetProperty("NameSpace", BLLNameSpace);
		this.GetTemplate("EntityViewCollectionBase.cst").SetProperty("UsePartialClass", UsePartialClass);	
		
		this.RenderToFile("EntityViewCollectionBase.cst", rootPathBLL + "\\Views\\" + (UsePartialClass ? GetPartialClassName(GetCollectionClassName(SourceView.Name)) : GetAbstractCollectionClassName(SourceView.Name)) + ".cs", true);
		//AddExecutionTime(colBaseNode);
		//----------------------------------------------------------------------------------------------------------------------------------------------
					
		
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//	Collection of Business Object
		//----------------------------------------------------------------------------------------------------------------------------------------------
		if(!File.Exists(rootPathBLL + "\\Views\\" + GetCollectionClassName(SourceView.Name) + ".cs") && !OverwritePartialClassStub)
		{
			XmlElement colNode = AddFileNode(tableNode, GetCollectionClassName(SourceView.Name) + ".cs");
			this.GetTemplate("EntityViewCollection.cst").SetProperty("NameSpace", BLLNameSpace);
			this.GetTemplate("EntityViewCollection.cst").SetProperty("ClassName", GetClassName(SourceView.Name));
			this.GetTemplate("EntityViewCollection.cst").SetProperty("CollectionClassName", GetCollectionClassName(SourceView.Name));
			this.GetTemplate("EntityViewCollection.cst").SetProperty("AbstractCollectionClassName", GetAbstractCollectionClassName(SourceView.Name));
			this.GetTemplate("EntityViewCollection.cst").SetProperty("UsePartialClass", UsePartialClass);	
		
			this.RenderToFile("EntityViewCollection.cst", rootPathBLL + "\\Views\\" + GetCollectionClassName(SourceView.Name) + ".cs", false);
			//AddExecutionTime(colNode);
		}
		//----------------------------------------------------------------------------------------------------------------------------------------------
		
		
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//	Generating the entity Repository decorator		
		//----------------------------------------------------------------------------------------------------------------------------------------------
		XmlElement dalcFactoryNode = AddFileNode(tableNode, GetProviderBaseName(SourceView.Name) + ".cs");
		
		this.GetTemplate("EntityViewProviderBase.cst").SetProperty("IncludeCustoms", IncludeCustoms);
		this.GetTemplate("EntityViewProviderBase.cst").SetProperty("IncludeGetList", IncludeGetList);
		this.GetTemplate("EntityViewProviderBase.cst").SetProperty("IncludeGetListByIX", IncludeGetListByIX);
		this.GetTemplate("EntityViewProviderBase.cst").SetProperty("IncludeFind", IncludeFind);
		this.GetTemplate("EntityViewProviderBase.cst").SetProperty("SourceView", SourceView);
		this.GetTemplate("EntityViewProviderBase.cst").SetProperty("NameSpace", BLLNameSpace);
		this.GetTemplate("EntityViewProviderBase.cst").SetProperty("DALNameSpace", DALNameSpace);
							
		this.RenderToFile("EntityViewProviderBase.cst", rootPathDAL + "\\Bases\\Views\\" + GetProviderBaseName(SourceView.Name) + ".cs", true);
		//----------------------------------------------------------------------------------------------------------------------------------------------



		//----------------------------------------------------------------------------------------------------------------------------------------------
		//	base provider class
		//----------------------------------------------------------------------------------------------------------------------------------------------
		XmlElement dalcViewBaseNode = AddFileNode(tableNode, "Sql"+GetProviderBaseName(SourceView.Name) + ".cs");
		this.GetTemplate("SqlEntityViewProviderBase.cst").SetProperty("IncludeCustoms", IncludeCustoms);
		this.GetTemplate("SqlEntityViewProviderBase.cst").SetProperty("IncludeGetList", IncludeGetList);
		this.GetTemplate("SqlEntityViewProviderBase.cst").SetProperty("IncludeGetListByIX", IncludeGetListByIX);
		this.GetTemplate("SqlEntityViewProviderBase.cst").SetProperty("IncludeFind", IncludeFind);
		this.GetTemplate("SqlEntityViewProviderBase.cst").SetProperty("SourceView", SourceView);
		this.GetTemplate("SqlEntityViewProviderBase.cst").SetProperty("NameSpace", BLLNameSpace);
		this.GetTemplate("SqlEntityViewProviderBase.cst").SetProperty("DALNameSpace", DALNameSpace);
		this.GetTemplate("SqlEntityViewProviderBase.cst").SetProperty("SelectSuffix", SelectSuffix);
		this.GetTemplate("SqlEntityViewProviderBase.cst").SetProperty("SelectAllSuffix", SelectAllSuffix);
		this.GetTemplate("SqlEntityViewProviderBase.cst").SetProperty("ProcedurePrefix", ProcedurePrefix);
			
		this.RenderToFile("SqlEntityViewProviderBase.cst", rootPathDALSql + "\\Views\\Sql" + GetProviderBaseName(SourceView.Name) + ".cs", true);
		//----------------------------------------------------------------------------------------------------------------------------------------------
		
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//	provider class
		//----------------------------------------------------------------------------------------------------------------------------------------------
		if (!File.Exists(rootPathDALSql + "\\Views\\Sql" + GetProviderName(SourceView.Name) + ".cs"))
		{
			XmlElement sqlDalcNode = AddFileNode(tableNode, "SqlClient\\Views\\"+ GetProviderName(SourceView.Name) + ".cs");
			//Response.WriteLine("Building concrete SqlClient Repository class : SqlClient\\" + GetProviderName(SourceTable.Name));
			this.GetTemplate("SqlEntityViewProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("SqlEntityViewProvider.cst").SetProperty("ClassName", GetClassName(SourceView.Name));
			this.GetTemplate("SqlEntityViewProvider.cst").SetProperty("ProviderName", "Sql" + GetProviderName(SourceView.Name));
			this.GetTemplate("SqlEntityViewProvider.cst").SetProperty("ProviderBaseName", "Sql" + GetProviderBaseName(SourceView.Name));
			this.GetTemplate("SqlEntityViewProvider.cst").SetProperty("DotNet2", vsnetVersion == VSNetVersion.v2005);
					
			this.RenderToFile("SqlEntityViewProvider.cst", rootPathDALSql + "\\Views\\Sql" + GetProviderName(SourceView.Name) + ".cs", false);
			//AddExecutionTime(sqlDalcNode);
		}
		
		//----------------------------------------------------------------------------------------------------------------------------------------------
		//	entity and provider nUnit Test class
		//----------------------------------------------------------------------------------------------------------------------------------------------
		if (IncludeUnitTest)
		{
			XmlElement testNode = AddFileNode(tableNode, GetRepositoryTestClassName(SourceView.Name) + ".cs");
			this.GetTemplate("EntityViewRepositoryTest.cst").SetProperty("SourceView", SourceView);
			this.GetTemplate("EntityViewRepositoryTest.cst").SetProperty("SourceTables", _sourceTables);
			
			this.GetTemplate("EntityViewRepositoryTest.cst").SetProperty("NameSpace", BLLNameSpace);
			this.GetTemplate("EntityViewRepositoryTest.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("EntityViewRepositoryTest.cst").SetProperty("UTNameSpace", UTNameSpace);
				
			this.GetTemplate("EntityViewRepositoryTest.cst").SetProperty("IncludeGetList", IncludeGetList);
			this.GetTemplate("EntityViewRepositoryTest.cst").SetProperty("IncludeCustoms", IncludeCustoms);
						
			this.RenderToFile("EntityViewRepositoryTest.cst", rootPathUT + "\\Views\\" + GetRepositoryTestClassName(SourceView.Name) + ".cs", true);
			AddExecutionTime(testNode);
		}
		
		
		if (GenerateWebservice)
		{
			//----------------------------------------------------------------------------------------------------------------------------------------------
			//	base provider class
			//----------------------------------------------------------------------------------------------------------------------------------------------
			XmlElement wsdalcViewBaseNode = AddFileNode(tableNode, "Ws"+GetProviderBaseName(SourceView.Name) + ".cs");
			this.GetTemplate("WsEntityViewProviderBase.cst").SetProperty("IncludeCustoms", IncludeCustoms);
			this.GetTemplate("WsEntityViewProviderBase.cst").SetProperty("IncludeGetList", IncludeGetList);
			this.GetTemplate("WsEntityViewProviderBase.cst").SetProperty("IncludeGetListByIX", IncludeGetListByIX);
			this.GetTemplate("WsEntityViewProviderBase.cst").SetProperty("IncludeFind", IncludeFind);
			this.GetTemplate("WsEntityViewProviderBase.cst").SetProperty("SourceView", SourceView);
			this.GetTemplate("WsEntityViewProviderBase.cst").SetProperty("NameSpace", BLLNameSpace);
			this.GetTemplate("WsEntityViewProviderBase.cst").SetProperty("DALNameSpace", DALNameSpace);
			this.GetTemplate("WsEntityViewProviderBase.cst").SetProperty("SelectSuffix", SelectSuffix);
			this.GetTemplate("WsEntityViewProviderBase.cst").SetProperty("SelectAllSuffix", SelectAllSuffix);
			this.GetTemplate("WsEntityViewProviderBase.cst").SetProperty("FindSuffix", FindSuffix);
			
			this.GetTemplate("WsEntityViewProviderBase.cst").SetProperty("WebReferenceName", "WsProxy");
			this.GetTemplate("WsEntityViewProviderBase.cst").SetProperty("ProxyClassName", SourceDatabase.Name + "Services");
			
				
			this.RenderToFile("WsEntityViewProviderBase.cst", rootPathDALWS + "\\Views\\Ws" + GetProviderBaseName(SourceView.Name) + ".cs", true);
			AddExecutionTime(wsdalcViewBaseNode);
			//----------------------------------------------------------------------------------------------------------------------------------------------
			
			//----------------------------------------------------------------------------------------------------------------------------------------------
			//	provider class
			//----------------------------------------------------------------------------------------------------------------------------------------------
			if (!File.Exists(rootPathDALWS + "\\Views\\Ws" + GetProviderName(SourceView.Name) + ".cs"))
			{
				XmlElement wsDalcViewNode = AddFileNode(tableNode, "WebServiceClient\\Views\\"+ GetProviderName(SourceView.Name) + ".cs");
				//Response.WriteLine("Building concrete SqlClient Repository class : SqlClient\\" + GetProviderName(SourceTable.Name));
				this.GetTemplate("WsEntityViewProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate("WsEntityViewProvider.cst").SetProperty("ClassName", GetClassName(SourceView.Name));
				this.GetTemplate("WsEntityViewProvider.cst").SetProperty("ProviderName", "Ws" + GetProviderName(SourceView.Name));
				this.GetTemplate("WsEntityViewProvider.cst").SetProperty("ProviderBaseName", "Ws" + GetProviderBaseName(SourceView.Name));
				this.GetTemplate("WsEntityViewProvider.cst").SetProperty("DotNet2", vsnetVersion == VSNetVersion.v2005);
			
				this.RenderToFile("WsEntityViewProvider.cst", rootPathDALWS + "\\Views\\Ws" + GetProviderName(SourceView.Name) + ".cs", false);
				AddExecutionTime(wsDalcViewNode);
			}
		}		
		
		AddExecutionTime(tableNode);
		_CurrentObjectIndex++;
	}
	
	
	//----------------------------------------------------------------------------------------------------------------------------------------------
	// -- Now process the By DataTable templates
	// -----------------------------------
	for (int x=0; x < _sourceTables.Count; x++)
	{
		TableSchema SourceTable = _sourceTables[x];
		_CurrentPhase = string.Format("Generating {0} files", SourceTable.Name);
	
		XmlElement tableNode = AddTableNode(SourceTable);
				
	
		if (GenerateBusinessLogicLayer)
		{
			//----------------------------------------------------------------------------------------------------------------------------------------------
			//-- Entity data struct
			//----------------------------------------------------------------------------------------------------------------------------------------------
			XmlElement structNode = AddFileNode(tableNode, GetStructName(SourceTable.Name) + ".cs");
					
			this.GetTemplate("EntityData.cst").SetProperty("SourceTable", SourceTable);
			this.GetTemplate("EntityData.cst").SetProperty("SourceTables", _sourceTables);
			this.GetTemplate("EntityData.cst").SetProperty("NameSpace", BLLNameSpace);
			this.GetTemplate("EntityData.cst").SetProperty("IncludeRelations", IncludeRelations);
			this.GetTemplate("EntityData.cst").SetProperty("IncludeManyToMany", IncludeRelations);
			
			this.RenderToFile("EntityData.cst", rootPathBLL + "\\" + GetStructName(SourceTable.Name) + ".cs", true);
			
			AddExecutionTime(structNode);
						
			//----------------------------------------------------------------------------------------------------------------------------------------------
			//-- Abstract Business Object
			//----------------------------------------------------------------------------------------------------------------------------------------------
			XmlElement boBaseNode = AddFileNode(tableNode, GetAbstractClassName(SourceTable.Name) + ".cs");
					
			this.GetTemplate("EntityBase.cst").SetProperty("SourceTable", SourceTable);
			this.GetTemplate("EntityBase.cst").SetProperty("SourceTables", _sourceTables);
			this.GetTemplate("EntityBase.cst").SetProperty("NameSpace", BLLNameSpace);
			this.GetTemplate("EntityBase.cst").SetProperty("IncludeRelations", IncludeRelations);
			this.GetTemplate("EntityBase.cst").SetProperty("IncludeManyToMany", IncludeManyToMany);
			this.GetTemplate("EntityBase.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);
			this.GetTemplate("EntityBase.cst").SetProperty("UsePartialClass", UsePartialClass);
			
			this.RenderToFile("EntityBase.cst", rootPathBLL + "\\" + (UsePartialClass ? GetPartialClassName(GetClassName(SourceTable.Name)) : GetAbstractClassName(SourceTable.Name)) + ".cs", true);
			
			AddExecutionTime(boBaseNode);
			
			//----------------------------------------------------------------------------------------------------------------------------------------------
			//-- Business Object
			//----------------------------------------------------------------------------------------------------------------------------------------------
			if (!File.Exists(rootPathBLL + "\\" + GetClassName(SourceTable.Name) + ".cs") && !OverwritePartialClassStub)
			{
				XmlElement boNode = AddFileNode(tableNode, GetClassName(SourceTable.Name) + ".cs");
								
				this.GetTemplate("Entity.cst").SetProperty("SourceTable", SourceTable);
				this.GetTemplate("Entity.cst").SetProperty("NameSpace", BLLNameSpace);
				this.GetTemplate("Entity.cst").SetProperty("UsePartialClass", UsePartialClass);	
				
				this.RenderToFile("Entity.cst", rootPathBLL + "\\" + GetClassName(SourceTable.Name) + ".cs", false);
				
				AddExecutionTime(boNode);
			}
			
			
			//----------------------------------------------------------------------------------------------------------------------------------------------
			//-- Business Object Enum
			//----------------------------------------------------------------------------------------------------------------------------------------------
			
			if (_enumTables.Contains(SourceTable))
			{
				XmlElement boNode = AddFileNode(tableNode, GetEnumName(SourceTable.Name) + ".cs");
								
				this.GetTemplate("Enum.cst").SetProperty("SourceTable", SourceTable);
				this.GetTemplate("Enum.cst").SetProperty("NameSpace", BLLNameSpace);
				
				this.RenderToFile("Enum.cst", rootPathBLL + "\\" + GetEnumName(SourceTable.Name) + ".cs", true);
				AddExecutionTime(boNode);
			}
			
			
			//----------------------------------------------------------------------------------------------------------------------------------------------
			//	Abstract Collection of Business Object
			//----------------------------------------------------------------------------------------------------------------------------------------------
			XmlElement colBaseNode = AddFileNode(tableNode, GetAbstractCollectionClassName(SourceTable.Name) + ".cs");
			this.GetTemplate("EntityCollectionBase.cst").SetProperty("SourceTable", SourceTable);
			this.GetTemplate("EntityCollectionBase.cst").SetProperty("NameSpace", BLLNameSpace);
			this.GetTemplate("EntityCollectionBase.cst").SetProperty("UsePartialClass", UsePartialClass);
			
			this.RenderToFile("EntityCollectionBase.cst", rootPathBLL + "\\" + (UsePartialClass ? GetPartialClassName(GetCollectionClassName(SourceTable.Name)) : GetAbstractCollectionClassName(SourceTable.Name)) + ".cs", true);
			AddExecutionTime(colBaseNode);
			//----------------------------------------------------------------------------------------------------------------------------------------------
						
			
			//----------------------------------------------------------------------------------------------------------------------------------------------
			//	Collection of Business Object
			//----------------------------------------------------------------------------------------------------------------------------------------------
			if(!File.Exists(rootPathBLL + "\\" + GetCollectionClassName(SourceTable.Name) + ".cs") && !OverwritePartialClassStub)
			{
				XmlElement colNode = AddFileNode(tableNode, GetCollectionClassName(SourceTable.Name) + ".cs");
				this.GetTemplate("EntityCollection.cst").SetProperty("NameSpace", BLLNameSpace);
				this.GetTemplate("EntityCollection.cst").SetProperty("ClassName", GetClassName(SourceTable.Name));
				this.GetTemplate("EntityCollection.cst").SetProperty("CollectionClassName", GetCollectionClassName(SourceTable.Name));
				this.GetTemplate("EntityCollection.cst").SetProperty("AbstractCollectionClassName", GetAbstractCollectionClassName(SourceTable.Name));
				this.GetTemplate("EntityCollection.cst").SetProperty("UsePartialClass", UsePartialClass);
				
				this.RenderToFile("EntityCollection.cst", rootPathBLL + "\\" + GetCollectionClassName(SourceTable.Name) + ".cs", false);
				AddExecutionTime(colNode);
			}
			//----------------------------------------------------------------------------------------------------------------------------------------------
		}
		
		
		
		if (GenerateDataAccessLayer)
		{
			//----------------------------------------------------------------------------------------------------------------------------------------------
			//	Generating the entity Repository decorator		
			//----------------------------------------------------------------------------------------------------------------------------------------------
			XmlElement dalcFactoryNode = AddFileNode(tableNode, GetProviderBaseName(SourceTable.Name) + ".cs");
			
			this.GetTemplate("EntityProviderBase.cst").SetProperty("SourceTable", SourceTable);
			this.GetTemplate("EntityProviderBase.cst").SetProperty("SourceTables", _sourceTables);
			
			this.GetTemplate("EntityProviderBase.cst").SetProperty("IncludeCustoms", IncludeCustoms);
			this.GetTemplate("EntityProviderBase.cst").SetProperty("IncludeInsert", IncludeInsert);
			this.GetTemplate("EntityProviderBase.cst").SetProperty("IncludeUpdate", IncludeUpdate);
			this.GetTemplate("EntityProviderBase.cst").SetProperty("IncludeSave", IncludeSave);
			this.GetTemplate("EntityProviderBase.cst").SetProperty("IncludeDelete", IncludeDelete);
			this.GetTemplate("EntityProviderBase.cst").SetProperty("IncludeManyToMany", IncludeManyToMany);
			this.GetTemplate("EntityProviderBase.cst").SetProperty("IncludeGetList", IncludeGetList);
			this.GetTemplate("EntityProviderBase.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);
			this.GetTemplate("EntityProviderBase.cst").SetProperty("IncludeGetListByIX", IncludeGetListByIX);
			this.GetTemplate("EntityProviderBase.cst").SetProperty("IncludeFind", IncludeFind);
			
			this.GetTemplate("EntityProviderBase.cst").SetProperty("NameSpace", BLLNameSpace);
			this.GetTemplate("EntityProviderBase.cst").SetProperty("DALNameSpace", DALNameSpace);
							
			this.RenderToFile("EntityProviderBase.cst", rootPathDAL + "\\Bases\\" + GetProviderBaseName(SourceTable.Name) + ".cs", true);
			AddExecutionTime(dalcFactoryNode);
			//----------------------------------------------------------------------------------------------------------------------------------------------


			//----------------------------------------------------------------------------------------------------------------------------------------------
			//	Generating the abstract SqlClient entity Repository class		
			//----------------------------------------------------------------------------------------------------------------------------------------------
			XmlElement sqlDalcBaseNode = AddFileNode(tableNode, "SqlClient\\Sql"+ GetAbstractRepositoryClassName(SourceTable.Name) + ".cs");
			
			//Response.WriteLine("Building abstract SqlClient Repository class : SqlClient\\" + GetAbstractRepositoryClassName(SourceTable.Name) );
			this.GetTemplate("SqlEntityProviderBase.cst").SetProperty("IncludeCustoms", IncludeCustoms);
			this.GetTemplate("SqlEntityProviderBase.cst").SetProperty("IncludeInsert", IncludeInsert);
			this.GetTemplate("SqlEntityProviderBase.cst").SetProperty("IncludeUpdate", IncludeUpdate);
			this.GetTemplate("SqlEntityProviderBase.cst").SetProperty("IncludeSave", IncludeSave);
			this.GetTemplate("SqlEntityProviderBase.cst").SetProperty("IncludeDelete", IncludeDelete);
			this.GetTemplate("SqlEntityProviderBase.cst").SetProperty("IncludeManyToMany", IncludeManyToMany);
			this.GetTemplate("SqlEntityProviderBase.cst").SetProperty("IncludeGetList", IncludeGetList);
			this.GetTemplate("SqlEntityProviderBase.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);
			this.GetTemplate("SqlEntityProviderBase.cst").SetProperty("IncludeGetListByIX", IncludeGetListByIX);
			this.GetTemplate("SqlEntityProviderBase.cst").SetProperty("IncludeFind", IncludeFind);
			this.GetTemplate("SqlEntityProviderBase.cst").SetProperty("IsolationLevel", IsolationLevel);
			this.GetTemplate("SqlEntityProviderBase.cst").SetProperty("ExcludeFields", ExcludeFields);
			
			this.GetTemplate("SqlEntityProviderBase.cst").SetProperty("InsertSuffix", InsertSuffix);
			this.GetTemplate("SqlEntityProviderBase.cst").SetProperty("UpdateSuffix", UpdateSuffix);
			this.GetTemplate("SqlEntityProviderBase.cst").SetProperty("DeleteSuffix", DeleteSuffix);
			this.GetTemplate("SqlEntityProviderBase.cst").SetProperty("SelectSuffix", SelectSuffix);
			this.GetTemplate("SqlEntityProviderBase.cst").SetProperty("SelectAllSuffix", SelectAllSuffix);
			this.GetTemplate("SqlEntityProviderBase.cst").SetProperty("FindSuffix", FindSuffix);
			this.GetTemplate("SqlEntityProviderBase.cst").SetProperty("ProcedurePrefix", ProcedurePrefix.Replace(" ", ""));
			
			this.GetTemplate("SqlEntityProviderBase.cst").SetProperty("SourceTable", SourceTable);
			this.GetTemplate("SqlEntityProviderBase.cst").SetProperty("SourceTables", _sourceTables);
			this.GetTemplate("SqlEntityProviderBase.cst").SetProperty("NameSpace", BLLNameSpace);
			this.GetTemplate("SqlEntityProviderBase.cst").SetProperty("DALNameSpace", DALNameSpace);
			
						
			this.RenderToFile("SqlEntityProviderBase.cst", rootPathDALSql + "\\Sql" + GetProviderBaseName(SourceTable.Name) + ".cs", true);
			AddExecutionTime(sqlDalcBaseNode);
			//----------------------------------------------------------------------------------------------------------------------------------------------
			
			
			//----------------------------------------------------------------------------------------------------------------------------------------------
			//	Generating the SqlClient Repository Implementation, only if not already there
			//----------------------------------------------------------------------------------------------------------------------------------------------
			if (!File.Exists(rootPathDALSql+ "\\Sql" + GetProviderName(SourceTable.Name) + ".cs"))
			{
				XmlElement sqlDalcNode = AddFileNode(tableNode, "SqlClient\\"+ GetRepositoryClassName(SourceTable.Name) + ".cs");
				//Response.WriteLine("Building concrete SqlClient Repository class : SqlClient\\" + GetRepositoryClassName(SourceTable.Name));
				this.GetTemplate("SqlEntityProvider.cst").SetProperty("NameSpace", BLLNameSpace);
				this.GetTemplate("SqlEntityProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate("SqlEntityProvider.cst").SetProperty("ClassName", GetClassName(SourceTable.Name));
				this.GetTemplate("SqlEntityProvider.cst").SetProperty("ProviderName", "Sql" + GetProviderName(SourceTable.Name));
				this.GetTemplate("SqlEntityProvider.cst").SetProperty("ProviderBaseName", "Sql" + GetProviderBaseName(SourceTable.Name));
				this.GetTemplate("SqlEntityProvider.cst").SetProperty("DotNet2", vsnetVersion == VSNetVersion.v2005);
			
				this.RenderToFile("SqlEntityProvider.cst", rootPathDALSql + "\\Sql" + GetProviderName(SourceTable.Name) + ".cs", false);
				AddExecutionTime(sqlDalcNode);
			}

			
			//----------------------------------------------------------------------------------------------------------------------------------------------
			//	Generating the Repository nUnit Test class
			//----------------------------------------------------------------------------------------------------------------------------------------------
			if (IncludeUnitTest && !IsJunctionTable(SourceTable))
			{
				XmlElement testNode = AddFileNode(tableNode, GetRepositoryTestClassName(SourceTable.Name) + ".cs");
				this.GetTemplate("EntityRepositoryTest.cst").SetProperty("SourceTable", SourceTable);
				this.GetTemplate("EntityRepositoryTest.cst").SetProperty("SourceTables", _sourceTables);
				
				this.GetTemplate("EntityRepositoryTest.cst").SetProperty("NameSpace", BLLNameSpace);
				this.GetTemplate("EntityRepositoryTest.cst").SetProperty("DALNameSpace", DALNameSpace);
				this.GetTemplate("EntityRepositoryTest.cst").SetProperty("UTNameSpace", UTNameSpace);
				
				this.GetTemplate("EntityRepositoryTest.cst").SetProperty("IncludeInsert", IncludeInsert);
				this.GetTemplate("EntityRepositoryTest.cst").SetProperty("IncludeUpdate", IncludeUpdate);
				this.GetTemplate("EntityRepositoryTest.cst").SetProperty("IncludeSave", IncludeSave);
				this.GetTemplate("EntityRepositoryTest.cst").SetProperty("IncludeDelete", IncludeDelete);
				this.GetTemplate("EntityRepositoryTest.cst").SetProperty("IncludeGetList", IncludeGetList);		
				this.GetTemplate("EntityRepositoryTest.cst").SetProperty("IncludeManyToMany", IncludeManyToMany);		
				this.GetTemplate("EntityRepositoryTest.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);		
				this.GetTemplate("EntityRepositoryTest.cst").SetProperty("IncludeGetListByIX", IncludeGetListByIX);	
				
				this.RenderToFile("EntityRepositoryTest.cst", rootPathUT + "\\" + GetRepositoryTestClassName(SourceTable.Name) + ".cs", true);
				AddExecutionTime(testNode);
			}
						
			
			if (GenerateWebservice)
			{
				//----------------------------------------------------------------------------------------------------------------------------------------------
				//	Generating the abstract WebService client Repository class		
				//----------------------------------------------------------------------------------------------------------------------------------------------
				
				XmlElement wsDalcBaseNode = AddFileNode(tableNode, "WebServiceClient\\Ws" + GetAbstractRepositoryClassName(SourceTable.Name) + ".cs");
				
				this.GetTemplate("WsEntityProviderBase.cst").SetProperty("IncludeCustoms", IncludeCustoms);
				this.GetTemplate("WsEntityProviderBase.cst").SetProperty("IncludeInsert", IncludeInsert);
				this.GetTemplate("WsEntityProviderBase.cst").SetProperty("IncludeUpdate", IncludeUpdate);
				this.GetTemplate("WsEntityProviderBase.cst").SetProperty("IncludeSave", IncludeSave);
				this.GetTemplate("WsEntityProviderBase.cst").SetProperty("IncludeDelete", IncludeDelete);
				this.GetTemplate("WsEntityProviderBase.cst").SetProperty("IncludeUpdate", IncludeUpdate);
				this.GetTemplate("WsEntityProviderBase.cst").SetProperty("IncludeManyToMany", IncludeManyToMany);
				this.GetTemplate("WsEntityProviderBase.cst").SetProperty("IncludeGetList", IncludeGetList);
				this.GetTemplate("WsEntityProviderBase.cst").SetProperty("IncludeGetListByFK", IncludeGetListByFK);
				this.GetTemplate("WsEntityProviderBase.cst").SetProperty("IncludeGetListByIX", IncludeGetListByIX);
				this.GetTemplate("WsEntityProviderBase.cst").SetProperty("IncludeFind", IncludeFind);
											
				this.GetTemplate("WsEntityProviderBase.cst").SetProperty("SourceTable", SourceTable);
				this.GetTemplate("WsEntityProviderBase.cst").SetProperty("SourceTables", _sourceTables);
			
				
				this.GetTemplate("WsEntityProviderBase.cst").SetProperty("NameSpace", BLLNameSpace);
				this.GetTemplate("WsEntityProviderBase.cst").SetProperty("DALNameSpace", DALNameSpace);
				
				this.GetTemplate("WsEntityProviderBase.cst").SetProperty("WebReferenceName", "WsProxy");
				this.GetTemplate("WsEntityProviderBase.cst").SetProperty("ProxyClassName", SourceDatabase.Name + "Services");
				
									
				this.RenderToFile("WsEntityProviderBase.cst", rootPathDALWS + "\\Ws" + GetProviderBaseName(SourceTable.Name) + ".cs", true);
				AddExecutionTime(wsDalcBaseNode);
				
				//----------------------------------------------------------------------------------------------------------------------------------------------
			
			
				//----------------------------------------------------------------------------------------------------------------------------------------------
				//	Generating the WebService Repository Implementation, only if not already there
				//----------------------------------------------------------------------------------------------------------------------------------------------
				if (!File.Exists(rootPathDALWS + "\\Ws" + GetProviderName(SourceTable.Name) + ".cs"))
				{
					XmlElement wsDalcNode = AddFileNode(tableNode, "WebServiceClient\\Ws" +  GetProviderName(SourceTable.Name) + ".cs");
					
					this.GetTemplate("WsEntityProvider.cst").SetProperty("NameSpace", BLLNameSpace);
					this.GetTemplate("WsEntityProvider.cst").SetProperty("DALNameSpace", DALNameSpace);
					this.GetTemplate("WsEntityProvider.cst").SetProperty("ClassName", GetClassName(SourceTable.Name));
					this.GetTemplate("WsEntityProvider.cst").SetProperty("ProviderName", "Ws" + GetProviderName(SourceTable.Name));
					this.GetTemplate("WsEntityProvider.cst").SetProperty("ProviderBaseName", "Ws" + GetAbstractRepositoryClassName(SourceTable.Name));
					this.GetTemplate("WsEntityProvider.cst").SetProperty("DotNet2", vsnetVersion == VSNetVersion.v2005);
				
					this.RenderToFile("WsEntityProvider.cst", rootPathDALWS + "\\Ws" + GetProviderName(SourceTable.Name) + ".cs", false);
					AddExecutionTime(wsDalcNode);
				}			
			}
		}		
		
		if ( GenerateWebAdmin )
		{
			//----------------------------------------------------------------------------------------------------------------------------------------------
			//-- Web Admin ASCX pages
			//----------------------------------------------------------------------------------------------------------------------------------------------
			if (!File.Exists(rootPathWebAdmin + "\\" + GetClassName(SourceTable.Name) + "UC.ascx"))
			{
				XmlElement waNode = AddFileNode(tableNode, GetClassName(SourceTable.Name) + "UC.ascx");
								
				this.GetTemplate("AdminEntityUC_Designer.cst").SetProperty("SourceTable", SourceTable);
				this.GetTemplate("AdminEntityUC_Designer.cst").SetProperty("SourceTables", _sourceTables);
				this.GetTemplate("AdminEntityUC_Designer.cst").SetProperty("NameSpace", BLLNameSpace);
				this.GetTemplate("AdminEntityUC_Designer.cst").SetProperty("DALNameSpace", DALNameSpace);
				
				this.GetTemplate("AdminEntityUC_Designer.cst").RenderToFile(rootPathWebAdmin + "\\" + GetClassName(SourceTable.Name) + "UC.ascx", false);
				
				AddExecutionTime(waNode);
			}	
			
			//----------------------------------------------------------------------------------------------------------------------------------------------
			//-- Web Admin ASCX pages
			//----------------------------------------------------------------------------------------------------------------------------------------------
			if (!File.Exists(rootPathWebAdmin + "\\" + GetClassName(SourceTable.Name) + "UC.ascx.cs"))
			{
				XmlElement wacNode = AddFileNode(tableNode, GetClassName(SourceTable.Name) + "UC.ascx.cs");
								
				this.GetTemplate("AdminEntityUC_CodeBehind.cst").SetProperty("SourceTable", SourceTable);
				this.GetTemplate("AdminEntityUC_CodeBehind.cst").SetProperty("SourceTables", _sourceTables);
				this.GetTemplate("AdminEntityUC_CodeBehind.cst").SetProperty("NameSpace", BLLNameSpace);
				this.GetTemplate("AdminEntityUC_CodeBehind.cst").SetProperty("DALNameSpace", DALNameSpace);
				
				this.GetTemplate("AdminEntityUC_CodeBehind.cst").RenderToFile(rootPathWebAdmin + "\\" + GetClassName(SourceTable.Name) + "UC.ascx.cs", false);
				
				AddExecutionTime(wacNode);
			}	
		}
		
		AddExecutionTime(tableNode);
		_CurrentObjectIndex++;
	}
	
	AddExecutionTime(docOutput.DocumentElement);
	docOutput.Save(OutputDirectory + "\\report.xml");
	
	try 
	{
		//XPathDocument doc = new XPathDocument(OutputDirectory + "\\report.xml");
		XslTransform xslt = new XslTransform();
		xslt.Load(this.CodeTemplateInfo.DirectoryName + "\\reportHTML.xsl");               
		XmlTextWriter xmlWriter = new XmlTextWriter(OutputDirectory + "\\report.html", Encoding.UTF8);
		xmlWriter.Formatting = Formatting.Indented;               
		xslt.Transform(docOutput, null, xmlWriter);
		xmlWriter.Close();
		
		if (ViewReport)
		{
			// replace all invalid Url characters with URL Encoded version
			string[] invalidUrlCharacters = { "#" };
			string outputDirectory = OutputDirectory;
			for (int i = 0; i < invalidUrlCharacters.Length; i++)
				outputDirectory = outputDirectory.Replace(invalidUrlCharacters[i], System.Web.HttpUtility.UrlEncode(invalidUrlCharacters[i]));

			string file = @"file:\\\" + outputDirectory + "\\report.html";
			Process.Start(file);
		}
	} 
	catch (Exception e) 
	{
		Response.WriteLine("Transformation failed, an error has occured:");
		Response.WriteLine(e);
	}
		
	Response.WriteLine("Generation complete. Execution time: " + (DateTime.Now - startTime).ToString());
}


private XmlElement AddMessageNode(XmlElement rootNode, int level, string message)
{
	XmlElement node = docOutput.CreateElement("Message");
	
	XmlAttribute attLevel = docOutput.CreateAttribute("level");
	attLevel.Value = string.Format("{0}", level);
	node.Attributes.Append(attLevel);
	
	XmlAttribute attTime = docOutput.CreateAttribute("startTime");
	attTime.Value = DateTime.Now.ToFileTime().ToString();
	node.Attributes.Append(attTime);
	
	XmlAttribute attMsg = docOutput.CreateAttribute("message");
	attMsg.Value = message;
	node.Attributes.Append(attMsg);
			
	rootNode.AppendChild(node);
	return node;
}

private XmlElement AddFileNode(XmlElement rootNode, string filename)
{
	XmlElement node = docOutput.CreateElement("File");
		
	XmlAttribute attName = docOutput.CreateAttribute("name");
	attName.Value = filename;
	node.Attributes.Append(attName);
	
	XmlAttribute attTime = docOutput.CreateAttribute("startTime");
	attTime.Value = DateTime.Now.ToFileTime().ToString();
	node.Attributes.Append(attTime);
		
	rootNode.AppendChild(node);
	return node;
}

// append the execution time as attribute to the selected node
private XmlElement AddExecutionTime(XmlElement node)
{

	XmlAttribute attr = (XmlAttribute)node.Attributes.GetNamedItem("startTime");
    
    if (attr != null)
    {
		DateTime startTime = DateTime.FromFileTime(Convert.ToInt64(attr.Value));
		
		XmlAttribute att2 = docOutput.CreateAttribute("executionTime");
		att2.Value = DateTime.Now.Subtract(startTime).ToString();
		node.Attributes.Append(att2);	
	}
	
	return node;
}

private XmlElement AddTableNode(TableSchema table)
{
	return AddTableNode(table.Name);
}

private XmlElement AddTableNode(string tableName)
{
	XmlElement node = docOutput.CreateElement("Table");
	
	XmlAttribute attName = docOutput.CreateAttribute("name");
	attName.Value = tableName;
	node.Attributes.Append(attName);
	
	XmlAttribute attTime = docOutput.CreateAttribute("startTime");
	attTime.Value = DateTime.Now.ToFileTime().ToString();
	node.Attributes.Append(attTime);	
	
	docOutput.DocumentElement.AppendChild(node);
	
	return node;
}

private string IncrementBuildVersion(string assemblyInfoFilename)
{
	using (StreamReader reader = File.OpenText(assemblyInfoFilename))
	{
		Regex expression = new Regex(@"^\[assembly: AssemblyVersion\(\""([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)");
		string line = reader.ReadLine();
		while (line != null)
		{
			Match match = expression.Match(line);
			if (match.Success)
			{
				string major = match.Result("$1");
				string minor= match.Result("$2");
				string build = match.Result("$3");
				string revision = match.Result("$4");
				
				return string.Format("{0}.{1}.{2}.{3}", major, minor, Convert.ToInt32(build) + 1, revision);
				break;
			}
			line = reader.ReadLine();
		}
	}
	return "1.0.0.0";
}

</script>
<%
	this.Go();
%>
