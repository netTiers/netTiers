<%@ CodeTemplate Language="C#" TargetLanguage="XML" Src="..\..\TemplateLib\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Description="" Debug="True" ResponseEncoding="UTF-8" %>

<%@ Property Name="NameSpace" Optional="False" Type="System.String" Category="" Description="Root Namespace." %>
<%@ Property Name="BLLNameSpace" Optional="False" Type="System.String" Category="" Description="Entity Namespace." %>
<%@ Property Name="DALNameSpace" Optional="False" Type="System.String" Category="" Description="Data Namespace." %>
<%@ Property Name="WebNameSpace" Optional="False" Type="System.String" Category="" Description="Web Namespace." %>
<%@ Property Name="FactoryType" Type="System.String" Category="Data" Description="The Creational Factory used to create the entities." %>

<%@ Property Name="ConnectionString" Optional="False" Type="System.String" Category="" Description="" %>
<%@ Property Name="IncludeAtlasToolkit" Type="System.Boolean" Default="false" Category="06b. Website - Advanced" Description="Indicates whether to include the Atlas Control Toolkit." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>
<?xml version="1.0"?>
<configuration>
  <!-- The configSections define a section for ASP.NET Atlas. -->
  <configSections>
    <section name="<%= DALNameSpace %>" type="<%= DALNameSpace %>.Bases.NetTiersServiceSection, <%= DALNameSpace %>" allowDefinition="MachineToApplication" restartOnExternalChanges="true" />
    <section name="enterpriseLibrary.ConfigurationSource" type="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection, Microsoft.Practices.EnterpriseLibrary.Common, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null" />
	<sectionGroup name="microsoft.web" type="Microsoft.Web.Configuration.MicrosoftWebSectionGroup">
      <section name="converters" type="Microsoft.Web.Configuration.ConvertersSection" requirePermission="false" />
      <section name="webServices" type="Microsoft.Web.Configuration.WebServicesSection" requirePermission="false" />
      <section name="authenticationService" type="Microsoft.Web.Configuration.AuthenticationServiceSection" requirePermission="false" />
      <section name="profileService" type="Microsoft.Web.Configuration.ProfileServiceSection" requirePermission="false" />
    </sectionGroup>
  </configSections>
  <appSettings/>
  <connectionStrings>
    <add name="<%= DALNameSpace %>.ConnectionString" connectionString="<%= ConnectionString %>" />
  </connectionStrings>
	<<%= DALNameSpace %> defaultProvider="SqlNetTiersProvider">
		<providers>
			<!--
				*** SqlClient Provider ***
					connectionStringName: sqlclient connection string to the db
					useStoredProcedure: if true, indicates that we use the stored procedures, otherwise, we use parametrized queries that are embedded.
			-->
			<add 
			  name="SqlNetTiersProvider" 
			  type="<%= DALNameSpace %>.SqlClient.SqlNetTiersProvider, <%= DALNameSpace %>.SqlClient"
			  connectionStringName="<%= DALNameSpace %>.ConnectionString"
			  providerInvariantName="System.Data.SqlClient"
			  entityFactoryType="<%= FactoryType %>"
			  useEntityFactory="true"
			  enableEntityTracking="false"
			  enableMethodAuthorization="false"
			  useStoredProcedure="false"
			  defaultCommandTimeout="30"/>
			<!-- 
				*** WebserviceClient Provider ***
				The url parameter indicates the webservices url (ex: http://localhost/<%= NameSpace %>/<%= NameSpace %>Services.aspx)
				<add 
					name="WsNetTiersProvider" 
					type="<%= DALNameSpace %>.WebServiceClient.WsNetTiersProvider, <%= DALNameSpace %>.WebServiceClient"
					url="/<%= NameSpace %>Services.asmx" />
			-->
		</providers>
	</<%= DALNameSpace %>>
  <!--
       The microsoft.web section defines items required for the Atlas framework.
  -->
  <microsoft.web>
    <converters>
      <add type="Microsoft.Web.Script.Serialization.Converters.DataSetConverter"/>
      <add type="Microsoft.Web.Script.Serialization.Converters.DataRowConverter"/>
      <add type="Microsoft.Web.Script.Serialization.Converters.DataTableConverter"/>
    </converters>
    <webServices enableBrowserAccess="true" />
    <!--
         Uncomment this line to enable the authentication service.
		
    <authenticationService enabled="true" />
    -->
    <!--
         Uncomment these lines to enable the profile service. To allow profile properties to be retrieved 
         and modified in Atlas applications, you need to add each property name to the setProperties and 
         getProperties attributes.  If you intend for all properties to be available, you can use "*"
         as a shorthand rather than enumerating each property

	<profileService enabled="true" 
                    setProperties="propertyname1;propertyname2" 
                    getProperties="propertyname1;propertyname2" />
    -->
  </microsoft.web>
  <system.web>
    <pages styleSheetTheme="default" theme="default">
      <controls>
		<add tagPrefix="asp" namespace="System.Web.UI" assembly="System.Web.Extensions, Version=1.0.61025.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
		<% if ( IncludeAtlasToolkit ) { %>
        <add tagPrefix="ajaxToolkit" namespace="AjaxControlToolkit" assembly="AjaxControlToolkit"/>
		<% } %>
        <add tagPrefix="data" namespace="<%= WebNameSpace %>.Data" assembly="<%= WebNameSpace %>"/>
        <add tagPrefix="data" namespace="<%= WebNameSpace %>.UI" assembly="<%= WebNameSpace %>"/>
      </controls>	
    </pages>
    <!--
         Set compilation debug="true" to insert debugging 
         symbols into the compiled page. Because this 
         affects performance, set this value to true only 
         during development.
    -->
    <compilation debug="true">
      	<buildProviders>
          	<add extension=".asbx" type="Microsoft.Web.Services.BridgeBuildProvider" />
      	</buildProviders>
		<assemblies>
			<add assembly="System.Web.Extensions, Version=1.0.61025.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
		</assemblies>	
    </compilation>
    <!--
         ASMX is mapped to a new handler so that proxy javascripts can also be served.
    -->
    <httpHandlers>
      <remove verb="*" path="*.asmx"/>
      <add verb="*" path="*.asmx" type="Microsoft.Web.Services.ScriptHandlerFactory" validate="false"/>
      <add verb="*" path="*_AppService.axd" validate="false" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=1.0.61025.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
      <add verb="GET,HEAD" path="ScriptResource.axd" type="System.Web.Handlers.ScriptResourceHandler, System.Web.Extensions, Version=1.0.61025.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" validate="false"/>      
      <!--
           The MultiRequestHandler enables multiple requests to be handled in one
           roundtrip to the server. Its use requires Full Trust.
      -->
      <add verb="*" path="atlasbatchcall.axd" type="Microsoft.Web.Services.MultiRequestHandler" validate="false"/>
      <add verb="*" path="atlasglob.axd" type="Microsoft.Web.Globalization.GlobalizationHandler" validate="false"/>
      <add verb="*" path="*.asbx" type="Microsoft.Web.Services.ScriptHandlerFactory" validate="false"/>
      <!--
           The IFrameHandler enables a limited form of cross-domain calls to 'Atlas' web services.
           This should only be enabled if you need this functionality and you're willing to expose
           the data publicly on the Internet.
           To use it, you will also need to add the attribute [WebOperation(true, ResponseFormatMode.Json, true)]
           on the methods that you want to be called cross-domain.
           This attribute is by default on any DataService's GetData method.
		
        <add verb="*" path="iframecall.axd" type="Microsoft.Web.Services.IFrameHandler" validate="false"/>
	  -->
    </httpHandlers>
    <httpModules>
      <add name="ScriptModule" type="System.Web.Handlers.ScriptModule, System.Web.Extensions, Version=1.0.61025.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
	  <add name="EntityTransactionModule" type="<%= WebNameSpace %>.Data.EntityTransactionModule"/>
    </httpModules>
    <!--
          The <authentication> section enables configuration 
          of the security authentication mode used by 
          ASP.NET to identify an incoming user. 
          
      <authentication mode="Windows"/>
    -->
    <!--
          The <customErrors> section enables configuration 
          of what to do if/when an unhandled error occurs 
          during the execution of a request. Specifically, 
          it enables developers to configure html error pages 
          to be displayed in place of a error stack trace.

      <customErrors mode="RemoteOnly" defaultRedirect="GenericErrorPage.htm">
          <error statusCode="403" redirect="NoAccess.htm"/>
          <error statusCode="404" redirect="FileNotFound.htm"/>
      </customErrors>
    -->
  </system.web>
  <!-- Uncomment this if your site globally denies access to anonymous users.  The 
       authentication service and profile service are located under the virtual
       "ScriptServices" directory.  Since you normally call the authentication web
       service with an un-authenticated user, the following location tag can be used
       to grant access to anonymous users.  If you use anonymous profile support
       you will also need to grant access to anonymous users. -->
  <!--
  <location path="ScriptServices">
    <system.web>
      <authorization>
        <allow users="*" />
      </authorization>
    </system.web>    
  </location>
  -->
	<enterpriseLibrary.ConfigurationSource selectedSource="File Configuration Source">
	  <sources>
		<add name="File Configuration Source" type="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource, Microsoft.Practices.EnterpriseLibrary.Common, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null"
			filePath="entlib.config" />
	  </sources>
    </enterpriseLibrary.ConfigurationSource>
</configuration>
