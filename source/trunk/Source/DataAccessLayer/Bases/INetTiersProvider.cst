<%@ CodeTemplate Src="..\..\TemplateLib\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Template description here." ResponseEncoding="UTF-8"  NoWarn="0108,0618,1572,1573,1574,0162,2002"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>

<%@ Property Name="DALNameSpace" Type="System.String" Category="Data" Description="DAL Namespace." %>
<%@ Property Name="BLLNameSpace" Type="System.String" Category="Data" Description="DAL Namespace." %>
<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Connection" Description="Tables of the system." %>
<%@ Property Name="SourceViews" Type="SchemaExplorer.ViewSchemaCollection" Category="Connection" Description="Tables of the system." %>
#region Using directives

using System;
using System.Collections.Specialized;
using System.Configuration;
using System.Data;
using System.Data.Common;
using System.Configuration.Provider;

using <%= BLLNameSpace %>;

#endregion

namespace <%=DALNameSpace%>.Bases
{	
	/// <summary>
	/// Interface for NetTiersProvider
	/// </summary>
	public interface INetTiersProvider
    {
        TransactionManager CreateTransaction();
        LoadPolicy CurrentLoadPolicy { get; set; }
        int DefaultCommandTimeout { get; set; }
        bool EnableEntityTracking { get; set; }
        bool EnableListTracking { get; set; }
        bool EnableMethodAuthorization { get; set; }
        Type EntityCreationalFactoryType { get; set; }
        DataSet ExecuteDataSet( string storedProcedureName, params object[] parameterValues );
        DataSet ExecuteDataSet( TransactionManager transactionManager, string storedProcedureName, params object[] parameterValues );
        DataSet ExecuteDataSet( TransactionManager transactionManager, DbCommand commandWrapper );
        DataSet ExecuteDataSet( DbCommand commandWrapper );
        DataSet ExecuteDataSet( TransactionManager transactionManager, CommandType commandType, string commandText );
        DataSet ExecuteDataSet( CommandType commandType, string commandText );
        int ExecuteNonQuery( CommandType commandType, string commandText );
        int ExecuteNonQuery( TransactionManager transactionManager, CommandType commandType, string commandText );
        int ExecuteNonQuery( string storedProcedureName, params object[] parameterValues );
        int ExecuteNonQuery( TransactionManager transactionManager, string storedProcedureName, params object[] parameterValues );
        void ExecuteNonQuery( TransactionManager transactionManager, DbCommand commandWrapper );
        void ExecuteNonQuery( DbCommand commandWrapper );
        IDataReader ExecuteReader( CommandType commandType, string commandText );
        IDataReader ExecuteReader( TransactionManager transactionManager, CommandType commandType, string commandText );
        IDataReader ExecuteReader( TransactionManager transactionManager, string storedProcedureName, params object[] parameterValues );
        IDataReader ExecuteReader( string storedProcedureName, params object[] parameterValues );
        IDataReader ExecuteReader( TransactionManager transactionManager, DbCommand commandWrapper );
        IDataReader ExecuteReader( DbCommand commandWrapper );
        object ExecuteScalar( TransactionManager transactionManager, string storedProcedureName, params object[] parameterValues );
        object ExecuteScalar( CommandType commandType, string commandText );
        object ExecuteScalar( TransactionManager transactionManager, CommandType commandType, string commandText );
        object ExecuteScalar( DbCommand commandWrapper );
        object ExecuteScalar( TransactionManager transactionManager, DbCommand commandWrapper );
        object ExecuteScalar( string storedProcedureName, params object[] parameterValues );
        void Initialize( string name, NameValueCollection config );
        bool IsTransactionSupported { get; }
        bool UseEntityFactory { get; set; }
    }
}