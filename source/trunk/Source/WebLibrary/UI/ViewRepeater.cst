<%@ CodeTemplate Language="C#" TargetLanguage="Text" Description="" Debug="True" ResponseEncoding="UTF-8" %>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="..\..\TemplateLib\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Debug="False" Description="Template description here." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System" %>

<%@ Property Name="SourceView" Type="SchemaExplorer.ViewSchema" Category="Connection" Description="Table that the data access class should be based on." %>
<%@ Property Name="NameSpace" Type="System.String" Category="Style" Description="Root Namespace." %>
<%@ Property Name="BusinessLogicLayerNameSpace" Type="System.String" Category="Namespaces" Description="The sub namespace that is added to the root namespace for the entities." Default="" Optional="true" %>
<%
	string name =	GetClassName(SourceView.Name);
	string entityName = BusinessLogicLayerNameSpace + "." + name;
	string repeaterName = name + "Repeater";
	string designerName = name + "RepeaterDesigner";
	string entityItem =  name + "Item";
	string entityDataSource =  NameSpace + ".Web.Data." + GetClassName(SourceView.Name) + "DataSource";
%>
using System;
using System.Collections.Generic;
using System.Text;
using System.Web.UI;
using System.ComponentModel;
using System.Web.UI.Design.WebControls;
using System.Web.UI.Design;

namespace <%=NameSpace%>.Web.UI
{
	public class <%=designerName%> : System.Web.UI.Design.ControlDesigner
	{
		public <%=designerName%>()
		{
		}

		public override void Initialize(IComponent component)
		{
			if (!(component is <%=repeaterName%>))
			{ 
				throw new ArgumentException("Component is not a <%=repeaterName%>."); 
			} 
			base.Initialize(component); 
			base.SetViewFlags(ViewFlags.TemplateEditing, true); 
		}


		/// <summary>
		/// Genere le rendu en mode design
		/// </summary>
		/// <returns></returns>
		public override string GetDesignTimeHtml()
		{

			// Get the instance this designer applies to
			//
			<%=repeaterName%> z = (<%=repeaterName%>)Component;
			z.DataBind();

			return base.GetDesignTimeHtml();

			//return z.RenderAtDesignTime();

			//	ControlCollection c = z.Controls;
			//Totem z = (Totem) Component;
			//Totem z = (Totem) Component;
			//return ("<div style='border: 1px gray dotted; background-color: lightgray'><b>TagStat :</b> zae |  qsdds</div>");

		}
	}


	[Designer(typeof(<%=designerName%>))]
	[ParseChildren(true)]
	[ToolboxData("<{0}:<%=repeaterName%> runat=\"server\"></{0}:<%=repeaterName%>>")]
	public class <%=repeaterName%> : Control, System.Web.UI.INamingContainer
	{
		public <%=repeaterName%>()
		{
		}

		public override ControlCollection Controls
		{
			get
			{
				this.EnsureChildControls();
				return base.Controls;
			}
		}

		private ITemplate m_headerTemplate;
		[Browsable(false)]
		[TemplateContainer(typeof(<%=entityItem%>))]
		[PersistenceMode(PersistenceMode.InnerDefaultProperty)]
		public ITemplate HeaderTemplate
		{
			get { return m_headerTemplate; }
			set { m_headerTemplate = value; }
		}

		private ITemplate m_itemTemplate;
		[Browsable(false)]
		[TemplateContainer(typeof(<%=entityItem%>))]
		[PersistenceMode(PersistenceMode.InnerDefaultProperty)]
		public ITemplate ItemTemplate
		{
			get { return m_itemTemplate; }
			set { m_itemTemplate = value; }
		}
			

		private ITemplate m_altenateItemTemplate;
		[Browsable(false)]
		[TemplateContainer(typeof(<%=entityItem%>))]
		[PersistenceMode(PersistenceMode.InnerDefaultProperty)]
		public ITemplate AlternatingItemTemplate
		{
			get { return m_altenateItemTemplate; }
			set { m_altenateItemTemplate = value; }
		}

		private ITemplate m_footerTemplate;
		[Browsable(false)]
		[TemplateContainer(typeof(<%=entityItem%>))]
		[PersistenceMode(PersistenceMode.InnerDefaultProperty)]
		public ITemplate FooterTemplate
		{
			get { return m_footerTemplate; }
			set { m_footerTemplate = value; }
		}

		[Category("Data")]
		public virtual string DataSourceID
		{
			get
			{
				if (ViewState["DataSourceID"] == null)
				{
					return string.Empty;
				}
				return (string)ViewState["DataSourceID"];
			}
			set
			{
				ViewState["DataSourceID"] = value;
			}
		}

		//[Category("Data")]
		//public virtual string DataMember
		//{
		//    get
		//    {
		//        if (ViewState["DataMember"] == null)
		//        {
		//            return string.Empty;
		//        }
		//        return (string)ViewState["DataMember"];
		//    }
		//    set
		//    {
		//        ViewState["DataMember"] = value;
		//    }
		//}

		//private ProductDataSourceView m_currentView;

		System.Collections.IEnumerable m_currentView;

		private System.Collections.IEnumerable ConnectToDataSourceView()
		{
			if (m_currentView == null)
			{
				<%=entityDataSource%> datasource = null;
				Control ctl = this.Page.FindControl(DataSourceID);
				if (ctl == null)
				{
					throw new System.Web.HttpException("Datasource does not exists");
				}
				datasource = ctl as <%=entityDataSource%>;
				if (datasource == null)
				{
					throw new System.Web.HttpException("Datasource must be data control");
				}
				
				System.Collections.IEnumerable dsv = datasource.GetEntityList(); //this.DataMember);
				if (dsv == null)
				{
					throw new System.Web.HttpException("View not found");
				}
				m_currentView = dsv;
			}
			return m_currentView;
		}


		protected override void CreateChildControls()
		{
			if (ChildControlsCreated)
			{
				return;
			}
			Controls.Clear();

			System.Collections.IEnumerable datas = (System.Collections.IEnumerable)ConnectToDataSourceView();

			if (datas != null)
			{
				if (m_headerTemplate != null)
				{
					Control headerItem = new Control();
					m_headerTemplate.InstantiateIn(headerItem);
					Controls.Add(headerItem);
				}

				int pos = 0;
				foreach (object o in datas)
				{
					<%=entityName%> entity = o as <%=entityName%>;
					<%=entityItem%> container = new <%=entityItem%>(entity);

					if (m_itemTemplate != null && (pos % 2) == 0)
					{
						m_itemTemplate.InstantiateIn(container);
					}
					else
					{
						if (m_altenateItemTemplate != null)
						{
							m_altenateItemTemplate.InstantiateIn(container);
						}
						else if (m_itemTemplate != null)
						{
							m_itemTemplate.InstantiateIn(container);
						}
						else
						{
							// no template !!!
						}
					}
					Controls.Add(container);
					pos++;
				}

				if (m_footerTemplate != null)
				{
					Control footerItem = new Control();
					m_footerTemplate.InstantiateIn(footerItem);
					Controls.Add(footerItem);
				}
				ChildControlsCreated = true;
			}
		}

		protected override void OnPreRender(EventArgs e)
		{
			base.DataBind();
		}

		#region Design time

		internal string RenderAtDesignTime()
		{			
			return "TODO create a designer";
		}

		#endregion
	}

	[System.ComponentModel.ToolboxItem(false)]
	public class <%=entityItem%> : System.Web.UI.Control, System.Web.UI.INamingContainer
	{
		private <%=entityName%> _entity;

		public <%=entityItem%>()
			: base()
		{ }

		public <%=entityItem%>(<%=entityName%> entity)
			: base()
		{
			_entity = entity;
		}
		
		<%for(int i=0; i<SourceView.Columns.Count; i++) {%>
		[System.ComponentModel.Bindable(true)]
		public <%= GetCSType(SourceView.Columns[i])%> <%=GetPropertyName(SourceView.Columns[i].Name)%>
		{
			get { return _entity.<%=GetPropertyName(SourceView.Columns[i].Name)%>; }
		}
		<% } %>

	}
}
