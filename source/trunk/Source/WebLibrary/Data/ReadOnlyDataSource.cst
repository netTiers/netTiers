<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="..\..\TemplateLib\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Debug="False" Description="Generates the ReadOnlyDataSource type." ResponseEncoding="UTF-8" %>
<%@ Property Name="BLLNameSpace" Optional="False" Type="System.String" Category="Style" Description="Object Namespace." %>
<%@ Property Name="DALNameSpace" Optional="False" Type="System.String" Category="Style" Description="DAL Namespace." %>
<%@ Property Name="WebNameSpace" Optional="False" Type="System.String" Category="Style" Description="Web Namespace." %>

<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeFind" Type="System.Boolean" Default="True" Category="Options" Description="If true Find functions will be generated." %>
<%@ Property Name="IncludeDatabaseFeatures" Type="MoM.Templates.DatabaseType" Category="02. Framework Generation - Optional" Description="Indicates which database specific features to generate." Default="None" %>
<%@ Property Name="IncludeComponentLayer" Type="MoM.Templates.ComponentPatternType" Category="02. Framework Generation - Optional" Description="The pattern type to implement in the Component Layer." Default="None" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%
	string pagingProperty = "StartIndex";
	
	if ( IncludeDatabaseFeatures == MoM.Templates.DatabaseType.SQLServer2005 )
	{
		pagingProperty = "PageIndex";
	}
%>
#region Using directives
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Web.UI;

using <%= BLLNameSpace %>;
using <%= DALNameSpace %>;
#endregion

namespace <%= WebNameSpace %>.Data
{
	/// <summary>
	/// Represents a business object that provides data to data-bound
	/// controls in multi-tier Web application architectures.
	/// </summary>
	/// <typeparam name="Entity">The class of the business object being accessed.</typeparam>
	public abstract class ReadOnlyDataSource<Entity> : BaseDataSource<Entity, Object> where Entity : new()
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ReadOnlyDataSource class.
		/// </summary>
		public ReadOnlyDataSource()
		{
		}

		/// <summary>
		/// Initializes a new instance of the ProviderDataSource class using
		/// the specified data provider.
		/// </summary>
		/// <param name="provider">The business object that provides data access methods.</param>
		public ReadOnlyDataSource(IEntityViewProvider<Entity> provider)
		{
			Provider = provider;
		}

		#endregion Constructors

		#region Properties

		/// <summary>
		/// Gets or sets the object that the ReadOnlyDataSource object represents.
		/// </summary>
		public IEntityViewProvider<Entity> Provider
		{
			get { return ReadOnlyView.Provider; }
			set { ReadOnlyView.Provider = value; }
		}

		/// <summary>
		/// Gets or sets the name of the method or function that
		/// the ReadOnlyDataSource control invokes to retrieve data.
		/// </summary>
		public ReadOnlyDataSourceSelectMethod SelectMethod
		{
			get
			{
				ReadOnlyDataSourceSelectMethod selectMethod = <% if ( IncludeGetList ) { %>ReadOnlyDataSourceSelectMethod.<%= MethodNames.GetAll %><% } else { %>default(ReadOnlyDataSourceSelectMethod)<% } %>;
				Object method = ViewState["SelectMethod"];
				if ( method != null )
				{
					selectMethod = (ReadOnlyDataSourceSelectMethod) method;
				}
				return selectMethod;
			}
			set { ViewState["SelectMethod"] = value; }
		}

		/// <summary>
		/// Gets a reference to the ReadOnlyDataSourceView used by the ReadOnlyDataSource.
		/// </summary>
		protected ReadOnlyDataSourceView<Entity> ReadOnlyView
		{
			get { return ( View as ReadOnlyDataSourceView<Entity> ); }
		}

		#endregion Properties

		#region Methods

		/// <summary>
		/// Creates a new instance of the ReadOnlyDataSourceView class that is to be
		/// used by the ReadOnlyDataSource.
		/// </summary>
		/// <returns>An instance of the ReadOnlyDataSourceView class.</returns>
		protected override BaseDataSourceView<Entity, Object> GetNewDataSourceView()
		{
			return new ReadOnlyDataSourceView<Entity>(this, DefaultViewName);
		}

		/// <summary>
		/// Creates a cache hashing key based on the startIndex, pageSize and the SelectMethod being used.
		/// </summary>
		/// <param name="startIndex">The current start row index.</param>
		/// <param name="pageSize">The current page size.</param>
		/// <returns>A string that can be used as a key for caching purposes.</returns>
		protected override string CacheHashKey(int startIndex, int pageSize)
		{
			return String.Format("{0}:{1}:{2}", SelectMethod, startIndex, pageSize);
		}

		#endregion Methods
	}

	/// <summary>
	/// Supports the ReadOnlyDataSource control and provides an interface for
	/// data-bound controls to perform data operations with business and data objects.
	/// </summary>
	/// <typeparam name="Entity">The class of the business object being accessed.</typeparam>
	public class ReadOnlyDataSourceView<Entity> : BaseDataSourceView<Entity, Object> where Entity : new()
	{
		#region Declarations

		private IEntityViewProvider<Entity> _provider;

		#endregion Declarations

		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ReadOnlyDataSourceView class.
		/// </summary>
		/// <param name="owner">A reference to the ReadOnlyDataSource which created this instance.</param>
		/// <param name="viewName">The name of the view.</param>
		public ReadOnlyDataSourceView(ReadOnlyDataSource<Entity> owner, String viewName)
			: base(owner, viewName)
		{
		}

		#endregion Constructors

		#region Properties

		/// <summary>
		/// Gets or sets the object that the ProviderDataSource object represents.
		/// </summary>
		internal IEntityViewProvider<Entity> Provider
		{
			get { return _provider; }
			set { _provider = value; }
		}

		/// <summary>
		/// Gets a strongly-typed reference to the Owner property.
		/// </summary>
		internal ReadOnlyDataSource<Entity> ProviderOwner
		{
			get { return Owner as ReadOnlyDataSource<Entity>; }
		}

		/// <summary>
		/// Gets or sets the name of the method or function that
		/// the ReadOnlyDataSource control invokes to retrieve data.
		/// </summary>
		internal ReadOnlyDataSourceSelectMethod SelectMethod
		{
			get { return ProviderOwner.SelectMethod; }
			set { ProviderOwner.SelectMethod = value; }
		}

		/// <summary>
		/// Gets a value indicating whether the BaseDataSourceView object
		/// associated with the current BaseDataSource object supports the
		/// ExecuteInsert(IDictionary) operation.
		/// </summary>
		public override bool CanInsert
		{
			get { return false; }
		}

		/// <summary>
		/// Gets a value indicating whether the BaseDataSourceView object
		/// associated with the current BaseDataSource object supports the
		/// ExecuteUpdate(IDictionary, IDictionary, IDictionary) operation.
		/// </summary>
		public override bool CanUpdate
		{
			get { return false; }
		}

		/// <summary>
		/// Gets a value indicating whether the BaseDataSourceView object
		/// associated with the current BaseDataSource object supports the
		/// ExecuteDelete(IDictionary, IDictionary) operation.
		/// </summary>
		public override bool CanDelete
		{
			get { return false; }
		}

		#endregion Properties

		#region Methods

		/// <summary>
		/// Gets a collection of Entity objects based on the value of the SelectMethod property.
		/// </summary>
		/// <param name="count">The total number of rows in the DataSource.</param>
		/// <returns>A collection of Entity objects.</returns>
		protected override IList<Entity> GetSelectData(out int count)
		{
			IList<Entity> entityList = null;
			count = 0;

			switch ( SelectMethod )
			{
				<% if ( IncludeGetList ) { %>
				case ReadOnlyDataSourceSelectMethod.<%= MethodNames.Get %>:
					entityList = Provider.<%= MethodNames.Get %>(<%= TransactionManager %>WhereClause, OrderBy, <%= pagingProperty %>, PageSize, out count);
					break;
				case ReadOnlyDataSourceSelectMethod.<%= MethodNames.GetPaged %>:
					entityList = Provider.<%= MethodNames.GetPaged %>(<%= TransactionManager %>WhereClause, OrderBy, <%= pagingProperty %>, PageSize, out count);
					break;
				case ReadOnlyDataSourceSelectMethod.<%= MethodNames.GetAll %>:
					entityList = Provider.<%= MethodNames.GetAll %>(<%= TransactionManager %>StartIndex, PageSize, out count);
					break;
				<% } // end if ( IncludeGetList ) %>
				<% if ( IncludeFind ) { %>
				case ReadOnlyDataSourceSelectMethod.<%= MethodNames.Find %>:
					entityList = Provider.<%= MethodNames.Find %>(<%= TransactionManager %>FilterParameters, OrderBy, StartIndex, PageSize, out count);
					break;
				<% } // end if ( IncludeFind ) %>
				default:
					break;
			}

			return entityList;
		}

		#endregion Methods
	}

	#region ReadOnlyDataSourceSelectMethod

	/// <summary>
	/// Enumeration of method names available for the ReadOnlyDataSource.SelectMethod property.
	/// </summary>
	[Serializable]
	public enum ReadOnlyDataSourceSelectMethod
	{
		<% if ( IncludeGetList ) { %>
		/// <summary>
		/// Represents the IEntityViewProvider&lt;Entity&gt;.<%= MethodNames.Get %> method.
		/// </summary>
		<%= MethodNames.Get %>,
		/// <summary>
		/// Represents the IEntityViewProvider&lt;Entity&gt;.<%= MethodNames.GetPaged %> method.
		/// </summary>
		<%= MethodNames.GetPaged %>,
		/// <summary>
		/// Represents the IEntityViewProvider&lt;Entity&gt;.<%= MethodNames.GetAll %> method.
		/// </summary>
		<%= MethodNames.GetAll %><% if ( IncludeFind ) { %>,<% } %>
		<% } // end if ( IncludeGetList ) %>
		<% if ( IncludeFind ) { %>
		/// <summary>
		/// Represents the IEntityViewProvider&lt;Entity&gt;.<%= MethodNames.Find %> method.
		/// </summary>
		<%= MethodNames.Find %>
		<% } // end if ( IncludeFind ) %>
	}

	#endregion ReadOnlyDataSourceSelectMethod
}

<script runat="template">
private string TransactionManager
{
	get { return (IncludeComponentLayer != MoM.Templates.ComponentPatternType.ServiceLayer) ? "GetTransactionManager(), " : ""; }
}
</script>
