<%--
 * $Id: SqlEntityProviderBase.cst,v 1.5 2006/03/04 04:19:25 jcteague Exp $
 * Last modified by $Author$
 * Last modified at $Date$
 * $Revision$

	Written By:
		John Roland (from the orginal work of Ryan Hurdon)
	Description:
		This script create a data access layer component for a database table.	
	Remarks:
		Generated code will need the entreprise library 1.1 (june 2005) to function.
--%>
<%@ CodeTemplate Src="..\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Template description here." Debug="True" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Text" %>

<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Connection" Description="Tables of the system." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Connection" Description="Table that the data access class should be based on." %>

<%@ Property Name="IncludeCustoms" Type="System.Boolean" Default="True" Category="Options" Description="If true customs stored procedures will be generated as functions." %>
<%@ Property Name="IncludeInsert" Type="System.Boolean" Default="True" Category="Options" Description="If true insert functions will be generated." %>
<%@ Property Name="IncludeUpdate" Type="System.Boolean" Default="True" Category="Options" Description="If true update functions will be generated." %>
<%@ Property Name="IncludeSave" Type="System.Boolean" Default="True" Category="Options" Description="If true combined insert/update functions will be generated." %>
<%@ Property Name="IncludeDelete" Type="System.Boolean" Default="True" Category="Options" Description="If true delete functions will be generated." %>
<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeGetListByFK" Type="System.Boolean" Default="True" Category="Options" Description="If true get functions will be generated." %>
<%@ Property Name="IncludeGetListByIX" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeFind" Type="System.Boolean" Default="False" Category="Options" Description="If true find functions will be generated." %>
<%@ Property Name="IncludeManyToMany" Type="System.Boolean" Default="True" Category="Options" Description="If true select statements will be generated for any many to many relationship." %>

<%@ Property Name="InsertSuffix" Type="System.String" Default="_Insert" Category="Style" Description="Suffix to use for all generated INSERT functions." %>
<%@ Property Name="UpdateSuffix" Type="System.String" Default="_Update" Category="Style" Description="Suffix to use for all generated UPDATE functions." %>
<%@ Property Name="DeleteSuffix" Type="System.String" Default="_Delete" Category="Style" Description="Suffix to use for all generated DELETE functions." %>
<%@ Property Name="SelectSuffix" Type="System.String" Default="_Get" Category="Style" Description="Suffix to use for all generated SELECT functions." %>
<%@ Property Name="SelectAllSuffix" Type="System.String" Default="List" Category="Style" Description="Suffix to use for all generated SELECT functions." %>
<%@ Property Name="FindSuffix" Type="System.String" Default="_Find" Category="Style" Description="Suffix to use for all generated SELECT functions." %>
<%@ Property Name="NameSpace" Type="System.String" Category="Style" Description="Class Namespace." %>
<%@ Property Name="DALNameSpace" Type="System.String" Category="Data" Description="DAL Namespace." %>
<%@ Property Name="ProcedurePrefix" Optional="True" Type="System.String" Category="Style" Description="Prefix for Strored Procedures" %>
	 
<%
	// Name of the table being worked on.
	string name = SourceTable.Name;
	
	//Get the owner of the table
	string owner = GetOwner(SourceTable);
	
	// Collection of all columns in the table.
	ColumnSchemaCollection cols = SourceTable.Columns;
	
	// Collection of all columns in the table that are not primary keys.
	ColumnSchemaCollection nonKeys = SourceTable.NonPrimaryKeyColumns;
	
	// Collection of all primary key columns.
	//ColumnSchemaCollection keys = SourceTable.PrimaryKey.MemberColumns; 
	
	// Collection of ForeignKeys. Provides information about the foreign keys 
	//(keys where the current table is the foreign table) contained in the table. 
	TableKeySchemaCollection fkeys = SourceTable.ForeignKeys;
	
	//Provides information about the primary keys 
	//(keys where the current table is the primary table) contained in the table. 
	TableKeySchemaCollection pkeys = SourceTable.PrimaryKeys;
	
	//Provides information about the indexes contained in the table. 
	IndexSchemaCollection indexes = SourceTable.Indexes;
		
	// Holds the RowVersion column if there's any
	ColumnSchema RowVersion = null;

	foreach (ColumnSchema column in cols)
	{
		if (column.NativeType.ToLower() == "timestamp")
			RowVersion = column;
	}
	
	
	string className = NameSpace + "." + GetClassName(SourceTable.Name);
	string abstractRepositoryClassName = "Sql" + GetProviderBaseName(SourceTable.Name);
	//string repositoryClassName = DALNameSpace + "." +GetRepositoryClassName(SourceTable.Name);
	string providerBaseName = GetProviderBaseName(SourceTable.Name);
	string collectionClassName = NameSpace + "." + GetCollectionClassName(SourceTable.Name);
	
	string commandStem = GetCleanName(SourceTable);
		
	// this array store each Get BY MemberColumns in order to avoid to create doublon Get methods
	System.Collections.ArrayList getbyKeys = new System.Collections.ArrayList();
%>
#region using directives

using System;
using System.Data;
using System.Data.SqlClient;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System.Collections;
using System.Diagnostics;
using <%=NameSpace%>;
using <%=DALNameSpace%>;
using <%=DALNameSpace%>.Bases;

#endregion

namespace <%=DALNameSpace%>.SqlClient
{

/// <summary>
///	This class is the base repository for the CRUD operations on the <%=className%> objects.
/// </summary>
public abstract class <%=abstractRepositoryClassName%> : <%=providerBaseName%>
{
	#region "Declarations"	
	
	/// <summary>
	/// the <see cref="NetTiers.Configuration.SqlDataProviderData"/> instance that hold the current database configuration data used by enterprise library.
	/// </summary>
	protected NetTiers.Configuration.SqlDataProviderData sqlDataProviderData;
		
	#endregion "Declarations"
		
	#region "Constructors"
	
	/// <summary>
	/// Creates a new <see cref="<%=abstractRepositoryClassName%>"/> instance.
	/// </summary>
	public <%=abstractRepositoryClassName%>() : this((NetTiers.Configuration.SqlDataProviderData)Configuration.Current.DefaultDataProviderSettings)
	{
	}
	
	/// <summary>
	/// Creates a new <see cref="<%=abstractRepositoryClassName%>"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="providerData">A <see cref="NetTiers.Configuration.SqlDataProviderData"/> instance the hold the settings for the sql provider.</param>
	protected <%=abstractRepositoryClassName%>(NetTiers.Configuration.SqlDataProviderData providerData)
	{
		this.sqlDataProviderData = providerData;
	}
		
	#endregion "Constructors"
	
	
	<% if(IncludeManyToMany) { %>
	#region "Get from  Many To Many Relationship Functions"
	<%
		TableSchema primaryTable = SourceTable;
		
		foreach(TableKeySchema key in SourceTable.PrimaryKeys)
		{
			// Check that the key is related to a junction table and that this key relate a PK in this junction table
			if ( IsJunctionTable(key.ForeignKeyTable) && IsJunctionKey(key))
			{
				TableSchema junctionTable = key.ForeignKeyTable;
				
				// Search for the other(s) key(s) of the junction table' primary key
				foreach(TableKeySchema junctionTableKey in junctionTable.ForeignKeys)
				{				
					if ( IsJunctionKey(junctionTableKey) && junctionTableKey.Name != key.Name )
					{
						TableSchema secondaryTable = junctionTableKey.PrimaryKeyTable;
						string functionname = GetManyToManyName(junctionTableKey, GetCleanName(junctionTable.Name));
%>

	#region GetBy<%=functionname%>
		
	
			
	/// <summary>
	///		Gets <%=GetClassName(primaryTable.Name)%> objects from the datasource by <%=junctionTableKey.ForeignKeyMemberColumns[0].Name%> in the
	///		<%=junctionTable.Name%> table. Table <%=primaryTable.Name%> is related to table <%=secondaryTable.Name%>
	///		through the (M:N) relationship defined in the <%=junctionTable.Name%> table.
	/// </summary>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
<% for (int i = 0; i < junctionTableKey.ForeignKeyMemberColumns.Count; i++) { %>
	/// <param name="<%= GetPrivateName(junctionTableKey.ForeignKeyMemberColumns[i].Name)%>"><%=GetColumnXmlComment(junctionTableKey.ForeignKeyMemberColumns[i],2)%></param>
<% } %>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <returns>Returns a <c><%=GetCollectionClassName(primaryTable.Name)%></c> of <%=GetClassName(primaryTable.Name)%> objects.</returns>
	public override <%=GetCollectionClassName(primaryTable.Name)%> GetBy<%=functionname%>(TransactionManager transactionManager, <%=GetFunctionHeaderParameters(junctionTableKey.ForeignKeyMemberColumns)%>, int start, int pageLength)
	{
		Database database = transactionManager != null ? transactionManager.Database : DatabaseFactory.CreateDatabase(this.sqlDataProviderData.DatabaseInstanceName);
		DBCommandWrapper commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "<%=owner + ProcedurePrefix + commandStem + SelectSuffix + "By" + functionname%>");
		
		<% foreach(ColumnSchema col in junctionTableKey.ForeignKeyMemberColumns) { %>
		commandWrapper.AddInParameter("@<%=GetPropertyName(col.Name)%>", DbType.<%=col.DataType.ToString()%>, <%=GetPrivateName(col.Name)%>);
		<% } %>
		
		IDataReader reader = null;
		
		try
		{
			if (transactionManager != null)
			{
				if (!transactionManager.IsOpen) throw new DataException("Transaction must be open before executing a query.");
				reader = database.ExecuteReader(commandWrapper, transactionManager.TransactionObject);
			}
			else
			{
				reader = database.ExecuteReader(commandWrapper);
			}
		}
		catch(SqlException ex)
		{
			throw new DataException("An data access error occured, please check inner SqlException error.", ex);
		}
	
		//Create collection and fill
		<%=collectionClassName%> rows = new <%=collectionClassName%>();
		Fill(reader, rows, start, pageLength);
		reader.Close();
		return rows; 
	}
	
	#endregion GetBy<%=functionname%>
	
				<%
				} //end if there is many to many relationship.
			} //end foreach			
	 	}// end if(IsJunctionTable(junctionTableKey.ForeignKeyTable)) %>
	<%}//end foreach pkey %>
	#endregion
	
	<%} //end if many to many %>
	
	
<% if (IncludeDelete && SourceTable.PrimaryKey != null) {%>
	#region "Delete Functions"
	
	
	
	/// <summary>
	/// 	Deletes a row from the DataSource.
	/// </summary>
	<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
	/// <param name="<%= GetPrivateName(SourceTable.PrimaryKey.MemberColumns[i].Name)%>"><%=GetColumnXmlComment(SourceTable.PrimaryKey.MemberColumns[i],2)%>. Primary Key.</param>	
	<% } %>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param><% if (RowVersion != null){ %>
	/// <param name="<%=GetPrivateName(RowVersion.Name)%>">The timestamp field used for concurrency check.</param><% } %>
	/// <remarks>Deletes based on primary key(s).</remarks>
	/// <returns>Returns true if operation suceeded.</returns>
	public override bool Delete(TransactionManager transactionManager, <%= GetFunctionHeaderParameters(SourceTable.PrimaryKey.MemberColumns) %><% if(RowVersion != null) {Response.Write(", byte[] " + GetPrivateName(RowVersion.Name));}%>)
	{
		Database database = transactionManager != null ? transactionManager.Database : DatabaseFactory.CreateDatabase(this.sqlDataProviderData.DatabaseInstanceName);
		DBCommandWrapper commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "<%=owner + ProcedurePrefix + commandStem + DeleteSuffix%>");
		
		<% foreach(ColumnSchema col in SourceTable.PrimaryKey.MemberColumns) { %>
		commandWrapper.AddInParameter("@<%=GetPropertyName(col.Name)%>", DbType.<%=col.DataType%>, <%=GetPrivateName(col.Name)%>);
		<% } %>
		<% if (RowVersion != null){ %>
		commandWrapper.AddInParameter("@<%=GetPropertyName(RowVersion.Name)%>", DbType.<%= RowVersion.DataType.ToString() %>, <%= GetPrivateName(RowVersion.Name) %>);
		<% } %>
		
		try
		{
			if (transactionManager != null)
			{	
				if (!transactionManager.IsOpen) throw new DataException("Transaction must be open before executing a query.");
				database.ExecuteNonQuery(commandWrapper, transactionManager.TransactionObject);
			}
			else
			{
				database.ExecuteNonQuery(commandWrapper);
			}
		}
		catch(SqlException ex)
		{
			throw new DataException("An data access error occured, please check inner SqlException.", ex);
		}
		
		if (commandWrapper.RowsAffected == 0)
		{
			<% if (RowVersion != null){ %>
			throw new DBConcurrencyException ("The record has been modified by an other user. Please reload the instance before deleting.");
			<% } else { %>
			//throw new DataException("The record has been already deleted.");
			return false;
			<% } %>
		}
		
		return Convert.ToBoolean(commandWrapper.RowsAffected);
	}//end Delete
	
	
	#endregion
<% } //end if(includedelete)%>

	<%/*	
		-------------------------------
		FIND FUNCTIONS
		-------------------------------
	*/%>
	<% if (IncludeFind) { %>
	#region "Find Functions"
		
	
				
	/// <summary>
	/// 	Returns rows meeting the whereclause condition from the DataSource.
	/// </summary>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
	/// <remarks>Operators must be capitalized (OR, AND)</remarks>
	/// <returns>Returns a typed collection of <%=className%> objects.</returns>
	public override <%=collectionClassName%> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength)
	{
		if (whereClause.IndexOf(";") > -1)
			return new <%=collectionClassName%>();

		Database database = transactionManager != null ? transactionManager.Database : DatabaseFactory.CreateDatabase(this.sqlDataProviderData.DatabaseInstanceName);
		DBCommandWrapper commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "<%=owner + ProcedurePrefix + commandStem + FindSuffix%>");
		
		whereClause = whereClause.Replace("AND", "|");
		Hashtable hparams = new Hashtable();
		if (whereClause.ToUpper().IndexOf("|") > -1)
		{
			string[] clauses = whereClause.Split('|');
			foreach (string clause in clauses)
			{
				string[] sparams = new string[2];
				if (clause.Trim().IndexOf('=') > 1)
					sparams = clause.Split('=');

				if (sparams[0] != null	&& sparams[1] != null && !hparams.ContainsKey("@" + sparams[0].Trim()))
				{
					try
                    {
                        Guid guid = new Guid(sparams[1].Trim().Replace("'", ""));
                        hparams.Add("@" + sparams[0].Trim(), guid);
                    }
                    catch (FormatException)
                    {
                        hparams.Add("@" + sparams[0].Trim(), sparams[1].Trim().Replace("'", ""));
                    }
				}
			}
		}
		else
		{
			string[] sparams = new string[2];	
			if (whereClause.Trim().IndexOf('=') > 1)
				sparams = whereClause.Split('=');

			if (sparams[0] != null	&& sparams[1] != null && !hparams.ContainsKey("@" + sparams[0].Trim()))
			{
				try
				{
					Guid guid = new Guid(sparams[1].Trim().Replace("'", ""));
					hparams.Add("@" + sparams[0].Trim(), guid);
				}
				catch (FormatException)
				{
					hparams.Add("@" + sparams[0].Trim(), sparams[1].Trim().Replace("'", ""));
				}
			}
		}
		
		if (hparams.Count == 0)
			return new <%=collectionClassName%>();
		
		/*
		foreach (object key in hparams.Keys)
		{
			DbType sb = DbType.Object;
			
			switch (key.ToString().ToLower().Substring(1))
			{
			<% foreach(ColumnSchema column in SourceTable.Columns) {%>
				case "<%=column.Name.ToLower()%>":
					sb = DbType.<%=column.DataType%>;
					break;
			<% } %>
			}
			commandWrapper.AddInParameter(key.ToString(), sb, hparams[key]);
		}
		*/
		
		<% foreach(ColumnSchema column in SourceTable.Columns) {%>
		commandWrapper.AddInParameter("<%=column.Name%>", DbType.<%=column.DataType%>, DBNull.Value);
		<% } %>
		
		foreach (string key in hparams.Keys)
		{
		commandWrapper.SetParameterValue(key.ToString(), hparams[key]);
		}
				
		IDataReader reader = null;
		
		try
		{
			if (transactionManager != null)
			{
				if (!transactionManager.IsOpen) throw new DataException("Transaction must be open before executing a query.");
				reader = database.ExecuteReader(commandWrapper, transactionManager.TransactionObject);
			}
			else
			{
				reader = database.ExecuteReader(commandWrapper);
			}
		}
		catch(SqlException ex)
		{
			throw new DataException("An data access error occured, please check inner SqlException error.", ex);
		}
		
		<%=collectionClassName%> rows = new <%=collectionClassName%>();
		Fill(reader, rows, start, pageLength);
		reader.Close();
		return rows;
	}
	
	#endregion "Find Functions"
	<% } %>
		
	<%/*	
		-------------------------------
		GET LIST FUNCTIONS
		-------------------------------
	*/%>
<% if (IncludeGetList) { %>
	#region "GetList Functions"
			
	/// <summary>
	/// 	Gets All rows from the DataSource.
	/// </summary>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <remarks></remarks>
	/// <returns>Returns a typed collection of <%=className%> objects.</returns>
	public override <%=collectionClassName%> GetAll(TransactionManager transactionManager, int start, int pageLength)
	{
		Database database = transactionManager != null ? transactionManager.Database : DatabaseFactory.CreateDatabase(this.sqlDataProviderData.DatabaseInstanceName);
		DBCommandWrapper commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "<%=owner + ProcedurePrefix + commandStem + SelectSuffix + SelectAllSuffix%>");
		
		IDataReader reader = null;
		try
		{
			if (transactionManager != null)
			{
				if (!transactionManager.IsOpen) throw new DataException("Transaction must be open before executing a query.");
				reader = database.ExecuteReader(commandWrapper, transactionManager.TransactionObject);
			}
			else
			{
				reader = database.ExecuteReader(commandWrapper);
			}
		}
		catch(SqlException ex)
		{
			throw new DataException("An data access error occured, please check inner SqlException error.", ex);
		}

		//Create Collection
		<%=collectionClassName%> rows = new <%=collectionClassName%>();
		Fill(reader, rows, start, pageLength);
		reader.Close();
		return rows;
	}//end getall
	
	#endregion
	
	#region Paged Recordset
			
	/// <summary>
	/// Gets a page of rows from the DataSource.
	/// </summary>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="count">Number of rows in the DataSource.</param>
	/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
	/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <remarks></remarks>
	/// <returns>Returns a typed collection of <%=className%> objects.</returns>
	public override <%=collectionClassName%> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
	{
		Database database = transactionManager != null ? transactionManager.Database : DatabaseFactory.CreateDatabase(this.sqlDataProviderData.DatabaseInstanceName);
		DBCommandWrapper commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "<%=owner + ProcedurePrefix + commandStem + SelectSuffix + "Paged"%>");
		
		commandWrapper.AddInParameter("@PageIndex", DbType.Int32, start);
		commandWrapper.AddInParameter("@PageSize", DbType.Int32, pageLength);
		commandWrapper.AddInParameter("@WhereClause", DbType.String, whereClause);
		commandWrapper.AddInParameter("@OrderBy", DbType.String, orderBy);
	
		IDataReader reader = null;
		
		try
		{
			if (transactionManager != null)
			{
				if (!transactionManager.IsOpen) throw new DataException("Transaction must be open before executing a query.");
				reader = database.ExecuteReader(commandWrapper, transactionManager.TransactionObject);
			}
			else
			{
				reader = database.ExecuteReader(commandWrapper);
			}
		}
		catch(SqlException ex)
		{
			throw new DataException("An data access error occured, please check inner SqlException error.", ex);
		}

		
		//Create Collection
		<%=collectionClassName%> rows = new <%=collectionClassName%>();
		
		try
		{
			if (reader.Read())
			{
				count = reader.GetInt32(0);
				if (reader.NextResult())
				{	
					Fill(reader, rows, 0, int.MaxValue);
				}
			}
			else
			{
				count = 0;
			}
		}
		catch(SqlException ex)
		{
			
			throw new DataException("An data access error occured, please check inner SqlException error.", ex);
		}
		finally
		{
			reader.Close();
		}		
		
		return rows;
	}
	
	#endregion
	
<%
 	} //end IncludeGetList
	
	/*---------------------------------------------------------------------------------
								Get By FK
	  -------------------------------------------------------------------------------*/
	
	if (IncludeGetListByFK) { %>
	#region "Get By Foreign Key Functions"
<%
		for (int j=0; j < fkeys.Count;j++)
		{
			bool skipkey = false;
			foreach(IndexSchema i in indexes)
			{
				if(i.MemberColumns.Equals(fkeys[j].ForeignKeyMemberColumns))
					skipkey = true;		
			}
			if(skipkey)
				continue;
				
			getbyKeys.Add(GetKeysName(fkeys[j].ForeignKeyMemberColumns));
%>	

	#region "GetBy<%=GetKeysName(fkeys[j].ForeignKeyMemberColumns)%>"
				
	/// <summary>
	/// 	Gets rows from the datasource based on the <%=fkeys[j].Name%> key.
	///		<%=fkeys[j].Name%> Description: <%=GetColumnXmlComment(fkeys[j],2)%>
	/// </summary>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
<% for (int i = 0; i < fkeys[j].ForeignKeyMemberColumns.Count; i++) { %>
	/// <param name="<%= GetPrivateName(fkeys[j].ForeignKeyMemberColumns[i].Name)%>"><%=GetColumnXmlComment(fkeys[j].ForeignKeyMemberColumns[i],2)%></param>
<% } %>
	/// <remarks></remarks>
	/// <returns>Returns a typed collection of <%=className%> objects.</returns>
	public override <%=collectionClassName%> GetBy<%=GetKeysName(fkeys[j].ForeignKeyMemberColumns)%>(TransactionManager transactionManager, <%= GetFunctionHeaderParameters(fkeys[j].ForeignKeyMemberColumns) %>, int start, int pageLength)
	{
		Database database = transactionManager != null ? transactionManager.Database : DatabaseFactory.CreateDatabase(this.sqlDataProviderData.DatabaseInstanceName);
		DBCommandWrapper commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "<%=owner + ProcedurePrefix + commandStem + SelectSuffix + "By" + GetKeysName(fkeys[j].ForeignKeyMemberColumns)%>");
		
		<% foreach(ColumnSchema col in fkeys[j].ForeignKeyMemberColumns) { %>
			commandWrapper.AddInParameter("@<%=GetPropertyName(col.Name)%>", DbType.<%=col.DataType%>, <%=GetPrivateName(col.Name)%>);
		<% } %>
		
		IDataReader reader = null;
		
		try
		{
			if (transactionManager != null)
			{
				if (!transactionManager.IsOpen) throw new DataException("Transaction must be open before executing a query.");
				reader = database.ExecuteReader(commandWrapper, transactionManager.TransactionObject);
			}
			else
			{
				reader = database.ExecuteReader(commandWrapper);
			}
		}
		catch(SqlException ex)
		{
			throw new DataException("An data access error occured, please check inner SqlException error.", ex);
		}
	
		//Create Collection
		<%=collectionClassName%> rows = new <%=collectionClassName%>();
		Fill(reader, rows, start, pageLength);
		reader.Close();
		return rows;
	}
	
	#endregion
	
<% 		}//endfor %>
	#endregion
<% 	} //end includegetlistbyfk %>

<%

	/*---------------------------------------------------------------------------------
								Get By Index
	  -------------------------------------------------------------------------------*/
	
	if (IncludeGetListByIX) {
	%>
	
	#region "Get By Index Functions"
	<%	
		for (int j=0; j < indexes.Count;j++)
		{
			// Check if this key is not already generated
			if(getbyKeys.IndexOf(GetKeysName(indexes[j].MemberColumns)) >=0 )
			{
				continue;
			}
			else
			{
				// add this key to the index list
				getbyKeys.Add(GetKeysName(indexes[j].MemberColumns));
			}
			
			string returnType = collectionClassName;
			bool isUnique = false;
				
			//if (IsPrimaryKey(indexes[j]))
			if (indexes[j].IsUnique || indexes[j].IsPrimaryKey)
			{
				returnType = className;
				isUnique = true;
			}
	%>

	#region "GetBy<%=GetKeysName(indexes[j].MemberColumns)%>"
				
	/// <summary>
	/// 	Gets rows from the datasource based on the <%=indexes[j].Name%> index.
	/// </summary>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
<% for (int i = 0; i < indexes[j].MemberColumns.Count; i++) { %>
	/// <param name="<%= GetPrivateName(indexes[j].MemberColumns[i].Name)%>"><%= indexes[j].MemberColumns[i].Description%></param>
<% } %>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <remarks></remarks>
	/// <returns>Returns an instance of the <see cref="<%=returnType%>"/> class.</returns>
	public override <%=returnType%> GetBy<%=GetKeysName(indexes[j].MemberColumns)%>(TransactionManager transactionManager, <%= GetFunctionHeaderParameters(indexes[j].MemberColumns) %>, int start, int pageLength)
	{
		Database database = transactionManager != null ? transactionManager.Database : DatabaseFactory.CreateDatabase(this.sqlDataProviderData.DatabaseInstanceName);
		DBCommandWrapper commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "<%=owner + ProcedurePrefix + commandStem + SelectSuffix + "By" + GetKeysName(indexes[j].MemberColumns)%>");
		
		<% foreach(ColumnSchema col in indexes[j].MemberColumns) { %>
			commandWrapper.AddInParameter("@<%=GetPropertyName(col.Name)%>", DbType.<%=col.DataType%>, <%=GetPrivateName(col.Name)%>);
		<% } %>
		
		IDataReader reader = null;
		
		try
		{
			if (transactionManager != null)
			{
				if (!transactionManager.IsOpen) throw new DataException("Transaction must be open before executing a query.");
				reader = database.ExecuteReader(commandWrapper, transactionManager.TransactionObject);
			}
			else
			{
				reader = database.ExecuteReader(commandWrapper);
			}
		}
		catch(SqlException ex)
		{
			throw new DataException("An data access error occured, please check inner SqlException error.", ex);
		}

		//Create collection and fill
		<%=collectionClassName%> tmp = new <%=collectionClassName%>();
		Fill(reader, tmp, start, pageLength);
		reader.Close();
		
		<% if (isUnique) { %>
		if (tmp.Count == 1)
		{
			return tmp[0];
		}
		else if (tmp.Count == 0)
		{
			return null;
		}
		else
		{
			throw new DataException("Cannot find the unique instance of the class.");
		}
		<% } else { %>
		return tmp;
		<% } %>	
		
		//return rows;
	}
	
	#endregion

<%		}//endfor %>
	#endregion "Get By Index Functions"
<%	}//end if includegetlistbyix
	
		/*---------------------------------------------------------------------------------
								Insert
							Single Key, Identity
	  	-------------------------------------------------------------------------------*/
	
	if (IncludeInsert) 
	{
%>

	#region "Insert Functions"
			
	/// <summary>
	/// 	Inserts a <%=className%> object into the datasource using a transaction.
	/// </summary>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <param name="entity"><%=className%> object to insert.</param>
	/// <remarks>
	///		After inserting into the datasource, the <%=className%> object will be updated
	/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
	/// </remarks>	
	/// <returns>Returns true if operation is successful.</returns>
	public override bool Insert(TransactionManager transactionManager, <%=className%> entity)
	{
		Database database = transactionManager != null ? transactionManager.Database : DatabaseFactory.CreateDatabase(this.sqlDataProviderData.DatabaseInstanceName);
		DBCommandWrapper commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "<%=owner + ProcedurePrefix + commandStem + InsertSuffix %>");
		
		<%
		
		for (int i = 0; i < cols.Count; i++)		
		{ 	
			if (IsComputed(cols[i]) || IsIdentityColumn(cols[i]) )
			{%>
		commandWrapper.AddOutParameter("@<%=GetPropertyName(cols[i].Name)%>", DbType.<%= cols[i].DataType.ToString() %>, <%= cols[i].Size.ToString() %>);
			<%}
			else
			{
				if (cols[i].AllowDBNull && !IsCSReferenceDataType(cols[i])  )
				{ 
					// String types are nullable, but all other types are value types%>
		commandWrapper.AddInParameter("@<%=GetPropertyName(cols[i].Name)%>", DbType.<%= cols[i].DataType.ToString() %>, (entity.Is<%=GetPropertyName(cols[i].Name)%>Null() ? System.DBNull.Value : (object) entity.<%=GetPropertyName(cols[i].Name)%> ));
				<%}
				else
			{%>
		commandWrapper.AddInParameter("@<%=GetPropertyName(cols[i].Name)%>", DbType.<%= cols[i].DataType.ToString() %>, entity.<%=GetPropertyName(cols[i].Name)%> );
			<%}
			}
		}%>
			
		try
		{		
			if (transactionManager != null)
			{
				if (!transactionManager.IsOpen) throw new DataException("Transaction must be open before executing a query.");
				database.ExecuteNonQuery(commandWrapper, transactionManager.TransactionObject);
			}
			else
			{
				database.ExecuteNonQuery(commandWrapper);
			}
		}
		catch(SqlException ex)
		{
			throw new DataException("An data access error occured, please check inner SqlException error.", ex);
		}
		
		<%
		// Update identity or computed columns
		for (int i = 0; i < cols.Count; i++)		
		{
			if (IsComputed(cols[i]) || IsIdentityColumn(cols[i]) )
			{%>
		entity.<%=GetPropertyName(cols[i].Name)%> = (<%=cols[i].SystemType.ToString()%>)commandWrapper.GetParameterValue("@<%=GetPropertyName(cols[i].Name)%>");
			<%}
		}
		
		// synchronise utility properties for updatable primary key
		for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++)		
		{
			if( !IsComputed(SourceTable.PrimaryKey.MemberColumns[i]) && !IsIdentityColumn(SourceTable.PrimaryKey.MemberColumns[i]) )
			{%>
		entity.Original<%=GetPropertyName(SourceTable.PrimaryKey.MemberColumns[i].Name)%> = entity.<%=GetPropertyName(SourceTable.PrimaryKey.MemberColumns[i].Name)%>;
			<%}
		}
		
		%>
		
		entity.AcceptChanges();

		return Convert.ToBoolean(commandWrapper.RowsAffected);
	}
	
	#endregion

<%
	}//end if

		/*---------------------------------------------------------------------------------
								Update
	  	-------------------------------------------------------------------------------*/
		
	if (IncludeUpdate) 
	{
		
%>	
	#region "Update Functions"
				
	/// <summary>
	/// 	Update an existing row in the datasource.
	/// </summary>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <param name="entity"><%=className%> object to update.</param>
	/// <remarks>
	///		After updating the datasource, the <%=className%> object will be updated
	/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
	/// </remarks>
	/// <returns>Returns true if operation is successful.</returns>
	public override bool Update(TransactionManager transactionManager, <%=className%> entity)
	{
		Database database = transactionManager != null ? transactionManager.Database : DatabaseFactory.CreateDatabase(this.sqlDataProviderData.DatabaseInstanceName);
		DBCommandWrapper commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "<%=owner + ProcedurePrefix + commandStem + UpdateSuffix %>");
		
		<%		
		//Debugger.Break();
		for (int i = 0; i < cols.Count; i++)		
		{ 	
			if (IsComputed(cols[i]) && cols[i] != RowVersion)
			{%>
		commandWrapper.AddOutParameter("@<%=GetPropertyName(cols[i].Name)%>", DbType.<%= cols[i].DataType.ToString() %>, <%= cols[i].Size.ToString() %>);
			<%}
			else
			{
				if (cols[i].AllowDBNull && !IsCSReferenceDataType(cols[i])  )
				{ 
					// String types are nullable, but all other types are value types%>
		commandWrapper.AddInParameter("@<%=GetPropertyName(cols[i].Name)%>", DbType.<%= cols[i].DataType.ToString() %>, (entity.Is<%=GetPropertyName(cols[i].Name)%>Null() ? System.DBNull.Value : (object) entity.<%=GetPropertyName(cols[i].Name)%>) );
				<%}
				else
			{%>
		commandWrapper.AddInParameter("@<%=GetPropertyName(cols[i].Name)%>", DbType.<%= cols[i].DataType.ToString() %>, entity.<%=GetPropertyName(cols[i].Name)%> );
			<%}
			}
			if (cols[i].IsPrimaryKeyMember && !IsComputed(cols[i]) && !IsIdentityColumn(cols[i]) && cols[i] != RowVersion)
			{%>
		commandWrapper.AddInParameter("@Original<%=GetPropertyName(cols[i].Name)%>", DbType.<%= cols[i].DataType.ToString() %>, entity.Original<%=GetPropertyName(cols[i].Name)%>);
			<%}
		}
		
		if (RowVersion != null)
		{%>
		commandWrapper.AddOutParameter("@Returned<%=GetPropertyName(RowVersion.Name)%>", DbType.<%= RowVersion.DataType.ToString() %>, <%= RowVersion.Size.ToString() %>);
		<%}%>
		
		try
		{
			if (transactionManager != null)
			{
				if (!transactionManager.IsOpen) throw new DataException("Transaction must be open before executing a query.");
				database.ExecuteNonQuery(commandWrapper, transactionManager.TransactionObject);
			}
			else
			{
				database.ExecuteNonQuery(commandWrapper);
			}
		}
		catch(SqlException ex)
		{
			throw new DataException("An data access error occured, please check inner SqlException error.", ex);
		}
		
		
	<%
	if (RowVersion != null)
	{%>
		if (commandWrapper.RowsAffected == 0)
		{
			throw new DBConcurrencyException("Concurrency exception");
		}
	
		entity.<%=GetPropertyName(RowVersion.Name)%> = (<%=RowVersion.SystemType.ToString()%>)commandWrapper.GetParameterValue("@Returned<%=GetPropertyName(RowVersion.Name)%>");
	<%}
		
				
	// Update identity or computed columns
	for (int i = 0; i < cols.Count; i++)		
	{
		if (IsComputed(cols[i]) && cols[i] != RowVersion)
		{%>
		entity.<%=GetPropertyName(cols[i].Name)%> = (<%=cols[i].SystemType.ToString()%>)commandWrapper.GetParameterValue("@<%=GetPropertyName(cols[i].Name)%>");
		<%}
	
		// if in the PK, update the original
		if (cols[i].IsPrimaryKeyMember && !IsComputed(cols[i]) && !IsIdentityColumn(cols[i]) && cols[i] != RowVersion)
		{%>
		entity.Original<%=GetPropertyName(cols[i].Name)%> = entity.<%=GetPropertyName(cols[i].Name)%>;
		<%}
		
	}%>
		
		entity.AcceptChanges();

		return Convert.ToBoolean(commandWrapper.RowsAffected);
	}
		
	#endregion
	
<%	}//end if %>


<%/*---------------------------------------------------------------------------------
							CUSTOM STORED PROCEDURES
  -------------------------------------------------------------------------------*/%>

<% if (IncludeCustoms) { %>

	#region "Custom Methods"
	
<% 
	string prefix = "_" + SourceTable.Name + "_";
	foreach(CommandSchema command in SourceTable.Database.Commands)
	{
		//Response.WriteLine("// " + command.Name);
	
		// If the stored procedure is targeting the current table.
		if (command.Name.StartsWith(prefix))
		{
			string methodName = command.Name.Substring(prefix.Length);
			string returnType = CustomMethodReturnType(command,collectionClassName,SourceTable);
%>
	#region "<%=command.Name%>"
				
	/// <summary>
	///	This method wrap the '<%=command.Name%>' stored procedure. 
	/// </summary><%=TransformStoredProcedureInputsToMethodComments(command.InputParameters)+ TransformStoredProcedureOutputsToMethodComments(command.AllOutputParameters)%>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <remark>This method is generate from a stored procedure.</remark>
	/// <returns>A <see cref="<%=returnType%>"/> instance.</returns>
	public override <%=returnType%> <%=methodName%>(TransactionManager transactionManager <%if(returnType == collectionClassName){%>, int start, int pageLength <%}%> <%=TransformStoredProcedureInputsToMethod(true, command.InputParameters)+ TransformStoredProcedureOutputsToMethod(true, command.AllOutputParameters)%>)
	{
		Database database = transactionManager != null ? transactionManager.Database : DatabaseFactory.CreateDatabase(this.sqlDataProviderData.DatabaseInstanceName);
		DBCommandWrapper commandWrapper = database.GetStoredProcCommandWrapper("<%=command.Name%>");
		
		<% foreach(ParameterSchema col in command.InputParameters)	{ %>
			commandWrapper.AddInParameter("@<%=GetPropertyName(col.Name)%>", DbType.<%=col.DataType.ToString()%>,  <% if (col.AllowDBNull) { %>Utility.DefaultToDBNull(<%=GetPrivateName(col.Name)%>, DbType.<%= col.DataType.ToString() %>) <%} else {%><%=GetPrivateName(col.Name)%> <%}%>);
		<%}%>
		<% foreach(ParameterSchema col in command.AllOutputParameters)	{ %>
				commandWrapper.AddOutParameter("@<%=GetPropertyName(col.Name)%>",DbType.<%=col.DataType.ToString()%>,<%= col.Size.ToString() %>);
				
		<%}%>
		
		<%
			//Set up the output params
			StringBuilder outputValues = new StringBuilder();
			
			foreach(ParameterSchema outParam in command.AllOutputParameters)
			{
				outputValues.AppendFormat("\t\t\t{0} =  ({1})commandWrapper.GetParameterValue(\"@{2}\");\n",
				GetPrivateName(outParam.Name), 
				GetCSType(outParam), 
				GetPropertyName(outParam.Name)); 
	
			}
		%>

		try
		{

		<% if (returnType == "DataSet") { %>
			DataSet ds = null;
			
			if (transactionManager != null)
			{	
				if (!transactionManager.IsOpen) throw new DataException("Transaction must be open before executing a query.");
				ds = database.ExecuteDataSet(commandWrapper, transactionManager.TransactionObject);
			}
			else
			{
				ds = database.ExecuteDataSet(commandWrapper);
			}
<%=outputValues.ToString()%>			
			return ds;
			
		<% } else if (returnType == "void") { %>
			if (transactionManager != null)
			{	
				if (!transactionManager.IsOpen) throw new DataException("Transaction must be open before executing a query.");
				database.ExecuteNonQuery(commandWrapper, transactionManager.TransactionObject);
			}
			else
			{
				database.ExecuteNonQuery(commandWrapper);
			}
<%=outputValues.ToString()%>			
			return;
			
		<% } else if 	(returnType == collectionClassName) { %>
			IDataReader reader = null;

			if (transactionManager != null)
			{	
				if (!transactionManager.IsOpen) throw new DataException("Transaction must be open before executing a query.");
				reader = database.ExecuteReader(commandWrapper, transactionManager.TransactionObject);
			}
			else
			{
				reader = database.ExecuteReader(commandWrapper);
			}			
			
			//Create Collection
			<% if (returnType == collectionClassName) {%>
				<%=collectionClassName%> rows = new <%=collectionClassName%>();
				Fill(reader, rows, start, pageLength);
				reader.Close();
<%=outputValues.ToString()%>				
				return rows;
				<%} else if (returnType != "void"){%>
				reader.Read();
				<%=returnType%> tmp = (<%=returnType%>)reader[0];
				reader.Close();
<%=outputValues.ToString()%>				
				return tmp;
			<% } %>		
		<% } %>
		
		}
		catch(SqlException ex)
		{
			throw new DataException("An data access error occured, please check inner SqlException.", ex);
		}
	}
	#endregion	
	
<%
		}
	}
%>

	#endregion

<% } // endif IncludeCustoms %>
	
	}//end class
} // end namespace
