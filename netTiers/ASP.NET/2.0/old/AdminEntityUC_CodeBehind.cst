<%-- 
* $Id: AdminEntityUC_CodeBehind.cst,v 1.1 2005/11/04 07:09:39 jroland Exp $
 * Last modified by $Author$
 * Last modified at $Date$
 * $Revision$

	Written By:
		Ben Johnson
	Description:
		This script generates an ASP.Net 2.0 user control that will perform CRUD operations
	Remarks:
		
--%>
<%@ CodeTemplate Src="..\..\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Generate a ASP.Net 2.0 user control for administration." Debug="True" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections" %>

<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Connection" Description="Tables of the system." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Connection" Description="Table that the data access class should be based on." %>

<%@ Property Name="NameSpace" Type="System.String" Category="Style" Description="Class Namespace." %>
<%@ Property Name="DALNameSpace" Type="System.String" Category="Data" Description="DAL Namespace." %>
<%

	// Collection of all columns in the table.
	ColumnSchemaCollection cols = SourceTable.Columns;
	
	// Collection of all columns in the table that are not primary keys.
	//ColumnSchemaCollection nonKeys = SourceTable.NonPrimaryKeyColumns;
	
	// Collection of all primary key columns.
	ColumnSchemaCollection keys = SourceTable.PrimaryKey.MemberColumns; 
	
	// Collection of ForeignKeys. Provides information about the foreign keys 
	//(keys where the current table is the foreign table) contained in the table. 
	TableKeySchemaCollection fkeys = SourceTable.ForeignKeys;
	
	//Provides information about the primary keys 
	//(keys where the current table is the primary table) contained in the table. 
	//TableKeySchemaCollection pkeys = SourceTable.PrimaryKeys;
	
	//Provides information about the indexes contained in the table. 
	//IndexSchemaCollection indexes = SourceTable.Indexes;
	
	ColumnSchemaCollection colsUpdatable = new ColumnSchemaCollection();
	foreach (ColumnSchema column in cols)
	{
		if ( ! IsIdentityColumn(column) && ! IsComputed(column) )
			colsUpdatable.Add(column);
	}
	
	//All the keys that have single column keys
	TableKeySchemaCollection fKeysSingle = new TableKeySchemaCollection();
	foreach(TableKeySchema tableKey in fkeys)
	{
		if ( tableKey.ForeignKeyMemberColumns.Count == 1)
			fKeysSingle.Add(tableKey);
	}

	string entityName = GetClassName(SourceTable.Name);
	string className = NameSpace + "." + GetClassName(SourceTable.Name);
	string collectionName = GetCollectionClassName(SourceTable.Name);
%>
#region Using directives
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using <%=NameSpace%>;
using <%=DALNameSpace%>;
#endregion

public partial class <%=entityName%>UC : System.Web.UI.UserControl
{
    protected void Page_Load(object sender, EventArgs e)
    {
    	this.ddlFilterColumn.Attributes.Add("OnChange", String.Format("ShowFilter('{0}');", this.ClientID));
		this.Page.ClientScript.RegisterStartupScript(typeof(Page), this.ClientID + "_OnLoad", String.Format("ShowFilter('{0}');", this.ClientID), true);
    }

	#region Private Properties
	
	private string Filter
    {
        get
        {
            if (ViewState["Filter"] == null)
            {
                return String.Empty;
            }
            else
                return ViewState["Filter"].ToString();
        }
        set 
        {
            ViewState["Filter"] = value;
        }
    }
	#endregion
	
    #region Private Methods
    private void RefreshGrid()
    {
        gvList.DataBind();
    }
    
    private void ShowEditor()
    {
        tblFilter.Visible = false;
        fvEditor.Visible = true;
    }

    private void ShowGrid()
    {
        tblFilter.Visible = true;
        fvEditor.Visible = false;
    }

    // TODO: Remove this function once VS2005 is released.  It is only needed to fix a Beta 2 bug.
    private void SaveValues(Control container, string prefix1, string prefix2, string fieldName)
    {
        string saveValue = "";
        HiddenField hfSave = (HiddenField)container.FindControl(prefix1 + fieldName);
        if (hfSave != null)
        {
            Control ctrl = container.FindControl(prefix2 + fieldName);

            if (ctrl != null)
            {
                if (ctrl is TextBox)
                {
                    saveValue = ((TextBox)ctrl).Text;
                }
                else if (ctrl is CheckBox)
                {
                    saveValue = ((CheckBox)ctrl).Checked.ToString();
                }
                else if (ctrl is ListControl)
                {
                    saveValue = ((ListControl)ctrl).SelectedValue.ToString();
                }
                else if (ctrl is System.Web.UI.WebControls.Label)
                {
                    saveValue = ((System.Web.UI.WebControls.Label)ctrl).Text;
                }
                
                hfSave.Value = saveValue;
            }
           
        }
    }
	
	private void BindDatePicker(string prefix)
    {
		<%		
		foreach (ColumnSchema column in cols)
		{
			
			if ( (column.DataType == DbType.Date) || (column.DataType == DbType.DateTime) )
			{
				string propertyName = GetPropertyName(column.Name);
			%>
		((ImageButton)fvEditor.FindControl("cal_data" + prefix + "<%=propertyName%>")).OnClientClick = String.Format("showCalendarControl(document.getElementById('{0}'));return false;", fvEditor.FindControl("data" + prefix + "<%=propertyName%>").ClientID);
			<%
			}
		}
		%>
    }

#endregion

	 #region objDsList Events
    protected void objDsList_Selecting(object sender, ObjectDataSourceSelectingEventArgs e)
    {
        if (e.ExecutingSelectCount)
        {
				//You will get here the second time through when it's trying to get the number of records
        }
        else if (e.Arguments.MaximumRows > 0)
        {
            //Adjust the StartRowIndex method.  The GetPaged function expects
            //a page index rather than a row index.
            e.Arguments.StartRowIndex = e.Arguments.StartRowIndex / e.Arguments.MaximumRows;
				
				//Check the filter
            String filter = this.Filter;

            if (filter != String.Empty)
            {
                e.InputParameters["whereClause"] = filter;
            }
        }
    }
	
	protected void objDsList_Selected(object sender, ObjectDataSourceStatusEventArgs e)
    {
        object o = e.ReturnValue;

        if (o is <%=collectionName%>)
        {
            <%=collectionName%> coll = (<%=collectionName%>)o;
            
            foreach(<%=entityName%> entity in coll)
            {
					<%
					foreach( TableKeySchema tableKey in fkeys)
					{
						string pKeyTableName = tableKey.PrimaryKeyTable.Name;
						string pKeyClassName = GetClassName(pKeyTableName);
						string pKeyProviderName = GetProviderName(pKeyTableName);
						string pKeyKeysNames = GetKeysName(tableKey.PrimaryKeyMemberColumns);
						
						string keyParams = String.Empty;
						foreach ( ColumnSchema column in tableKey.ForeignKeyMemberColumns )
						{
								if ( keyParams != String.Empty ) keyParams += ", ";
								
								keyParams += "entity." + GetPropertyName(column.Name);
						}
						
					%>
                if (entity.Parent<%=pKeyClassName%> == null)
                {
                    <%=pKeyClassName%> parent = DataRepository.<%=pKeyProviderName%>.GetBy<%=pKeyKeysNames%>(<%=keyParams%>);
                    entity.Parent<%=pKeyClassName%> = parent;
                }
					<%
					}
					%>
            }

        }
    }
    #endregion

    #region Grid Methods
    protected void gvList_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        switch (e.CommandName.ToUpper())
        { 
            case "NEW":
                fvEditor.ChangeMode(FormViewMode.Insert);
                break;
            case "SELECT":
                fvEditor.ChangeMode(FormViewMode.Edit);   
                break;
            default:
                return;
        }

        ShowEditor();
    }

    #endregion

    #region FormView Methods
    protected void fvEditor_ItemCommand(object sender, FormViewCommandEventArgs e)
    {
        switch (e.CommandName.ToUpper())
        {
            case "UPDATE":
                //Save the values to the hidden fields
                //Remove this once VS2005 is released
                //TODO: Remove once VS2005 is released
                #region Temporary Beta2 Fix
					<%
					foreach (ColumnSchema column in keys)
					{
						
					%>
                SaveValues(fvEditor, "update", "data", "<%=GetPropertyName(column.Name)%>");
					<%
					}
					%>
					<%
					foreach (ColumnSchema column in colsUpdatable)
					{
						
					%>
                SaveValues(fvEditor, "update", "data", "<%=GetPropertyName(column.Name)%>");
					<%
					}
					%>
                #endregion
                break;
            case "INSERT":
                //Save the values to the hidden fields
                //Remove this once VS2005 is released
                //TODO: Remove once VS2005 is released
                #region Temporary Beta2 Fix
					<%
					foreach (ColumnSchema column in colsUpdatable)
					{
						
					%>
                SaveValues(fvEditor, "insert", "dataInsert", "<%=GetPropertyName(column.Name)%>");
					<%
					}
					%>
                #endregion
                break;
            case "CANCEL":
                ShowGrid();
                break;
        }

        ShowGrid();
    }

    protected void fvEditor_ItemDeleted(object sender, FormViewDeletedEventArgs e)
    {
        RefreshGrid();
        ShowGrid();
    }
    protected void fvEditor_ItemInserted(object sender, FormViewInsertedEventArgs e)
    {
        RefreshGrid();
        ShowGrid();
    }
    protected void fvEditor_ItemUpdated(object sender, FormViewUpdatedEventArgs e)
    {
        RefreshGrid();
        ShowGrid();
    }
	
	 protected void fvEditor_DataBound(object sender, EventArgs e)
    {
        switch (fvEditor.CurrentMode)
        { 
            case FormViewMode.Insert:
                BindDatePicker("Insert");
                break;
            case FormViewMode.Edit:
                BindDatePicker("");
                break;
        }
    }
    #endregion
	
    #region Filter Methods
    protected string GetFilter()
	{
		string filter = String.Empty;
		
		switch (ddlFilterColumn.SelectedValue)
		{
			<%
			foreach(TableKeySchema tableKey in fKeysSingle)
			{
				ColumnSchema column = tableKey.ForeignKeyMemberColumns[0];
				string propertyName = GetPropertyName(column.Name);	
			%>
			case "<%=propertyName%>":
				filter = String.Format("[{0}] = '{1}'", ddlFilterColumn.SelectedValue, ddlFilter<%=propertyName%>.SelectedValue);
				break;
			<%
			}
			%>
			default:
				if (txtFilterCriteria.Text != String.Empty)
				{
					string wildCard = String.Empty;
					if (ddlFilterOperator.SelectedIndex == 0)
					{
						wildCard = "%";
					}
					filter = String.Format("[{0}] {1} '{2}{3}'", ddlFilterColumn.SelectedValue, ddlFilterOperator.SelectedValue, txtFilterCriteria.Text, wildCard);
				}
				break;
		}

		return filter;
	}
    protected void SetFilter(string filter)
    {
        if (filter == String.Empty)
        {
            txtFilterCriteria.Text = String.Empty;
        }
        this.Filter = filter;
        gvList.DataBind();
    }


    protected void btnFilter_Click(object sender, EventArgs e)
    {
        SetFilter(GetFilter());
    }

    protected void btnClearFilter_Click(object sender, EventArgs e)
    {
        SetFilter("");
    }

    #endregion
}
