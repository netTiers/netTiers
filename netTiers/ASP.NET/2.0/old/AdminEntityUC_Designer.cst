<%-- 
* $Id: AdminEntityUC_Designer.cst,v 1.1 2005/11/04 07:09:39 jroland Exp $
 * Last modified by $Author$
 * Last modified at $Date$
 * $Revision$

	Written By:
		Ben Johnson
	Description:
		This script generates an ASP.Net 2.0 user control that will perform CRUD operation
	Remarks:
		
--%>
<%@ CodeTemplate Src="..\..\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Generate a ASP.Net 2.0 user control for administration." Debug="True" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Text" %>

<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Connection" Description="Tables of the system." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Connection" Description="Table that the data access class should be based on." %>

<%@ Property Name="NameSpace" Type="System.String" Category="Style" Description="Class Namespace." %>
<%@ Property Name="DALNameSpace" Type="System.String" Category="Data" Description="DAL Namespace." %>
<%

	// Collection of all columns in the table.
	ColumnSchemaCollection cols = SourceTable.Columns;
	
	// Collection of all columns in the table that are not primary keys.
	//ColumnSchemaCollection nonKeys = SourceTable.NonPrimaryKeyColumns;
	
	// Collection of all primary key columns.
	ColumnSchemaCollection keys = SourceTable.PrimaryKey.MemberColumns; 
	
	// Collection of ForeignKeys. Provides information about the foreign keys 
	//(keys where the current table is the foreign table) contained in the table. 
	TableKeySchemaCollection fkeys = SourceTable.ForeignKeys;
	
	//Provides information about the primary keys 
	//(keys where the current table is the primary table) contained in the table. 
	//TableKeySchemaCollection pkeys = SourceTable.PrimaryKeys;
	
	//Provides information about the indexes contained in the table. 
	//IndexSchemaCollection indexes = SourceTable.Indexes;
	
	ColumnSchemaCollection colsUpdatable = new ColumnSchemaCollection();
	foreach (ColumnSchema column in cols)
	{
		if ( ! IsIdentityColumn(column) && ! IsComputed(column) )
			colsUpdatable.Add(column);
	}
	
	TableKeySchemaCollection fKeysSingle = new TableKeySchemaCollection();
	foreach(TableKeySchema tableKey in fkeys)
	{
		if ( tableKey.ForeignKeyMemberColumns.Count == 1)
			fKeysSingle.Add(tableKey);
	}

	string entityName = GetClassName(SourceTable.Name);
	string className = NameSpace + "." + GetClassName(SourceTable.Name);
	string providerName = GetProviderName(SourceTable.Name);
%>
<%%@ Control Language="C#" AutoEventWireup="true" CodeFile="<%=entityName%>UC.ascx.cs" Inherits="<%=entityName%>UC" EnableTheming="true"%%>
<asp:ObjectDataSource 
	ID="objDsList" 
	runat="server"  
	TypeName="<%=DALNameSpace%>.SqlClient.Sql<%=providerName%>" 
	DataObjectTypeName="<%=NameSpace%>.<%=entityName%>" 
	SelectMethod="GetPaged"
	DeleteMethod="Delete" 
	SortParameterName="orderBy" 
	EnablePaging="True"  
	StartRowIndexParameterName="start"
	MaximumRowsParameterName="pageLength" 
	OnSelecting="objDsList_Selecting" 
	OnSelected="objDsList_Selected"
	SelectCountMethod="GetTotalItems"
>
	<SelectParameters>
		<asp:Parameter Name="whereClause" Type="String" />
		<asp:Parameter Direction="Output" Name="count" Type="Int32" />
	</SelectParameters>
</asp:ObjectDataSource>
<asp:ObjectDataSource 
	ID="objDsEdit" 
	runat="server" 
	TypeName="<%=DALNameSpace%>.SqlClient.Sql<%=providerName%>"
	DataObjectTypeName="<%=NameSpace%>.<%=entityName%>"
	DeleteMethod="Delete" 
	InsertMethod="Insert" 
	SelectMethod="GetBy<%=GetKeysName(keys)%>"
	UpdateMethod="Update"
>
	<SelectParameters>
		<%
		foreach(ColumnSchema column in keys)
		{
		%>
		<asp:ControlParameter ControlID="gvList" Name="<%=GetPropertyName(column.Name)%>" PropertyName="SelectedValue" Type="<%=GetCSType((DataObjectBase)column).Replace("System.","")%>" />
		<%
		}
		%>
	</SelectParameters>
	<DeleteParameters>
		<%
		foreach(ColumnSchema column in keys)
		{
		%>
		<asp:Parameter Name="<%=GetPropertyName(column.Name)%>" Type="<%=GetCSType((DataObjectBase)column).Replace("System.","")%>" />
		<%
		}
		%>
	</DeleteParameters>
</asp:ObjectDataSource>

<%
//For each foreign key, create a datasource control for binding a list
foreach ( TableKeySchema tableKey in fkeys)
{
	string pKeyClassName = GetClassName(tableKey.PrimaryKeyTable.Name);
%>
<asp:ObjectDataSource ID="objDs<%=GetPropertyName(tableKey.ForeignKeyMemberColumns[0].Name)%>" runat="server" SelectMethod="GetAll" TypeName="<%=DALNameSpace%>.SqlClient.Sql<%=GetProviderName(tableKey.PrimaryKeyTable.Name)%>" DataObjectTypeName="<%=NameSpace%>.<%=GetClassName(tableKey.PrimaryKeyTable.Name)%>" >
</asp:ObjectDataSource>

<%
}
%>
&nbsp;&nbsp;
<asp:Table runat="server" ID="tblFilter" SkinID="FilterTable">
	<asp:TableRow runat="server">
		<asp:TableCell runat="server" SkinID="TitleCell">
			<asp:label id="lblTitle" runat="server" SkinID="TitleLabel" ><%=GetClassName(SourceTable.Name)%></asp:label>
		</asp:TableCell>
	</asp:TableRow>
	<asp:TableRow runat="server">
		<asp:TableCell runat="server" SkinID="FilterCell">
			<asp:Table runat="server" SkinID="FilterTableInner">
				<asp:TableRow runat="server">
					<asp:TableCell runat="server">&nbsp;Filter: 
						<asp:dropdownlist id="ddlFilterColumn" runat="server" SkinID="FilterColumn">
							<%
							foreach(ColumnSchema column in cols)
							{
								//if ( ! column.IsForeignKeyMember )
								{
									string propertyName = GetPropertyName(column.Name);
							%>
							<asp:ListItem Value="<%=column.Name%>" Text="<%=propertyName%>"></asp:ListItem>
							<%
								}
							}
							%>
						</asp:dropdownlist>
						<asp:dropdownlist id="ddlFilterOperator" runat="server" SkinID="FilterOperator">
							<asp:ListItem Value="LIKE">Starts with</asp:ListItem>
							<asp:ListItem Value="=">Is Exactly</asp:ListItem>
							<asp:ListItem Value="&gt;">Greater Than</asp:ListItem>
							<asp:ListItem Value="&lt;">Less Than</asp:ListItem>
						</asp:dropdownlist>
						<asp:textbox id="txtFilterCriteria" runat="server" SkinID="FilterCriteria"></asp:textbox>
						
						<!--Foreign Key Filter Lists-->
						<%=GetFilterLists(fKeysSingle)%>
					</asp:TableCell>
					<asp:TableCell>
						<asp:Button id="btnFilter" runat="server" Text="Filter" SkinID="GridFilterButton" OnClick="btnFilter_Click"></asp:Button>&nbsp;
						<asp:Button id="btnClearFilter" runat="server" Text="Clear" SkinID="GridFilterClearButton" OnClick="btnClearFilter_Click"></asp:Button>
					</asp:TableCell>
				</asp:TableRow>
			</asp:Table>
		</asp:TableCell>
	</asp:TableRow>
	<asp:TableRow runat="server">
		<asp:TableCell runat="server">
<%
	string dataKeyNames = String.Empty;

	foreach(ColumnSchema column in keys)
	{
		if (dataKeyNames != String.Empty)
			dataKeyNames += ",";
			
		dataKeyNames += GetPropertyName(column);
	}
%>
			<asp:GridView SkinID="AdminList" ID="gvList" AutogenerateColumns="false" runat="server" DataSourceID="objDsList" DataKeyNames="<%=dataKeyNames%>" OnRowCommand="gvList_RowCommand" AllowSorting="true">
				<Columns>
					<asp:TemplateField ShowHeader="False">
						<HeaderTemplate>
							<asp:Button ID="cmdAdd" runat="server" CommandName="New" CausesValidation="False" Text="Add" SkinID="GridAddButton" />
						</HeaderTemplate>
						<ItemTemplate>
						
							<asp:ImageButton ID="btnEdit" runat="server" SkinID="GridEditButton" CausesValidation="False" CommandName="Select" ></asp:ImageButton>
							<asp:ImageButton ID="btnDelete" runat="server" CausesValidation="False" CommandName="Delete"
								OnClientClick="return confirm('Are you sure you want to delete this record?');" SkinID="GridDeleteButton"></asp:ImageButton>
						</ItemTemplate>
					</asp:TemplateField>
					<%
					foreach( ColumnSchema column in cols)
					{
						//Exclude the primary key columns
						if ( !column.IsPrimaryKeyMember )
						{
							string propertyName = GetPropertyName(column);
							string evalProperty = propertyName;
							string headerText = String.Empty;
							if ( column.IsForeignKeyMember )
							{
								string pkPropertyName = String.Empty;
								string pkProperty = String.Empty;
									
								//Must be a single-column FK
								foreach ( TableKeySchema tableKey in fKeysSingle)
								{
									
									
									if ( GetPropertyName(tableKey.ForeignKeyMemberColumns[0].Name) == propertyName )
									{
										evalProperty = "Parent" + GetClassName(tableKey.PrimaryKeyTable.Name) + ".";
										
										//Find the first column that is not a PK or FK
										foreach(ColumnSchema pkColumn in tableKey.PrimaryKeyTable.Columns)
										{
											if ( !pkColumn.IsForeignKeyMember && !pkColumn.IsPrimaryKeyMember)
											{
													pkProperty = GetPropertyName(pkColumn);
													break;
											}
										}
										evalProperty += pkProperty;
										break;	
										
									}
									
									
								}
								headerText = "<asp:Label runat=\"server\" Text=\"" + pkProperty + "\" />";
							}
							else
							{
								headerText = "<asp:LinkButton runat=\"server\" CommandName=\"Sort\" CommandArgument=\"" + column.Name + "\" SkinID=\"GridHeaderLabel\" Text='" + propertyName + "'/>";
							}
					%>
					<asp:TemplateField>
						<HeaderTemplate>
							<%=headerText%>
						</HeaderTemplate>
						<ItemTemplate>
							<asp:Label ID="lbl<%=propertyName%>" runat="server" Text='<%%# Eval("<%=evalProperty%>") %%>' />
						</ItemTemplate>
					</asp:TemplateField>
					<%
						}
					}
					%>
				</Columns>
			</asp:GridView>
		</asp:TableCell>
	</asp:TableRow>
</asp:Table>
&nbsp; &nbsp;<asp:FormView ID="fvEditor" SkinID="AdminEdit" runat="server" DataKeyNames="<%=dataKeyNames%>" DataSourceID="objDsEdit" 
OnItemCommand="fvEditor_ItemCommand" 
OnItemDeleted="fvEditor_ItemDeleted" 
OnItemInserted="fvEditor_ItemInserted" 
OnItemUpdated="fvEditor_ItemUpdated"
OnDataBound="fvEditor_DataBound"
Visible="false">
	<EditItemTemplate>
	<%
	
	/*
	This is a temporary fix for VS2005 Beta 2.  In this release, it will not bind to objects that
	are embedded within another server container control.  To get around this, we render hidden 
	controls at the top level and use some code-behind to synchronize the values.
	
	THIS CAN BE REMOVED FOR THE PRODUCTION RELEASE OF VS 2005
	
	START OF FIX
	*/
	
	//Roll through the primary keys and the updateable columns (skip computed colums)
	foreach ( ColumnSchema column in keys )
	{
		string propertyName = GetPropertyName(column);
	%>
	<asp:HiddenField ID="update<%=propertyName%>" Value='<%%# Bind("<%=propertyName%>") %%>' runat="server"></asp:HiddenField>
	<%
	}
	
	foreach ( ColumnSchema column in colsUpdatable )
	{
		string propertyName = GetPropertyName(column);
	%>
	<asp:HiddenField ID="update<%=propertyName%>" Value='<%%# Bind("<%=propertyName%>") %%>' runat="server"></asp:HiddenField>
	<%
	}
	//END OF FIX
	%>
		<asp:Table runat="server" SkinID="EditTable" >
				<asp:TableRow runat="server">
					<asp:TableCell runat="server" height="40">
						<span class="titlebox">Edit <%=entityName%></span>
					</asp:TableCell>
				</asp:TableRow>
				<asp:TableRow runat="server" Visible="false">
					<asp:TableCell runat="server" ID="tcError"></asp:TableCell>
				</asp:TableRow>
				<asp:TableRow runat="server">
					<asp:TableCell runat="server" BackColor="AliceBlue">
						<asp:Table runat="server" CellPadding="3" CellSpacing="1">
							<%
							//Run though the primary keys and display them as labels
							foreach (ColumnSchema column in keys)
							{
								string propertyName = GetPropertyName(column);
							%>
							<asp:TableRow runat="server">
								<asp:TableCell runat="server" SkinID="EditorLabelCell"><%=propertyName%>:</asp:TableCell>
								<asp:TableCell runat="server" SkinID="EditorDataCell">
									<asp:Label ID="data<%=propertyName%>" runat="server" Text='<%%# Bind("<%=propertyName%>") %%>'></asp:Label>
								</asp:TableCell>
							</asp:TableRow>
							<%
							}
							%>
							<%
							//Run though the updatable columns and display the appropriate editor
							foreach (ColumnSchema column in colsUpdatable)
							{
								string propertyName = GetPropertyName(column);
							%>
							<asp:TableRow runat="server">
								<asp:TableCell runat="server" SkinID="EditorLabelCell"><%=propertyName%>:</asp:TableCell>
								<asp:TableCell runat="server" SkinID="EditorDataCell">
									<%=GetEditorControl(column,"",fKeysSingle)%>
								</asp:TableCell>
							</asp:TableRow>
							<%
							}
							%>
						</asp:Table>
					</asp:TableCell>
				</asp:TableRow>
				<asp:TableFooterRow runat="server">
					<asp:TableCell runat="server">
						<asp:Table runat="server" Width="100%">
							<asp:TableRow runat="server">
								<asp:TableCell runat="server">
		
									<asp:Button ID="btnSave" runat="server" Text="Save" SkinID="EditorSaveButton" CommandName="Update"></asp:Button>&nbsp;
									<asp:Button ID="btnDelete" runat="server" CausesValidation="False" Text="Delete" CommandName="Delete" OnClientClick="return confirm('Are you sure you want to delete this item?');"
										 SkinID="EditorDeleteButton"></asp:Button>
								</asp:TableCell>
								<asp:TableCell runat="server" HorizontalAlign="right">
									<asp:Button ID="btnCancel" runat="server" CausesValidation="False"
										Text="Cancel" SkinID="EditorCancelButton"></asp:Button>
								</asp:TableCell>
							</asp:TableRow>
						</asp:Table>
					</asp:TableCell>
				</asp:TableFooterRow>
			</asp:Table>
	</EditItemTemplate>
	<ItemTemplate>
	
	</ItemTemplate>
	<InsertItemTemplate>
	<%
	
	/*
	This is a temporary fix for VS2005 Beta 2.  In this release, it will not bind to objects that
	are embedded within another server container control.  To get around this, we render hidden 
	controls at the top level and use some code-behind to synchronize the values.
	
	THIS CAN BE REMOVED FOR THE PRODUCTION RELEASE OF VS 2005
	
	START OF FIX
	*/
	
	//Roll through the updateable columns (skip computed colums)
	foreach ( ColumnSchema column in colsUpdatable )
	{
		string propertyName = GetPropertyName(column);
	%>
	<asp:HiddenField ID="insert<%=propertyName%>" Value='<%%# Bind("<%=propertyName%>") %%>' runat="server"></asp:HiddenField>
	<%
	}
	//END OF FIX
	%>
		<asp:Table runat="server" SkinID="EditTable" >
				<asp:TableRow runat="server">
					<asp:TableCell runat="server" height="40">
						<span class="titlebox">New <%=entityName%></span>
					</asp:TableCell>
				</asp:TableRow>
				<asp:TableRow runat="server" Visible="false">
					<asp:TableCell runat="server" ID="tcError"></asp:TableCell>
				</asp:TableRow>
				<asp:TableRow runat="server">
					<asp:TableCell runat="server" BackColor="AliceBlue">
						<asp:Table runat="server" CellPadding="3" CellSpacing="1">
							<%
							//Run though the updatable columns and display the appropriate editor
							foreach (ColumnSchema column in colsUpdatable)
							{
								string propertyName = GetPropertyName(column);
							%>
							<asp:TableRow runat="server">
								<asp:TableCell runat="server" SkinID="EditorLabelCell"><%=propertyName%>:</asp:TableCell>
								<asp:TableCell runat="server" SkinID="EditorDataCell">
									<%=GetEditorControl(column,"Insert",fKeysSingle)%>
								</asp:TableCell>
							</asp:TableRow>
							<%
							}
							%>
						</asp:Table>
					</asp:TableCell>
				</asp:TableRow>
				<asp:TableFooterRow runat="server">
					<asp:TableCell runat="server">
						<asp:Table runat="server" Width="100%">
							<asp:TableRow runat="server">
								<asp:TableCell runat="server">
		
									<asp:Button ID="btnSave" runat="server" Text="Save" SkinID="EditorSaveButton" CommandName="Insert"></asp:Button>&nbsp;
								</asp:TableCell>
								<asp:TableCell runat="server" HorizontalAlign="right">
									<asp:Button ID="btnCancel" runat="server" CausesValidation="False"
										Text="Cancel" SkinID="EditorCancelButton"></asp:Button>
								</asp:TableCell>
							</asp:TableRow>
						</asp:Table>
					</asp:TableCell>
				</asp:TableFooterRow>
			</asp:Table>
	</InsertItemTemplate>
	<EmptyDataTemplate>
		<span style="background-color: #eff3fb">Select an item from the list.</span>
	</EmptyDataTemplate>
	
</asp:FormView>


<script language="javascript" type="text/javascript">

function ShowFilter(containerName)
{
	
	if ( document.getElementById )
	{
		var oFilter = document.getElementById(containerName + "_ddlFilterColumn");
		if ( oFilter )
		{
			
			var filterColumn = oFilter.options[oFilter.selectedIndex].value;
			
			switch ( filterColumn )
			{
				<%
				foreach(TableKeySchema tableKey in fKeysSingle)
				{
					string propertyName = GetPropertyName(tableKey.ForeignKeyMemberColumns[0].Name);
					%>
				case "<%=propertyName%>":
					HideAll(containerName);
					ShowElement(containerName + "_ddlFilter<%=propertyName%>");
					break;
				<%
				}
				%>
				default:
					HideAll(containerName);
					ShowDefault(containerName);
					break;
			}	
		}
	}
	
}

function ShowDefault(containerName)
{
	ShowElement(containerName + "_txtFilterCriteria");
	ShowElement(containerName + "_ddlFilterOperator");
}

function HideAll(containerName)
{

	HideElement(containerName + "_txtFilterCriteria");
	HideElement(containerName + "_ddlFilterOperator");
	<%
		foreach(TableKeySchema tableKey in fKeysSingle)
		{
			string propertyName = GetPropertyName(tableKey.ForeignKeyMemberColumns[0].Name);
			%>
	HideElement(containerName + "_ddlFilter<%=propertyName%>");
		<%
		}
		%>
	
}

function HideElement(elementId)
{
	if ( document.getElementById )
	{
		o = document.getElementById(elementId);
		if ( o )
		{
			o.style.display = "none";
		}
	}
}

function ShowElement(elementId)
{
	if ( document.getElementById )
	{
		o = document.getElementById(elementId);
		if ( o )
		{
			o.style.display = "";
		}
	}
}

</script>

<script runat="template">

public string GetEditorControl(ColumnSchema column, string prefix, TableKeySchemaCollection fkeys)
{
	string propertyName = GetPropertyName(column.Name);
	string controlID = String.Format("data{0}{1}",prefix, propertyName);
	string validatorID = String.Format("Val_{0}",controlID);
	string controlDecl = String.Empty;
	//Return the text representation of the editor control for a column
	if ( column.IsForeignKeyMember )
	{
		string pkPropertyName = String.Empty;
		string pkDisplayField = String.Empty;
		
		foreach ( TableKeySchema tableKey in fkeys)
		{
			//Must be a single-column FK
			if ( GetPropertyName(tableKey.ForeignKeyMemberColumns[0].Name) == propertyName )
			{
				pkPropertyName = GetPropertyName(tableKey.PrimaryKeyMemberColumns[0].Name);
				
				
				
				//Find the first non-key column for display
				foreach(ColumnSchema pkColumn in tableKey.PrimaryKeyTable.Columns)
				{
					if ( ! pkColumn.IsForeignKeyMember && ! pkColumn.IsPrimaryKeyMember )
					{
						pkDisplayField = GetPropertyName(pkColumn.Name);
						break;
					}
				}
				
				if ( pkDisplayField == String.Empty )
				{
					pkDisplayField = pkPropertyName;
				}
				break;	
			}
		}
		//ColumnSchema c = null;
		
		controlDecl = String.Format("<asp:DropDownList runat=\"server\" id=\"{0}\" DataSourceID=\"objDs{3}\" DataTextField=\"{2}\" DataValueField=\"{1}\" SelectedValue='<%# Bind(\"{3}\") %>'></asp:DropDownList>",controlID, pkPropertyName,pkDisplayField,propertyName);
	}
	else
	{
		switch ( column.DataType )
		{
			case DbType.Boolean:
				//Return a checkbox control
				//controlDecl = String.Format("<asp:CheckBox runat=\"server\" id=\"{0}\" Checked='<%# Bind(\"{1}\") %>'></asp:CheckBox>",controlID, propertyName);
				
				//Return a radiobuttonlist control
				controlDecl = String.Format("<asp:RadioButtonList runat=\"server\" id=\"{0}\" SelectedValue='<%# Bind(\"{1}\") %>' RepeatDirection=\"Horizontal\"><asp:ListItem Value=\"True\" Text=\"Yes\" Selected=\"True\"></asp:ListItem><asp:ListItem Value=\"False\" Text=\"No\"></asp:ListItem></asp:RadioButtonList>",controlID, propertyName);
				break;
			case DbType.AnsiString:
			case DbType.AnsiStringFixedLength:
			case DbType.String:
			case DbType.StringFixedLength:
				//Return a textbox control
				if ( column.Size > 255 )
				{
					controlDecl = String.Format("<asp:TextBox runat=\"server\" id=\"{0}\" Text='<%# Bind(\"{1}\") %>'  TextMode=\"MultiLine\"  Width=\"250px\" Rows=\"5\"></asp:TextBox>",controlID, propertyName);
				}
				else
				{
					controlDecl = String.Format("<asp:TextBox runat=\"server\" id=\"{0}\" Text='<%# Bind(\"{1}\") %>' MaxLength=\"{2}\"></asp:TextBox>",controlID, propertyName,column.Size);
				}
				
				if ( ! column.AllowDBNull )
				{
					//Add a validator control
					controlDecl += String.Format("<asp:RequiredFieldValidator ID=\"Req{0}\" runat=\"server\" Display=\"Dynamic\" ControlToValidate=\"{1}\" ErrorMessage=\"Required\"></asp:RequiredFieldValidator>",validatorID, controlID);
				}
				break;
				
			case DbType.Currency:
			case DbType.Decimal:
			case DbType.Double:
			case DbType.Single:
			case DbType.Int16: 
			case DbType.Int32:
			case DbType.Int64: 
			case DbType.Byte:
				//Return a textbox control
				controlDecl = String.Format("<asp:TextBox runat=\"server\" id=\"{0}\" Text='<%# Bind(\"{1}\") %>'></asp:TextBox>",controlID, propertyName);
				
				if ( ! column.AllowDBNull )
				{
					//Add a validator control
					controlDecl += String.Format("<asp:RequiredFieldValidator ID=\"Req{0}\" runat=\"server\" Display=\"Dynamic\" ControlToValidate=\"{1}\" ErrorMessage=\"Required\"></asp:RequiredFieldValidator>",validatorID, controlID);
				}
				
				object maxValue = Double.MaxValue;
				object minValue = Double.MinValue;
				string valType = String.Empty;
				
				//Add a range validator
				switch ( column.DataType )
				{
					case DbType.Currency:
						maxValue = 999999999;//Double.MaxValue;
						minValue = -999999999;//Double.MinValue;
						valType = "Currency";
						break;
					case DbType.Decimal:
						maxValue = 999999999;//Decimal.MaxValue;
						minValue = -999999999;//Decimal.MinValue;
						valType = "Double";
						break;
					case DbType.Double:
						maxValue = 999999999;//Double.MaxValue;
						minValue = -999999999;//Double.MinValue;
						valType = "Double";
						break;
					case DbType.Single:
						maxValue = 999999999;//Single.MaxValue;
						minValue = -999999999;//Single.MinValue;
						valType = "Double";
						break;
					case DbType.Int16:
						maxValue = Int16.MaxValue;
						minValue = Int16.MinValue;
						valType = "Integer";
						break;
					case DbType.Int32:
						maxValue = Int32.MaxValue;
						minValue = Int32.MinValue;
						valType = "Integer";
						break;
					case DbType.Int64:
						maxValue = Int64.MaxValue;
						minValue = Int64.MinValue;
						valType = "Double";
						break;
					case DbType.Byte:
						maxValue = Byte.MaxValue;
						minValue = Byte.MinValue;
						valType = "Integer";
						break;
				}
				
				controlDecl += String.Format("<asp:RangeValidator ID=\"Range{0}\" runat=\"server\" Display=\"Dynamic\" ControlToValidate=\"{1}\" ErrorMessage=\"Invalid value\" MaximumValue=\"{2}\" MinimumValue=\"{3}\" Type=\"{4}\"></asp:RangeValidator>",validatorID, controlID, maxValue.ToString(), minValue.ToString(),valType);
				
				break;
				
			case DbType.Date:
			case DbType.DateTime:
				//Return a textbox control
				controlDecl = String.Format("<asp:TextBox runat=\"server\" id=\"{0}\" Text='<%# Bind(\"{1}\") %>' MaxLength=\"{2}\"></asp:TextBox>",controlID, propertyName,column.Size);
				
				//Add an image button to pick from a calendar
				controlDecl +=  String.Format("<asp:ImageButton ID=\"cal_{0}\" runat=\"server\" SkinID=\"CalendarImageButton\" />",controlID);
				
				if ( ! column.AllowDBNull )
				{
					//Add a validator control
					controlDecl += String.Format("<asp:RequiredFieldValidator ID=\"Req{0}\" runat=\"server\" Display=\"Dynamic\" ControlToValidate=\"{1}\" ErrorMessage=\"Required\"></asp:RequiredFieldValidator>",validatorID, controlID);
				}
				break;
				
			/*
			case DbType.Binary: return new byte[] { };
			case DbType.Byte: return (byte)0;
			
			
			;
			case DbType.Guid: return Guid.Empty;
			
			case DbType.Object: return null;
			 return 0F;
			
			case DbType.Time: return DateTime.MinValue;
			case DbType.VarNumeric: return 0;*/
			default:
				controlDecl = column.DataType.ToString() + String.Format("<asp:TextBox runat=\"server\" id=\"data{2}{0}\" Text='<%# Bind(\"{1}\") %>'></asp:TextBox>",propertyName, propertyName,prefix);
				break;
		
		}
		//return column.NativeType;
	}
	
	return controlDecl;
}



public string GetFilterLists(TableKeySchemaCollection fkeys)
{
	StringBuilder controlDecl = new StringBuilder();
	foreach ( TableKeySchema tableKey in fkeys)
	{
		if ( tableKey.ForeignKeyMemberColumns.Count == 1 )
		{
			ColumnSchema column = tableKey.ForeignKeyMemberColumns[0];
			string propertyName = GetPropertyName(column.Name);
			string controlID = String.Format("ddlFilter{0}", propertyName);
			
			string pkPropertyName = String.Empty;
			string pkDisplayField = String.Empty;
			
			pkPropertyName = GetPropertyName(tableKey.PrimaryKeyMemberColumns[0].Name);

			//Find the first non-key column for display
			foreach(ColumnSchema pkColumn in tableKey.PrimaryKeyTable.Columns)
			{
				if ( ! pkColumn.IsForeignKeyMember && ! pkColumn.IsPrimaryKeyMember )
				{
					pkDisplayField = GetPropertyName(pkColumn.Name);
					break;
				}
			}
			
			if ( pkDisplayField == String.Empty )
			{
				pkDisplayField = pkPropertyName;
			}

			controlDecl.AppendFormat("<asp:DropDownList runat=\"server\" id=\"{0}\" DataSourceID=\"objDs{3}\" DataTextField=\"{2}\" DataValueField=\"{1}\" style=\"display:none;\"></asp:DropDownList>",controlID, pkPropertyName,pkDisplayField,propertyName);
			
		}

	}
	return controlDecl.ToString();
	//return "";
}


</script>