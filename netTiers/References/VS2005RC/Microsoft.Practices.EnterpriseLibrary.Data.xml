<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Practices.EnterpriseLibrary.Data</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase">
            <summary>
            <para>Represents a Sql Server Database.</para>
            </summary>
            <remarks> 
            <para>
            Internally uses Sql Server .NET Managed Provider from Microsoft (System.Data.SqlClient) to connect to the database.
            </para>  
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Database">
            <summary>
            Represents an abstract database that commands can be run against. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.#ctor">
            <summary>
            Inherited constructor
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.Initialize(Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationView)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database"/> class with the specified <see cref="P:Microsoft.Practices.EnterpriseLibrary.Data.Database.DatabaseProviderData"/> and <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext"/>.</para>
            </summary>
            <param name="configurationView">A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationView"/> that should be of type <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DatabaseConfigurationView"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.GetConnectionStringWithoutCredentials">
            <devdoc>
            Method used for testing ONLY!!!
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.GetConnection">
            <summary>
            <para>When overridden in a derived class, gets the connection for this database.</para>
            <seealso cref="T:System.Data.IDbConnection"/>        
            </summary>
            <returns>
            <para>The <see cref="T:System.Data.IDbConnection"/> for this database.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.GetStoredProcCommandWrapper(System.String)">
            <summary>
            <para>When overridden in a derived class, creates a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper"/> for a stored procedure.</para>
            </summary>
            <param name="storedProcedureName"><para>The name of the stored procedure.</para></param>
            <returns><para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper"/> for the stored procedure.</para></returns>       
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.GetStoredProcCommandWrapper(System.String,System.Object[])">
            <summary>
            <para>When overridden in a derived class, creates an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper"/> for a stored procedure.</para>
            </summary>
            <param name="storedProcedureName"><para>The name of the stored procedure.</para></param>
            <param name="parameterValues"><para>The list of parameters for the procedure.</para></param>
            <returns><para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper"/> for the stored procedure.</para></returns>
            <remarks>
            <para>The parameters for the stored procedure will be discovered and the values are assigned in positional order.</para>
            </remarks>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.GetStoredProcCommandWrapperWithSourceColumns(System.String,System.String[])">
            <summary>
            Wraps around a derived class's implementation of the GetStoredProcCommandWrapper method and adds functionality for
            using this method with UpdateDataSet.  The GetStoredProcCommandWrapper method (above) that takes a params array 
            expects the array to be filled with VALUES for the parameters. This method differs in that it allows a user to pass 
            in a string array and this method will dynamically discover the parameters for the stored procedure and set the 
            parameter's SourceColumns to the strings that are passed in.  It does this by mapping the parameters to the strings IN 
            ORDER.  Thus, order is very important.
            </summary>
            <param name="storedProcedureName"><para>The name of the stored procedure.</para></param>
            <param name="sourceColumns"><para>The list of DataFields for the procedure.</para></param>
            <returns><para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper"/> for the stored procedure.</para></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.GetSqlStringCommandWrapper(System.String)">
            <summary>
            <para>When overridden in a derived class, creates an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper"/> for a SQL query.</para>
            </summary>
            <param name="query"><para>The text of the query.</para></param>        
            <returns><para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper"/> for the SQL query.</para></returns>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.GetDataAdapter">
            <summary>
            Gets the DbDataAdapter with the given update behavior and connection from the proper derived class.
            Created this new, public method instead of modifying the protected, abstract one so there will be no
            breaking changes for any currently derived Database class
            </summary>
            <returns>An <see cref="T:System.Data.Common.DbDataAdapter"/>.</returns>
            <seealso cref="T:System.Data.Common.DbDataAdapter"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.GetDataAdapter(Microsoft.Practices.EnterpriseLibrary.Data.UpdateBehavior)">
            <summary>
            Gets the DbDataAdapter with the given update behavior and connection from the proper derived class.
            Created this new, public method instead of modifying the protected, abstract one so there will be no
            breaking changes for any currently derived Database class
            </summary>
            <param name="behavior">
            <para>One of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.UpdateBehavior"/> values.</para>
            </param>
            <returns>An <see cref="T:System.Data.Common.DbDataAdapter"/>.</returns>
            <seealso cref="T:System.Data.Common.DbDataAdapter"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.GetDataAdapter(Microsoft.Practices.EnterpriseLibrary.Data.UpdateBehavior,System.Data.IDbConnection)">
            <summary>
            <para>When overridden in a derived class, creates a <see cref="T:System.Data.Common.DbDataAdapter"/> with the given update behavior and connection.</para>        
            </summary>
            <param name="behavior">
            <para>One of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.UpdateBehavior"/> values.</para>
            </param>
            <param name="connection">
            <para>The open connection to the database.</para>
            </param>
            <returns>An <see cref="T:System.Data.Common.DbDataAdapter"/>.</returns>
            <seealso cref="T:System.Data.Common.DbDataAdapter"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.LoadDataSet(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper,System.Data.DataSet,System.String)">
            <summary>
            <para>Execute the <paramref name="command"/> and add a new <see cref="T:System.Data.DataTable"></see> to the existing <see cref="T:System.Data.DataSet"></see></para>
            </summary>
            <param name="command">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper"/> to execute.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to load.</para>
            </param>
            <param name="tableName">
            <para>The name for the new <see cref="T:System.Data.DataTable"/> to add to the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <seealso cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)"/>
            <exception cref="T:System.ArgumentNullException">Any input parameter was null</exception>
            <exception cref="T:System.ArgumentException">tableName was an empty string</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.LoadDataSet(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper,System.Data.DataSet,System.String,System.Data.IDbTransaction)">
            <summary>
            <para>Execute the <paramref name="command"/> within the given <paramref name="transaction"/> and add a new <see cref="T:System.Data.DataTable"></see> to the existing <see cref="T:System.Data.DataSet"></see></para>
            </summary>
            <param name="command">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper"/> to execute.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to load.</para>
            </param>
            <param name="tableName">
            <para>The name for the new <see cref="T:System.Data.DataTable"/> to add to the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <seealso cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)"/>
            <exception cref="T:System.ArgumentNullException">Any input parameter was null</exception>
            <exception cref="T:System.ArgumentException">tableName was an empty string</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.LoadDataSet(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper,System.Data.DataSet,System.String[])">
            <summary>
            <para>Load a <see cref="T:System.Data.DataSet"/> from a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper"/>.</para>
            </summary>
            <param name="command">
            <para>The command to execute to fill the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to fill.</para>
            </param>
            <param name="tableNames">
            <para>An array of table name mappings for the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.LoadDataSet(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper,System.Data.DataSet,System.String[],System.Data.IDbTransaction)">
            <summary>
            <para>Load a <see cref="T:System.Data.DataSet"/> from a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper"/> in  a transaction.</para>
            </summary>
            <param name="command">
            <para>The command to execute to fill the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to fill.</para>
            </param>
            <param name="tableNames">
            <para>An array of table name mappings for the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command in.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.LoadDataSet(System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            <para>Load a <see cref="T:System.Data.DataSet"/> from a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper"/></para>
            </summary>
            <param name="storedProcedureName">
            <para>The stored procedure name to execute.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to fill.</para>
            </param>
            <param name="tableNames">
            <para>An array of table name mappings for the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.LoadDataSet(System.Data.IDbTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            <para>Load a <see cref="T:System.Data.DataSet"/> from a stored procedure in  a transaction.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the stored procedure in.</para>
            </param>
            <param name="storedProcedureName">
            <para>The stored procedure name to execute.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to fill.</para>
            </param>
            <param name="tableNames">
            <para>An array of table name mappings for the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.LoadDataSet(System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            <para>Load a <see cref="T:System.Data.DataSet"/> from command text.</para>
            </summary>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to fill.</para>
            </param>
            <param name="tableNames">
            <para>An array of table name mappings for the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.LoadDataSet(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            <para>Load a <see cref="T:System.Data.DataSet"/> from command text in a transaction.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command in.</para>
            </param>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to fill.</para>
            </param>
            <param name="tableNames">
            <para>An array of table name mappings for the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteDataSet(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper)">
            <summary>
            <para>Execute the <paramref name="command"/> and return the results in a new <see cref="T:System.Data.DataSet"/>.</para>
            </summary>
            <param name="command"><para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper"/> to execute.</para></param>
            <returns>A <see cref="T:System.Data.DataSet"/> with the results of the <paramref name="command"/>.</returns>
            <seealso cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteDataSet(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper,System.Data.IDbTransaction)">
            <summary>
            <para>Execute the <paramref name="command"/> as part of the <paramref name="transaction"/> and return the results in a new <see cref="T:System.Data.DataSet"/>.</para>
            </summary>
            <param name="command"><para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper"/> to execute.</para></param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <returns>A <see cref="T:System.Data.DataSet"/> with the results of the <paramref name="command"/>.</returns>
            <seealso cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            <para>Execute the <paramref name="storedProcedureName"/> with <paramref name="parameterValues"/> and return the results in a new <see cref="T:System.Data.DataSet"/>.</para>
            </summary>
            <param name="storedProcedureName">
            <para>The stored procedure to execute.</para>
            </param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Data.DataSet"/> with the results of the <paramref name="storedProcedureName"/>.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteDataSet(System.Data.IDbTransaction,System.String,System.Object[])">
            <summary>
            <para>Execute the <paramref name="storedProcedureName"/> ith <paramref name="parameterValues"/> as part of the <paramref name="transaction"/> and return the results in a new <see cref="T:System.Data.DataSet"/> within a transaction.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <param name="storedProcedureName">
            <para>The stored procedure to execute.</para>
            </param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Data.DataSet"/> with the results of the <paramref name="storedProcedureName"/>.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            <para>Execute the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType"/> and return the results in a new <see cref="T:System.Data.DataSet"/>.</para>
            </summary>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Data.DataSet"/> with the results of the <paramref name="commandText"/>.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteDataSet(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            <para>Execute the <paramref name="commandText"/> as part of the given <paramref name="transaction"/> and return the results in a new <see cref="T:System.Data.DataSet"/>.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Data.DataSet"/> with the results of the <paramref name="commandText"/>.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteScalar(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>
            <returns>
            <para>The first column of the first row in the resultset.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteScalar(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper,System.Data.IDbTransaction)">
            <summary>
            <para>Executes the <paramref name="command"/> within a <paramref name="transaction"/>, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <returns>
            <para>The first column of the first row in the resultset.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteScalar(System.String,System.Object[])">
            <summary>
            <para>Executes the <paramref name="storedProcedureName"/> with the given <paramref name="parameterValues"/> and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="storedProcedureName">
            <para>The stored procedure to execute.</para>
            </param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>The first column of the first row in the resultset.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteScalar(System.Data.IDbTransaction,System.String,System.Object[])">
            <summary>
            <para>Executes the <paramref name="storedProcedureName"/> with the given <paramref name="parameterValues"/> within a 
            <paramref name="transaction"/> and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <param name="storedProcedureName">
            <para>The stored procedure to execute.</para>
            </param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>The first column of the first row in the resultset.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            <para>Executes the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType"/>  and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>The first column of the first row in the resultset.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteScalar(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            <para>Executes the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType"/> 
            within the given <paramref name="transaction"/> and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>The first column of the first row in the resultset.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteNonQuery(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns the number of rows affected.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>       
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteNonQuery(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper,System.Data.IDbTransaction)">
            <summary>
            <para>Executes the <paramref name="command"/> within the given <paramref name="transaction"/>, and returns the number of rows affected.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            <para>Executes the <paramref name="storedProcedureName"/> using the given <paramref name="parameterValues"/> and returns the number of rows affected.</para>
            </summary>
            <param name="storedProcedureName">
            <para>The command that contains the query to execute.</para>
            </param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>The number of rows affected</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteNonQuery(System.Data.IDbTransaction,System.String,System.Object[])">
            <summary>
            <para>Executes the <paramref name="storedProcedureName"/> using the given <paramref name="parameterValues"/> within a transaction and returns the number of rows affected.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <param name="storedProcedureName">
            <para>The command that contains the query to execute.</para>
            </param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>The number of rows affected</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            <para>Execute the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType"/> and return the number of rows affected.</para>
            </summary>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>The number of rows affected</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteNonQuery(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            <para>Execute the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType"/> as part of the given <paramref name="transaction"/> and return the number of rows affected.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>The number of rows affected</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteReader(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteReader"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteReader(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper,System.Data.IDbTransaction)">
            <summary>
            <para>Executes the <paramref name="command"/> within a transaction and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteReader"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteReader(System.String,System.Object[])">
            <summary>
            <para>Executes the <paramref name="storedProcedureName"/> with the given <paramref name="parameterValues"/> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>        
            <param name="storedProcedureName">
            <para>The command that contains the query to execute.</para>
            </param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteReader"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteReader(System.Data.IDbTransaction,System.String,System.Object[])">
            <summary>
            <para>Executes the <paramref name="storedProcedureName"/> with the given <paramref name="parameterValues"/> within the given <paramref name="transaction"/> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <param name="storedProcedureName">
            <para>The command that contains the query to execute.</para>
            </param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteReader"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            <para>Execute the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType"/> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteReader"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteReader(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            <para>Execute the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType"/> within the given 
            <paramref name="transaction"/> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteReader"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.UpdateDataSet(System.Data.DataSet,System.String,Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper,Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper,Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper,Microsoft.Practices.EnterpriseLibrary.Data.UpdateBehavior)">
            <summary>
            <para>Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the <see cref="T:System.Data.DataSet"/>.</para>
            </summary>        
            <param name="dataSet"><para>The <see cref="T:System.Data.DataSet"/> used to update the data source.</para></param>
            <param name="tableName"><para>The name of the source table to use for table mapping.</para></param>
            <param name="insertCommand"><para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Added"/></para></param>
            <param name="updateCommand"><para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Modified"/></para></param>        
            <param name="deleteCommand"><para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Deleted"/></para></param>        
            <param name="updateBehavior"><para>One of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.UpdateBehavior"/> values.</para></param>
            <returns>number of records affected</returns>
            <seealso cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.UpdateDataSet(System.Data.DataSet,System.String,Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper,Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper,Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper,System.Data.IDbTransaction)">
            <summary>
            <para>Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the <see cref="T:System.Data.DataSet"/> within a transaction.</para>
            </summary>        
            <param name="dataSet"><para>The <see cref="T:System.Data.DataSet"/> used to update the data source.</para></param>
            <param name="tableName"><para>The name of the source table to use for table mapping.</para></param>
            <param name="insertCommand"><para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Added"/></para></param>
            <param name="updateCommand"><para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Modified"/></para></param>        
            <param name="deleteCommand"><para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Deleted"/></para></param>        
            <param name="transaction"><para>The <see cref="T:System.Data.IDbTransaction"/> to use.</para></param>
            <returns>number of records affected</returns>
            <seealso cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.ClearParameterCache">
            <summary>
            Clears the parameter cache. Since there is only one parameter cache that is shared by all instances
            of this class, this clears all parameters cached for all databases.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.PrepareCommand(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper,System.Data.IDbConnection)">
            <summary>
            <para>Assigns a <paramref name="connection"/> to the <paramref name="command"/> and discovers parameters if needed.</para>
            </summary>
            <param name="command"><para>The command that contains the query to prepare.</para></param>
            <param name="connection">The connection to assign to the command.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.PrepareCommand(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper,System.Data.IDbTransaction)">
            <summary>
            <para>Assigns a <paramref name="transaction"/> to the <paramref name="command"/> and discovers parameters if needed.</para>
            </summary>
            <param name="command"><para>The command that contains the query to prepare.</para></param>
            <param name="transaction">The transaction to assign to the command.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Database.OpenConnection">
            <summary>
            <para>Open a connection.</para>
            </summary>
            <returns>The opened connection.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Database.ConnectionString">
            <summary>
            <para>Gets the string used to open a database.</para>
            <seealso cref="P:System.Data.IDbConnection.ConnectionString"/>
            </summary>
            <value>
            <para>The string used to open a database.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Database.ParameterToken">
            <summary>
            <para>When implemented by a class, gets the parameter token used to delimit parameters for the database.</para>
            </summary>
            <value>
            <para>the parameter token used to delimit parameters for the database.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Database.Instrumentation">
            <devdoc>
            Provides methods to record each event that occurs.  Allows for performance counters
            to monitor the Data block.
            </devdoc>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Database.ConnectionStringNoCredentials">
            <summary>
            <para>Gets the connection string with out the username and password.</para>
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Data.Database.ConnectionString"/>
            </summary>
            <value>
            <para>The connection string with out the username and password.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Database.ServiceKey">
            <summary>
            <para>Gets the service key used to create the database instance.</para>
            </summary>
            <value>
            <para>The service key used to create the database instance.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Database.DatabaseProviderData">
            <summary>
            Gets the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Data.Database.DatabaseProviderData"/> from which
            this object was initialized.
            </summary>
            <value>A <see cref="P:Microsoft.Practices.EnterpriseLibrary.Data.Database.DatabaseProviderData"/>.</value>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase.GetConnection">
            <summary>
            <para>Get the connection for this database.</para>
            <seealso cref="T:System.Data.IDbConnection"/>
            <seealso cref="T:System.Data.SqlClient.SqlConnection"/>
            </summary>
            <returns>
            <para>The <see cref="T:System.Data.SqlClient.SqlConnection"/> for this database.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase.GetStoredProcCommandWrapper(System.String)">
            <summary>
            <para>Create a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper"/> for a stored procedure.</para>
            </summary>
            <param name="storedProcedureName"><para>The name of the stored procedure.</para></param>
            <returns><para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper"/> for the stored procedure.</para></returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="storedProcedureName"/> can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="storedProcedureName"/> hast not been initialized.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase.GetStoredProcCommandWrapper(System.String,System.Object[])">
            <summary>
            <para>Create an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper"/> for a stored procedure.</para>
            </summary>
            <param name="storedProcedureName"><para>The name of the stored procedure.</para></param>
            <param name="parameterValues"><para>The list of parameters for the procedure.</para></param>
            <returns><para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper"/> for the stored procedure.</para></returns>
            <remarks>
            <para>The parameters for the stored procedure will be discovered and the values are assigned in positional order.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="storedProcedureName"/> can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            <para>- or -</para>
            <para><paramref name="parameterValues"/> can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="storedProcedureName"/> hast not been initialized.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase.GetSqlStringCommandWrapper(System.String)">
            <summary>
            <para>Create an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper"/> for a SQL query.</para>
            </summary>
            <param name="query"><para>The text of the query.</para></param>        
            <returns><para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper"/> for the SQL query.</para></returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="query"/> can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="query"/> hast not been initialized.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase.GetDataAdapter(Microsoft.Practices.EnterpriseLibrary.Data.UpdateBehavior,System.Data.IDbConnection)">
            <summary>
            <para>Create a <see cref="T:System.Data.SqlClient.SqlDataAdapter"/> with the given update behavior and connection.</para>
            </summary>
            <param name="updateBehavior">
            <para>One of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.UpdateBehavior"/> values.</para>
            </param>
            <param name="connection">
            <para>The open connection to the database.</para>
            </param>
            <returns>An <see cref="T:System.Data.SqlClient.SqlDataAdapter"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="connection"/> can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase.ExecuteXmlReader(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper)">
            <summary>
            <para>Executes the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper"/> and returns an <see cref="T:System.Xml.XmlReader"/>.</para>
            </summary>
            <param name="command">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper"/> to execute.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Xml.XmlReader"/> object.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase.ExecuteXmlReader(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper,System.Data.IDbTransaction)">
            <summary>
            <para>Executes the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper"/> in a transaction and returns an <see cref="T:System.Xml.XmlReader"/>.</para>
            </summary>
            <param name="command">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper"/> to execute.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Xml.XmlReader"/> object.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase.DoExecuteXmlReader(System.Data.SqlClient.SqlCommand)">
            <devdoc>
            Execute the actual Xml Reader call.
            </devdoc>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase.OnSqlRowUpdated(System.Object,System.Data.SqlClient.SqlRowUpdatedEventArgs)">
            <devdoc>
            Listens for the RowUpdate event on a dataadapter to support UpdateBehavior.Continue
            </devdoc>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase.ParameterToken">
            <summary>
            <para>Gets the parameter token used to delimit parameters for the Sql Database.</para>
            </summary>
            <value>
            <para>The '@' symbol.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.ParameterCache">
            <summary>
            <para>
            Provides parameter caching services for dynamic parameter discovery of stored procedures.
            Eliminates the round-trip to the database to derive the parameters and types when a command
            is executed more than once.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.ParameterCache.FillParameters(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper,System.Char)">
            <summary>
            <para>
            Populates the parameter collection for a command wrapper from the cache 
            or performs a round-trip to the database to query the parameters
            </para>
            </summary>
            <param name="command">
            <para>The command to add the parameters.</para>
            </param>
            <param name="parameterToken">
            <para>The token used to delimit parameters.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.ParameterCache.Clear">
            <summary>
            <para>Empty the parameter cache</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.ParameterCache.AlreadyCached(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper)">
            <summary>
            <para>Checks to see if a cache entry exists for a specific command on a specific connection</para>
            </summary>
            <param name="command">
            <para>The command to check.</para>
            </param>
            <returns>True if the parameters are already cached for the provided command, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.ParameterCache.AddParametersFromCache(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper)">
            <summary>
            <para>Adds parameters to a command using the cache</para>
            </summary>
            <param name="command">
            <para>The command to add the parameters.</para>
            </param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringDataCollection">
            <summary>
            <para>Represents a collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData"/> objects for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseSettings"/> in configuration for the block.</para>
            </summary>   
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringDataCollection.Add(Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData)">
            <summary>
            <para>Adds an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData"/> into the collection.</para>
            </summary>
            <param name="connectionStringData">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData"/> to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>If a reference already exists in the collection by <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData.Name"/>, it will be replaced with the new reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="connectionStringData"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para><seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData.Name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringDataCollection.Add(System.Object)">
            <summary>
            <para>Adds a value into the collection.</para>
            </summary>
            <param name="parameter">
            <para>The value to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>This method exists to support Xml Serialization.</para>
            </remarks>
            <exception cref="T:System.InvalidCastException">
            <para><paramref name="parameter"/> must be of type <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData"/>.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringDataCollection.CopyTo(Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData[],System.Int32)">
            <summary>
            <para>Copies the entire <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData"/> to a compatible one-dimensional <see cref="T:System.Array"/>, starting at the specified index of the target array.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData"/> array that is the destination of the elements copied from <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringDataCollection"/>. The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData"/> array must have zero-based indexing.</para>
            </param>
            <param name="index">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringDataCollection.Item(System.Int32)">
            <summary>
            <para>Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData"/> at the specified <paramref name="index"/>.</para>
            </summary>
            <param name="index">
            <para>The index of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="index"/>. If the specified <paramref name="index"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="index"/>.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringDataCollection.Item(System.String)">
            <summary>
            <para>Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData"/> associated with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="name"/>. If the specified <paramref name="name"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="name"/>.</para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataTransactionOpenedEvent">
            <summary>
            <para>This type supports the Data Access Instrumentation infrastructure and is not intended to be used directly from your code.</para>
            </summary>    
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataTransactionOpenedEvent.Fire">
            <summary/>
            <exclude/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.DatabaseFactory">
            <summary>
            Contains factory methods for creating Database objects
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DatabaseFactory.CreateDatabase">
            <summary>
            Method for invoking a default Database object.  Reads default settings
            from the ConnectionSettings.config file.
            </summary>
            <example>
            <code>
            Database dbSvc = DatabaseFactory.CreateDatabase();
            </code>
            </example>
            <returns>Database</returns>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para>A error occured while reading the configuration.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DatabaseFactory.CreateDatabase(System.String)">
            <summary>
            Method for invoking a specified Database service object.  Reads service settings
            from the ConnectionSettings.config file.
            </summary>
            <example>
            <code>
            Database dbSvc = DatabaseFactory.CreateDatabase("SQL_Customers");
            </code>
            </example>
            <param name="instanceName">configuration key for database service</param>
            <returns>Database</returns>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para><paramref name="instanceName"/> is not defined in configuration.</para>
            <para>- or -</para>
            <para>An error exists in the configuration.</para>
            <para>- or -</para>
            <para>A error occured while reading the configuration.</para>        
            </exception>
            <exception cref="T:System.Reflection.TargetInvocationException">
            <para>The constructor being called throws an exception.</para>
            </exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.DatabaseConfigurationView">
            <summary>
            <para>Represents a view for navigating the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseSettings"/> configuration data.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DatabaseConfigurationView.#ctor(Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DatabaseConfigurationView"/> class with a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext"/> object.</para>
            </summary>
            <param name="configurationContext">
            <para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext"/> object.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DatabaseConfigurationView.GetDatabaseSettings">
            <summary>
            <para>Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseSettings"/> configuration data.</para>
            </summary>
            <returns>
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseSettings"/> configuration data.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DatabaseConfigurationView.GetDefaultInstanceName">
            <summary>
            <para>Gets the name of the default <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData"/>.</para>
            </summary>
            <returns>
            <para>The name of the default <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData"/>.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DatabaseConfigurationView.GetDatabaseProviderData(System.String)">
            <summary>
            <para>Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderData"/> for the named <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData"/>.</para>
            </summary>
            <param name="instanceName">
            <para>The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData"/> to get the data.</para>
            </param>
            <returns>
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderData"/> for the named <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData"/>.</para>
            </returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataConnectionOpenedEvent">
            <summary>
            <para>This type supports the Data Access Instrumentation infrastructure and is not intended to be used directly from your code.</para>
            </summary>    
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataServiceEvent">
            <summary>
            <para>This type supports the Data Access Instrumentation infrastructure and is not intended to be used directly from your code.</para>
            </summary>    
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataServiceEvent.#ctor">
            <summary/>
            <exclude/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataServiceEvent.#ctor(System.String[])">
            <summary/>
            <param name="counterNames"/>
            <exclude/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataServiceEvent.#ctor(System.String[],Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogIdentifier[])">
            <summary/>
            <param name="counterNames"/>
            <param name="eventLogIds"/>
            <exclude/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataServiceEvent.FireAuxEvent(System.String)">
            <summary/>
            <param name="message"/>
            <exclude/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataServiceEvent.Message">
            <summary/>
            <exclude/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataServiceEvent.InternalEvent">
            <summary/>
            <exclude/>
            <devdoc>
            The internal event object responsible for the Performance Counters and
            the EventLog.  And, it constructed with a BaseEvent object, it also
            ties the WMI event when fired.
            </devdoc>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataServiceEvent.CounterIndex">
            <devdoc>
            Index to the Counters array.
            </devdoc>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataServiceEvent.LogIndex">
            <devdoc>
            Index to the Event Log array.
            </devdoc>   
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataConnectionOpenedEvent.Fire(System.String)">
            <summary/>
            <param name="connectionString"/>
            <exclude/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataConnectionOpenedEvent.FireEvent(System.String)">
            <summary/>
            <param name="connectionString"/>
            <exclude/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataTransactionRolledBackEvent">
            <summary>
            <para>This type supports the Data Access Instrumentation infrastructure and is not intended to be used directly from your code.</para>
            </summary>    
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataTransactionRolledBackEvent.Fire(System.String)">
            <summary/>
            <param name="connectionString"/>
            <exclude/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.DatabaseProviderFactory">
            <summary>
            <para>Represents a factory for creating named instances <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database"/> objects.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DatabaseProviderFactory.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DatabaseProviderFactory"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DatabaseProviderFactory.#ctor(Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DatabaseProviderFactory"/> class with the specified <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext"/>.
            </para>
            </summary>
            <param name="configurationContext">
            <para>Configuration context to use when creating factory</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DatabaseProviderFactory.CreateDatabase(System.String)">
            <summary>
            <para>Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database"/> object from the configuration data associated with the specified name.</para>
            </summary>
            <param name="instanceName">Instance name as defined in configuration</param>
            <returns><para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database"/> object.</para></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DatabaseProviderFactory.CreateDefaultDatabase">
            <summary>
            <para>Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database"/> object from the configuration data associated with the default database instance.</para>
            </summary>
            <returns><para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database"/> object.</para></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DatabaseProviderFactory.GetDefaultInstanceName">
            <summary>
            <para>Gets the default database instance type.</para>
            </summary>
            <returns>
            <para>The default database instance type.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DatabaseProviderFactory.PublishFailureEvent(System.String,System.Exception)">
            <summary>
            <para>Publish an instrumentation event that indicates there was an error while attempting to create a provider.</para>
            </summary>
            <param name="name"><para>The name of the configuration object.</para></param>
            <param name="e"><para>The <see cref="T:System.Exception"/> to publish.</para></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DatabaseProviderFactory.CreateConfigurationView">
            <summary>
            <para>Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DatabaseConfigurationView"/> object to navigate the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseSettings"/>.</para>
            </summary>
            <returns>
            <para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DatabaseConfigurationView"/> object.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DatabaseProviderFactory.GetConfigurationType(System.String)">
            <summary>
            <para>Gets the <see cref="T:System.Type"/> of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database"/> to create based on the name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData"/>.</para>
            </summary>
            <param name="instanceName">
            <para>The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData"/> to get the <see cref="T:System.Type"/>.</para>
            </param>
            <returns>
            <para>The <see cref="T:System.Type"/> of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database"/> to create.</para>
            </returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeDataCollection">
            <summary>
            <para>Represents a collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeData"/>s for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseSettings"/> in configuration for the block.</para>
            </summary>     
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeDataCollection.Add(Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeData)">
            <summary>
            <para>Adds an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeData"/> into the collection.</para>
            </summary>
            <param name="databaseTypeData">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeData"/> to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>If a reference already exists in the collection by <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeData.Name"/>, it will be replaced with the new reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="databaseTypeData"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para><seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeData.Name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeDataCollection.Add(System.Object)">
            <summary>
            <para>Adds a value into the collection.</para>
            </summary>
            <param name="parameter">
            <para>The value to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>This method exists to support Xml Serialization.</para>
            </remarks>
            <exception cref="T:System.InvalidCastException">
            <para><paramref name="parameter"/> must be of type <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeData"/>.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeDataCollection.CopyTo(Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeData[],System.Int32)">
            <summary>
            <para>Copies the entire <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeDataCollection"/> to a compatible one-dimensional <see cref="T:System.Array"/>, starting at the specified index of the target array.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeDataCollection"/> array that is the destination of the elements copied from <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeDataCollection"/>. The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeData"/> array must have zero-based indexing.</para>
            </param>
            <param name="index">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeDataCollection.Item(System.Int32)">
            <summary>
            <para>Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeData"/> at the specified <paramref name="index"/>.</para>
            </summary>
            <param name="index">
            <para>The index of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="index"/>. If the specified <paramref name="index"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="index"/>.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeDataCollection.Item(System.String)">
            <summary>
            <para>Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeData"/> associated with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="name"/>. If the specified <paramref name="name"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="name"/>.</para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderDataCollection">
            <summary>
            <para>Represents a collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderData"/> objects in configuration.</para>
            </summary>       
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderDataCollection.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderDataCollection"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderDataCollection.Add(Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderData)">
            <summary>
            <para>Adds an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderData"/> into the collection.</para>
            </summary>
            <param name="databaseProviderData">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderData"/> to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>If a reference already exists in the collection by <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData.Name"/>, it will be replaced with the new reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="databaseProviderData"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para><seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData.Name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderDataCollection.CopyTo(Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderData[],System.Int32)">
            <summary>
            <para>Copies the entire <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderDataCollection"/> to a compatible one-dimensional <see cref="T:System.Array"/>, starting at the specified index of the target array.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderDataCollection"/> array that is the destination of the elements copied from <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderDataCollection"/>. The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderData"/> array must have zero-based indexing.</para>
            </param>
            <param name="index">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderDataCollection.Item(System.Int32)">
            <summary>
            <para>Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderData"/> at the specified <paramref name="index"/>.</para>
            </summary>
            <param name="index">
            <para>The index of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="index"/>. If the specified <paramref name="index"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="index"/>.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderDataCollection.Item(System.String)">
            <summary>
            <para>Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderData"/> associated with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="name"/>. If the specified <paramref name="name"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="name"/>.</para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterData">
            <summary>
            <para>Represents a parameter for a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.ConnectionString"/>.</para>
            </summary>
            <remarks>
            <para>This class maps to the <c>parameter</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterData"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterData.#ctor(System.String,System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterData"/> class with a name and value.</para>
            </summary>
            <param name="name">
            <para>The name of the parameter.</para>
            </param>
            <param name="value">
            <para>The value for the parameter.</para>
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterData.Name">
            <summary>
            <para>Gets or sets the name of the parameter.</para>
            </summary>
            <value>
            <para>The name of the parameter. The default is an empty string.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>name</c> attribute in configuration.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterData.Value">
            <summary>
            <para>Gets or sets the value of the parameter.</para>
            </summary>
            <value>
            <para>The value of the parameter. The default is an empty string.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>value</c> attribute in configuration.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterData.IsSensitive">
            <summary>
            <para>Gets or sets the value indicating whether or not this data is sensitive.</para>
            </summary>
            <remarks>
            <para>This property is to help tools know how to handle the data (i.e. show value in the plain or masked).</para>
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderData">
            <summary>
            Represents the configuration data used to initialize
            a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database"/> object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderData.#ctor(Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData,Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeData,Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderData"/> class.
            </summary>
            <param name="instance">An <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData"/> object.</param>
            <param name="type">A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeData"/> object.</param>
            <param name="connectionString">A <see cref="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderData.ConnectionStringData"/> object.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderData"/> class.
            </summary>
            <param name="name">A name.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderData.#ctor(System.String,System.String,Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderData"/> class.
            </summary>
            <param name="name">A name.</param>
            <param name="typeName">A type name of a class that implements the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database"/> class.</param>
            <param name="connectionStringData">A <see cref="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderData.ConnectionStringData"/> object.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderData.ConnectionStringData">
            <summary>
            Gets the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderData.ConnectionStringData"/> object.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseProviderData.TypeName">
            <summary>
            <para>When implemented by a class, Gets or sets the <see cref="T:System.Type"/> name of the provider.</para>
            </summary>
            <value>
            <para>The name of the provider. The default is an empty string.</para>
            </value>
            <remarks>
            <para><b>Not to implementers:</b> You do not have to implement the set operation.  If you have only one type for your data object you can ignore the set.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData">
            <summary>
            <para>Represents a connection string for an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData"/> database.</para>
            <seealso cref="P:System.Data.IDbConnection.ConnectionString"/>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData"/> class with a name.</para>
            </summary>
            <param name="name">
            <para>The name of the connection string.</para>
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData.Name">
            <summary>
            <para>Gets or sets the name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData"/>.</para>
            </summary>
            <value>
            <para>The name of the ConnectionString. The default is an empty string.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>name</c> attribute in configuration for the connection string.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData.Parameters">
            <summary>
            <para>Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterDataCollection"/>.</para>
            </summary>
            <value>
            <para>The parameters of the connection string. The default is an empty collection.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>parameters</c> element in configuration for the connection string.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDataReaderWrapper">
            <devdoc>
            A wrapper to convert data for oracle for the reader.
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDataReaderWrapper.GetBoolean(System.Int32)">
            <devdoc>
            Bit data type is mapped to a number in Oracle database. When reading bit data from Oracle database,
            it will map to 0 as false and everything else as true.  This method uses System.Convert.ToBoolean() method
            for type conversions.
            </devdoc>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDataReaderWrapper.GetFloat(System.Int32)">
            <devdoc>
            When reading number from Oracle, data reader gets it back at decimal regardless of data type in
            Oracle database. This will cast the result to float data type.
            </devdoc>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDataReaderWrapper.GetGuid(System.Int32)">
            <devdoc>
            This method will cast the result data Guid data type. In Oracle you must use that as Raw(16) so
            that this method can convert that to Guid properly.
            </devdoc>        
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase">
            <summary>
            <para>Represents an Oracle Database.</para>
            </summary>
            <remarks> 
            <para>
            Internally uses Oracle .NET Managed Provider from Microsoft (System.Data.OracleClient) to connect to Oracle 9i database.
            </para>  
            <para>
            When retrieving a result set, it will build the package name. The package name should be set based
            on the stored procedure prefix and this should be set via configuration. For 
            example, a package name should be set as prefix of "ENTLIB_" and package name of
            "pkgENTLIB_ARCHITECTURE". For your applications, this is required only if you are defining your stored procedures returning 
            ref cursors.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase.GetConnection">
            <summary>
            <para>Get the connection for this database.</para>
            <seealso cref="T:System.Data.IDbConnection"/>
            <seealso cref="T:System.Data.OracleClient.OracleConnection"/>
            </summary>
            <returns>
            <para>The <see cref="T:System.Data.OracleClient.OracleConnection"/> for this database.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase.GetStoredProcCommandWrapper(System.String)">
            <summary>
            <para>Create an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper"/> for a stored procedure.</para>
            </summary>
            <param name="storedProcedureName"><para>The name of the stored procedure.</para></param>
            <returns><para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper"/> for the stored procedure.</para></returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="storedProcedureName"/> can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="storedProcedureName"/> hast not been initialized.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase.GetStoredProcCommandWrapper(System.String,System.Object[])">
            <summary>
            <para>Create an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper"/> for a stored procedure.</para>
            </summary>
            <param name="storedProcedureName"><para>The name of the stored procedure.</para></param>
            <param name="parameterValues"><para>The list of parameters for the procedure.</para></param>
            <returns><para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper"/> for the stored procedure.</para></returns>
            <remarks>
            <para>The parameters for the stored procedure will be discovered and the values are assigned in positional order.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="storedProcedureName"/> can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            <para>- or -</para>
            <para><paramref name="parameterValues"/> can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="storedProcedureName"/> hast not been initialized.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase.GetSqlStringCommandWrapper(System.String)">
            <summary>
            <para>Create an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper"/> for a SQL query.</para>
            </summary>
            <param name="query"><para>The text of the query.</para></param>        
            <returns><para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper"/> for the SQL query.</para></returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="query"/> can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="query"/> hast not been initialized.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase.GetDataAdapter(Microsoft.Practices.EnterpriseLibrary.Data.UpdateBehavior,System.Data.IDbConnection)">
            <summary>
            <para>Create a <see cref="T:System.Data.OracleClient.OracleDataAdapter"/> with the given update behavior and connection.</para>
            </summary>
            <param name="updateBehavior">
            <para>One of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.UpdateBehavior"/> values.</para>
            </param>
            <param name="connection">
            <para>The open connection to the database.</para>
            </param>
            <returns>An <see cref="T:System.Data.OracleClient.OracleDataAdapter"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="connection"/> can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase.ExecuteReader(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper)">
            <summary>
            Creates and <see cref="T:System.Data.OracleClient.OracleDataReader"/> based on the <paramref name="commandWrapper"/>.
            </summary>
            <param name="commandWrapper">The command wrapper to execute.</param>        
            <returns>An <see cref="T:System.Data.OracleClient.OracleDataReader"/> object.</returns>        
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="commandWrapper"/> can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase.ExecuteReader(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper,System.Data.IDbTransaction)">
            <summary>
            <para>Creates and <see cref="T:System.Data.OracleClient.OracleDataReader"/> based on the <paramref name="commandWrapper"/>.</para>
            </summary>        
            <param name="commandWrapper"><para>The command wrapper to execute.</para></param>        
            <param name="transaction"><para>The transaction to participate in when executing this reader.</para></param>        
            <returns><para>An <see cref="T:System.Data.OracleClient.OracleDataReader"/> object.</para></returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="commandWrapper"/> can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            <para>- or -</para>
            <para><paramref name="transaction"/> can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase.ExecuteDataSet(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper)">
            <summary>
            <para>Execute a command and return the results in a new <see cref="T:System.Data.DataSet"/>.</para>
            </summary>
            <param name="commandWrapper"><para>The command to execute to fill the <see cref="T:System.Data.DataSet"/></para></param>
            <returns><para>A <see cref="T:System.Data.DataSet"/> filed with records and, if necessary, schema.</para></returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="commandWrapper"/> can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase.ExecuteDataSet(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper,System.Data.IDbTransaction)">
            <summary>
            <para>Execute a command and return the results in a new <see cref="T:System.Data.DataSet"/>.</para>
            </summary>
            <param name="commandWrapper"><para>The command to execute to fill the <see cref="T:System.Data.DataSet"/></para></param>
            <param name="transaction"><para>The transaction to participate in when executing this reader.</para></param>        
            <returns><para>A <see cref="T:System.Data.DataSet"/> filed with records and, if necessary, schema.</para></returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="commandWrapper"/> can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="commandWrapper"/> can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            <para>- or -</para>
            <para><paramref name="transaction"/> can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase.LoadDataSet(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper,System.Data.DataSet,System.String[])">
            <summary>
            <para>Load a <see cref="T:System.Data.DataSet"/> from a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper"/>.</para>
            </summary>
            <param name="commandWrapper">
            <para>The command to execute to fill the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to fill.</para>
            </param>
            <param name="tableNames">
            <para>An array of table name mappings for the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase.LoadDataSet(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper,System.Data.DataSet,System.String[],System.Data.IDbTransaction)">
            <summary>
            <para>Load a <see cref="T:System.Data.DataSet"/> from a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper"/> in  a transaction.</para>
            </summary>
            <param name="commandWrapper">
            <para>The command to execute to fill the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to fill.</para>
            </param>
            <param name="tableNames">
            <para>An array of table name mappings for the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command in.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase.PrepareCWRefCursor(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper)">
            <devdoc>
            This is a private method that will build the Oracle package name if your stored procedure
            has proper prefix and postfix. 
            This functionality is include for
            the portability of the architecture between SQL and Oracle datbase.
            This method will also add the reference cursor to the command writer if not added already. This
            is required for Oracle .NET managed data provider.
            </devdoc>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase.PreparePackageSchema(Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper)">
            <devdoc>
            Look into configuration and get the information how the command wrapper should be updated if calling a package on this
            connection.
            </devdoc>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase.OnOracleRowUpdated(System.Object,System.Data.OracleClient.OracleRowUpdatedEventArgs)">
            <devdoc>
            Listens for the RowUpdate event on a data adapter to support UpdateBehavior.Continue
            </devdoc>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase.ParameterToken">
            <summary>
            <para>Gets the parameter token used to delimit parameters for the Oracle Database.</para>
            </summary>
            <value>
            <para>The ':' symbol.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataTransactionFailedEvent">
            <summary>
            <para>This type supports the Data Access Instrumentation infrastructure and is not intended to be used directly from your code.</para>
            </summary>    
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataTransactionFailedEvent.Fire(System.String)">
            <summary/>
            <param name="connectionString"/>
            <exclude/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataTransactionFailedEvent.FireEvent(System.String)">
            <summary/>
            <param name="connectionString"/>
            <exclude/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceDataCollection">
            <summary>
            <para>Represents a collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData"/> objects for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseSettings"/> in configuration for the block.</para>
            </summary>   
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceDataCollection.Add(Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData)">
            <summary>
            <para>Adds an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData"/> into the collection.</para>
            </summary>
            <param name="instanceData">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData"/> to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>If a reference already exists in the collection by <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData.Name"/>, it will be replaced with the new reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="instanceData"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para><seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData.Name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceDataCollection.Add(System.Object)">
            <summary>
            <para>Adds a value into the collection.</para>
            </summary>
            <param name="parameter">
            <para>The value to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>This method exists to support Xml Serialization.</para>
            </remarks>
            <exception cref="T:System.InvalidCastException">
            <para><paramref name="parameter"/> must be of type <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData"/>.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceDataCollection.CopyTo(Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData[],System.Int32)">
            <summary>
            <para>Copies the entire <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceDataCollection"/> to a compatible one-dimensional <see cref="T:System.Array"/>, starting at the specified index of the target array.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceDataCollection"/> array that is the destination of the elements copied from <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceDataCollection"/>. The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData"/> array must have zero-based indexing.</para>
            </param>
            <param name="index">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceDataCollection.Item(System.Int32)">
            <summary>
            <para>Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData"/> at the specified <paramref name="index"/>.</para>
            </summary>
            <param name="index">
            <para>The index of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="index"/>. If the specified <paramref name="index"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="index"/>.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceDataCollection.Item(System.String)">
            <summary>
            <para>Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData"/> associated with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="name"/>. If the specified <paramref name="name"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="name"/>.</para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataServiceFailureEvent">
            <summary>
            <para>This type supports the Data Access Instrumentation infrastructure and is not intended to be used directly from your code.</para>
            </summary>    
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataServiceFailureEvent.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogIdentifier[])">
            <summary/>
            <param name="eventLogIDs"/>
            <exclude/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataServiceFailureEvent.Fire(System.String,System.Exception)">
            <summary/>
            <param name="message"/>
            <param name="ex"/>
            <exclude/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataServiceFailureEvent.Exception">
            <summary/>
            <exclude/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataServiceFailureEvent.ExceptionMessage">
            <summary/>
            <exclude/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataServiceFailureEvent.ExceptionStackTrace">
            <summary/>
            <exclude/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseSettings">
            <summary>
            <para>Represents the root configuration for data.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>databaseSettings</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseSettings.SectionName">
            <summary>
            The name of the data configuration section.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseSettings.ConfigurationNamespace">
            <summary>
            <para>Gets the Xml namespace for this root node.</para>
            </summary>
            <value>
            <para>The Xml namespace for this root node.</para>
            </value>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseSettings.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseSettings"/> class.</para>
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseSettings.DatabaseTypes">
            <summary>
            <para>Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeDataCollection"/>.</para>
            </summary>
            <value>
            <para>The database types available in configuration.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>databaseTypes</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseSettings.Instances">
            <summary>
            <para>Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceDataCollection"/>.</para>
            </summary>
            <value>
            <para>The database instances available in configuration.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>instances</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseSettings.ConnectionStrings">
            <summary>
            <para>Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringDataCollection"/>.</para>
            </summary>
            <value>
            <para>The connection strings available in configuration.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>connectionString</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseSettings.DefaultInstance">
            <summary>
            <para>Gets or sets the default database instance.</para>
            </summary>
            <value>
            <para>The default database instance.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>defaultInstance</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.ProjectInstaller">
            <summary>
            <para>This type supports the Data Access Instrumentation infrastructure and is not intended to be used directly from your code.</para>
            </summary>    
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.ProjectInstaller.#ctor">
            <summary/>
            <exclude/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataCommandFailedEvent">
            <summary>
            <para>This type supports the Data Access Instrumentation infrastructure and is not intended to be used directly from your code.</para>
            </summary>    
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataCommandFailedEvent.Fire(System.String,System.String)">
            <summary/>
            <param name="commandText"/>
            <param name="connectionString"/>
            <exclude/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataCommandFailedEvent.Command">
            <summary/>
            <exclude />
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper">
            <summary>
            <para>Represents a wrapper for <see cref="T:System.Data.IDbCommand"/> types. This class is abstract.</para>
            <seealso cref="T:System.Data.IDbCommand"/>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            <para>When overridden in a derived class, adds a new instance of an <see cref="T:System.Data.IDataParameter"/> object to the command.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>
            <param name="size"><para>The maximum size of the data within the column.</para></param>
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>
            <param name="nullable"><para>Avalue indicating whether the parameter accepts null values.</para></param>
            <param name="precision"><para>The maximum number of digits used to represent the <paramref name="value"/>.</para></param>
            <param name="scale"><para>The number of decimal places to which <paramref name="value"/> is resolved.</para></param>
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>       
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            <para>When overridden in a derived class, adds a new instance of an <see cref="T:System.Data.IDataParameter"/> object to the command.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>        
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>                
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            <para>When overridden in a derived class, adds a new instance of an <see cref="T:System.Data.IDataParameter"/> object to the command set as <see cref="T:System.Data.ParameterDirection"/> value of Output.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>        
            <param name="size"><para>The maximum size of the data within the column.</para></param>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper.AddInParameter(System.String,System.Data.DbType)">
            <summary>
            <para>When overridden in a derived class, adds a new instance of an <see cref="T:System.Data.IDataParameter"/> object to the command set as <see cref="T:System.Data.ParameterDirection"/> value of Input.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>                
            <remarks>
            <para>This version of the method is used when you can have the same parameter object multiple times with different values.</para>
            </remarks>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            <para>When overridden in a derived class,  adds a new instance of an <see cref="T:System.Data.IDataParameter"/> object to the command set as <see cref="T:System.Data.ParameterDirection"/> value of Input.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>                
            <param name="value"><para>The value of the parameter.</para></param>      
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            <para>When overridden in a derived class, adds a new instance of an <see cref="T:System.Data.IDataParameter"/> object to the command set as <see cref="T:System.Data.ParameterDirection"/> value of Input.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>                
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the value.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper.GetParameterValue(System.String)">
            <summary>
            <para>When overridden in a derived class, returns the value of the parameter for the given <paramref name="name"/>.</para>
            </summary>
            <param name="name"><para>The name of the parameter to get the value.</para></param>
            <returns><para>The value of the parameter.</para></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper.SetParameterValue(System.String,System.Object)">
            <summary>
            <para>When overridden in a derived class, sets the value of a parameter for the given <paramref name="name"/>.</para>
            </summary>
            <param name="name"><para>The name of the parameter to set the value.</para></param>
            <param name="value"><para>The new value of the parameter.</para></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper.DiscoverParameters(System.Char)">
            <summary>
            Populate the parameter collection for a stored procedure by querying the database
            or loading a cached parameter set.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper.IsFurtherPreparationNeeded">
            <summary>
            Determine if the parameters collection needs to be populated 
            using parameter discovery
            </summary>
            <returns>true if parameter discovery is needed</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper.AssignParameterValues">
            <summary>
            Assign values to parameters in positional orders
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper.DoDiscoverParameters(System.Char)">
            <summary>
            <para>When overridden in a derived class, discover the parameters for a stored procedure using a separate connection and command.</para>
            </summary>
            <param name="parameterToken"><para>The parameter delimeter for database commands.</para></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper.DoAssignParameterValues">
            <summary>
            <para>When overridden in a derived class, assign the values provided by a user to the command parameters discovered in positional order.</para>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            <para>The number of parameters does not match number of values for stored procedure.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper.DoIsFurtherPreparationNeeded">
            <summary>
            <para>When overridden in a derived class, determine if a stored procedure is using parameter discovery.</para>
            </summary>
            <returns>
            <para><see langword="true"/> if further preparation is needed.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper.Dispose">
            <summary>
            <para>When overridden in a derived class, clean up resources.</para>
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper.Command">
            <summary>
            <para>When overridden in a derived class, gets the underlying <see cref="T:System.Data.IDbCommand"/>.</para>
            </summary>
            <value>
            <para>The underlying <see cref="T:System.Data.IDbCommand"/>. The default is <see langword="null"/>.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper.RowsAffected">
            <summary>
            <para>When overridden in a derived class, gets or sets the rows affected by this command.</para>
            </summary>
            <value>
            <para>The rows affected by this command.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper.CommandTimeout">
            <summary>
            <para>When overridden in a derived class, gets or sets the wait time before terminating the attempt to execute a command and generating an error.</para>
            </summary>
            <value>
            <para>The wait time before terminating the attempt to execute a command and generating an error.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageDataCollection">
            <summary>
            <para>Represents a collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageData"/>s for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.ConnectionString"/> in configuration for the block.</para>
            </summary>   
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageDataCollection.Add(Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageData)">
            <summary>
            <para>Adds an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageData"/> into the collection.</para>
            </summary>
            <param name="oraclePackageData">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageData"/> to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>If a reference already exists in the collection by <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageData.Name"/>, it will be replaced with the new reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="oraclePackageData"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para><seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageData.Name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageDataCollection.Add(System.Object)">
            <summary>
            <para>Adds a value into the collection.</para>
            </summary>
            <param name="parameter">
            <para>The value to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>This method exists to support Xml Serialization.</para>
            </remarks>
            <exception cref="T:System.InvalidCastException">
            <para><paramref name="parameter"/> must be of type <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageData"/>.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageDataCollection.CopyTo(Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageData[],System.Int32)">
            <summary>
            <para>Copies the entire <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageDataCollection"/> to a compatible one-dimensional <see cref="T:System.Array"/>, starting at the specified index of the target array.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageDataCollection"/> array that is the destination of the elements copied from <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageDataCollection"/>. The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageData"/> array must have zero-based indexing.</para>
            </param>
            <param name="index">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageDataCollection.Item(System.Int32)">
            <summary>
            <para>Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageData"/> at the specified <paramref name="index"/>.</para>
            </summary>
            <param name="index">
            <para>The index of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="index"/>. If the specified <paramref name="index"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="index"/>.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageDataCollection.Item(System.String)">
            <summary>
            <para>Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageData"/> associated with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="name"/>. If the specified <paramref name="name"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="name"/>.</para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OracleConnectionStringData">
            <summary>
            <para>Represents a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData"/> object for Oracle. The Oracle connection string contains a collection of
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageData"/> objects.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OracleConnectionStringData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OracleConnectionStringData"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OracleConnectionStringData.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OracleConnectionStringData"/> class.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OracleConnectionStringData"/>.</para>
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OracleConnectionStringData.OraclePackages">
            <summary>
            <para>Gets or sets the name of the oraclePackageData used when calling store procedures on an Oracle instance.</para>
            </summary>
            <value>
            <para>The oraclePackageData used when calling store procedures on an Oracle instance.</para>
            </value>        
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData">
            <summary>
            <para>Represents a database instance in configuration.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>instance</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData"/> class with a name, name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeData"/> and the name of the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData.ConnectionString"/>.</para>
            </summary>
            <param name="name"><para>The name of the instance.</para></param>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData.#ctor(System.String,System.String,System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData"/> class with a name, name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeData"/> and the name of the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData.ConnectionString"/>.</para>
            </summary>
            <param name="name">The name of the instance.</param>
            <param name="typeName">The fully qualified assembly name of the type.</param>
            <param name="connectionString">The connection string for the instance.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData.Name">
            <summary>
            <para>Gets or sets the name of the instance.</para>
            </summary>
            <value>
            <para>The name of the instance. The default is an empty string.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>name</c> attribute in configuration.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData.DatabaseTypeName">
            <summary>
            <para>Gets or sets the type of the instance.</para>
            </summary>
            <value>
            <para>The type of the instance. The default is an empty string.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>type</c> attribute in configuration.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData.ConnectionString">
            <summary>
            <para>Gets or sets name of the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData.ConnectionString"/> for the instance.</para>
            </summary>
            <value>
            <para>Gets or sets name of the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.InstanceData.ConnectionString"/> for the instance. The default is an empty string.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>connectionString</c> attribute in configuration.</para>
            </remarks>
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData.Name"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.UpdateBehavior">
            <summary>
            Used with the Database.UpdateDataSet method.  Provides control over behavior when the Data
            Adapter's update command encounters an error.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Data.UpdateBehavior.Standard">
            <summary>
            No interference with the DataAdapter's Update command.  If Update encounters
            an error, the update stops.  Additional rows in the Datatable are uneffected.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Data.UpdateBehavior.Continue">
            <summary>
            If the DataAdapter's Update command encounters an error, the update will
            continue.  The Update command will try to update the remaining rows. 
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Data.UpdateBehavior.Transactional">
            <summary>
            If the DataAdapter encounters an error, all updated rows will be rolled back
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper">
            <summary>
            <para>Represents a SQL statement or stored procedure to execute against an Oracle database.</para>
            </summary>   
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper.#ctor(System.String,System.Data.CommandType,System.Char)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper"/> class with the text of a query and the command type.</para>
            </summary>        
            <param name="commandText"><para>The stored procedure name or SQL sting the command represents.</para></param>
            <param name="commandType"><para>One of the <see crer="CommandType"/> values.</para></param>
            <param name="parameterToken"><para>The parameter delimeter for database commands.</para></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper.#ctor(System.String,System.Data.CommandType,System.Char,System.Object[])">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper"/> class with the text of a query the command type, and the parameter values.</para>
            </summary>        
            <param name="commandText"><para>The stored procedure name or SQL sting the command represents.</para></param>
            <param name="commandType"><para>One of the <see crer="CommandType"/> values.</para></param>
            <param name="parameterToken"><para>The parameter delimeter for database commands.</para></param>
            <param name="parameterValues"><para>The parameter values to assign in positional order.</para></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            <para>Adds a new instance of an <see cref="T:System.Data.OracleClient.OracleParameter"/> object to the command.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>
            <param name="size"><para>The maximum size of the data within the column.</para></param>
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>
            <param name="nullable"><para>Avalue indicating whether the parameter accepts null values.</para></param>
            <param name="precision"><para>The maximum number of digits used to represent the <paramref name="value"/>.</para></param>
            <param name="scale"><para>The number of decimal places to which <paramref name="value"/> is resolved.</para></param>
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper.AddParameter(System.String,System.Data.OracleClient.OracleType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            <para>Adds a new instance of an <see cref="T:System.Data.OracleClient.OracleParameter"/> object to the command.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="oracleType"><para>One of the <see cref="T:System.Data.OracleClient.OracleType"/> values.</para></param>
            <param name="size"><para>The maximum size of the data within the column.</para></param>
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>
            <param name="nullable"><para>Avalue indicating whether the parameter accepts null values.</para></param>
            <param name="precision"><para>The maximum number of digits used to represent the <paramref name="value"/>.</para></param>
            <param name="scale"><para>The number of decimal places to which <paramref name="value"/> is resolved.</para></param>
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>      
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            <para>Adds a new instance of an <see cref="T:System.Data.OracleClient.OracleParameter"/> object to the command.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>        
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>                
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>      
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            <para>Adds a new instance of an <see cref="T:System.Data.OracleClient.OracleParameter"/> object to the command set as <see cref="T:System.Data.ParameterDirection"/> value of Output.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>        
            <param name="size"><para>The maximum size of the data within the column.</para></param>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper.AddInParameter(System.String,System.Data.DbType)">
            <summary>
            <para>Adds a new instance of an <see cref="T:System.Data.OracleClient.OracleParameter"/> object to the command set as <see cref="T:System.Data.ParameterDirection"></see> value of Input.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>                
            <remarks>
            <para>This version of the method is used when you can have the same parameter object multiple times with different values.</para>
            </remarks>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            <para>Adds a new instance of an <see cref="T:System.Data.OracleClient.OracleParameter"/> object to the command set as <see cref="T:System.Data.ParameterDirection"/> value of Input.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>                
            <param name="value"><para>The value of the parameter.</para></param>      
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            <para>Adds a new instance of an <see cref="T:System.Data.OracleClient.OracleParameter"/> object to the command set as <see cref="T:System.Data.ParameterDirection"/> value of Input.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>                
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the value.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper.GetParameterValue(System.String)">
            <summary>
            <para>Returns the value of the parameter for the given <paramref name="name"/>.</para>
            </summary>
            <param name="name"><para>The name of the parameter to get the value.</para></param>
            <returns><para>The value of the parameter.</para></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper.SetParameterValue(System.String,System.Object)">
            <summary>
            <para>Sets the value of a parameter for the given <paramref name="name"/>.</para>
            </summary>
            <param name="name"><para>The name of the parameter to set the value.</para></param>
            <param name="value"><para>The new value of the parameter.</para></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper.Dispose">
            <summary>
            <para>Clean up resources.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper.DoDiscoverParameters(System.Char)">
            <summary>
            <para>Dicover the parameters for a stored procedure using a separate connection and command.</para>
            </summary>
            <param name="parameterToken"><para>The parameter delimeter for database commands.</para></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper.DoAssignParameterValues">
            <summary>
            <para>Assign the values provided by a user to the command parameters discovered in positional order.</para>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            <para>The number of parameters does not match number of values for stored procedure.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper.DoIsFurtherPreparationNeeded">
            <summary>
            <para>Determine if a stored procedure is using parameter discovery.</para>
            </summary>
            <returns>
            <para><see langword="true"/> if further preparation is needed.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper.CreateNewCommandAndConnectionForDiscovery">
            <devdoc>
            Discovery has to be done on its own connection to allow for the case of the
            connection being used being enrolled in a transaction. The OracleCommandBuilder.DeriveParameters
            method creates a new OracleCommand internally to communicate to the database, and it
            reuses the same connection that is passed in on the command object. If this command
            object has a connection that is enrolled in a transaction, the DeriveParameters method does not
            honor that transaction, and the call fails. To avoid this, create your own connection and
            command, and use them. 
            
            You then have to clone each of the IDataParameter objects before it can be transferred to 
            the original command, or another exception is thrown.
            </devdoc>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper.ParameterDiscoveryRequired">
            <devdoc>
            Determines if parameter discovery is required.
            </devdoc>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper.Command">
            <summary>
            <para>Gets the underlying <see cref="T:System.Data.IDbCommand"/>.</para>
            </summary>
            <value>
            <para>The underlying <see cref="T:System.Data.IDbCommand"/>. The default is <see langword="null"/>.</para>
            </value>
            <seealso cref="T:System.Data.OracleClient.OracleCommand"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper.RowsAffected">
            <summary>
            <para>Gets or sets the rows affected by this command.</para>
            </summary>
            <value>
            <para>The rows affected by this command.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleCommandWrapper.CommandTimeout">
            <summary>
            <para>Gets or sets the wait time before terminating the attempt to execute a command and generating an error.</para>
            </summary>
            <value>
            <para>The wait time before terminating the attempt to execute a command and generating an error.</para>
            </value>
            <remarks>
            <para>The inner <see cref="T:System.Data.OracleClient.OracleCommand"/> does not implement a command timeout.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataTransactionCommittedEvent">
            <summary>
            <para>This type supports the Data Access Instrumentation infrastructure and is not intended to be used directly from your code.</para>
            </summary>    
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataTransactionCommittedEvent.Fire">
            <summary/>
            <exclude/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataConnectionFailedEvent">
            <summary>
            <para>This type supports the Data Access Instrumentation infrastructure and is not intended to be used directly from your code.</para>
            </summary>    
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataConnectionFailedEvent.Fire(System.String)">
            <summary/>
            <param name="connectionString"/>
            <exclude/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataConnectionFailedEvent.FireEvent(System.String)">
            <summary/>
            <param name="connectionString"/>
            <exclude/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterDataCollection">
            <summary>
            <para>Represents a collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterData"/>s for a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.ConnectionString"/> in configuration.</para>
            </summary>
            <remarks>
            <para>This class represents the <c>parameters</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterDataCollection.Add(Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterData)">
            <summary>
            <para>Adds an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterData"/> into the collection.</para>
            </summary>
            <param name="parameterData">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterData"/> to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>If a reference already exists in the collection by <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterData.Name"/>, it will be replaced with the new reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="parameterData"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para><seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterData.Name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterDataCollection.Add(System.Object)">
            <summary>
            <para>Adds a value into the collection.</para>
            </summary>
            <param name="parameter">
            <para>The value to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>This method exists to support Xml Serialization.</para>
            </remarks>
            <exception cref="T:System.InvalidCastException">
            <para><paramref name="parameter"/> must be of type <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterData"/>.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterDataCollection.CopyTo(Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterData[],System.Int32)">
            <summary>
            <para>Copies the entire <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterDataCollection"/> to a compatible one-dimensional <see cref="T:System.Array"/>, starting at the specified index of the target array.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterDataCollection"/> array that is the destination of the elements copied from <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterDataCollection"/>. The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterData"/> array must have zero-based indexing.</para>
            </param>
            <param name="index">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterDataCollection.Item(System.Int32)">
            <summary>
            <para>Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterData"/> at the specified <paramref name="index"/>.</para>
            </summary>
            <param name="index">
            <para>The index of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="index"/>. If the specified <paramref name="index"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="index"/>.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterDataCollection.Item(System.String)">
            <summary>
            <para>Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterData"/> associated with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ParameterData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="name"/>. If the specified <paramref name="name"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="name"/>.</para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataInstrumentationFacade">
            <summary>
            <para>This type supports the Data Access Instrumentation infrastructure and is not intended to be used directly from your code.</para>
            </summary>    
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataInstrumentationFacade.CommandExecuted(System.DateTime)">
            <summary/>
            <param name="executionTime"/>
            <exclude/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataInstrumentationFacade.CommandFailed(System.String,System.String)">
            <summary/>
            <param name="commandText"/>        
            <param name="connectionString"/>
            <exclude/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataInstrumentationFacade.TransactionCommitted">
            <summary/>
            <exclude/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataInstrumentationFacade.TransactionRolledBack(System.String)">
            <summary/>
            <param name="connectionString"/>
            <exclude/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataInstrumentationFacade.TransactionOpened">
            <summary/>
            <exclude/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataInstrumentationFacade.TransactionFailed(System.String)">
            <summary/>
            <param name="connectionString"/>
            <exclude/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataInstrumentationFacade.ConnectionOpened(System.String)">
            <summary/>
            <param name="connectionString"/>
            <exclude/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataInstrumentationFacade.ConnectionFailed(System.String)">
            <summary/>
            <param name="connectionString"/>
            <exclude/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataCommandExecutedEvent">
            <summary>
            <para>This type supports the Instrumentation infrastructure and is not intended to be used directly from your code.</para>
            </summary>    
            <devdoc>
            For performance reason, this class does not inherit from DataServiceEvent because
            the event does not need to fire a WMI event.
            </devdoc>    
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataCommandExecutedEvent.Fire(System.DateTime)">
            <summary/>
            <param name="startTime"/>
            <exclude/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.ConnectionStringBuilder">
            <devdoc>
            Builds a connection string out of individual parameters (username, password, server, database, etc).
            Reads configuration information from a connectionString node
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.ConnectionStringBuilder.Build(Microsoft.Practices.EnterpriseLibrary.Data.Configuration.ConnectionStringData)">
            <devdoc>
            Creates a connection string by reading a connectionString node from configuration.
            </devdoc>        
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.ConnectionString">
            <devdoc>
            ConnectionString class constructs a connection string by 
            inserting a username and password into a template
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.ConnectionString.ToString">
            <devdoc>
            Gets the formatted connection string
            </devdoc>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.ConnectionString.ToStringNoCredentials">
            <devdoc>
            Gets the formatted connection string without the username and password
            </devdoc>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.ConnectionString.CreateNewConnectionString(System.String)">
            <devdoc>
            Formats a new connection string with user id and password
            </devdoc>        
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.ConnectionString.UserName">
            <devdoc>
            Database username for the connection string
            </devdoc>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.ConnectionString.Password">
            <devdoc>
            User password for the connection string
            </devdoc>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper">
            <summary>
            <para>Represents a SQL statement or stored procedure to execute against a Sql Server database.</para>
            </summary>   
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper.#ctor(System.String,System.Data.CommandType,System.Char)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper"/> class with the text of a query and the command type.</para>
            </summary>
            <param name="commandText"><para>The stored procedure name or SQL sting the command represents.</para></param>
            <param name="commandType"><para>One of the <see crer="CommandType"/> values.</para></param>
            <param name="parameterToken"><para>The parameter delimeter for database commands.</para></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper.#ctor(System.String,System.Data.CommandType,System.Char,System.Object[])">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper"/> class with the text of a query the command type, and the parameter values.</para>
            </summary>        
            <param name="commandText"><para>The stored procedure name or SQL sting the command represents.</para></param>
            <param name="commandType"><para>One of the <see crer="CommandType"/> values.</para></param>
            <param name="parameterToken"><para>The parameter delimeter for database commands.</para></param>
            <param name="parameterValues"><para>The parameter values to assign in positional order.</para></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            <para>Adds a new instance of an <see cref="T:System.Data.SqlClient.SqlParameter"/> object to the command.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>
            <param name="size"><para>The maximum size of the data within the column.</para></param>
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>
            <param name="nullable"><para>Avalue indicating whether the parameter accepts null values.</para></param>
            <param name="precision"><para>The maximum number of digits used to represent the <paramref name="value"/>.</para></param>
            <param name="scale"><para>The number of decimal places to which <paramref name="value"/> is resolved.</para></param>
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>       
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper.AddParameter(System.String,System.Data.SqlDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            <para>Adds a new instance of an <see cref="T:System.Data.SqlClient.SqlParameter"/> object to the command.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="sqlType"><para>One of the <see cref="T:System.Data.SqlDbType"/> values.</para></param>
            <param name="size"><para>The maximum size of the data within the column.</para></param>
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>
            <param name="nullable"><para>Avalue indicating whether the parameter accepts null values.</para></param>
            <param name="precision"><para>The maximum number of digits used to represent the <paramref name="value"/>.</para></param>
            <param name="scale"><para>The number of decimal places to which <paramref name="value"/> is resolved.</para></param>
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>      
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            <para>Adds a new instance of an <see cref="T:System.Data.SqlClient.SqlParameter"/> object to the command.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>        
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>                
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>    
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            <para>Adds a new instance of an <see cref="T:System.Data.SqlClient.SqlParameter"/> object to the command set as <see cref="T:System.Data.ParameterDirection"/> value of Output.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>        
            <param name="size"><para>The maximum size of the data within the column.</para></param>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper.AddInParameter(System.String,System.Data.DbType)">
            <summary>
            <para>Adds a new instance of an <see cref="T:System.Data.SqlClient.SqlParameter"/> object to the command set as <see cref="T:System.Data.ParameterDirection"/> value of Input.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>                
            <remarks>
            <para>This version of the method is used when you can have the same parameter object multiple times with different values.</para>
            </remarks>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            <para>Adds a new instance of an <see cref="T:System.Data.SqlClient.SqlParameter"/> object to the command set as <see cref="T:System.Data.ParameterDirection"/> value of Input.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>                
            <param name="value"><para>The value of the parameter.</para></param>      
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            <para>Adds a new instance of an <see cref="T:System.Data.SqlClient.SqlParameter"/> object to the command set as <see cref="T:System.Data.ParameterDirection"/> value of Input.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>                
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the value.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper.GetParameterValue(System.String)">
            <summary>
            <para>Returns the value of the parameter for the given <paramref name="name"/>.</para>
            </summary>
            <param name="name"><para>The name of the parameter to get the value.</para></param>
            <returns><para>The value of the parameter.</para></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper.SetParameterValue(System.String,System.Object)">
            <summary>
            <para>Sets the value of a parameter for the given <paramref name="name"/>.</para>
            </summary>
            <param name="name"><para>The name of the parameter to set the value.</para></param>
            <param name="value"><para>The new value of the parameter.</para></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper.Dispose">
            <summary>
            <para>Clean up resources.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper.DoDiscoverParameters(System.Char)">
            <summary>
            <para>Dicover the parameters for a stored procedure using a separate connection and command.</para>
            </summary>
            <param name="parameterToken"><para>The parameter delimeter for database commands.</para></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper.DoAssignParameterValues">
            <summary>
            <para>Assign the values provided by a user to the command parameters discovered in positional order.</para>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            <para>The number of parameters does not match number of values for stored procedure.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper.DoIsFurtherPreparationNeeded">
            <summary>
            <para>Determine if a stored procedure is using parameter discovery.</para>
            </summary>
            <returns>
            <para><see langword="true"/> if further preparation is needed.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper.CreateParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <devdoc>
            Create a parameter.
            </devdoc>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper.CreateNewCommandAndConnectionForDiscovery">
            <devdoc>
            Discovery has to be done on its own connection to allow for the case of the
            connection being used being enrolled in a transaction. The SqlCommandBuilder.DeriveParameters
            method creates a new SqlCommand internally to communicate to the database, and it
            reuses the same connection that is passed in on the command object. If this command
            object has a connection that is enrolled in a transaction, the DeriveParameters method does not
            honor that transaction, and the call fails. To avoid this, create your own connection and
            command, and use them. 
            
            You then have to clone each of the IDataParameter objects before it can be transferred to 
            the original command, or another exception is thrown.
            </devdoc>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper.Command">
            <summary>
            <para>Gets the underlying <see cref="T:System.Data.IDbCommand"/>.</para>
            </summary>
            <value>
            <para>The underlying <see cref="T:System.Data.IDbCommand"/>. The default is <see langword="null"/>.</para>
            </value>
            <remarks>
            <para>This command is a <see cref="T:System.Data.SqlClient.SqlCommand"/></para>        
            </remarks>        
            <seealso cref="T:System.Data.SqlClient.SqlCommand"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper.RowsAffected">
            <summary>
            <para>Gets or sets the rows affected by this command.</para>
            </summary>
            <value>
            <para>The rows affected by this command.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlCommandWrapper.CommandTimeout">
            <summary>
            <para>Gets or sets the wait time before terminating the attempt to execute a command and generating an error.</para>
            </summary>
            <value>
            <para>The wait time before terminating the attempt to execute a command and generating an error.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataServiceConfigFailureEvent">
            <summary>
            <para>
            This type supports the Data Access infrastructure and is not intended to be used directly from your code.
            </para>
            </summary>    
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataServiceConfigFailureEvent.Fire(System.String,System.Exception,System.String)">
            <summary/>
            <param name="message"/>
            <param name="failedConfigurationFile"/>
            <param name="ex"/>
            <exclude/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataServiceConfigFailureEvent.Fire(System.String,System.Exception)">
            <summary/>
            <param name="message"/>
            <param name="ex"/>
            <exclude/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataServiceConfigFailureEvent.ConfigurationFilePath">
            <summary/>
            <exclude/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Instrumentation.DataServiceConfigFailureEvent.FailedConfigurationFile">
            <summary/>
            <exclude/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageData">
            <summary>
            <para>Represents the package information to use when calling a stored procedure for Oracle.</para>
            </summary>
            <remarks>
            <para>
            A package name can be appended to the stored procedure name of a command if the prefix of the stored procedure
            matchs the prefix defined. This allows the caller of the stored procedure to use stored procedures
            in a more database independent fashion.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageData"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageData.#ctor(System.String,System.String)">
            <summary>
            <para>Initilaize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageData"/> class given the prefix to search for and the name of the package.</para>
            </summary>
            <param name="name">
            <para>The name of the package to append to any found procedure that has the <paramref name="prefix"/>.</para>
            </param>
            <param name="prefix">
            <para>The prefix of the stored procedures used in this package.</para>
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageData.Prefix">
            <summary>
            <para>Gets or sets the prefix of the stored procedures that are in the package in Oracle.</para>
            </summary>
            <value>
            <para>The prefix of the stored procedures that are in the package in Oracle.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.OraclePackageData.Name">
            <summary>
            <para>Gets or sets the name of the package to append to a stored procedure.</para>
            </summary>
            <value>
            <para>The name of the package to append to a stored procedure.</para>
            </value>
            <remarks>
            <para>
            This name will be appended to the begining of a stored procedure name when calling <b>any</b> stored procedure in the 
            Oracle instance that this connection string represents.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeData">
            <summary>
            <para>Represents a type of database (e.g. Oracle, Sql Server) in configuration.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>databaseType</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeData"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeData.#ctor(System.String,System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeData"/> class with the name and the fully qualified type name of the class.</para>
            </summary>
            <param name="name">
            <para>The name of the database type.</para>
            </param>
            <param name="typeName">
            <para>The fully qualified type name of the assembly.</para>
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeData.Name">
            <summary>
            <para>Gets or sets the name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeData"/>.</para>
            </summary>
            <value>
            <para>The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeData"/>. The default is an empty string.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>name</c> attribute in configuration.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseTypeData.TypeName">
            <summary>
            <para>Gets or sets the fully qualified type name that implements this type.</para>
            </summary>
            <value>
            <para>The fully qualified type name that implements this type.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>type</c> attribute in configuration.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.CachingMechanism">
            <devdoc>
            CachingMechanism provides caching support for stored procedure 
            parameter discovery and caching
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.CachingMechanism.CloneParameters(System.Data.IDataParameter[])">
            <devdoc>
            Create and return a copy of the IDataParameter array.
            </devdoc>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.CachingMechanism.Clear">
            <devdoc>
            Empties all items from the cache
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.CachingMechanism.AddParameterSetToCache(System.Data.IDbCommand,System.Data.IDataParameter[])">
            <devdoc>
            Add a parameter array to the cache for the command.
            </devdoc>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.CachingMechanism.GetCachedParameterSet(System.Data.IDbCommand)">
            <devdoc>
            Gets a parameter array from the cache for the command. Returns null if no parameters are found.
            </devdoc>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.CachingMechanism.IsParameterSetCached(System.Data.IDbCommand)">
            <devdoc>
            Gets if a given stored procedure on a specific connection string has a cached parameter set
            </devdoc>        
        </member>
    </members>
</doc>
