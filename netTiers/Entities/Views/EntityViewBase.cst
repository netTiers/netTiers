<%--

 * $Id: EntityViewBase.cst,v 1.3 2006/02/28 15:23:37 jcteague Exp $
 * Last modified by $Author$
 * Last modified at $Date$
 * $Revision$

	Written By:
		Ryan Hurdon
	Description:
		This script will create data access layer classes. It requires stored procedures
		created from the procedure script. So for this code to work properly you need to run
		the procedure template, the rowobject template, and the rowcollection template on
		the same table. You can also optionally use the main script which will run them all
		for you.

--%>
<%@ CodeTemplate Src="..\..\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Business object base class"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>

<%@ Property Name="SourceView" Type="SchemaExplorer.ViewSchema" Category="Connection" Description="Table Object should be based on." %>
<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Connection" Description="Tables of the sytem." %>
<%@ Property Name="IncludeRelations" Type="System.Boolean" Default="False" Category="Options" Description="Include Collections for Related Entities."%>
<%@ Property Name="NameSpace" Optional="True" Type="System.String" Category="Style" Description="Object Namespace." %>
<%@ Property Name="UsePartialClass" Type="System.Boolean" Default="false" Category="General" Description="Indicates if partial class should be generated." %>

<%
	//string name;
	string today = DateTime.Now.ToLongDateString();
	
	// Name of the Abstract Class
	string className = GetClassName(SourceView.Name);
	string abstractClassName = UsePartialClass ? className : GetAbstractClassName(SourceView.Name);
	string constructorAccessModifier = UsePartialClass ? "public" : "protected";

%>
/*
	Code Generated by a tool.
	<%=today%>
	Do not modify, edit the file <%=SourceView.Name%>.cs instead.
*/
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;

namespace <%=NameSpace%>
{
	///<summary>
	/// An object representation of the '<%=SourceView.Name%>' view.
	///</summary>
	/// <remarks>
	/// This class is generated by a tool and should never be modified.
    /// All custom implementations should be done in the <see cref="<%=className%>"/> class.
    /// </remarks>
	[Serializable]
	<% if (!UsePartialClass) { %>[EditorBrowsable(EditorBrowsableState.Never)]<% } %>
	public <% if (UsePartialClass) { Response.Write("partial "); } else { Response.Write("abstract "); } %>class <%=abstractClassName%> : System.IComparable, System.ICloneable
	{
		
		#region Variable Declarations
		<% for (int x=0; x < SourceView.Columns.Count; x++) { %>
		
		/// <summary>
		/// <%=SourceView.Columns[x].Name%> : <%=SourceView.Columns[x].Description%>
		/// </summary>
		private <%= GetCSType(SourceView.Columns[x]) %><%= Tab(2) %>  <%= GetMemberVariableName(SourceView.Columns[x].Name) %> = <% if ( SourceView.Columns[x].AllowDBNull && IsCSReferenceDataType(SourceView.Columns[x]) ) { %>null<% } else { %><%=GetCSDefaultByType(SourceView.Columns[x])%><% }%>;
		<%if ( SourceView.Columns[x].AllowDBNull && !IsCSReferenceDataType(SourceView.Columns[x]) ) {%>
		private bool _is<%=GetPropertyName(SourceView.Columns[x].Name)%>Null = true;
		<%} // end AllowDBNull && !IsCSReferenceDataType
		} //end for %>
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="<%=abstractClassName%>"/> instance.
		///</summary>
		<%=constructorAccessModifier%> <%=abstractClassName%>()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="<%=abstractClassName%>"/> instance.
		///</summary>
		<% for (int x=0; x < SourceView.Columns.Count; x++) { %>
		///<param name="<%=GetPrivateName(SourceView.Columns[x].Name) %>"><%=SourceView.Columns[x].Description%></param>
		<% } %>
		<%=constructorAccessModifier%> <%=abstractClassName%>(<% for (int x=0; x < SourceView.Columns.Count; x++) { %>
						<%= GetCSType(SourceView.Columns[x]) %> <%= GetPrivateName(SourceView.Columns[x].Name) %><%if (x < SourceView.Columns.Count -1){%>, <%} } // end for %>)
		{
			<% for (int x=0; x < SourceView.Columns.Count; x++) { %>
			this.<%= GetMemberVariableName(SourceView.Columns[x].Name) %> = <%= GetPrivateName(SourceView.Columns[x].Name) %>;
			<% }// end for %>
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="<%=className%>"/> instance.
		///</summary>
		<% for (int x=0; x < SourceView.Columns.Count; x++) { %>
		///<param name="<%=GetPrivateName(SourceView.Columns[x].Name) %>"><%=SourceView.Columns[x].Description%></param>
		<% } %> 
		public static <%=className%> Create<%=className%>(<% for (int x=0; x < SourceView.Columns.Count; x++) { %>
						<%= GetCSType(SourceView.Columns[x]) %> <%= GetPrivateName(SourceView.Columns[x].Name) %><%if (x < SourceView.Columns.Count -1){%>, <%} else {%>)<%}%><% }// end for %>
		{
			<%=className%> new<%=className%> = new <%=className%>();
			<% for (int x=0; x < SourceView.Columns.Count; x++) { %>
			new<%=className%>.<%= GetPropertyName(SourceView.Columns[x].Name) %> = <%= GetPrivateName(SourceView.Columns[x].Name) %>;
			<% }// end for %>
			return new<%=className%>;
		}
				
		#endregion Constructors
		
		#region Properties	
		<% for (int x=0; x < SourceView.Columns.Count; x++) { %>
		/// <summary>
		/// 	Gets or Sets the <%= SourceView.Columns[x].Name %> property. 
		///		<%=SourceView.Columns[x].Description%>
		/// </summary>
		/// <value>This type is <%=SourceView.Columns[x].NativeType%></value>
		/// <remarks>
		/// This property can<%if (!SourceView.Columns[x].AllowDBNull) {%> not<%}%> be set to null. <%if (SourceView.Columns[x].AllowDBNull && !IsCSReferenceDataType(SourceView.Columns[x])) {%>
		/// If this column is null, this property will return <%=GetCSDefaultByType(SourceView.Columns[x])%>. It is up to the developer
		/// to check the value of Is<%=GetPropertyName(SourceView.Columns[x].Name)%>Null() and perform business logic appropriately.<%}%>
		/// </remarks>
		<%if (! SourceView.Columns[x].AllowDBNull && IsCSReferenceDataType(SourceView.Columns[x]) ) {%>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		<%}%>
		[DescriptionAttribute("<%=GetDescriptionAttributeText(SourceView.Columns[x].Description)%>"), BindableAttribute()]
		public virtual <%= GetCSType(SourceView.Columns[x])%> <%= GetPropertyName(SourceView.Columns[x].Name) %>
		{
			get
			{
				return this.<%= GetMemberVariableName(SourceView.Columns[x].Name) %>; 
			}
			set
			{
				<%if (! SourceView.Columns[x].AllowDBNull && IsCSReferenceDataType(SourceView.Columns[x]) ) {%>
				if ( value == null )
					throw new ArgumentNullException("value", "<%= GetPropertyName(SourceView.Columns[x].Name) %> does not allow null values.");
				<%}
				if ( SourceView.Columns[x].AllowDBNull && !IsCSReferenceDataType(SourceView.Columns[x]) ) {%>
				if (<%= GetMemberVariableName(SourceView.Columns[x].Name) %> == value && !Is<%=GetPropertyName(SourceView.Columns[x].Name)%>Null() )
				<%}
				else
				{%>
				if (<%= GetMemberVariableName(SourceView.Columns[x].Name) %> == value)
				<%} // end if (! IsCSReferenceDataType(SourceView.Columns[x]) ) %>
					return;
					
				this.<%= GetMemberVariableName(SourceView.Columns[x].Name) %> = value;
				<%if ( SourceView.Columns[x].AllowDBNull && !IsCSReferenceDataType(SourceView.Columns[x]) ) {%>
				_is<%=GetPropertyName(SourceView.Columns[x].Name)%>Null = false;
				<%} // end IsCSReferenceDataType%>
				this._isDirty = true;				
			}
		}
		
		<% }// end for %>
	

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "<%=SourceView.Name%>"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
		}
		
		
		///<summary>
		///  TODO: Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges(){
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed <%=abstractClassName%> Entity 
		///</summary>
		public virtual <%=abstractClassName%> Copy()
		{
			//shallow copy entity
			<%=className%> copy = new <%=className%>();
			<% for (int x=0; x < SourceView.Columns.Count; x++) { %>
			<% if ( SourceView.Columns[x].AllowDBNull && !IsCSReferenceDataType(SourceView.Columns[x]) ) { %>
			if ( this.Is<%=GetPropertyName(SourceView.Columns[x].Name)%>Null() )
				copy.Set<%=GetPropertyName(SourceView.Columns[x].Name)%>Null();
			else
			copy.<%= GetPropertyName(SourceView.Columns[x].Name) %> = this.<%= GetPropertyName(SourceView.Columns[x].Name) %>;
			<% } %>
			<% else { %>
			copy.<%= GetPropertyName(SourceView.Columns[x].Name) %> = this.<%= GetPropertyName(SourceView.Columns[x].Name) %>;
			<% } %>		
			<% } %>
			copy.AcceptChanges();
			return (<%=className%>)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="<%=abstractClassName%>"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(<%=abstractClassName%> toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="<%=abstractClassName%>"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="<%=abstractClassName%>"/> to compare.</param>
		///<param name="Object2">The second <see cref="<%=abstractClassName%>"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(<%=abstractClassName%> Object1, <%=abstractClassName%> Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
		<% for (int x=0; x < SourceView.Columns.Count; x++) {
			    if ( SourceView.Columns[x].AllowDBNull )
				{ %>
			if (! Object1.Is<%=GetPropertyName(SourceView.Columns[x].Name)%>Null() && !Object2.Is<%=GetPropertyName(SourceView.Columns[x].Name)%>Null() )
			{
				if (Object1.<%= GetPropertyName(SourceView.Columns[x].Name) %> != Object2.<%= GetPropertyName(SourceView.Columns[x].Name) %>)
					equal = false;
			}
			else if (Object1.Is<%=GetPropertyName(SourceView.Columns[x].Name)%>Null() != Object1.Is<%=GetPropertyName(SourceView.Columns[x].Name)%>Null() )
			{
				equal = false;
			}
		      <%}
				else { %>
			if (Object1.<%= GetPropertyName(SourceView.Columns[x].Name) %> != Object2.<%= GetPropertyName(SourceView.Columns[x].Name) %>)
				equal = false;
			<% } // if ( SourceView.Columns[x].AllowDBNull ) %>
		<% }// end for %>	
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			// TODO compare each column
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region IsColumnNull
		<% for (int x=0; x < SourceView.Columns.Count; x++) { 
			// only write method if it allows nulls
			if (SourceView.Columns[x].AllowDBNull){
		%>
		///<summary>
		/// Indicates if the <%=SourceView.Columns[x].Name%> value is null.
		///</summary>		
		///<returns>true if <%=SourceView.Columns[x].Name%> has a null value; otherwise, false.</returns>
		public virtual bool Is<%=GetPropertyName(SourceView.Columns[x].Name)%>Null()
		{
			<% if ( IsCSReferenceDataType(SourceView.Columns[x]) ) {%>
				return (<%=GetPropertyName(SourceView.Columns[x].Name)%> == null);
			<%}
			else 
			{%>
				return _is<%=GetPropertyName(SourceView.Columns[x].Name)%>Null;
			<%}%>
		}
		<% if ( !IsCSReferenceDataType(SourceView.Columns[x]) ) {%>
		
		///<summary>
		/// Sets the column <%=SourceView.Columns[x].Name%> value to null.
		///</summary>		
		public virtual void Set<%=GetPropertyName(SourceView.Columns[x].Name)%>Null()
		{
			_is<%=GetPropertyName(SourceView.Columns[x].Name)%>Null = true;			
			<%= GetMemberVariableName(SourceView.Columns[x].Name) %> = <%= GetCSDefaultByType(SourceView.Columns[x]) %>; // set to default for data type
		}
		<% } // end !IsCSReferenceDataType(SourceView.Columns[x])
		  } //end Nullable
		 }// end for 
		%>	
		#endregion IsColumnNull
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{<%=SourceView.Columns.Count+1%>}{<%=SourceView.Columns.Count%>}"<% for (int x=0; x < SourceView.Columns.Count; x++) { %>
					<%Response.Write("+ \"- " + GetPropertyName(SourceView.Columns[x].Name) + ": {" + x + "}{" + SourceView.Columns.Count + "}\"" ); } %>, 
			<%for (int x=0; x < SourceView.Columns.Count; x++)
			  {
			    if ( SourceView.Columns[x].AllowDBNull )
				{
				  if ( IsCSReferenceDataType(SourceView.Columns[x]) ) { %>
				(this.<%=GetPropertyName(SourceView.Columns[x].Name)%> == null) ? string.Empty : this.<%=GetPropertyName(SourceView.Columns[x].Name)%>.ToString(),
			      <%} else { %>
				(this.Is<%=GetPropertyName(SourceView.Columns[x].Name)%>Null()) ? string.Empty : this.<%=GetPropertyName(SourceView.Columns[x].Name)%>.ToString(),
			      <%}
				}
				else { %>
				this.<%= GetPropertyName(SourceView.Columns[x].Name) %>,
			<% } // if ( SourceView.Columns[x].AllowDBNull )
			} // for (int x=0; x < SourceView.Columns.Count; x++) %>
				Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the <%=className%> columns.
	/// </summary>
	[Serializable]
	public enum <%=className%>Column
	{
		<% for (int x=0; x < SourceView.Columns.Count; x++) { %>
		/// <summary>
		/// <%=SourceView.Columns[x].Name%> : <%=SourceView.Columns[x].Description%>
		/// </summary>
		<%=GetPropertyName(SourceView.Columns[x].Name)%><%if(x < SourceView.Columns.Count -1) {%>,<%}%>
		<% }// end for %>	
	}//End enum

} // end namespace
