<%@ CodeTemplate Src="..\..\..\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Generates code behind edit input screen for an entitiy using EntityDataSource Control." Debug="True" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Text" %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Connection" Description="Table that the data access class should be based on." %>

<%@ Property Name="NameSpace" Type="System.String" Category="Style" Description="ASP 2.0 Namespace" %>
<%@ Property Name="WebProjectNameSpace" Type="System.String" Category="Style" Description="ASP 2.0 Namespace" %>
<%@ Property Name="BLLNameSpace" Type="System.String" Category="Data" Description="BLL Namespace." %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Optional="False" Category="DataSource" 	Description="Database that the stored procedures should be based on." %>
<%@ Property Name="IncludeAtlasLibrary" Type="System.Boolean" Default="false" Category="06b. Website - Advanced" Description="Indicates whether to include a reference to the Atlas component library." %>
<%@ Property Name="IncludeAtlasToolkit" Type="System.Boolean" Default="false" Category="06b. Website - Advanced" Description="Indicates whether to include a reference to the Atlas Control Toolkit. This property is only taken into account when IncludeAtlasLibrary is true." %>

<%

	// Collection of all columns in the table.
	ColumnSchemaCollection cols = SourceTable.Columns;
	
	// Collection of all columns in the table that are not primary keys.
	//ColumnSchemaCollection nonKeys = SourceTable.NonPrimaryKeyColumns;
	
	// Collection of all primary key columns.
	ColumnSchemaCollection keys = SourceTable.PrimaryKey.MemberColumns; 
	
	// Collection of ForeignKeys. Provides information about the foreign keys 
	//(keys where the current table is the foreign table) contained in the table. 
	TableKeySchemaCollection fkeys = SourceTable.ForeignKeys;
	
	//Provides information about the primary keys 
	//(keys where the current table is the primary table) contained in the table. 
	//TableKeySchemaCollection pkeys = SourceTable.PrimaryKeys;
	
	//Provides information about the indexes contained in the table. 
	//IndexSchemaCollection indexes = SourceTable.Indexes;
	
	ColumnSchemaCollection colsUpdatable = new ColumnSchemaCollection();
	foreach (ColumnSchema column in cols)
	{
		if ( ! IsIdentityColumn(column) && ! IsComputed(column) )
			colsUpdatable.Add(column);
	}
	
	TableKeySchemaCollection fKeysSingle = new TableKeySchemaCollection();
	foreach(TableKeySchema tableKey in fkeys)
	{
		if ( tableKey.ForeignKeyMemberColumns.Count == 1)
			fKeysSingle.Add(tableKey);
	}

	// Holds the RowVersion column if there's any
	ColumnSchema RowVersion = null;

	foreach (ColumnSchema column in cols)
	{
		if (column.NativeType.ToLower() == "timestamp")
			RowVersion = column;
	}

	string entityName = GetClassName(SourceTable.Name);
	string className = NameSpace + "." + GetClassName(SourceTable.Name);
	string providerName = GetProviderName(SourceTable.Name);

	TableSchemaCollection sourceTables = new TableSchemaCollection();
	
	for (int i=0; i < SourceDatabase.Tables.Count; i++)
	{
		sourceTables.Add(SourceDatabase.Tables[i]);
	}
%>
#region Imports...
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using <%=WebProjectNameSpace%>.Web.UI;
#endregion

public partial class <%=entityName%>Edit : System.Web.UI.Page
{
	protected void Page_Load(object sender, EventArgs e)
	{		
		FormUtil.RedirectAfterInsertUpdate(FormView1, "<%=entityName%>Edit.aspx?{0}", <%=entityName%>DataSource);
		FormUtil.RedirectAfterAddNew(FormView1, "<%=entityName%>Edit.aspx");
		FormUtil.RedirectAfterCancel(FormView1, "<%=entityName%>.aspx");
		<%
			// -- SetDefaultMode checks for one parameter if it exists, so that 
			// -- it sets the right mode for the FormView
		%>
		FormUtil.SetDefaultMode(FormView1, "<%=keys[0].Name%>");
	}
<%
	if (!IsJunctionTable(SourceTable))
	{
		TableSchemaCollection tablesRelated1 = GetTablesCollectionByFk(SourceTable.PrimaryKey.MemberColumns[0], sourceTables);
		for (int x = 0; x < tablesRelated1.Count; x++)
		{  
			string entityRelated = GetClassName(tablesRelated1[x].Name);
			ColumnSchemaCollection keysRelatedCol = tablesRelated1[x].PrimaryKey.MemberColumns;
			string keysRelated = GetKeysName(keysRelatedCol);
%>
	protected void GridView<%=entityRelated%>_SelectedIndexChanged(object sender, EventArgs e)
	{
		string urlParams = string.Format(<%=getUrlFk(keysRelatedCol, entityRelated)%>);
		Response.Redirect("<%=entityRelated%>Edit.aspx?" + urlParams, true);		
	}	
<%							
    }	
%>	
    public String WhereClause
    {
       get 
       {
           if (<%=getUrlCondition(keys)%>)
           {
               return string.Format(<%=getUrl(keys)%>);
           }
           return string.Empty;
       }
    }
<%
	}
%>

}


<script runat="template">
	private string getUrlFk(ColumnSchemaCollection fkeys, string entityRelated) 
	{
        string s = string.Empty;
		string g = string.Empty;
		
        for (int x = 0; x < fkeys.Count; x++)
        {
            s += string.Format("{0}={{" + x + "}}", GetPropertyName(fkeys[x].Name));
			g += string.Format("GridView{1}.SelectedDataKey.Values[{0}]", x.ToString(), entityRelated);
            if (x < fkeys.Count - 1)
            {
                s += "&";
				g += ", ";
            }			

        }
        return string.Format("\"{0}\", {1}", s, g);
	}
	
	/// <summary>
    /// This method is responsible to loop through primary keys and constuct WhereClause Condition,
	/// which will be used by the TypedDataSource object GetPaged methods
    /// </summary>
    /// <param name="keys"></param>
	/// <remark> 
	/// Using only the first primary key to display data for the related tables
	/// </remark>
	private string getUrl(ColumnSchemaCollection keys) 
	{
        string s = string.Empty;
		string g = string.Empty;
		
        //for (int x = 0; x < keys.Count; x++)
		for (int x = 0; x < 1; x++)  // -- use only first pk
        {
            s += string.Format("{0}='{{" + x + "}}'", GetPropertyName(keys[x].Name));
			g += string.Format("Request.QueryString[\"{0}\"].ToString()", GetPropertyName(keys[x].Name));
            
			/*
			if (x < keys.Count - 1)
            {
                s += " AND ";
				g += ", ";
            }
			*/

        }
        return string.Format("\"{0}\", {1}", s, g);
	}

	private string getUrlCondition(ColumnSchemaCollection keys) 
	{
		string g = string.Empty;
		
        //for (int x = 0; x < keys.Count; x++)
		for (int x = 0; x < 1; x++)
        {
			g += string.Format("Request.QueryString[\"{0}\"] != null", GetPropertyName(keys[x].Name));
            
			/*
			if (x < keys.Count - 1)
            {
				g += " && ";
            }
			*/

        }
        return g;
	}
</script>