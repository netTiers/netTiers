	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Monday, July 24, 2006
	Important: Do not modify this file. Edit the file Orders.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace netTiers.Petshop.Entities
{
	#region OrdersEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Orders"/> object.
	/// </remarks>
	public class OrdersEventArgs : System.EventArgs
	{
		private OrdersColumn column;
		
		///<summary>
		/// Initalizes a new Instance of the OrdersEventArgs class.
		///</summary>
		public OrdersEventArgs(OrdersColumn column)
		{
			this.column = column;
		}
		
		
		///<summary>
		/// The OrdersColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="OrdersColumn" />
		public OrdersColumn Column { get { return this.column; } }
	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all Orders related events.
	///</summary>
	public delegate void OrdersEventHandler(object sender, OrdersEventArgs e);
	
	///<summary>
	/// An object representation of the 'Orders' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(Orders))]
	public abstract partial class OrdersBase : EntityBase, IEntityId<OrdersKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private OrdersEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//OrdersEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private OrdersEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<Orders> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event OrdersEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event OrdersEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="OrdersBase"/> instance.
		///</summary>
		public OrdersBase()
		{
			this.entityData = new OrdersEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="OrdersBase"/> instance.
		///</summary>
		///<param name="ordersAccountId"></param>
		///<param name="ordersOrderDate"></param>
		///<param name="ordersShipAddr1"></param>
		///<param name="ordersShipAddr2"></param>
		///<param name="ordersShipCity"></param>
		///<param name="ordersShipState"></param>
		///<param name="ordersShipZip"></param>
		///<param name="ordersShipCountry"></param>
		///<param name="ordersBillAddr1"></param>
		///<param name="ordersBillAddr2"></param>
		///<param name="ordersBillCity"></param>
		///<param name="ordersBillState"></param>
		///<param name="ordersBillZip"></param>
		///<param name="ordersBillCountry"></param>
		///<param name="ordersCourierId"></param>
		///<param name="ordersTotalPrice"></param>
		///<param name="ordersBillToFirstName"></param>
		///<param name="ordersBillToLastName"></param>
		///<param name="ordersShipToFirstName"></param>
		///<param name="ordersShipToLastName"></param>
		///<param name="ordersCreditCardId"></param>
		///<param name="ordersLocale"></param>
		public OrdersBase(System.Guid ordersAccountId, System.DateTime ordersOrderDate, System.String ordersShipAddr1, 
			System.String ordersShipAddr2, System.String ordersShipCity, System.String ordersShipState, System.String ordersShipZip, 
			System.String ordersShipCountry, System.String ordersBillAddr1, System.String ordersBillAddr2, System.String ordersBillCity, 
			System.String ordersBillState, System.String ordersBillZip, System.String ordersBillCountry, System.Guid ordersCourierId, 
			System.Decimal? ordersTotalPrice, System.String ordersBillToFirstName, System.String ordersBillToLastName, System.String ordersShipToFirstName, 
			System.String ordersShipToLastName, System.Guid ordersCreditCardId, System.String ordersLocale)
		{
			this.entityData = new OrdersEntityData();
			this.backupData = null;

			this.AccountId = ordersAccountId;
			this.OrderDate = ordersOrderDate;
			this.ShipAddr1 = ordersShipAddr1;
			this.ShipAddr2 = ordersShipAddr2;
			this.ShipCity = ordersShipCity;
			this.ShipState = ordersShipState;
			this.ShipZip = ordersShipZip;
			this.ShipCountry = ordersShipCountry;
			this.BillAddr1 = ordersBillAddr1;
			this.BillAddr2 = ordersBillAddr2;
			this.BillCity = ordersBillCity;
			this.BillState = ordersBillState;
			this.BillZip = ordersBillZip;
			this.BillCountry = ordersBillCountry;
			this.CourierId = ordersCourierId;
			this.TotalPrice = ordersTotalPrice;
			this.BillToFirstName = ordersBillToFirstName;
			this.BillToLastName = ordersBillToLastName;
			this.ShipToFirstName = ordersShipToFirstName;
			this.ShipToLastName = ordersShipToLastName;
			this.CreditCardId = ordersCreditCardId;
			this.Locale = ordersLocale;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Orders"/> instance.
		///</summary>
		///<param name="ordersAccountId"></param>
		///<param name="ordersOrderDate"></param>
		///<param name="ordersShipAddr1"></param>
		///<param name="ordersShipAddr2"></param>
		///<param name="ordersShipCity"></param>
		///<param name="ordersShipState"></param>
		///<param name="ordersShipZip"></param>
		///<param name="ordersShipCountry"></param>
		///<param name="ordersBillAddr1"></param>
		///<param name="ordersBillAddr2"></param>
		///<param name="ordersBillCity"></param>
		///<param name="ordersBillState"></param>
		///<param name="ordersBillZip"></param>
		///<param name="ordersBillCountry"></param>
		///<param name="ordersCourierId"></param>
		///<param name="ordersTotalPrice"></param>
		///<param name="ordersBillToFirstName"></param>
		///<param name="ordersBillToLastName"></param>
		///<param name="ordersShipToFirstName"></param>
		///<param name="ordersShipToLastName"></param>
		///<param name="ordersCreditCardId"></param>
		///<param name="ordersLocale"></param>
		public static Orders CreateOrders(System.Guid ordersAccountId, System.DateTime ordersOrderDate, System.String ordersShipAddr1, 
			System.String ordersShipAddr2, System.String ordersShipCity, System.String ordersShipState, System.String ordersShipZip, 
			System.String ordersShipCountry, System.String ordersBillAddr1, System.String ordersBillAddr2, System.String ordersBillCity, 
			System.String ordersBillState, System.String ordersBillZip, System.String ordersBillCountry, System.Guid ordersCourierId, 
			System.Decimal? ordersTotalPrice, System.String ordersBillToFirstName, System.String ordersBillToLastName, System.String ordersShipToFirstName, 
			System.String ordersShipToLastName, System.Guid ordersCreditCardId, System.String ordersLocale)
		{
			Orders newOrders = new Orders();
			newOrders.AccountId = ordersAccountId;
			newOrders.OrderDate = ordersOrderDate;
			newOrders.ShipAddr1 = ordersShipAddr1;
			newOrders.ShipAddr2 = ordersShipAddr2;
			newOrders.ShipCity = ordersShipCity;
			newOrders.ShipState = ordersShipState;
			newOrders.ShipZip = ordersShipZip;
			newOrders.ShipCountry = ordersShipCountry;
			newOrders.BillAddr1 = ordersBillAddr1;
			newOrders.BillAddr2 = ordersBillAddr2;
			newOrders.BillCity = ordersBillCity;
			newOrders.BillState = ordersBillState;
			newOrders.BillZip = ordersBillZip;
			newOrders.BillCountry = ordersBillCountry;
			newOrders.CourierId = ordersCourierId;
			newOrders.TotalPrice = ordersTotalPrice;
			newOrders.BillToFirstName = ordersBillToFirstName;
			newOrders.BillToLastName = ordersBillToLastName;
			newOrders.ShipToFirstName = ordersShipToFirstName;
			newOrders.ShipToLastName = ordersShipToLastName;
			newOrders.CreditCardId = ordersCreditCardId;
			newOrders.Locale = ordersLocale;
			return newOrders;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OrdersColumn"/> which has raised the event.</param>
		public void OnColumnChanging(OrdersColumn column)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				OrdersEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new OrdersEventArgs(column));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OrdersColumn"/> which has raised the event.</param>
		public void OnColumnChanged(OrdersColumn column)
		{
			if (!SuppressEntityEvents)
			{
				OrdersEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new OrdersEventArgs(column));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the OrderId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true,true,false)]
		public virtual System.Int32 OrderId
		{
			get
			{
				return this.entityData.OrderId; 
			}
			
			set
			{
				if (this.entityData.OrderId == value)
					return;
					
					
				OnColumnChanging(OrdersColumn.OrderId);
				this.entityData.OrderId = value;
				this.EntityId.OrderId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrdersColumn.OrderId);
				OnPropertyChanged("OrderId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccountId property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,false)]
		public virtual System.Guid AccountId
		{
			get
			{
				return this.entityData.AccountId; 
			}
			
			set
			{
				if (this.entityData.AccountId == value)
					return;
					
					
				OnColumnChanging(OrdersColumn.AccountId);
				this.entityData.AccountId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrdersColumn.AccountId);
				OnPropertyChanged("AccountId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrderDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,false)]
		public virtual System.DateTime OrderDate
		{
			get
			{
				return this.entityData.OrderDate; 
			}
			
			set
			{
				if (this.entityData.OrderDate == value)
					return;
					
					
				OnColumnChanging(OrdersColumn.OrderDate);
				this.entityData.OrderDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrdersColumn.OrderDate);
				OnPropertyChanged("OrderDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipAddr1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,false, 80)]
		public virtual System.String ShipAddr1
		{
			get
			{
				return this.entityData.ShipAddr1; 
			}
			
			set
			{
				if (this.entityData.ShipAddr1 == value)
					return;
					
					
				OnColumnChanging(OrdersColumn.ShipAddr1);
				this.entityData.ShipAddr1 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrdersColumn.ShipAddr1);
				OnPropertyChanged("ShipAddr1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipAddr2 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,true, 80)]
		public virtual System.String ShipAddr2
		{
			get
			{
				return this.entityData.ShipAddr2; 
			}
			
			set
			{
				if (this.entityData.ShipAddr2 == value)
					return;
					
					
				OnColumnChanging(OrdersColumn.ShipAddr2);
				this.entityData.ShipAddr2 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrdersColumn.ShipAddr2);
				OnPropertyChanged("ShipAddr2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipCity property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,false, 80)]
		public virtual System.String ShipCity
		{
			get
			{
				return this.entityData.ShipCity; 
			}
			
			set
			{
				if (this.entityData.ShipCity == value)
					return;
					
					
				OnColumnChanging(OrdersColumn.ShipCity);
				this.entityData.ShipCity = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrdersColumn.ShipCity);
				OnPropertyChanged("ShipCity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipState property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,false, 80)]
		public virtual System.String ShipState
		{
			get
			{
				return this.entityData.ShipState; 
			}
			
			set
			{
				if (this.entityData.ShipState == value)
					return;
					
					
				OnColumnChanging(OrdersColumn.ShipState);
				this.entityData.ShipState = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrdersColumn.ShipState);
				OnPropertyChanged("ShipState");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipZip property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,false, 20)]
		public virtual System.String ShipZip
		{
			get
			{
				return this.entityData.ShipZip; 
			}
			
			set
			{
				if (this.entityData.ShipZip == value)
					return;
					
					
				OnColumnChanging(OrdersColumn.ShipZip);
				this.entityData.ShipZip = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrdersColumn.ShipZip);
				OnPropertyChanged("ShipZip");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipCountry property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,true, 20)]
		public virtual System.String ShipCountry
		{
			get
			{
				return this.entityData.ShipCountry; 
			}
			
			set
			{
				if (this.entityData.ShipCountry == value)
					return;
					
					
				OnColumnChanging(OrdersColumn.ShipCountry);
				this.entityData.ShipCountry = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrdersColumn.ShipCountry);
				OnPropertyChanged("ShipCountry");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillAddr1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,false, 80)]
		public virtual System.String BillAddr1
		{
			get
			{
				return this.entityData.BillAddr1; 
			}
			
			set
			{
				if (this.entityData.BillAddr1 == value)
					return;
					
					
				OnColumnChanging(OrdersColumn.BillAddr1);
				this.entityData.BillAddr1 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrdersColumn.BillAddr1);
				OnPropertyChanged("BillAddr1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillAddr2 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,true, 80)]
		public virtual System.String BillAddr2
		{
			get
			{
				return this.entityData.BillAddr2; 
			}
			
			set
			{
				if (this.entityData.BillAddr2 == value)
					return;
					
					
				OnColumnChanging(OrdersColumn.BillAddr2);
				this.entityData.BillAddr2 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrdersColumn.BillAddr2);
				OnPropertyChanged("BillAddr2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillCity property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,false, 80)]
		public virtual System.String BillCity
		{
			get
			{
				return this.entityData.BillCity; 
			}
			
			set
			{
				if (this.entityData.BillCity == value)
					return;
					
					
				OnColumnChanging(OrdersColumn.BillCity);
				this.entityData.BillCity = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrdersColumn.BillCity);
				OnPropertyChanged("BillCity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillState property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,false, 80)]
		public virtual System.String BillState
		{
			get
			{
				return this.entityData.BillState; 
			}
			
			set
			{
				if (this.entityData.BillState == value)
					return;
					
					
				OnColumnChanging(OrdersColumn.BillState);
				this.entityData.BillState = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrdersColumn.BillState);
				OnPropertyChanged("BillState");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillZip property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,false, 20)]
		public virtual System.String BillZip
		{
			get
			{
				return this.entityData.BillZip; 
			}
			
			set
			{
				if (this.entityData.BillZip == value)
					return;
					
					
				OnColumnChanging(OrdersColumn.BillZip);
				this.entityData.BillZip = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrdersColumn.BillZip);
				OnPropertyChanged("BillZip");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillCountry property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,true, 20)]
		public virtual System.String BillCountry
		{
			get
			{
				return this.entityData.BillCountry; 
			}
			
			set
			{
				if (this.entityData.BillCountry == value)
					return;
					
					
				OnColumnChanging(OrdersColumn.BillCountry);
				this.entityData.BillCountry = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrdersColumn.BillCountry);
				OnPropertyChanged("BillCountry");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CourierId property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,false)]
		public virtual System.Guid CourierId
		{
			get
			{
				return this.entityData.CourierId; 
			}
			
			set
			{
				if (this.entityData.CourierId == value)
					return;
					
					
				OnColumnChanging(OrdersColumn.CourierId);
				this.entityData.CourierId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrdersColumn.CourierId);
				OnPropertyChanged("CourierId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalPrice property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalPriceNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,true)]
		public virtual System.Decimal? TotalPrice
		{
			get
			{
				return this.entityData.TotalPrice; 
			}
			
			set
			{
				if (this.entityData.TotalPrice == value && this.entityData.TotalPrice != null )
					return;
					
					
				OnColumnChanging(OrdersColumn.TotalPrice);
				this.entityData.TotalPrice = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrdersColumn.TotalPrice);
				OnPropertyChanged("TotalPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillToFirstName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,false, 80)]
		public virtual System.String BillToFirstName
		{
			get
			{
				return this.entityData.BillToFirstName; 
			}
			
			set
			{
				if (this.entityData.BillToFirstName == value)
					return;
					
					
				OnColumnChanging(OrdersColumn.BillToFirstName);
				this.entityData.BillToFirstName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrdersColumn.BillToFirstName);
				OnPropertyChanged("BillToFirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillToLastName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,false, 80)]
		public virtual System.String BillToLastName
		{
			get
			{
				return this.entityData.BillToLastName; 
			}
			
			set
			{
				if (this.entityData.BillToLastName == value)
					return;
					
					
				OnColumnChanging(OrdersColumn.BillToLastName);
				this.entityData.BillToLastName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrdersColumn.BillToLastName);
				OnPropertyChanged("BillToLastName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipToFirstName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,false, 80)]
		public virtual System.String ShipToFirstName
		{
			get
			{
				return this.entityData.ShipToFirstName; 
			}
			
			set
			{
				if (this.entityData.ShipToFirstName == value)
					return;
					
					
				OnColumnChanging(OrdersColumn.ShipToFirstName);
				this.entityData.ShipToFirstName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrdersColumn.ShipToFirstName);
				OnPropertyChanged("ShipToFirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipToLastName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,false, 80)]
		public virtual System.String ShipToLastName
		{
			get
			{
				return this.entityData.ShipToLastName; 
			}
			
			set
			{
				if (this.entityData.ShipToLastName == value)
					return;
					
					
				OnColumnChanging(OrdersColumn.ShipToLastName);
				this.entityData.ShipToLastName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrdersColumn.ShipToLastName);
				OnPropertyChanged("ShipToLastName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreditCardId property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,false)]
		public virtual System.Guid CreditCardId
		{
			get
			{
				return this.entityData.CreditCardId; 
			}
			
			set
			{
				if (this.entityData.CreditCardId == value)
					return;
					
					
				OnColumnChanging(OrdersColumn.CreditCardId);
				this.entityData.CreditCardId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrdersColumn.CreditCardId);
				OnPropertyChanged("CreditCardId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Locale property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,true, 20)]
		public virtual System.String Locale
		{
			get
			{
				return this.entityData.Locale; 
			}
			
			set
			{
				if (this.entityData.Locale == value)
					return;
					
					
				OnColumnChanging(OrdersColumn.Locale);
				this.entityData.Locale = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrdersColumn.Locale);
				OnPropertyChanged("Locale");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Timestamp property. 
		///		
		/// </summary>
		/// <value>This type is timestamp.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false,false,false)]
		public virtual System.Byte[] Timestamp
		{
			get
			{
				return this.entityData.Timestamp; 
			}
			
			set
			{
				if (this.entityData.Timestamp == value)
					return;
					
					
				OnColumnChanging(OrdersColumn.Timestamp);
				this.entityData.Timestamp = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrdersColumn.Timestamp);
				OnPropertyChanged("Timestamp");
			}
		}
		

		#region Source Foreign Key Property
				
		private Account _accountIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Account"/>.
		/// </summary>
		/// <value>The source Account for AccountId.</value>
		[Browsable(false), BindableAttribute()]
		public virtual Account AccountIdSource
      	{
            get { return this._accountIdSource; }
            set { this._accountIdSource = value; }
      	}
		private Courier _courierIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Courier"/>.
		/// </summary>
		/// <value>The source Courier for CourierId.</value>
		[Browsable(false), BindableAttribute()]
		public virtual Courier CourierIdSource
      	{
            get { return this._courierIdSource; }
            set { this._courierIdSource = value; }
      	}
		private CreditCard _creditCardIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="CreditCard"/>.
		/// </summary>
		/// <value>The source CreditCard for CreditCardId.</value>
		[Browsable(false), BindableAttribute()]
		public virtual CreditCard CreditCardIdSource
      	{
            get { return this._creditCardIdSource; }
            set { this._creditCardIdSource = value; }
      	}
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Orders"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"OrderId", "AccountId", "OrderDate", "ShipAddr1", "ShipAddr2", "ShipCity", "ShipState", "ShipZip", "ShipCountry", "BillAddr1", "BillAddr2", "BillCity", "BillState", "BillZip", "BillCountry", "CourierId", "TotalPrice", "BillToFirstName", "BillToLastName", "ShipToFirstName", "ShipToLastName", "CreditCardId", "Locale", "Timestamp"};
			}
		}
		#endregion 
		
	
		/// <summary>
		///	Holds a collection of OrderStatus objects
		///	which are related to this object through the relation FK__OrderStat__Order__164452B1
		/// </summary>	
		[BindableAttribute()]
		public TList<OrderStatus> OrderStatusCollection
		{
			get { return entityData.OrderStatusCollection; }
			set { entityData.OrderStatusCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of LineItem objects
		///	which are related to this object through the relation FK__LineItem__OrderI__1367E606
		/// </summary>	
		[BindableAttribute()]
		public TList<LineItem> LineItemCollection
		{
			get { return entityData.LineItemCollection; }
			set { entityData.LineItemCollection = value; }	
		}
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as OrdersEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Orders) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = (TList<Orders>)value;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Orders);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  TODO: Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public override void CancelChanges()
		{
			throw new NotImplementedException("Method currently not Supported.");
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Orders Entity 
		///</summary>
		public virtual Orders Copy()
		{
			//shallow copy entity
			Orders copy = new Orders();
			copy.OrderId = this.OrderId;
			copy.AccountId = this.AccountId;
			copy.OrderDate = this.OrderDate;
			copy.ShipAddr1 = this.ShipAddr1;
			copy.ShipAddr2 = this.ShipAddr2;
			copy.ShipCity = this.ShipCity;
			copy.ShipState = this.ShipState;
			copy.ShipZip = this.ShipZip;
			copy.ShipCountry = this.ShipCountry;
			copy.BillAddr1 = this.BillAddr1;
			copy.BillAddr2 = this.BillAddr2;
			copy.BillCity = this.BillCity;
			copy.BillState = this.BillState;
			copy.BillZip = this.BillZip;
			copy.BillCountry = this.BillCountry;
			copy.CourierId = this.CourierId;
			copy.TotalPrice = this.TotalPrice;
			copy.BillToFirstName = this.BillToFirstName;
			copy.BillToLastName = this.BillToLastName;
			copy.ShipToFirstName = this.ShipToFirstName;
			copy.ShipToLastName = this.ShipToLastName;
			copy.CreditCardId = this.CreditCardId;
			copy.Locale = this.Locale;
			copy.Timestamp = this.Timestamp;
					
			copy.AcceptChanges();
			return (Orders)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed Orders Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Orders DeepCopy()
		{
			return EntityHelper.Clone<Orders>(this as Orders);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="OrdersBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(OrdersBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="OrdersBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="OrdersBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="OrdersBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(OrdersBase Object1, OrdersBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.OrderId != Object2.OrderId)
				equal = false;
			if (Object1.AccountId != Object2.AccountId)
				equal = false;
			if (Object1.OrderDate != Object2.OrderDate)
				equal = false;
			if (Object1.ShipAddr1 != Object2.ShipAddr1)
				equal = false;
			if ( Object1.ShipAddr2 != null && Object2.ShipAddr2 != null )
			{
				if (Object1.ShipAddr2 != Object2.ShipAddr2)
					equal = false;
			}
			else if (Object1.ShipAddr2 == null ^ Object1.ShipAddr2 == null )
			{
				equal = false;
			}
			if (Object1.ShipCity != Object2.ShipCity)
				equal = false;
			if (Object1.ShipState != Object2.ShipState)
				equal = false;
			if (Object1.ShipZip != Object2.ShipZip)
				equal = false;
			if ( Object1.ShipCountry != null && Object2.ShipCountry != null )
			{
				if (Object1.ShipCountry != Object2.ShipCountry)
					equal = false;
			}
			else if (Object1.ShipCountry == null ^ Object1.ShipCountry == null )
			{
				equal = false;
			}
			if (Object1.BillAddr1 != Object2.BillAddr1)
				equal = false;
			if ( Object1.BillAddr2 != null && Object2.BillAddr2 != null )
			{
				if (Object1.BillAddr2 != Object2.BillAddr2)
					equal = false;
			}
			else if (Object1.BillAddr2 == null ^ Object1.BillAddr2 == null )
			{
				equal = false;
			}
			if (Object1.BillCity != Object2.BillCity)
				equal = false;
			if (Object1.BillState != Object2.BillState)
				equal = false;
			if (Object1.BillZip != Object2.BillZip)
				equal = false;
			if ( Object1.BillCountry != null && Object2.BillCountry != null )
			{
				if (Object1.BillCountry != Object2.BillCountry)
					equal = false;
			}
			else if (Object1.BillCountry == null ^ Object1.BillCountry == null )
			{
				equal = false;
			}
			if (Object1.CourierId != Object2.CourierId)
				equal = false;
			if ( Object1.TotalPrice != null && Object2.TotalPrice != null )
			{
				if (Object1.TotalPrice != Object2.TotalPrice)
					equal = false;
			}
			else if (Object1.TotalPrice == null ^ Object1.TotalPrice == null )
			{
				equal = false;
			}
			if (Object1.BillToFirstName != Object2.BillToFirstName)
				equal = false;
			if (Object1.BillToLastName != Object2.BillToLastName)
				equal = false;
			if (Object1.ShipToFirstName != Object2.ShipToFirstName)
				equal = false;
			if (Object1.ShipToLastName != Object2.ShipToLastName)
				equal = false;
			if (Object1.CreditCardId != Object2.CreditCardId)
				equal = false;
			if ( Object1.Locale != null && Object2.Locale != null )
			{
				if (Object1.Locale != Object2.Locale)
					equal = false;
			}
			else if (Object1.Locale == null ^ Object1.Locale == null )
			{
				equal = false;
			}
			if (Object1.Timestamp != Object2.Timestamp)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((OrdersBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static OrdersComparer GetComparer()
        {
            return new OrdersComparer();
        }
        */

        // Comparer delegates back to Orders
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Orders rhs, OrdersColumn which)
        {
            switch (which)
            {
            	
            	
            	case OrdersColumn.OrderId:
            		return this.OrderId.CompareTo(rhs.OrderId);
            		
            		                 
            	
            	
            	case OrdersColumn.AccountId:
            		return this.AccountId.CompareTo(rhs.AccountId);
            		
            		                 
            	
            	
            	case OrdersColumn.OrderDate:
            		return this.OrderDate.CompareTo(rhs.OrderDate);
            		
            		                 
            	
            	
            	case OrdersColumn.ShipAddr1:
            		return this.ShipAddr1.CompareTo(rhs.ShipAddr1);
            		
            		                 
            	
            	
            	case OrdersColumn.ShipAddr2:
            		return this.ShipAddr2.CompareTo(rhs.ShipAddr2);
            		
            		                 
            	
            	
            	case OrdersColumn.ShipCity:
            		return this.ShipCity.CompareTo(rhs.ShipCity);
            		
            		                 
            	
            	
            	case OrdersColumn.ShipState:
            		return this.ShipState.CompareTo(rhs.ShipState);
            		
            		                 
            	
            	
            	case OrdersColumn.ShipZip:
            		return this.ShipZip.CompareTo(rhs.ShipZip);
            		
            		                 
            	
            	
            	case OrdersColumn.ShipCountry:
            		return this.ShipCountry.CompareTo(rhs.ShipCountry);
            		
            		                 
            	
            	
            	case OrdersColumn.BillAddr1:
            		return this.BillAddr1.CompareTo(rhs.BillAddr1);
            		
            		                 
            	
            	
            	case OrdersColumn.BillAddr2:
            		return this.BillAddr2.CompareTo(rhs.BillAddr2);
            		
            		                 
            	
            	
            	case OrdersColumn.BillCity:
            		return this.BillCity.CompareTo(rhs.BillCity);
            		
            		                 
            	
            	
            	case OrdersColumn.BillState:
            		return this.BillState.CompareTo(rhs.BillState);
            		
            		                 
            	
            	
            	case OrdersColumn.BillZip:
            		return this.BillZip.CompareTo(rhs.BillZip);
            		
            		                 
            	
            	
            	case OrdersColumn.BillCountry:
            		return this.BillCountry.CompareTo(rhs.BillCountry);
            		
            		                 
            	
            	
            	case OrdersColumn.CourierId:
            		return this.CourierId.CompareTo(rhs.CourierId);
            		
            		                 
            	
            	
            	case OrdersColumn.TotalPrice:
            		return this.TotalPrice.Value.CompareTo(rhs.TotalPrice.Value);
            		
            		                 
            	
            	
            	case OrdersColumn.BillToFirstName:
            		return this.BillToFirstName.CompareTo(rhs.BillToFirstName);
            		
            		                 
            	
            	
            	case OrdersColumn.BillToLastName:
            		return this.BillToLastName.CompareTo(rhs.BillToLastName);
            		
            		                 
            	
            	
            	case OrdersColumn.ShipToFirstName:
            		return this.ShipToFirstName.CompareTo(rhs.ShipToFirstName);
            		
            		                 
            	
            	
            	case OrdersColumn.ShipToLastName:
            		return this.ShipToLastName.CompareTo(rhs.ShipToLastName);
            		
            		                 
            	
            	
            	case OrdersColumn.CreditCardId:
            		return this.CreditCardId.CompareTo(rhs.CreditCardId);
            		
            		                 
            	
            	
            	case OrdersColumn.Locale:
            		return this.Locale.CompareTo(rhs.Locale);
            		
            		                 
            	
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<OrdersKey> Members
		
		// member variable for the EntityId property
		private OrdersKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public OrdersKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new OrdersKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"Orders" 
					+ this.OrderId.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{25}{24}- OrderId: {0}{24}- AccountId: {1}{24}- OrderDate: {2}{24}- ShipAddr1: {3}{24}- ShipAddr2: {4}{24}- ShipCity: {5}{24}- ShipState: {6}{24}- ShipZip: {7}{24}- ShipCountry: {8}{24}- BillAddr1: {9}{24}- BillAddr2: {10}{24}- BillCity: {11}{24}- BillState: {12}{24}- BillZip: {13}{24}- BillCountry: {14}{24}- CourierId: {15}{24}- TotalPrice: {16}{24}- BillToFirstName: {17}{24}- BillToLastName: {18}{24}- ShipToFirstName: {19}{24}- ShipToLastName: {20}{24}- CreditCardId: {21}{24}- Locale: {22}{24}- Timestamp: {23}{24}", 
				this.OrderId,
				this.AccountId,
				this.OrderDate,
				this.ShipAddr1,
				(this.ShipAddr2 == null) ? string.Empty : this.ShipAddr2.ToString(),
				this.ShipCity,
				this.ShipState,
				this.ShipZip,
				(this.ShipCountry == null) ? string.Empty : this.ShipCountry.ToString(),
				this.BillAddr1,
				(this.BillAddr2 == null) ? string.Empty : this.BillAddr2.ToString(),
				this.BillCity,
				this.BillState,
				this.BillZip,
				(this.BillCountry == null) ? string.Empty : this.BillCountry.ToString(),
				this.CourierId,
				(this.TotalPrice == null) ? string.Empty : this.TotalPrice.ToString(),
				this.BillToFirstName,
				this.BillToLastName,
				this.ShipToFirstName,
				this.ShipToLastName,
				this.CreditCardId,
				(this.Locale == null) ? string.Empty : this.Locale.ToString(),
				this.Timestamp,
				Environment.NewLine, 
				this.GetType());
		}
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Orders' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class OrdersEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// OrderId : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "Orders"</remarks>
			public System.Int32 OrderId;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// AccountId : 
		/// </summary>
		public System.Guid		  AccountId = Guid.Empty;
		
		/// <summary>
		/// OrderDate : 
		/// </summary>
		public System.DateTime		  OrderDate = DateTime.MinValue;
		
		/// <summary>
		/// ShipAddr1 : 
		/// </summary>
		public System.String		  ShipAddr1 = string.Empty;
		
		/// <summary>
		/// ShipAddr2 : 
		/// </summary>
		public System.String		  ShipAddr2 = null;
		
		/// <summary>
		/// ShipCity : 
		/// </summary>
		public System.String		  ShipCity = string.Empty;
		
		/// <summary>
		/// ShipState : 
		/// </summary>
		public System.String		  ShipState = string.Empty;
		
		/// <summary>
		/// ShipZip : 
		/// </summary>
		public System.String		  ShipZip = string.Empty;
		
		/// <summary>
		/// ShipCountry : 
		/// </summary>
		public System.String		  ShipCountry = null;
		
		/// <summary>
		/// BillAddr1 : 
		/// </summary>
		public System.String		  BillAddr1 = string.Empty;
		
		/// <summary>
		/// BillAddr2 : 
		/// </summary>
		public System.String		  BillAddr2 = null;
		
		/// <summary>
		/// BillCity : 
		/// </summary>
		public System.String		  BillCity = string.Empty;
		
		/// <summary>
		/// BillState : 
		/// </summary>
		public System.String		  BillState = string.Empty;
		
		/// <summary>
		/// BillZip : 
		/// </summary>
		public System.String		  BillZip = string.Empty;
		
		/// <summary>
		/// BillCountry : 
		/// </summary>
		public System.String		  BillCountry = null;
		
		/// <summary>
		/// CourierId : 
		/// </summary>
		public System.Guid		  CourierId = Guid.Empty;
		
		/// <summary>
		/// TotalPrice : 
		/// </summary>
		public System.Decimal?		  TotalPrice = null;
		
		/// <summary>
		/// BillToFirstName : 
		/// </summary>
		public System.String		  BillToFirstName = string.Empty;
		
		/// <summary>
		/// BillToLastName : 
		/// </summary>
		public System.String		  BillToLastName = string.Empty;
		
		/// <summary>
		/// ShipToFirstName : 
		/// </summary>
		public System.String		  ShipToFirstName = string.Empty;
		
		/// <summary>
		/// ShipToLastName : 
		/// </summary>
		public System.String		  ShipToLastName = string.Empty;
		
		/// <summary>
		/// CreditCardId : 
		/// </summary>
		public System.Guid		  CreditCardId = Guid.Empty;
		
		/// <summary>
		/// Locale : 
		/// </summary>
		public System.String		  Locale = null;
		
		/// <summary>
		/// Timestamp : 
		/// </summary>
		public System.Byte[]		  Timestamp = new byte[] {};
		#endregion
			
		#endregion "Variable Declarations"
		
		public Object Clone()
		{
			OrdersEntityData _tmp = new OrdersEntityData();
						
			_tmp.OrderId = this.OrderId;
			
			_tmp.AccountId = this.AccountId;
			_tmp.OrderDate = this.OrderDate;
			_tmp.ShipAddr1 = this.ShipAddr1;
			_tmp.ShipAddr2 = this.ShipAddr2;
			_tmp.ShipCity = this.ShipCity;
			_tmp.ShipState = this.ShipState;
			_tmp.ShipZip = this.ShipZip;
			_tmp.ShipCountry = this.ShipCountry;
			_tmp.BillAddr1 = this.BillAddr1;
			_tmp.BillAddr2 = this.BillAddr2;
			_tmp.BillCity = this.BillCity;
			_tmp.BillState = this.BillState;
			_tmp.BillZip = this.BillZip;
			_tmp.BillCountry = this.BillCountry;
			_tmp.CourierId = this.CourierId;
			_tmp.TotalPrice = this.TotalPrice;
			_tmp.BillToFirstName = this.BillToFirstName;
			_tmp.BillToLastName = this.BillToLastName;
			_tmp.ShipToFirstName = this.ShipToFirstName;
			_tmp.ShipToLastName = this.ShipToLastName;
			_tmp.CreditCardId = this.CreditCardId;
			_tmp.Locale = this.Locale;
			_tmp.Timestamp = this.Timestamp;
			
			return _tmp;
		}
		

		private TList<OrderStatus> orderStatus;
      public TList<OrderStatus> OrderStatusCollection
      {
         get
         {
            if (orderStatus == null)
            {
               orderStatus = new TList<OrderStatus>();
            }

            return orderStatus;
         }
         set { orderStatus = value; }
      }

		private TList<LineItem> lineItem;
      public TList<LineItem> LineItemCollection
      {
         get
         {
            if (lineItem == null)
            {
               lineItem = new TList<LineItem>();
            }

            return lineItem;
         }
         set { lineItem = value; }
      }
	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"ShipAddr1");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipAddr1",80));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipAddr2",80));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"ShipCity");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipCity",80));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"ShipState");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipState",80));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"ShipZip");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipZip",20));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipCountry",20));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"BillAddr1");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillAddr1",80));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillAddr2",80));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"BillCity");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillCity",80));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"BillState");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillState",80));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"BillZip");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillZip",20));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillCountry",20));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"BillToFirstName");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillToFirstName",80));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"BillToLastName");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillToLastName",80));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"ShipToFirstName");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipToFirstName",80));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"ShipToLastName");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipToLastName",80));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Locale",20));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"Timestamp");
		}
   		#endregion
	
	} // End Class
	
	#region OrdersComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class OrdersComparer : System.Collections.Generic.IComparer<Orders>
	{
		OrdersColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:OrdersComparer"/> class.
        /// </summary>
		public OrdersComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public OrdersComparer(OrdersColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Orders"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Orders"/> to compare.</param>
        /// <param name="b">The second <c>Orders</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Orders a, Orders b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Orders entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Orders a, Orders b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public OrdersColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region OrdersKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Orders"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class OrdersKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the OrdersKey class.
		/// </summary>
		public OrdersKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the OrdersKey class.
		/// </summary>
		public OrdersKey(OrdersBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.orderId = entity.OrderId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the OrdersKey class.
		/// </summary>
		public OrdersKey(System.Int32 orderId)
		{
			#region Init Properties

			this.orderId = orderId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private OrdersBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public OrdersBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the OrderId property
		private System.Int32 orderId;
		
		/// <summary>
		/// Gets or sets the OrderId property.
		/// </summary>
		public System.Int32 OrderId
		{
			get { return orderId; }
			set
			{
				if ( Entity != null )
				{
					Entity.OrderId = value;
				}
				
				orderId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				OrderId = ( values["OrderId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["OrderId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("OrderId", OrderId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("OrderId: {0}{1}",
								OrderId,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	
	
	/// <summary>
	/// Enumerate the Orders columns.
	/// </summary>
	[Serializable]
	public enum OrdersColumn
	{
		/// <summary>
		/// OrderId : 
		/// </summary>
		[EnumTextValue("OrderId")]
		OrderId,
		/// <summary>
		/// AccountId : 
		/// </summary>
		[EnumTextValue("AccountId")]
		AccountId,
		/// <summary>
		/// OrderDate : 
		/// </summary>
		[EnumTextValue("OrderDate")]
		OrderDate,
		/// <summary>
		/// ShipAddr1 : 
		/// </summary>
		[EnumTextValue("ShipAddr1")]
		ShipAddr1,
		/// <summary>
		/// ShipAddr2 : 
		/// </summary>
		[EnumTextValue("ShipAddr2")]
		ShipAddr2,
		/// <summary>
		/// ShipCity : 
		/// </summary>
		[EnumTextValue("ShipCity")]
		ShipCity,
		/// <summary>
		/// ShipState : 
		/// </summary>
		[EnumTextValue("ShipState")]
		ShipState,
		/// <summary>
		/// ShipZip : 
		/// </summary>
		[EnumTextValue("ShipZip")]
		ShipZip,
		/// <summary>
		/// ShipCountry : 
		/// </summary>
		[EnumTextValue("ShipCountry")]
		ShipCountry,
		/// <summary>
		/// BillAddr1 : 
		/// </summary>
		[EnumTextValue("BillAddr1")]
		BillAddr1,
		/// <summary>
		/// BillAddr2 : 
		/// </summary>
		[EnumTextValue("BillAddr2")]
		BillAddr2,
		/// <summary>
		/// BillCity : 
		/// </summary>
		[EnumTextValue("BillCity")]
		BillCity,
		/// <summary>
		/// BillState : 
		/// </summary>
		[EnumTextValue("BillState")]
		BillState,
		/// <summary>
		/// BillZip : 
		/// </summary>
		[EnumTextValue("BillZip")]
		BillZip,
		/// <summary>
		/// BillCountry : 
		/// </summary>
		[EnumTextValue("BillCountry")]
		BillCountry,
		/// <summary>
		/// CourierId : 
		/// </summary>
		[EnumTextValue("CourierId")]
		CourierId,
		/// <summary>
		/// TotalPrice : 
		/// </summary>
		[EnumTextValue("TotalPrice")]
		TotalPrice,
		/// <summary>
		/// BillToFirstName : 
		/// </summary>
		[EnumTextValue("BillToFirstName")]
		BillToFirstName,
		/// <summary>
		/// BillToLastName : 
		/// </summary>
		[EnumTextValue("BillToLastName")]
		BillToLastName,
		/// <summary>
		/// ShipToFirstName : 
		/// </summary>
		[EnumTextValue("ShipToFirstName")]
		ShipToFirstName,
		/// <summary>
		/// ShipToLastName : 
		/// </summary>
		[EnumTextValue("ShipToLastName")]
		ShipToLastName,
		/// <summary>
		/// CreditCardId : 
		/// </summary>
		[EnumTextValue("CreditCardId")]
		CreditCardId,
		/// <summary>
		/// Locale : 
		/// </summary>
		[EnumTextValue("Locale")]
		Locale,
		/// <summary>
		/// Timestamp : 
		/// </summary>
		[EnumTextValue("Timestamp")]
		Timestamp
	}//End enum

} // end namespace


