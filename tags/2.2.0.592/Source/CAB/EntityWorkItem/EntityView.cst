<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="Generate a CAB WorkItem." Debug="True" ResponseEncoding="UTF-8" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Text" %>

<%@ Property Name="EntityName" Type="System.String" Category="Data" Description="Namespace." %>
<%@ Property Name="EntityNameSpace" Type="System.String" Category="Style" Description="Root Namespace." %>
<%@ Property Name="WorkItemNameSpace" Type="System.String" Category="Style" Description="Root Namespace." %>
<%@ Property Name="ViewClassName" Type="System.String" Category="Data" Description="Namespace." %>
<%@ Property Name="PresenterClassName" Type="System.String" Category="Data" Description="Namespace." %>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;

using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.ObjectBuilder;

using <%=EntityNameSpace%>;

namespace <%=WorkItemNameSpace%>
{
	/// <summary>
	/// This class is the view, all the interaction with .
	/// </summary>
    [SmartPart]
    public partial class <%=ViewClassName%> : UserControl
    {    	
    	#region Presenter injection

		/// <summary>
		/// The controller will get injected into the smartpart
		/// when it is added to the workitem.
		/// </summary>
		private <%=PresenterClassName%> _presenter = null;

		[Microsoft.Practices.ObjectBuilder.CreateNew]
		public <%=PresenterClassName%> Presenter
		{
			set { this._presenter = value; this._presenter.View = this; }
			get { return this._presenter; }
		}

		#endregion
    	
        /// <summary>
        /// Initializes a new instance of the <see cref="T:<%=ViewClassName%>"/> class.
        /// </summary>
        public <%=ViewClassName%>()
        {
            InitializeComponent();
        }
      	
		protected override void OnLoad(EventArgs e)
		{
			base.OnLoad(e);
		}
    }
}
