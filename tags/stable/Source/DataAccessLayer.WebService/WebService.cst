<%--
 * $Id: WebService.cst,v 1.1 2005/12/02 15:23:23 jroland Exp $
 * Last modified by $Author: goofsr $
 * Last modified at $Date: 2006-04-09 01:11:17 -0500 (Sun, 09 Apr 2006) $
 * $Revision: 118 $
--%>
<%@ CodeTemplate Src="..\TemplateLib\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="" Debug="True" ResponseEncoding="UTF-8"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections" %>

<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Context" Description="Tables that the stored procedures should be based on." %>
<%@ Property Name="SourceViews" Type="SchemaExplorer.ViewSchemaCollection" Category="Context" Description="views that the data access class should be based on." %>

<%@ Property Name="IncludeCustoms" Type="System.Boolean" Default="True" Category="Options" Description="If true customs stored procedures will be generated as functions." %>
<%@ Property Name="CustomNonMatchingReturnType" Type="CustomNonMatchingReturnType" Default="DataSet" Category="Options" Description="When using custom stored procedures, if the returned rows do not match the fields in an entity, a DataSet or IDataReader will be returned. Choose One.  This is useful if you've returned more than one resultset in a custom procedure; you can use a ConvertToDataSet(IDataReader) method in the Utility class to convert that to a DataSet." %>

<%@ Property Name="IncludeInsert" Type="System.Boolean" Default="True" Category="Options" Description="If true insert functions will be generated." %>
<%@ Property Name="IncludeUpdate" Type="System.Boolean" Default="True" Category="Options" Description="If true update functions will be generated." %>
<%@ Property Name="IncludeDelete" Type="System.Boolean" Default="True" Category="Options" Description="If true delete functions will be generated." %>
<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeGetListByFK" Type="System.Boolean" Default="True" Category="Options" Description="If true get functions will be generated." %>
<%@ Property Name="IncludeGetListByIX" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeFind" Type="System.Boolean" Default="False" Category="Options" Description="If true find functions will be generated." %>
<%@ Property Name="IncludeManyToMany" Type="System.Boolean" Default="True" Category="Options" Description="If true select statements will be generated for any many to many relationship." %>

<%@ Property Name="NameSpace" Type="System.String" Category="Data" Description="Class Namespace." %>

<%@ Property Name="BLLNameSpace" Type="System.String" Category="Data" Description="BLL Namespace." %>
<%@ Property Name="DALNameSpace" Type="System.String" Category="Data" Description="DAL Namespace." %>
<%@ Property Name="ProviderInvariantName" Type="System.String" Default="" Optional="True" Category="Data" Description="The providers invariant name." %>

<%@ Property Name="ClassName" Type="System.String" Category="Style" Description="The Name of the WebService class." %>
<%@ Property Name="WebServiceUrl" Type="System.String" Category="Style" Description="The webservice base URL. The asmx filename will be added programmatically." Default="http://localhost/Services/" %>
<%%@ WebService Language="C#" Class="<%=ClassName%>" %>
<%%@ Assembly Name="<%=BLLNameSpace%>" %>
<%%@ Assembly Name="<%=DALNameSpace%>" %>

<% if(ProviderInvariantName == "System.Data.OracleClient") { %>
<%%@ Assembly Name="<%=DALNameSpace+".OracleClient"%>" %>
<% } else { %>
<%%@ Assembly Name="<%=DALNameSpace+".SqlClient"%>" %>
<% } %>

using System;
using System.Data;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml;
using <%=BLLNameSpace%>;
using <%=DALNameSpace%>;
<% if(ProviderInvariantName == "System.Data.OracleClient") { %>
using <%=DALNameSpace+".OracleClient"%>;
<% } else { %>
using <%=DALNameSpace+".SqlClient"%>;
<% } %>


/// <summary>
///	Exposes CRUD webmethods for the <%=ClassName%> Database.
/// </summary>
[WebService(Namespace="<%=WebServiceUrl%>", Description="Exposes CRUD webmethods for the <%=ClassName%> Database.")]
public class <%=ClassName%> : WebService 
{
	
	/// <summary>
    /// used in exception handling for WebServices
    /// </summary>
    public enum FaultCode
    {
        /// <summary>
        /// Fault is on the client
        /// </summary>
        Client,
        /// <summary>
        /// Fault is on the server
        /// </summary>
        Server
    }

	<% 
	System.Collections.ArrayList methods = new System.Collections.ArrayList();
	for (int tableIndex = 0; tableIndex < SourceTables.Count; tableIndex++) 
	{
		// point to the current table
		SchemaExplorer.TableSchema SourceTable = SourceTables[tableIndex];
		
		// True if primary key is AutoGenerated by database.
		//bool IsPkeyReadOnly = false;
		
		// Name of the table being worked on.
		string className = NameSpace + "." + GetClassName(SourceTable);
		string collectionClassName = NameSpace + "." + GetClassName(SourceTable, ClassNameFormat.Collection);
		string providerName = GetClassName(SourceTable, ClassNameFormat.Provider);
		
		// Collection of all columns in the table.
		ColumnSchemaCollection cols = SourceTable.Columns;
		
		// Collection of all columns in the table that are not primary keys.
		ColumnSchemaCollection nonKeys = SourceTable.NonPrimaryKeyColumns;
		
		// Collection of all primary key columns.
		ColumnSchemaCollection keys = SourceTable.PrimaryKey.MemberColumns;
		
		// Collection of ForeignKeys. Provides information about the foreign keys 
		//(keys where the current table is the foreign table) contained in the table. 
		TableKeySchemaCollection fkeys = SourceTable.ForeignKeys;
		
		//Provides information about the primary keys 
		//(keys where the current table is the primary table) contained in the table. 
		TableKeySchemaCollection pkeys = SourceTable.PrimaryKeys;
		
		//Provides information about the indexes contained in the table. 
		IndexSchemaCollection indexes = SourceTable.Indexes;
		
		//the first of potentially multiple primary keys
		//ColumnSchema primaryKey = keys[0];
		
		
		// Holds the RowVersion column if there's any
		ColumnSchema RowVersion = null;
	
		foreach (ColumnSchema column in cols)
		{
			if (column.NativeType.ToLower() == "timestamp")
				RowVersion = column;
		}
	 
		// this array store each Get BY MemberColumns in order to avoid to create doublon Get methods
		System.Collections.ArrayList getbyKeys = new System.Collections.ArrayList();
%>

	
	<% if(IncludeManyToMany) { %>
	#region Get from  Many To Many Relationship Functions
	<%
		TableSchema primaryTable = SourceTable;
		System.Collections.Hashtable manyToManyFunctions = new System.Collections.Hashtable();
		foreach(TableKeySchema key in SourceTable.PrimaryKeys)
		{
			// Check that the key is related to a junction table and that this key relate a PK in this junction table
			if ( IsJunctionTable(key.ForeignKeyTable) && IsJunctionKey(key))
			{
				TableSchema junctionTable = key.ForeignKeyTable;
				
				// Search for the other(s) key(s) of the junction table' primary key
				foreach(TableKeySchema junctionTableKey in junctionTable.ForeignKeys)
				{				
					if ( IsJunctionKey(junctionTableKey) && junctionTableKey.Name != key.Name )
					{
						TableSchema secondaryTable = junctionTableKey.PrimaryKeyTable;
						string functionname = GetManyToManyName(junctionTableKey, junctionTable);
						methods.Add(providerName + "_GetBy" + functionname);
						if (!manyToManyFunctions.ContainsKey(functionname))
						{
							manyToManyFunctions.Add(functionname,null);
%>

	#region GetBy<%=functionname%>
		
	[WebMethod(Description="Get rows from the table <%=SourceTable.Name%>, through the junction table <%=junctionTable.Name%>.")]
	public <%=NameSpace + "." + GetClassName(primaryTable, ClassNameFormat.Collection)%> <%=providerName%>_GetBy<%=functionname%>(<%=GetFunctionHeaderParameters(junctionTableKey.ForeignKeyMemberColumns)%>, int start, int pageLength, out int count)
	{		
		try
		{
		return <%=DALNameSpace%>.DataRepository.<%=providerName%>.GetBy<%=functionname%>(<%=GetFunctionCallParameters(junctionTableKey.ForeignKeyMemberColumns)%>, start, pageLength, out count);
		}
		catch(SoapException soex)
		{
			throw soex;
		}
		catch(Exception ex)
		{
			throw RaiseException("<%=providerName%>_GetBy<%=functionname%>", "WSSoapException", ex.Message, "1000", ex.Source, FaultCode.Server);
		}
	}
	
	#endregion GetBy<%=functionname%>
	
				<%
					}//end if the function has already been created
				} //end if there is many to many relationship.
			} //end foreach			
	 	}// end if(IsJunctionTable(junctionTableKeyForeignKeyTable)) %>
	<%}//end foreach pkey %>
	#endregion	
	<% } %>
	
	<% if (IncludeDelete) {
		methods.Add(providerName + "_" + MethodNames.Delete);
		%>
	#region <%= MethodNames.Delete %> Functions
		
	/// <summary>
	/// 	Deletes a row from the DataSource.
	/// </summary>
	<% for (int i = 0; i < keys.Count; i++) { %>
	/// <param name="<%= keys[i].Name%>"><%= GetColumnXmlComment(keys[i],1)%>. Primary Key.</param>	
	<% } %>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <param name="connectionString">Connection string to datasource.</param>
	/// <remarks>Deletes based on primary key(s).</remarks>
	/// <returns>Returns true if operation suceeded.</returns>
	[WebMethod(Description="Delete a row from the table <%=SourceTable.Name%>.")]
	public bool <%=providerName%>_<%= MethodNames.Delete %>(<%= GetFunctionHeaderParameters(keys) %><% if(RowVersion != null && !RowVersion.IsPrimaryKeyMember) {Response.Write(", byte[] " + GetFieldName(RowVersion));}%>)
	{
		try
		{
		return <%=DALNameSpace%>.DataRepository.<%=providerName%>.<%= MethodNames.Delete %>(<%= GetFunctionCallParameters(keys) %><% if(RowVersion != null && !RowVersion.IsPrimaryKeyMember) {Response.Write(", " + GetFieldName(RowVersion));}%>);
		}
		catch(SoapException soex)
		{
			throw soex;
		}
		catch(Exception ex)
		{
			throw RaiseException("<%=providerName%>_<%= MethodNames.Delete %>", "WSSoapException", ex.Message, "1000", ex.Source, FaultCode.Server);
		}
	}
	
	#endregion
	<% } %>
	
	<% if (IncludeFind) { 
		methods.Add(providerName + "_" + MethodNames.Find);
		%>
	#region <%= MethodNames.Find %> Methods
	
	/// <summary>
	/// 	Returns rows meeting the whereclause condition from the DataSource.
	/// </summary>
	/// <param name="whereClause">Specifies the condition for the rows returned by a query.</param>
	/// <remarks></remarks>
	/// <returns>Returns a DataSet.</returns>
	[WebMethod(Description="Get rows from the table <%=SourceTable.Name%> with additional query text.")]
	public <%=collectionClassName%> <%=providerName%>_<%= MethodNames.Find %>(string whereClause, int start, int pageLength, out int count)
	{
		try
		{
		return <%=DALNameSpace%>.DataRepository.<%=providerName%>.<%= MethodNames.Find %>((TransactionManager) null, whereClause, start, pageLength, out count);
		}
		catch(SoapException soex)
		{
			throw soex;
		}
		catch(Exception ex)
		{
			throw RaiseException("<%=providerName%>_<%= MethodNames.Find %>", "WSSoapException", ex.Message, "1000", ex.Source, FaultCode.Server);
		}
	}
	
	#endregion <%= MethodNames.Find %> Methods
	<% } %>
	
	
	<% if (IncludeGetList) { 
		methods.Add(providerName + "_" + MethodNames.GetAll);
		methods.Add(providerName + "_" + MethodNames.GetPaged);
		%>
	#region <%= MethodNames.GetAll %> Methods
		
	/// <summary>
	/// 	Gets All rows from the DataSource.
	/// </summary>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pagelen">Number of rows to return.</param>
	/// <param name="count">Number of rows in the DataSource.</param>
	/// <returns>Returns a <s>DataSet</s>.</returns>
	[WebMethod(Description="Get all rows from the table <%=SourceTable.Name%>.")]
	public <%=collectionClassName%> <%=providerName%>_<%= MethodNames.GetAll %>(int start, int pageLength, out int count)
	{
		try
		{
		return <%=DALNameSpace%>.DataRepository.<%=providerName%>.<%= MethodNames.GetAll %>(start, pageLength, out count);		
		}
		catch(SoapException soex)
		{
			throw soex;
		}
		catch(Exception ex)
		{
			throw RaiseException("<%=providerName%>_<%= MethodNames.GetAll %>", "WSSoapException", ex.Message, "1000", ex.Source, FaultCode.Server);
		}		
	}
	
	#endregion
	
	#region <%= MethodNames.GetPaged %> Methods
	
	/// <summary>
	/// Gets a page of rows from the DataSource.
	/// </summary>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
	/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
	/// <param name="count">Number of rows in the DataSource.</param>
	/// <remarks></remarks>
	/// <returns>Returns a typed collection of <%=ClassName%> objects.</returns>
	[WebMethod(Description="Get all rows from the table <%=SourceTable.Name%>.")]
	public <%=collectionClassName%> <%=providerName%>_<%= MethodNames.GetPaged %>(string whereClause, string orderBy, int start, int pageLength, out int count)
	{
		try
		{
		return <%=DALNameSpace%>.DataRepository.<%=providerName%>.<%= MethodNames.GetPaged %>(whereClause, orderBy, start, pageLength, out count);
		}
		catch(SoapException soex)
		{
			throw soex;
		}
		catch(Exception ex)
		{
			throw RaiseException("<%=providerName%>_<%= MethodNames.GetPaged %>", "WSSoapException", ex.Message, "1000", ex.Source, FaultCode.Server);
		}
	}

	#endregion
	<% } %>
		
	<% if (IncludeGetListByFK) { %>
	#region Get By Foreign Key Functions
<%
		for (int j=0; j < fkeys.Count;j++)
		{	
			if(IsForeignKeyCoveredByIndex(fkeys[j]))
				continue;
									
			getbyKeys.Add(GetKeysName(fkeys[j].ForeignKeyMemberColumns));
			methods.Add(providerName + "_GetBy" + GetKeysName(fkeys[j].ForeignKeyMemberColumns));
%>
	
	/// <summary>
	/// 	Gets rows from the datasource based on the <%=fkeys[j].Name%> key.
	///		<%=fkeys[j].Name%> Description: <%=GetColumnXmlComment(fkeys[j],1)%>
	/// </summary>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pagelen">Number of rows to return.</param>
<% for (int i = 0; i < fkeys[j].ForeignKeyMemberColumns.Count; i++) { %>
	/// <param name="<%= fkeys[j].ForeignKeyMemberColumns[i].Name%>"><%=GetColumnXmlComment(fkeys[j].ForeignKeyMemberColumns[i],1)%></param>
<% } %>
	/// <param name="count">out parameter to get total records for query</param>	
	/// <remarks></remarks>
	/// <returns>Returns a DataSet.</returns>
	[WebMethod(Description="Get rows from <%=SourceTable.Name%> filtered by the <%=GetKeysName(fkeys[j].ForeignKeyMemberColumns)%> column.")]
	public <%=collectionClassName%> <%=providerName%>_GetBy<%=GetKeysName(fkeys[j].ForeignKeyMemberColumns)%>(<%= GetFunctionHeaderParameters(fkeys[j].ForeignKeyMemberColumns) %>, int start, int pageLength, out int count)
	{
		try
		{
		return <%=DALNameSpace%>.DataRepository.<%=providerName%>.GetBy<%=GetKeysName(fkeys[j].ForeignKeyMemberColumns)%>(<%= GetFunctionCallParameters(fkeys[j].ForeignKeyMemberColumns) %>, start, pageLength, out count);
		}
		catch(SoapException soex)
		{
			throw soex;
		}
		catch(Exception ex)
		{
			throw RaiseException("GetBy<%=GetKeysName(fkeys[j].ForeignKeyMemberColumns)%>", "WSSoapException", ex.Message, "1000", ex.Source, FaultCode.Server);
		}
	}
	
<% 		}//endfor %>
#endregion
	<% } %>
	
	<% if (IncludeGetListByIX) { %>	
	#region Get By Index Functions
	<%	
		for (int j=0; j < indexes.Count;j++)
		{
			// Check if this key is not already generated
			if(getbyKeys.IndexOf(GetKeysName(indexes[j].MemberColumns)) >=0 )
			{
				continue;
			}
			else
			{
				// add this key to the index list
				getbyKeys.Add(GetKeysName(indexes[j].MemberColumns));
			}
			
			string returnType = collectionClassName;
			
			if (indexes[j].IsUnique || indexes[j].IsPrimaryKey)
			{
				returnType = className;
			}
			
			methods.Add(providerName + "_GetBy" + GetKeysName(indexes[j].MemberColumns));
			
%>
	
	/// <summary>
	/// 	Gets rows from the datasource based on the <%=indexes[j].Name%> index.
	/// </summary>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pagelen">Number of rows to return.</param>
<% for (int i = 0; i < indexes[j].MemberColumns.Count; i++) { %>
	/// <param name="<%= indexes[j].MemberColumns[i].Name%>"><%= GetColumnXmlComment(indexes[j].MemberColumns[i],1)%></param>
<% } %>
	/// <param name="count">out parameter to get total records for query</param>	
	/// <returns>Returns a DataSet.</returns>
	[WebMethod(Description="Get rows from the table <%=SourceTable.Name%> filtered by the column <%=GetKeysName(indexes[j].MemberColumns)%> that is part of the <%=indexes[j].Name%> index.")]
	public <%=returnType%> <%=providerName%>_GetBy<%=GetKeysName(indexes[j].MemberColumns)%>(<%= GetFunctionHeaderParameters(indexes[j].MemberColumns) %>, int start, int pageLength, out int count)
	{
		try
		{
		return <%=DALNameSpace%>.DataRepository.<%=providerName%>.GetBy<%=GetKeysName(indexes[j].MemberColumns)%>(<%= GetFunctionCallParameters(indexes[j].MemberColumns) %>, start, pageLength, out count);
		}
		catch(SoapException soex)
		{
			throw soex;
		}
		catch(Exception ex)
		{
			throw RaiseException("<%=providerName%>_GetBy<%=GetKeysName(indexes[j].MemberColumns)%>", "WSSoapException", ex.Message, "1000", ex.Source, FaultCode.Server);
		}
	}
	

<%		}//endfor %>
	#endregion Get By Index Functions
	<% } %>
	
	<% if (IncludeInsert) { 
		methods.Add(providerName + "_" + MethodNames.Insert);
		%>
	#region <%= MethodNames.Insert %> Methods
		
	/// <summary>
	/// 	Inserts an object into the datasource.
	/// </summary>	
	/// <remarks>After inserting into the datasource, the object will be returned
	/// to refelect any changes made by the datasource. (ie: identity columns)</remarks>
	/// <returns>Returns true if operation is successful.</returns>
	[WebMethod(Description="Inserts a row in the table <%=SourceTable.Name%>.")]
	public <%=className%> <%=providerName%>_<%= MethodNames.Insert %>(<%=className%> entity )
	{
		try
		{
		<%=DALNameSpace%>.DataRepository.<%=providerName%>.<%= MethodNames.Insert %>(entity);
		return entity;		
		}
		catch(SoapException soex)
		{
			throw soex;
		}
		catch(Exception ex)
		{
			throw RaiseException("<%=providerName%>_<%= MethodNames.Insert %>", "WSSoapException", ex.Message, "1000", ex.Source, FaultCode.Server);
		}
	}
	
	/// <summary>
	/// Inserts a <%=collectionClassName%> object into the datasource using a transaction.
	/// </summary>
	/// <param name="entity"><%=collectionClassName%> object to insert.</param>
	/// <remarks>After inserting into the datasource, the <%=className%> object will be updated
	/// to refelect any changes made by the datasource. (ie: identity or computed columns)
	/// </remarks>
	/// <returns>Returns true if operation is successful.</returns>
	[WebMethod(Description="Inserts a Bulk set of rows into the table <%=SourceTable.Name%>.")]
	public void <%=providerName%>_<%= MethodNames.BulkInsert %>(<%=collectionClassName%> entityList )
	{
		try
		{
		<%=DALNameSpace%>.DataRepository.<%=providerName%>.<%= MethodNames.BulkInsert %>(entityList);
		}
		catch(SoapException soex)
		{
			throw soex;
		}
		catch(Exception ex)
		{
			throw RaiseException("<%=providerName%>_<%= MethodNames.BulkInsert %>", "WSSoapException", ex.Message, "1000", ex.Source, FaultCode.Server);
		}
	}
	#endregion <%= MethodNames.Insert %> Methods
	<% } %>
			
	<% if (IncludeUpdate) {
		methods.Add(providerName + "_" + MethodNames.Update);
		%>	
	#region <%= MethodNames.Update %> Methods
		
	/// <summary>
	/// 	Update an existing row in the datasource.
	/// </summary>
	/// <param name="entity"> object to update.</param>
	/// <remarks>After updating the datasource, the object will be updated
	/// to refelect any changes made by the datasource. (ie: identity columns)</remarks>
	/// <returns>Returns true if operation is successful.</returns>
	[WebMethod(Description="Update a row in the table <%=SourceTable.Name%>.")]
	public <%=className%> <%=providerName%>_<%= MethodNames.Update %>(<%=className%> entity)
	{
		try
		{
		<%=DALNameSpace%>.DataRepository.<%=providerName%>.<%= MethodNames.Update %>(entity);
		return entity;
		}
		catch(SoapException soex)
		{
			throw soex;
		}
		catch(Exception ex)
		{
			throw RaiseException("<%=providerName%>_<%= MethodNames.Update %>", "WSSoapException", ex.Message, "1000", ex.Source, FaultCode.Server);
		}
	}

	#endregion <%= MethodNames.Update %> Methods
	<% } %>

	<% if (IncludeCustoms) { %>
	#region Custom Methods
	
<%
	System.Collections.IDictionary procs = GetCustomProcedures(SourceTable);
	
	foreach(DictionaryEntry item in procs)
	{
		SchemaExplorer.CommandSchema command = (SchemaExplorer.CommandSchema) item.Value;
		string methodName  = item.Key.ToString();
		string uniqueMethodName = methodName;
		
		if (methods.Contains(providerName + "_" + methodName))
			uniqueMethodName = methodName + "Custom";
			
		string overloadParms = TransformStoredProcedureInputsToMethod(true, command.InputParameters) + TransformStoredProcedureOutputsToMethod(true, command.AllOutputParameters);
		string overloadCall = TransformStoredProcedureInputsToDataAccess(true, command.InputParameters) + TransformStoredProcedureOutputsToDataAccess(true, command.AllOutputParameters);
		string parms = TransformStoredProcedureInputsToMethod(true, command.InputParameters) + TransformStoredProcedureOutputsToMethod(true, command.AllOutputParameters);

		string returnType = GetReturnCustomProcReturnType(CustomNonMatchingReturnType, SourceTable, command);
		string returnTypeForComment = returnType.Replace("<", "{").Replace(">", "}");
		string returnKeyword = returnType == "void" ? "" : "return ";
		if (returnType == "IDataReader")
			returnType = "DataSet"; 
			
%>
	
	/// <summary>
	///	This method wrap the <%=command.Name%> stored procedure. 
	/// </summary><%=TransformStoredProcedureInputsToMethodComments(command.InputParameters) + TransformStoredProcedureOutputsToMethodComments(command.AllOutputParameters)%>
	/// <remark>This method is generate from a stored procedure.</remark><% if (returnType != "void") {%>
	/// <returns>A <see cref="<%=returnTypeForComment%>"/> instance.</returns><%}%>
	[WebMethod(Description="This method wrap the <%=command.Name%> stored procedure.")]
	public <%=returnType%> <%=providerName%>_<%=uniqueMethodName%>(int start, int pageLength<%=overloadParms%>)
	{
		try
		{
	    <% if (returnType == "DataSet") { %>
		<%= returnKeyword %> <% if (CustomNonMatchingReturnType.ToString() == "IDataReader" ) { %><%=DALNameSpace%>.Utility.ConvertDataReaderToDataSet(<%}%><%=DALNameSpace%>.DataRepository.<%=providerName%>.<%=methodName%>(start, pageLength <%=overloadCall%>)<% if (CustomNonMatchingReturnType.ToString() == "IDataReader" ) { %>)<%}%>;
	    <% } else { %>
		<%= returnKeyword %> <%=DALNameSpace%>.DataRepository.<%=providerName%>.<%=methodName%>(start, pageLength<%=overloadCall %>);
	    <% } %>
		}
		catch(SoapException soex)
		{
			throw soex;
		}
		catch(Exception ex)
		{
			throw RaiseException("<%=providerName%>_<%=uniqueMethodName%>", "WSSoapException", ex.Message, "1000", ex.Source, FaultCode.Server);
		}
	}
		
<%
	}	
%>
	
	#endregion
	<% } %>

<% } /* END For each DataTable */ %> 
	
	
	/* --------------------------------------------------------
		SQL VIEWS
	----------------------------------------------------------- */
	<% foreach(ViewSchema SourceView in SourceViews)
	{
		
		string className = NameSpace + "." + GetClassName(SourceView);
		string providerName = GetClassName(SourceView, ClassNameFormat.Provider);		
		string collectionClassName = NameSpace + "." + GetClassName(SourceView, ClassNameFormat.ViewCollection);
		
		methods.Add(providerName + "_Get");
	 	%>
	
	<% if (IncludeGetList) { 
		methods.Add(providerName + "_GetAll");
		%>
	#region <%= MethodNames.GetAll %> Methods
		
	/// <summary>
	/// 	Gets All rows from the DataSource.
	/// </summary>
	/// <returns>Returns a <s>DataSet</s>.</returns>
	[WebMethod(Description="Get all rows from the view <%=SourceView.Name%>.")]
	public <%=collectionClassName%> <%=providerName%>_<%= MethodNames.GetAll %>(int start, int pageLength)
	{
		try
		{
		return <%=DALNameSpace%>.DataRepository.<%=providerName%>.<%= MethodNames.GetAll %>(start, pageLength);
		}
		catch(SoapException soex)
		{
			throw soex;
		}
		catch(Exception ex)
		{
			throw RaiseException("<%=providerName%>_<%= MethodNames.GetAll %>", "WSSoapException", ex.Message, "1000", ex.Source, FaultCode.Server);
		}
	}
	
	#endregion <%= MethodNames.GetAll %> Methods
	<% } %>
	
	#region <%= MethodNames.Get %> Methods
	
	/// <summary>
	/// Gets a page of rows from the DataSource.
	/// </summary>
	/// <param name="whereClause">Specifies the condition for the rows returned by a query.</param>
	/// <param name="orderBy">Specifies the ORDER By criteria for the rows in the DataSource.</param>
	/// <remarks></remarks>
	/// <returns>Returns a typed collection of <%=ClassName%> objects.</returns>
	[WebMethod(Description="Get all rows from the view <%=SourceView.Name%>.")]
	public <%=collectionClassName%> <%=providerName%>_<%= MethodNames.Get %>(string whereClause, string orderBy, int start, int pageLength, out int count)
	{
                try
		{
		    return <%=DALNameSpace%>.DataRepository.<%=providerName%>.<%= MethodNames.Get %>(whereClause.Length > 0 ? whereClause : null, orderBy.Length > 0 ? orderBy : null, start, pageLength, out count);
                }
		catch(SoapException soex)
		{
	            throw soex;
		}
		catch(Exception ex)
		{
	            throw RaiseException("<%=providerName%>_<%= MethodNames.Get %>", "WSSoapException", ex.Message, "1000", ex.Source, FaultCode.Server);
		}
	}

	#endregion <%= MethodNames.Get %> Methods
	
	<% if (IncludeCustoms) { %>
	#region Custom Methods
	
<%
	System.Collections.IDictionary procs = GetCustomProcedures(SourceView);
	
	foreach(DictionaryEntry item in procs)
	{
		SchemaExplorer.CommandSchema command = (SchemaExplorer.CommandSchema) item.Value;
		string methodName  = item.Key.ToString();
		
		string uniqueMethodName = methodName;
		
		//can't duplicate method names in webservices
		if (methods.Contains(providerName + "_" + methodName))
			continue;

    	string overloadParms = TransformStoredProcedureInputsToMethod(true, command.InputParameters) + TransformStoredProcedureOutputsToMethod(true, command.AllOutputParameters);
		string overloadCall = TransformStoredProcedureInputsToDataAccess(true, command.InputParameters) + TransformStoredProcedureOutputsToDataAccess(true, command.AllOutputParameters);
		string parms = TransformStoredProcedureInputsToMethod(true, command.InputParameters) + TransformStoredProcedureOutputsToMethod(true, command.AllOutputParameters);

		string returnType = GetReturnCustomProcReturnType(CustomNonMatchingReturnType, SourceView, command);
		string returnTypeForComment = returnType.Replace("<", "{").Replace(">", "}");
		string returnKeyword = returnType == "void" ? "" : "return ";
		if (returnType == "IDataReader")
			returnType = "DataSet"; 
%>
	
	/// <summary>
	///	This method wrap the <%=command.Name%> stored procedure. 
	/// </summary><%=TransformStoredProcedureInputsToMethodComments(command.InputParameters) + TransformStoredProcedureOutputsToMethodComments(command.AllOutputParameters)%>
	/// <remark>This method is generate from a stored procedure.</remark><% if (returnType != "void") {%>
	/// <returns>A <see cref="<%=returnTypeForComment%>"/> instance.</returns><%}%>
	[WebMethod(Description="This method wrap the <%=command.Name%> stored procedure.")]
	public <%=returnType%> <%=providerName%>_<%=methodName%>(int start, int pageLength<%=overloadParms%>)
	{
		try
		{
		<% if (returnType == "DataSet") { %>
		<%= returnKeyword %> <% if (CustomNonMatchingReturnType.ToString() == "IDataReader" ) { %><%=DALNameSpace%>.Utility.ConvertDataReaderToDataSet(<%}%><%=DALNameSpace%>.DataRepository.<%=providerName%>.<%=methodName%>(start, pageLength<%=overloadCall%>)<% if (CustomNonMatchingReturnType.ToString() == "IDataReader" ) { %>)<%}%>;
	    <% } else { %>
		<%= returnKeyword %> <%=DALNameSpace%>.DataRepository.<%=providerName%>.<%=methodName%>(start, pageLength<%=overloadCall%>);
		<% } %>
		}
		catch(SoapException soex)
		{
			throw soex;
		}
		catch(Exception ex)
		{
			throw RaiseException("<%=providerName%>_<%=methodName%>", "WSSoapException", ex.Message, "1000", ex.Source, FaultCode.Server);
		}
		
	}
<%
	}	// foreach command
%>

	#endregion
	<% } %>
	
<% } %>

	#region General data access methods

		#region ExecuteNonQuery
		/// <summary>
		/// Executes the non query.
		/// </summary>
		/// <param name="storedProcedureName">Name of the stored procedure.</param>
		/// <param name="parameterValues">The parameter values.</param>
		/// <returns></returns>
		[WebMethod(MessageName="ExecuteNonQueryPs", Description="This method wrap the ExecuteNonQuery method provided by the Enterprise Library Data Access Application Block.")]
		public int ExecuteNonQuery(string storedProcedureName, params object[] parameterValues)
		{
		        try
		        {
			    return <%=DALNameSpace%>.DataRepository.Provider.ExecuteNonQuery(storedProcedureName, parameterValues);
                        }
		        catch(SoapException soex)
		        {
			    throw soex;
		        }
		        catch(Exception ex)
		        {
			    throw RaiseException("ExecuteNonQuery", "WSSoapException", ex.Message, "1000", ex.Source, FaultCode.Server);
		        }
		}

		/*
		/// <summary>
		/// Executes the non query.
		/// </summary>
		/// <param name="commandWrapper">The command wrapper.</param>
		[WebMethod(MessageName="ExecuteNonQueryCmd", Description="This method wrap the ExecuteNonQuery method provided by the Enterprise Library Data Access Application Block.")]
		public void ExecuteNonQuery(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper commandWrapper)
		{
			<%=DALNameSpace%>.DataRepository.Current.ExecuteNonQuery(commandWrapper);
		}
		*/

		/// <summary>
		/// Executes the non query.
		/// </summary>
		/// <param name="commandType">Type of the command.</param>
		/// <param name="commandText">The command text.</param>
		/// <returns></returns>
		[WebMethod(MessageName="ExecuteNonQueryQry", Description="This method wrap the ExecuteNonQuery method provided by the Enterprise Library Data Access Application Block.")]
		public int ExecuteNonQuery(CommandType commandType, string commandText)
		{
		        try
		        {
			    return <%=DALNameSpace%>.DataRepository.Provider.ExecuteNonQuery(commandType, commandText);
                        }
		        catch(SoapException soex)
		        {
			    throw soex;
		        }
		        catch(Exception ex)
		        {
			    throw RaiseException("ExecuteNonQuery", "WSSoapException", ex.Message, "1000", ex.Source, FaultCode.Server);
		        }
		}
		
		#endregion

		#region ExecuteDataSet
		/// <summary>
		/// Executes the data set.
		/// </summary>
		/// <param name="storedProcedureName">Name of the stored procedure.</param>
		/// <param name="parameterValues">The parameter values.</param>
		/// <returns></returns>
		[WebMethod(MessageName="ExecuteDataSetPs", Description="This method wrap the ExecuteDataSet method provided by the Enterprise Library Data Access Application Block.")]
		public DataSet ExecuteDataSet(string storedProcedureName, params object[] parameterValues)
		{
		        try
		        {
			    return <%=DALNameSpace%>.DataRepository.Provider.ExecuteDataSet(storedProcedureName, parameterValues);
                        }
		        catch(SoapException soex)
		        {
			    throw soex;
		        }
		        catch(Exception ex)
		        {
			    throw RaiseException("ExecuteDataSet", "WSSoapException", ex.Message, "1000", ex.Source, FaultCode.Server);
		        }
		}
		
		/*
		/// <summary>
		/// Executes the data set.
		/// </summary>
		/// <param name="commandWrapper">The command wrapper.</param>
		/// <returns></returns>
		[WebMethod(MessageName="ExecuteDataSetCmd", Description="This method wrap the ExecuteDataSet method provided by the Enterprise Library Data Access Application Block.")]
		public DataSet ExecuteDataSet(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper commandWrapper)
		{
			return <%=DALNameSpace%>.DataRepository.Current.ExecuteDataSet(commandWrapper);
		}
		*/

		/// <summary>
		/// Executes the data set.
		/// </summary>
		/// <param name="commandType">Type of the command.</param>
		/// <param name="commandText">The command text.</param>
		/// <returns></returns>
		[WebMethod(MessageName="ExecuteDataSetQry", Description="This method wrap the ExecuteDataSet method provided by the Enterprise Library Data Access Application Block.")]
		public DataSet ExecuteDataSet(CommandType commandType, string commandText)
		{
		        try
		        {
			    return <%=DALNameSpace%>.DataRepository.Provider.ExecuteDataSet(commandType, commandText);
                        }
		        catch(SoapException soex)
		        {
			    throw soex;
		        }
		        catch(Exception ex)
		        {
			    throw RaiseException("ExecuteDataSet", "WSSoapException", ex.Message, "1000", ex.Source, FaultCode.Server);
		        }
		}		
		#endregion

		#region ExecuteScalar
		/// <summary>
		/// Executes the scalar.
		/// </summary>
		/// <param name="storedProcedureName">Name of the stored procedure.</param>
		/// <param name="parameterValues">The parameter values.</param>
		/// <returns></returns>
		[WebMethod(MessageName="ExecuteScalarPs", Description="This method wrap the ExecuteScalar method provided by the Enterprise Library Data Access Application Block.")]
		public object ExecuteScalar(string storedProcedureName, params object[] parameterValues)
		{
		        try
		        {
			    return <%=DALNameSpace%>.DataRepository.Provider.ExecuteScalar(storedProcedureName, parameterValues);
                        }
		        catch(SoapException soex)
		        {
			    throw soex;
		        }
		        catch(Exception ex)
		        {
			    throw RaiseException("ExecuteScalar", "WSSoapException", ex.Message, "1000", ex.Source, FaultCode.Server);
		        }
		}	

		/*
		/// <summary>
		/// Executes the scalar.
		/// </summary>
		/// <param name="commandWrapper">The command wrapper.</param>
		/// <returns></returns>
		[WebMethod(MessageName="ExecuteScalarCmd", Description="This method wrap the ExecuteScalar method provided by the Enterprise Library Data Access Application Block.")]
		public object ExecuteScalar(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper commandWrapper)
		{
			return <%=DALNameSpace%>.DataRepository.Current.ExecuteScalar(commandWrapper);
		}
		*/

		/// <summary>
		/// Executes the scalar.
		/// </summary>
		/// <param name="commandType">Type of the command.</param>
		/// <param name="commandText">The command text.</param>
		/// <returns></returns>
		[WebMethod(MessageName="ExecuteScalarQry", Description="This method wrap the ExecuteScalar method provided by the Enterprise Library Data Access Application Block.")]
		public object ExecuteScalar(CommandType commandType, string commandText)
		{
		        try
		        {
			    return <%=DALNameSpace%>.DataRepository.Provider.ExecuteScalar(commandType, commandText);	
                        }
		        catch(SoapException soex)
		        {
			    throw soex;
		        }
		        catch(Exception ex)
		        {
			    throw RaiseException("ExecuteScalar", "WSSoapException", ex.Message, "1000", ex.Source, FaultCode.Server);
		        }
		}
		
		#endregion

		#endregion
		
	
	#region Exception Handling
    /// <summary>
    /// Creates the SoapException object with all the error details
    /// </summary>
    /// <param name="uri"></param>
    /// <param name="webServiceNamespace"></param>
    /// <param name="errorMessage"></param>
    /// <param name="errorNumber"></param>
    /// <param name="errorSource"></param>
    /// <param name="code"></param>
    /// <returns></returns>
    public SoapException RaiseException(string uri, string webServiceNamespace, string errorMessage, string errorNumber, string errorSource, FaultCode code)
    {
        XmlQualifiedName faultCodeLocation = null;

        //Identify the location of the FaultCode
        switch (code)
        {
            case FaultCode.Client:
                faultCodeLocation = SoapException.ClientFaultCode;
                break;
            case FaultCode.Server:
                faultCodeLocation = SoapException.ServerFaultCode;
                break;
        }

        XmlDocument xmlDoc = new XmlDocument();

        //Create the Detail node
        XmlNode rootNode = xmlDoc.CreateNode(XmlNodeType.Element, SoapException.DetailElementName.Name, SoapException.DetailElementName.Namespace);

        //Build specific details for the SoapException
        //Add first child of detail XML element.
        XmlNode errorNode = xmlDoc.CreateNode(XmlNodeType.Element, "Error", webServiceNamespace);

        //Create and set the value for the ErrorNumber node
        XmlNode errorNumberNode = xmlDoc.CreateNode(XmlNodeType.Element, "ErrorNumber", webServiceNamespace);
        errorNumberNode.InnerText = errorNumber;

        //Create and set the value for the ErrorMessage node
        XmlNode errorMessageNode = xmlDoc.CreateNode(XmlNodeType.Element, "ErrorMessage", webServiceNamespace);
        errorMessageNode.InnerText = errorMessage;

        //Create and set the value for the ErrorSource node
        XmlNode errorSourceNode = xmlDoc.CreateNode(XmlNodeType.Element, "ErrorSource", webServiceNamespace);
        errorSourceNode.InnerText = errorSource;

        //Append the Error child element nodes to the root detail node.
        errorNode.AppendChild(errorNumberNode);
        errorNode.AppendChild(errorMessageNode);
        errorNode.AppendChild(errorSourceNode);

        //Append the Detail node to the root node
        rootNode.AppendChild(errorNode);

        //Construct the exception
        SoapException soapEx = new SoapException(errorMessage, faultCodeLocation, uri, rootNode);

        //Raise the exception  back to the caller
        return soapEx;
    }
	#endregion
}
