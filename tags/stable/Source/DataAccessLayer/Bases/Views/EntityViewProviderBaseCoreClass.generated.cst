<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="..\..\..\TemplateLib\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Debug="False" Description="Generates the EntityViewProviderBaseCore type." ResponseEncoding="UTF-8" NoWarn="0108,0618,1572,1573,1574,0162,2002"%>
<%@ Property Name="BLLNameSpace" Optional="False" Type="System.String" Category="Style" Description="Object Namespace." %>
<%@ Property Name="DALNameSpace" Optional="False" Type="System.String" Category="Style" Description="DAL Namespace." %>

<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeFind" Type="System.Boolean" Default="True" Category="Options" Description="If true Find functions will be generated." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%
	string vListName = GetVListName();
%>
#region Using Directives
using System;
using <%= BLLNameSpace %>;
#endregion

namespace <%= DALNameSpace %>.Bases
{
	/// <summary>
	/// Serves as the base class for objects that provide data access functionality.
	/// Provides a default implementation of the IEntityViewProvider&lt;Entity&gt; interface.
	/// </summary>
	/// <typeparam name="Entity">The class of the business object being accessed.</typeparam>
	[Serializable]
	[CLSCompliant(true)]
	public abstract partial class EntityViewProviderBaseCore<Entity> : IEntityViewProvider<Entity>
		where Entity : new()
	{
		<% if ( IncludeGetList ) { %>
		#region <%= MethodNames.GetAll %> Methods

		/// <summary>
		/// Gets All rows from the DataSource.
		/// </summary>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.GetAll %>()
		{
			return <%= MethodNames.GetAll %>(0, int.MaxValue);
		}

		/// <summary>
		/// Gets All rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remarks>Uses connection string object was created with.</remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.GetAll %>(int start, int pageLength)
		{
			return <%= MethodNames.GetAll %>(null, start, pageLength);
		}

		/// <summary>
		/// Gets All rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">The total number of rows in the data source.</param>
		/// <remarks>Uses connection string object was created with.</remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.GetAll %>(int start, int pageLength, out int count)
		{
			return <%= MethodNames.GetAll %>(null, start, pageLength, out count);
		}

		/// <summary>
		/// Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.GetAll %>(TransactionManager transactionManager)
		{
			return <%= MethodNames.GetAll %>(transactionManager, 0, int.MaxValue);
		}

		/// <summary>
		/// Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.GetAll %>(TransactionManager transactionManager, int start, int pageLength)
		{
			int count = 0;
			return <%= MethodNames.GetAll %>(transactionManager, start, pageLength, out count);
		}

		/// <summary>
		/// Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">The total number of rows in the data source.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public abstract <%=vListName%><Entity> <%= MethodNames.GetAll %>(TransactionManager transactionManager, int start, int pageLength, out int count);

		#endregion <%= MethodNames.GetAll %> Methods

		#region <%= MethodNames.Get %> Methods

		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.Get %>()
		{
			return <%= MethodNames.Get %>(null, null, null, 0, int.MaxValue);
		}

		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.Get %>(TransactionManager transactionManager)
		{
			return <%= MethodNames.Get %>(transactionManager, null, null, 0, int.MaxValue);
		}

		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.Get %>(int start, int pageLength)
		{
			return <%= MethodNames.Get %>(null, null, null, start, pageLength);
		}

		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">The total number of rows in the data source.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.Get %>(int start, int pageLength, out int count)
		{
			return <%= MethodNames.Get %>(null, null, null, start, pageLength, out count);
		}

		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.Get %>(TransactionManager transactionManager, int start, int pageLength)
		{
			return <%= MethodNames.Get %>(transactionManager, null, null, start, pageLength);
		}

		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">The total number of rows in the data source.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.Get %>(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			return <%= MethodNames.Get %>(transactionManager, null, null, start, pageLength, out count);
		}

		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="whereClause">.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.Get %>(string whereClause, string orderBy)
		{
			return <%= MethodNames.Get %>(whereClause, orderBy, 0, int.MaxValue);
		}

		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="whereClause">.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.Get %>(TransactionManager transactionManager, string whereClause, string orderBy)
		{
			return <%= MethodNames.Get %>(transactionManager, whereClause, orderBy, 0, int.MaxValue);
		}

		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.Get %>(string whereClause, string orderBy, int start, int pageLength)
		{
			return <%= MethodNames.Get %>(null, whereClause, orderBy, start, pageLength);
		}

		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">The total number of rows in the data source.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.Get %>(string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			return <%= MethodNames.Get %>(null, whereClause, orderBy, start, pageLength, out count);
		}

		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.Get %>(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength)
		{
			int count;
			return <%= MethodNames.Get %>(transactionManager, whereClause, orderBy, start, pageLength, out count);
		}

		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">The total number of rows in the data source.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public abstract <%=vListName%><Entity> <%= MethodNames.Get %>(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count);

		#endregion <%= MethodNames.Get %> Methods

		#region <%= MethodNames.GetPaged %> Methods

		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <returns>Returns a <%=vListName%> of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.GetPaged %>(out int count)
		{
			return <%= MethodNames.GetPaged %>(null, out count);
		}

		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="mgr">A <see cref="TransactionManager"/> object.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <returns>Returns a <%=vListName%> of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.GetPaged %>(TransactionManager mgr, out int count)
		{
			return <%= MethodNames.GetPaged %>(mgr, String.Empty, String.Empty, 0, 0, out count);
		}

		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <returns>Returns a <%=vListName%> of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.GetPaged %>(int start, int pageLength, out int count)
		{
			return <%= MethodNames.GetPaged %>(null, start, pageLength, out count);
		}

		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="mgr">A <see cref="TransactionManager"/> object.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <returns>Returns a <%=vListName%> of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.GetPaged %>(TransactionManager mgr, int start, int pageLength, out int count)
		{
			return <%= MethodNames.GetPaged %>(mgr, String.Empty, String.Empty, start, pageLength, out count);
		}

		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <returns>Returns a <%=vListName%> of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.GetPaged %>(String whereClause, String orderBy, int start, int pageLength, out int count)
		{
			return <%= MethodNames.GetPaged %>(null, whereClause, orderBy, start, pageLength, out count);
		}

		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="mgr">A <see cref="TransactionManager"/> object.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <returns>Returns a <%=vListName%> of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.GetPaged %>(TransactionManager mgr, String whereClause, String orderBy, int start, int pageLength, out int count)
		{
			return <%= MethodNames.Get %>(mgr, whereClause, orderBy, start, pageLength, out count);
		}

		/// <summary>
		/// Gets the number of rows in the DataSource that match the specified whereClause.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <returns>Returns the number of rows.</returns>
		public virtual int <%= MethodNames.GetTotalItems %>(String whereClause, out int count)
		{
			return <%= MethodNames.GetTotalItems %>(null, whereClause, out count);
		}

		/// <summary>
		/// Gets the number of rows in the DataSource that match the specified whereClause.
		/// </summary>
		/// <param name="mgr">A <see cref="TransactionManager"/> object.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <returns>Returns the number of rows.</returns>
		public virtual int <%= MethodNames.GetTotalItems %>(TransactionManager mgr, String whereClause, out int count)
		{
            <%= MethodNames.GetPaged %>(mgr, whereClause, String.Empty, 0, 0, out count);
            return count;
		}

		#endregion

		<% } // end if ( IncludeGetList ) %>
		<% if ( IncludeFind ) { %>
		#region <%= MethodNames.Find %> Methods
		
		#region Parameterized <%= MethodNames.Find %> Methods
		
		/// <summary>
		/// Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.Find %>(IFilterParameterCollection parameters)
		{
			return <%= MethodNames.Find %>((TransactionManager) null, parameters);
		}
		
		/// <summary>
        /// Returns rows from the DataSource that meet the parameter conditions.
        /// </summary>
        /// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
        /// <param name="sortColumns">A collection of <see cref="SqlSortColumn"/> objects.</param>
        /// <returns>Returns a typed collection of Entity objects.</returns>
        public virtual <%=vListName%><Entity> <%= MethodNames.Find %>(IFilterParameterCollection parameters, ISortColumnCollection sortColumns)
        {
            return <%= MethodNames.Find %>((TransactionManager)null, parameters, sortColumns);
        }
		
		
		/// <summary>
		/// Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.Find %>(TransactionManager transactionManager, IFilterParameterCollection parameters)
		{
			return <%= MethodNames.Find %>(transactionManager, parameters, (string) null);
		}
		
		/// <summary>
        /// Returns rows from the DataSource that meet the parameter conditions.
        /// </summary>
        /// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
        /// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
        /// <param name="sortColumns">A collection of <see cref="SqlSortColumn"/> objects.</param>
        /// <returns>Returns a typed collection of Entity objects.</returns>
        public virtual <%=vListName%><Entity> <%= MethodNames.Find %>(TransactionManager transactionManager, IFilterParameterCollection parameters, ISortColumnCollection sortColumns)
        {
            return <%= MethodNames.Find %>(transactionManager, parameters, sortColumns.ToString());
        }
		
		/// <summary>
		/// Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.Find %>(IFilterParameterCollection parameters, string orderBy)
		{
			return <%= MethodNames.Find %>((TransactionManager) null, parameters, orderBy);
		}
		
		/// <summary>
		/// Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.Find %>(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy)
		{
			int count = 0;
			return <%= MethodNames.Find %>(transactionManager, parameters, orderBy, 0, int.MaxValue, out count);
		}
		
		/// <summary>
		/// Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.Find %>(IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			return <%= MethodNames.Find %>((TransactionManager) null, parameters, orderBy, start, pageLength, out count);
		}
		
		/// <summary>
        /// Returns rows from the DataSource that meet the parameter and sort conditions.
        /// </summary>
        /// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
        /// <param name="sortColumns">A collection of <see cref="SqlSortColumn"/> objects.</param>
        /// <param name="start">Row number at which to start reading.</param>
        /// <param name="pageLength">Number of rows to return.</param>
        /// <param name="count">out. The number of rows that match this query.</param>
        /// <returns>Returns a typed collection of Entity objects.</returns>
        public virtual <%=vListName%><Entity> <%= MethodNames.Find %>(IFilterParameterCollection parameters, ISortColumnCollection sortColumns, int start, int pageLength, out int count)
        {
            return <%= MethodNames.Find %>((TransactionManager)null, parameters, sortColumns.ToString(), start, pageLength, out count);
        }
		
		/// <summary>
		/// Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual <%=vListName%><Entity> <%= MethodNames.Find %>(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			<% // TODO: make this method abstract after it has been fully implemented! %>
			count = 0;
			return null;
		}

		#endregion Parameterized <%= MethodNames.Find %> Methods
		
		#endregion <%= MethodNames.Find %> Methods
		
		<% } // end if ( IncludeFind ) %>
	}
}
