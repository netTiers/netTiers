<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PetShop.Services</name>
    </assembly>
    <members>
        <member name="T:PetShop.Services.SecurityContextBase`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:PetShop.Services.SecurityContextBase`1.#ctor">
            <summary>
            Initializes a new instance of the SecurityContext class.
            </summary>
        </member>
        <member name="M:PetShop.Services.SecurityContextBase`1.IsAuthorized(System.String)">
            <summary>
            Determine whether user is authorized for the rule based on the rule provider
            </summary>
        </member>
        <member name="P:PetShop.Services.SecurityContextBase`1.Identity">
            <summary>
            The Current IIdentity.
            </summary>
        </member>
        <member name="P:PetShop.Services.SecurityContextBase`1.Profile">
            <summary>
            The Current Profile .
            </summary>
        </member>
        <member name="P:PetShop.Services.SecurityContextBase`1.Principal">
            <summary>
             The Current IPrincipal .
            </summary>
        </member>
        <member name="P:PetShop.Services.SecurityContextBase`1.RuleProvider">
            <summary>
             The Current Authorization Rule Provider
            </summary>
        </member>
        <member name="T:PetShop.Services.AccountServiceBase">
            <summary>
             An object representation of the 'Account' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Account.cs file instead.
             All custom implementations should be done in the <see cref="T:PetShop.Business.Account"/> class.
             </remarks>
        </member>
        <member name="T:PetShop.Services.ServiceBase`2">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:PetShop.Services.ServiceBaseCore`2">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:PetShop.Services.IComponentService">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="P:PetShop.Services.IComponentService.ProcessorList">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PetShop.Services.IComponentService.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PetShop.Services.IComponentService.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="E:PetShop.Services.IComponentService.ProcessStarting">
            <summary>
            Event to indicate that a processor is about to begin.
            </summary>
        </member>
        <member name="E:PetShop.Services.IComponentService.ProcessEnded">
            <summary>
            Event to indicate that a processor has just ended.
            </summary>
        </member>
        <member name="M:PetShop.Services.ServiceBaseCore`2.OnProcessStarting(PetShop.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:PetShop.Services.ServiceBaseCore`2.OnProcessEnded(PetShop.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:PetShop.Services.ServiceBaseCore`2.Execute">
             <summary>
            	Provides the beginning
             <remarks>
             If no AbortIfFailure parameter is passed then the process will not abort if there is a failure
             </remarks>
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:PetShop.Services.ServiceBaseCore`2.Execute(System.Boolean)">
             <summary>
            	Executes the processors in the processor list
             <remarks>
             If abortIfFailure is set to true then the execution will halt on the first failure
            </remarks>
             </summary>
        </member>
        <member name="M:PetShop.Services.ServiceBaseCore`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PetShop.Services.ServiceBaseCore`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:PetShop.Services.ServiceBaseCore`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:PetShop.Services.ServiceBaseCore`2.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PetShop.Services.ServiceBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:PetShop.Services.ServiceBaseCore`2.BulkInsert(PetShop.Business.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:PetShop.Services.ServiceBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:PetShop.Services.ServiceBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:PetShop.Services.ServiceBaseCore`2.Save(`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:PetShop.Services.ServiceBaseCore`2.DeepLoad(`0,System.Boolean,PetShop.Data.DeepLoadType,System.Type[],PetShop.Data.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:PetShop.Services.ServiceBaseCore`2.DeepLoad(PetShop.Business.TList{`0},System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PetShop.Business.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:PetShop.Services.ServiceBaseCore`2.DeepSave(`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:PetShop.Services.ServiceBaseCore`2.DeepSave(`0,PetShop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:PetShop.Services.ServiceBaseCore`2.DeepSave(`0,PetShop.Data.DeepSaveType,System.Type[],System.Collections.Hashtable)">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep save functionality.
            </remarks>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="M:PetShop.Services.ServiceBaseCore`2.DeepSave(PetShop.Business.TList{`0},PetShop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="P:PetShop.Services.ServiceBaseCore`2.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PetShop.Services.ServiceBaseCore`2.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PetShop.Services.ServiceBaseCore`2.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:PetShop.Services.ServiceBaseCore`2.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:PetShop.Services.ServiceBaseCore`2.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:PetShop.Services.ServiceBaseCore`2.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:PetShop.Services.ServiceBaseCore`2.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:PetShop.Services.ServiceBaseCore`2.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:PetShop.Services.ServiceBaseCore`2.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PetShop.Business.Account"/> instance .
            </summary>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.CreateAccount(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PetShop.Business.Account"/> instance.
            </summary>
            <param name="_uniqueId"></param>
            <param name="_email"></param>
            <param name="_firstName"></param>
            <param name="_lastName"></param>
            <param name="_address1"></param>
            <param name="_address2"></param>
            <param name="_city"></param>
            <param name="_state"></param>
            <param name="_zip"></param>
            <param name="_country"></param>
            <param name="_phone"></param>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.Get(PetShop.Business.AccountKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.GetByUniqueId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key FK_Account_UniqueID index.
            </summary>
            <param name="_uniqueId"></param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.GetByUniqueId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key FK_Account_UniqueID index.
            </summary>
            <param name="_uniqueId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.GetByAccountId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key PK_Account index.
            </summary>
            <param name="_accountId"></param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Account"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.GetByAccountId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key PK_Account index.
            </summary>
            <param name="_accountId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Account"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PetShop.Business.Account"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PetShop.Business.Account"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PetShop.Business.TList`1"/> </returns>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PetShop.Business.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Account</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PetShop.Business.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Account</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PetShop.Business.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Account</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Account} of <c>Account</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.Find(PetShop.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Account</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.Find(PetShop.Data.IFilterParameterCollection,PetShop.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PetShop.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Account</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.Find(PetShop.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Account</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.Find(PetShop.Data.IFilterParameterCollection,PetShop.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PetShop.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Account</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.Find(PetShop.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Account</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.Insert(PetShop.Business.Account)">
            <summary>
            public virtual method that Inserts a Account object into the datasource using a transaction.
            </summary>
            <param name="entity">Account object to Insert.</param>
            <remarks>After Inserting into the datasource, the Account object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Account entity = new Account();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AccountService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.Insert(PetShop.Business.TList{PetShop.Business.Account})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Account</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Account</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Account.
             <code><![CDATA[
             TList<Account> list = new TList<Account>();
             Account entity = new Account();
             entity.StringProperty = "foo";
             Account entity2 = new Account();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccountService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.Update(PetShop.Business.Account)">
            <summary>
            public virtual method that Updates a Account object into the datasource using a transaction.
            </summary>
            <param name="entity">Account object to Update.</param>
            <remarks>After Updateing into the datasource, the Account object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Account entity = AccountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AccountService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.Update(PetShop.Business.TList{PetShop.Business.Account})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Account</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Account</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Account.
             <code><![CDATA[
             TList<Account> list = new TList<Account>();
             Account entity = new Account();
             entity.StringProperty = "foo";
             Account entity2 = new Account();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccountService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.Save(PetShop.Business.Account)">
            <summary>
            public virtual method that Saves a Account object into the datasource using a transaction.
            </summary>
            <param name="entity">Account object to Save.</param>
            <remarks>After Saveing into the datasource, the Account object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Account entity = AccountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AccountService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.Save(PetShop.Business.TList{PetShop.Business.Account})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Account</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Account</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Account.
             <code><![CDATA[
             TList<Account> list = new TList<Account>();
             Account entity = new Account();
             entity.StringProperty = "foo";
             Account entity2 = new Account();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccountService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.Delete(PetShop.Business.Account)">
            <summary>
            public virtual method that Deletes a Account object into the datasource using a transaction.
            </summary>
            <param name="entity">Account object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Account object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Account entity = AccountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AccountService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.Delete(PetShop.Business.TList{PetShop.Business.Account})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Account</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Account</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Account.
             <code><![CDATA[
             TList<Account> list = new TList<Account>();
             Account entity = new Account();
             entity.StringProperty = "foo";
             Account entity2 = new Account();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccountService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.Delete(PetShop.Business.AccountKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S int _accountId
            </summary>
            <param name="_accountId">Account pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.DeepLoadByUniqueId(System.Int32,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PetShop.Business.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <param name="_uniqueId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Account Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.DeepLoadByAccountId(System.Int32,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PetShop.Business.Account"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <param name="_accountId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Account Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Account"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.DeepLoad(PetShop.Business.Account)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Account Object</param>
            <remarks>
            <seealso cref="M:PetShop.Services.AccountServiceBase.DeepLoad(PetShop.Business.Account)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.DeepLoad(PetShop.Business.Account,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.AccountServiceBase.DeepLoad(PetShop.Business.Account)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Account Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.DeepLoad(PetShop.Business.Account,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PetShop.Business.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PetShop.Business.Account"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Account Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Account})">
            <summary>
            Deep Loads the <see cref="T:PetShop.Business.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.AccountServiceBase.DeepLoad(PetShop.Business.Account)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PetShop.Business.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Account},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PetShop.Business.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.AccountServiceBase.DeepLoad(PetShop.Business.Account)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PetShop.Business.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Account},System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PetShop.Business.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PetShop.Business.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PetShop.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PetShop.Business.Account"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.DeepSave(PetShop.Business.Account)">
            <summary>
            public virtualDeep Saves the <see cref="T:PetShop.Business.Account"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Account Object</param>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.DeepSave(PetShop.Business.Account,PetShop.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Account object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Account Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Account</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.DeepSave(PetShop.Business.TList{PetShop.Business.Account})">
            <summary>
            Deep Save the entire <see cref="T:PetShop.Business.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Account} Object</param>
        </member>
        <member name="M:PetShop.Services.AccountServiceBase.DeepSave(PetShop.Business.TList{PetShop.Business.Account},PetShop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PetShop.Business.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PetShop.Business.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Account Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PetShop.Services.AccountServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:PetShop.Services.ProductService">
            <summary>
            An component type implementation of the 'Product' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:PetShop.Services.ProductServiceBase">
            <summary>
             An object representation of the 'Product' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Product.cs file instead.
             All custom implementations should be done in the <see cref="T:PetShop.Business.Product"/> class.
             </remarks>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PetShop.Business.Product"/> instance .
            </summary>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.CreateProduct(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PetShop.Business.Product"/> instance.
            </summary>
            <param name="_productId"></param>
            <param name="_categoryId"></param>
            <param name="_name"></param>
            <param name="_descn"></param>
            <param name="_image"></param>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.Get(PetShop.Business.ProductKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.GetByName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key IxProduct1 index.
            </summary>
            <param name="_name"></param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key IxProduct1 index.
            </summary>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.GetByCategoryId(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key IxProduct2 index.
            </summary>
            <param name="_categoryId"></param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.GetByCategoryId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key IxProduct2 index.
            </summary>
            <param name="_categoryId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.GetByCategoryIdName(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key IxProduct3 index.
            </summary>
            <param name="_categoryId"></param>
            <param name="_name"></param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.GetByCategoryIdName(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key IxProduct3 index.
            </summary>
            <param name="_categoryId"></param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.GetByCategoryIdProductIdName(System.String,System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key IxProduct4 index.
            </summary>
            <param name="_categoryId"></param>
            <param name="_productId"></param>
            <param name="_name"></param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.GetByCategoryIdProductIdName(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key IxProduct4 index.
            </summary>
            <param name="_categoryId"></param>
            <param name="_productId"></param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.GetByProductId(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key PK__Product__B40CC6CD0AD2A005 index.
            </summary>
            <param name="_productId"></param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Product"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.GetByProductId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key PK__Product__B40CC6CD0AD2A005 index.
            </summary>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Product"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PetShop.Business.Product"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PetShop.Business.Product"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PetShop.Business.TList`1"/> </returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PetShop.Business.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Product</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PetShop.Business.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Product</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PetShop.Business.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Product</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Product} of <c>Product</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.Find(PetShop.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Product</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.Find(PetShop.Data.IFilterParameterCollection,PetShop.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PetShop.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Product</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.Find(PetShop.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Product</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.Find(PetShop.Data.IFilterParameterCollection,PetShop.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PetShop.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Product</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.Find(PetShop.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Product</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.Insert(PetShop.Business.Product)">
            <summary>
            public virtual method that Inserts a Product object into the datasource using a transaction.
            </summary>
            <param name="entity">Product object to Insert.</param>
            <remarks>After Inserting into the datasource, the Product object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Product entity = new Product();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.Insert(PetShop.Business.TList{PetShop.Business.Product})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Product</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Product</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Product.
             <code><![CDATA[
             TList<Product> list = new TList<Product>();
             Product entity = new Product();
             entity.StringProperty = "foo";
             Product entity2 = new Product();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.Update(PetShop.Business.Product)">
            <summary>
            public virtual method that Updates a Product object into the datasource using a transaction.
            </summary>
            <param name="entity">Product object to Update.</param>
            <remarks>After Updateing into the datasource, the Product object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Product entity = ProductService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.Update(PetShop.Business.TList{PetShop.Business.Product})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Product</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Product</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Product.
             <code><![CDATA[
             TList<Product> list = new TList<Product>();
             Product entity = new Product();
             entity.StringProperty = "foo";
             Product entity2 = new Product();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.Save(PetShop.Business.Product)">
            <summary>
            public virtual method that Saves a Product object into the datasource using a transaction.
            </summary>
            <param name="entity">Product object to Save.</param>
            <remarks>After Saveing into the datasource, the Product object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Product entity = ProductService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.Save(PetShop.Business.TList{PetShop.Business.Product})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Product</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Product</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Product.
             <code><![CDATA[
             TList<Product> list = new TList<Product>();
             Product entity = new Product();
             entity.StringProperty = "foo";
             Product entity2 = new Product();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.Delete(PetShop.Business.Product)">
            <summary>
            public virtual method that Deletes a Product object into the datasource using a transaction.
            </summary>
            <param name="entity">Product object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Product object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Product entity = ProductService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.Delete(PetShop.Business.TList{PetShop.Business.Product})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Product</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Product</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Product.
             <code><![CDATA[
             TList<Product> list = new TList<Product>();
             Product entity = new Product();
             entity.StringProperty = "foo";
             Product entity2 = new Product();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.Delete(PetShop.Business.ProductKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S string _productId
            </summary>
            <param name="_productId">Product pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.DeepLoadByName(System.String,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PetShop.Business.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <param name="_name"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Product Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.DeepLoadByCategoryId(System.String,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PetShop.Business.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <param name="_categoryId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Product Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.DeepLoadByCategoryIdName(System.String,System.String,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PetShop.Business.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <param name="_categoryId"></param>
            <param name="_name"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Product Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.DeepLoadByCategoryIdProductIdName(System.String,System.String,System.String,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PetShop.Business.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <param name="_categoryId"></param>
            <param name="_productId"></param>
            <param name="_name"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Product Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.DeepLoadByProductId(System.String,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PetShop.Business.Product"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <param name="_productId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Product Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Product"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.DeepLoad(PetShop.Business.Product)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Product Object</param>
            <remarks>
            <seealso cref="M:PetShop.Services.ProductServiceBase.DeepLoad(PetShop.Business.Product)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.DeepLoad(PetShop.Business.Product,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.ProductServiceBase.DeepLoad(PetShop.Business.Product)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Product Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.DeepLoad(PetShop.Business.Product,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PetShop.Business.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PetShop.Business.Product"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Product Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Product})">
            <summary>
            Deep Loads the <see cref="T:PetShop.Business.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.ProductServiceBase.DeepLoad(PetShop.Business.Product)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PetShop.Business.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Product},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PetShop.Business.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.ProductServiceBase.DeepLoad(PetShop.Business.Product)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PetShop.Business.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Product},System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PetShop.Business.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PetShop.Business.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PetShop.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PetShop.Business.Product"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.DeepSave(PetShop.Business.Product)">
            <summary>
            public virtualDeep Saves the <see cref="T:PetShop.Business.Product"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Product Object</param>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.DeepSave(PetShop.Business.Product,PetShop.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Product object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Product Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Product</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.DeepSave(PetShop.Business.TList{PetShop.Business.Product})">
            <summary>
            Deep Save the entire <see cref="T:PetShop.Business.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Product} Object</param>
        </member>
        <member name="M:PetShop.Services.ProductServiceBase.DeepSave(PetShop.Business.TList{PetShop.Business.Product},PetShop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PetShop.Business.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PetShop.Business.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Product Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PetShop.Services.ProductServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PetShop.Services.ProductService.#ctor">
            <summary>
            Initializes a new instance of the ProductService class.
            </summary>
        </member>
        <member name="T:PetShop.Services.SupplierService">
            <summary>
            An component type implementation of the 'Supplier' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:PetShop.Services.SupplierServiceBase">
            <summary>
             An object representation of the 'Supplier' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Supplier.cs file instead.
             All custom implementations should be done in the <see cref="T:PetShop.Business.Supplier"/> class.
             </remarks>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PetShop.Business.Supplier"/> instance .
            </summary>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.CreateSupplier(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PetShop.Business.Supplier"/> instance.
            </summary>
            <param name="_suppId"></param>
            <param name="_name"></param>
            <param name="_status"></param>
            <param name="_addr1"></param>
            <param name="_addr2"></param>
            <param name="_city"></param>
            <param name="_state"></param>
            <param name="_zip"></param>
            <param name="_phone"></param>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.Get(PetShop.Business.SupplierKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.GetBySuppId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key PK__Supplier__F099B03F07020F21 index.
            </summary>
            <param name="_suppId"></param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Supplier"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.GetBySuppId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key PK__Supplier__F099B03F07020F21 index.
            </summary>
            <param name="_suppId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Supplier"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PetShop.Business.Supplier"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PetShop.Business.Supplier"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PetShop.Business.TList`1"/> </returns>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PetShop.Business.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Supplier</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PetShop.Business.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Supplier</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PetShop.Business.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Supplier</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Supplier} of <c>Supplier</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.Find(PetShop.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Supplier</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.Find(PetShop.Data.IFilterParameterCollection,PetShop.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PetShop.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Supplier</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.Find(PetShop.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Supplier</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.Find(PetShop.Data.IFilterParameterCollection,PetShop.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PetShop.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Supplier</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.Find(PetShop.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Supplier</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.Insert(PetShop.Business.Supplier)">
            <summary>
            public virtual method that Inserts a Supplier object into the datasource using a transaction.
            </summary>
            <param name="entity">Supplier object to Insert.</param>
            <remarks>After Inserting into the datasource, the Supplier object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Supplier entity = new Supplier();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SupplierService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.Insert(PetShop.Business.TList{PetShop.Business.Supplier})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Supplier</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Supplier</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Supplier.
             <code><![CDATA[
             TList<Supplier> list = new TList<Supplier>();
             Supplier entity = new Supplier();
             entity.StringProperty = "foo";
             Supplier entity2 = new Supplier();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SupplierService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.Update(PetShop.Business.Supplier)">
            <summary>
            public virtual method that Updates a Supplier object into the datasource using a transaction.
            </summary>
            <param name="entity">Supplier object to Update.</param>
            <remarks>After Updateing into the datasource, the Supplier object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Supplier entity = SupplierService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SupplierService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.Update(PetShop.Business.TList{PetShop.Business.Supplier})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Supplier</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Supplier</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Supplier.
             <code><![CDATA[
             TList<Supplier> list = new TList<Supplier>();
             Supplier entity = new Supplier();
             entity.StringProperty = "foo";
             Supplier entity2 = new Supplier();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SupplierService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.Save(PetShop.Business.Supplier)">
            <summary>
            public virtual method that Saves a Supplier object into the datasource using a transaction.
            </summary>
            <param name="entity">Supplier object to Save.</param>
            <remarks>After Saveing into the datasource, the Supplier object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Supplier entity = SupplierService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SupplierService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.Save(PetShop.Business.TList{PetShop.Business.Supplier})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Supplier</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Supplier</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Supplier.
             <code><![CDATA[
             TList<Supplier> list = new TList<Supplier>();
             Supplier entity = new Supplier();
             entity.StringProperty = "foo";
             Supplier entity2 = new Supplier();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SupplierService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.Delete(PetShop.Business.Supplier)">
            <summary>
            public virtual method that Deletes a Supplier object into the datasource using a transaction.
            </summary>
            <param name="entity">Supplier object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Supplier object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Supplier entity = SupplierService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SupplierService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.Delete(PetShop.Business.TList{PetShop.Business.Supplier})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Supplier</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Supplier</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Supplier.
             <code><![CDATA[
             TList<Supplier> list = new TList<Supplier>();
             Supplier entity = new Supplier();
             entity.StringProperty = "foo";
             Supplier entity2 = new Supplier();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SupplierService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.Delete(PetShop.Business.SupplierKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S int _suppId
            </summary>
            <param name="_suppId">Supplier pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.DeepLoadBySuppId(System.Int32,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PetShop.Business.Supplier"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <param name="_suppId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Supplier Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Supplier"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.DeepLoad(PetShop.Business.Supplier)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Supplier Object</param>
            <remarks>
            <seealso cref="M:PetShop.Services.SupplierServiceBase.DeepLoad(PetShop.Business.Supplier)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.DeepLoad(PetShop.Business.Supplier,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.SupplierServiceBase.DeepLoad(PetShop.Business.Supplier)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Supplier Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.DeepLoad(PetShop.Business.Supplier,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PetShop.Business.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PetShop.Business.Supplier"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Supplier Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Supplier})">
            <summary>
            Deep Loads the <see cref="T:PetShop.Business.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.SupplierServiceBase.DeepLoad(PetShop.Business.Supplier)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PetShop.Business.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Supplier},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PetShop.Business.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.SupplierServiceBase.DeepLoad(PetShop.Business.Supplier)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PetShop.Business.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Supplier},System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PetShop.Business.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PetShop.Business.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PetShop.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PetShop.Business.Supplier"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.DeepSave(PetShop.Business.Supplier)">
            <summary>
            public virtualDeep Saves the <see cref="T:PetShop.Business.Supplier"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Supplier Object</param>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.DeepSave(PetShop.Business.Supplier,PetShop.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Supplier object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Supplier Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Supplier</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.DeepSave(PetShop.Business.TList{PetShop.Business.Supplier})">
            <summary>
            Deep Save the entire <see cref="T:PetShop.Business.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Supplier} Object</param>
        </member>
        <member name="M:PetShop.Services.SupplierServiceBase.DeepSave(PetShop.Business.TList{PetShop.Business.Supplier},PetShop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PetShop.Business.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PetShop.Business.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Supplier Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PetShop.Services.SupplierServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PetShop.Services.SupplierService.#ctor">
            <summary>
            Initializes a new instance of the SupplierService class.
            </summary>
        </member>
        <member name="T:PetShop.Services.OrderService">
            <summary>
            An component type implementation of the 'Orders' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:PetShop.Services.OrderServiceBase">
            <summary>
             An object representation of the 'Orders' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Order.cs file instead.
             All custom implementations should be done in the <see cref="T:PetShop.Business.Order"/> class.
             </remarks>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PetShop.Business.Order"/> instance .
            </summary>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.CreateOrder(System.String,System.DateTime,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Decimal,System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PetShop.Business.Order"/> instance.
            </summary>
            <param name="_userId"></param>
            <param name="_orderDate"></param>
            <param name="_shipAddr1"></param>
            <param name="_shipAddr2"></param>
            <param name="_shipCity"></param>
            <param name="_shipState"></param>
            <param name="_shipZip"></param>
            <param name="_shipCountry"></param>
            <param name="_billAddr1"></param>
            <param name="_billAddr2"></param>
            <param name="_billCity"></param>
            <param name="_billState"></param>
            <param name="_billZip"></param>
            <param name="_billCountry"></param>
            <param name="_courier"></param>
            <param name="_totalPrice"></param>
            <param name="_billToFirstName"></param>
            <param name="_billToLastName"></param>
            <param name="_shipToFirstName"></param>
            <param name="_shipToLastName"></param>
            <param name="_authorizationNumber"></param>
            <param name="_locale"></param>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.Get(PetShop.Business.OrderKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.GetByOrderId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key PK__Orders__C3905BCF7F60ED59 index.
            </summary>
            <param name="_orderId"></param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Order"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.GetByOrderId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key PK__Orders__C3905BCF7F60ED59 index.
            </summary>
            <param name="_orderId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Order"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PetShop.Business.Order"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PetShop.Business.Order"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PetShop.Business.TList`1"/> </returns>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PetShop.Business.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Order</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PetShop.Business.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Order</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PetShop.Business.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Order</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Order} of <c>Order</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.Find(PetShop.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Order</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.Find(PetShop.Data.IFilterParameterCollection,PetShop.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PetShop.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Order</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.Find(PetShop.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Order</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.Find(PetShop.Data.IFilterParameterCollection,PetShop.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PetShop.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Order</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.Find(PetShop.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Order</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.Insert(PetShop.Business.Order)">
            <summary>
            public virtual method that Inserts a Order object into the datasource using a transaction.
            </summary>
            <param name="entity">Order object to Insert.</param>
            <remarks>After Inserting into the datasource, the Order object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Order entity = new Order();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	OrderService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.Insert(PetShop.Business.TList{PetShop.Business.Order})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Order</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Order</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Order.
             <code><![CDATA[
             TList<Order> list = new TList<Order>();
             Order entity = new Order();
             entity.StringProperty = "foo";
             Order entity2 = new Order();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.Update(PetShop.Business.Order)">
            <summary>
            public virtual method that Updates a Order object into the datasource using a transaction.
            </summary>
            <param name="entity">Order object to Update.</param>
            <remarks>After Updateing into the datasource, the Order object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Order entity = OrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	OrderService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.Update(PetShop.Business.TList{PetShop.Business.Order})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Order</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Order</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Order.
             <code><![CDATA[
             TList<Order> list = new TList<Order>();
             Order entity = new Order();
             entity.StringProperty = "foo";
             Order entity2 = new Order();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.Save(PetShop.Business.Order)">
            <summary>
            public virtual method that Saves a Order object into the datasource using a transaction.
            </summary>
            <param name="entity">Order object to Save.</param>
            <remarks>After Saveing into the datasource, the Order object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Order entity = OrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	OrderService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.Save(PetShop.Business.TList{PetShop.Business.Order})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Order</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Order</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Order.
             <code><![CDATA[
             TList<Order> list = new TList<Order>();
             Order entity = new Order();
             entity.StringProperty = "foo";
             Order entity2 = new Order();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.Delete(PetShop.Business.Order)">
            <summary>
            public virtual method that Deletes a Order object into the datasource using a transaction.
            </summary>
            <param name="entity">Order object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Order object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Order entity = OrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	OrderService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.Delete(PetShop.Business.TList{PetShop.Business.Order})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Order</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Order</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Order.
             <code><![CDATA[
             TList<Order> list = new TList<Order>();
             Order entity = new Order();
             entity.StringProperty = "foo";
             Order entity2 = new Order();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.Delete(PetShop.Business.OrderKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S int _orderId
            </summary>
            <param name="_orderId">Order pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.DeepLoadByOrderId(System.Int32,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PetShop.Business.Order"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <param name="_orderId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Order Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Order"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.DeepLoad(PetShop.Business.Order)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Order Object</param>
            <remarks>
            <seealso cref="M:PetShop.Services.OrderServiceBase.DeepLoad(PetShop.Business.Order)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.DeepLoad(PetShop.Business.Order,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.OrderServiceBase.DeepLoad(PetShop.Business.Order)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Order Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.DeepLoad(PetShop.Business.Order,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PetShop.Business.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PetShop.Business.Order"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Order Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Order})">
            <summary>
            Deep Loads the <see cref="T:PetShop.Business.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.OrderServiceBase.DeepLoad(PetShop.Business.Order)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PetShop.Business.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Order},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PetShop.Business.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.OrderServiceBase.DeepLoad(PetShop.Business.Order)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PetShop.Business.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Order},System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PetShop.Business.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PetShop.Business.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PetShop.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PetShop.Business.Order"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.DeepSave(PetShop.Business.Order)">
            <summary>
            public virtualDeep Saves the <see cref="T:PetShop.Business.Order"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Order Object</param>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.DeepSave(PetShop.Business.Order,PetShop.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Order object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Order Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Order</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.DeepSave(PetShop.Business.TList{PetShop.Business.Order})">
            <summary>
            Deep Save the entire <see cref="T:PetShop.Business.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Order} Object</param>
        </member>
        <member name="M:PetShop.Services.OrderServiceBase.DeepSave(PetShop.Business.TList{PetShop.Business.Order},PetShop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PetShop.Business.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PetShop.Business.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Order Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PetShop.Services.OrderServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PetShop.Services.OrderService.#ctor">
            <summary>
            Initializes a new instance of the OrderService class.
            </summary>
        </member>
        <member name="T:PetShop.Services.AccountService">
            <summary>
            An component type implementation of the 'Account' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:PetShop.Services.AccountService.#ctor">
            <summary>
            Initializes a new instance of the AccountService class.
            </summary>
        </member>
        <member name="T:PetShop.Services.OrderStatusService">
            <summary>
            An component type implementation of the 'OrderStatus' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:PetShop.Services.OrderStatusServiceBase">
            <summary>
             An object representation of the 'OrderStatus' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the OrderStatus.cs file instead.
             All custom implementations should be done in the <see cref="T:PetShop.Business.OrderStatus"/> class.
             </remarks>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PetShop.Business.OrderStatus"/> instance .
            </summary>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.CreateOrderStatus(System.Int32,System.Int32,System.DateTime,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PetShop.Business.OrderStatus"/> instance.
            </summary>
            <param name="_orderId"></param>
            <param name="_lineNum"></param>
            <param name="_timestamp"></param>
            <param name="_status"></param>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.GetByOrderId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the FK__OrderStat__Order__060DEAE8 key.
            	FK__OrderStat__Order__060DEAE8 Description: 
            </summary>
            <param name="_orderId"></param>
            <returns>Returns a generic collection of OrderStatus objects.</returns>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.GetByOrderId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the FK__OrderStat__Order__060DEAE8 key.
            	FK__OrderStat__Order__060DEAE8 Description: 
            </summary>
            <param name="_orderId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PetShop.Business.TList`1"/> of <c>OrderStatus</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.Get(PetShop.Business.OrderStatusKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.GetByOrderIdLineNum(System.Int32,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key PkOrderStatus index.
            </summary>
            <param name="_orderId"></param>
            <param name="_lineNum"></param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.OrderStatus"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.GetByOrderIdLineNum(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key PkOrderStatus index.
            </summary>
            <param name="_orderId"></param>
            <param name="_lineNum"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.OrderStatus"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PetShop.Business.OrderStatus"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PetShop.Business.OrderStatus"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PetShop.Business.TList`1"/> </returns>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PetShop.Business.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OrderStatus</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PetShop.Business.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OrderStatus</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PetShop.Business.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OrderStatus</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{OrderStatus} of <c>OrderStatus</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.Find(PetShop.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>OrderStatus</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.Find(PetShop.Data.IFilterParameterCollection,PetShop.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PetShop.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>OrderStatus</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.Find(PetShop.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>OrderStatus</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.Find(PetShop.Data.IFilterParameterCollection,PetShop.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PetShop.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>OrderStatus</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.Find(PetShop.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>OrderStatus</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.Insert(PetShop.Business.OrderStatus)">
            <summary>
            public virtual method that Inserts a OrderStatus object into the datasource using a transaction.
            </summary>
            <param name="entity">OrderStatus object to Insert.</param>
            <remarks>After Inserting into the datasource, the OrderStatus object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            OrderStatus entity = new OrderStatus();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	OrderStatusService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.Insert(PetShop.Business.TList{PetShop.Business.OrderStatus})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OrderStatus</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>OrderStatus</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of OrderStatus.
             <code><![CDATA[
             TList<OrderStatus> list = new TList<OrderStatus>();
             OrderStatus entity = new OrderStatus();
             entity.StringProperty = "foo";
             OrderStatus entity2 = new OrderStatus();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderStatusService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.Update(PetShop.Business.OrderStatus)">
            <summary>
            public virtual method that Updates a OrderStatus object into the datasource using a transaction.
            </summary>
            <param name="entity">OrderStatus object to Update.</param>
            <remarks>After Updateing into the datasource, the OrderStatus object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            OrderStatus entity = OrderStatusService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	OrderStatusService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.Update(PetShop.Business.TList{PetShop.Business.OrderStatus})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OrderStatus</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>OrderStatus</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of OrderStatus.
             <code><![CDATA[
             TList<OrderStatus> list = new TList<OrderStatus>();
             OrderStatus entity = new OrderStatus();
             entity.StringProperty = "foo";
             OrderStatus entity2 = new OrderStatus();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderStatusService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.Save(PetShop.Business.OrderStatus)">
            <summary>
            public virtual method that Saves a OrderStatus object into the datasource using a transaction.
            </summary>
            <param name="entity">OrderStatus object to Save.</param>
            <remarks>After Saveing into the datasource, the OrderStatus object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            OrderStatus entity = OrderStatusService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	OrderStatusService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.Save(PetShop.Business.TList{PetShop.Business.OrderStatus})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OrderStatus</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>OrderStatus</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of OrderStatus.
             <code><![CDATA[
             TList<OrderStatus> list = new TList<OrderStatus>();
             OrderStatus entity = new OrderStatus();
             entity.StringProperty = "foo";
             OrderStatus entity2 = new OrderStatus();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderStatusService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.Delete(PetShop.Business.OrderStatus)">
            <summary>
            public virtual method that Deletes a OrderStatus object into the datasource using a transaction.
            </summary>
            <param name="entity">OrderStatus object to Delete.</param>
            <remarks>After Deleteing into the datasource, the OrderStatus object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            OrderStatus entity = OrderStatusService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	OrderStatusService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.Delete(PetShop.Business.TList{PetShop.Business.OrderStatus})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OrderStatus</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>OrderStatus</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of OrderStatus.
             <code><![CDATA[
             TList<OrderStatus> list = new TList<OrderStatus>();
             OrderStatus entity = new OrderStatus();
             entity.StringProperty = "foo";
             OrderStatus entity2 = new OrderStatus();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderStatusService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.Delete(PetShop.Business.OrderStatusKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S int _orderId, int _lineNum
            </summary>
            <param name="_orderId">OrderStatus pk id.</param>
            <param name="_lineNum">OrderStatus pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.DeepLoadByOrderIdLineNum(System.Int32,System.Int32,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PetShop.Business.OrderStatus"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <param name="_orderId"></param>
            <param name="_lineNum"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">OrderStatus Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.OrderStatus"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.DeepLoad(PetShop.Business.OrderStatus)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">OrderStatus Object</param>
            <remarks>
            <seealso cref="M:PetShop.Services.OrderStatusServiceBase.DeepLoad(PetShop.Business.OrderStatus)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.DeepLoad(PetShop.Business.OrderStatus,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.OrderStatusServiceBase.DeepLoad(PetShop.Business.OrderStatus)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">OrderStatus Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.DeepLoad(PetShop.Business.OrderStatus,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PetShop.Business.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PetShop.Business.OrderStatus"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">OrderStatus Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.OrderStatus})">
            <summary>
            Deep Loads the <see cref="T:PetShop.Business.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.OrderStatusServiceBase.DeepLoad(PetShop.Business.OrderStatus)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PetShop.Business.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.OrderStatus},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PetShop.Business.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.OrderStatusServiceBase.DeepLoad(PetShop.Business.OrderStatus)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PetShop.Business.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.OrderStatus},System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PetShop.Business.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PetShop.Business.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PetShop.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PetShop.Business.OrderStatus"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.DeepSave(PetShop.Business.OrderStatus)">
            <summary>
            public virtualDeep Saves the <see cref="T:PetShop.Business.OrderStatus"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">OrderStatus Object</param>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.DeepSave(PetShop.Business.OrderStatus,PetShop.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the OrderStatus object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">OrderStatus Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>OrderStatus</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.DeepSave(PetShop.Business.TList{PetShop.Business.OrderStatus})">
            <summary>
            Deep Save the entire <see cref="T:PetShop.Business.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{OrderStatus} Object</param>
        </member>
        <member name="M:PetShop.Services.OrderStatusServiceBase.DeepSave(PetShop.Business.TList{PetShop.Business.OrderStatus},PetShop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PetShop.Business.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PetShop.Business.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">OrderStatus Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PetShop.Services.OrderStatusServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PetShop.Services.OrderStatusService.#ctor">
            <summary>
            Initializes a new instance of the OrderStatusService class.
            </summary>
        </member>
        <member name="T:PetShop.Services.CartService">
            <summary>
            An component type implementation of the 'Cart' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:PetShop.Services.CartServiceBase">
            <summary>
             An object representation of the 'Cart' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Cart.cs file instead.
             All custom implementations should be done in the <see cref="T:PetShop.Business.Cart"/> class.
             </remarks>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PetShop.Business.Cart"/> instance .
            </summary>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.CreateCart(System.Int32,System.String,System.String,System.String,System.Decimal,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:PetShop.Business.Cart"/> instance.
            </summary>
            <param name="_uniqueId"></param>
            <param name="_itemId"></param>
            <param name="_name"></param>
            <param name="_type"></param>
            <param name="_price"></param>
            <param name="_categoryId"></param>
            <param name="_productId"></param>
            <param name="_isShoppingCart"></param>
            <param name="_quantity"></param>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.Get(PetShop.Business.CartKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.GetByUniqueId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key FK_Cart_UniqueID index.
            </summary>
            <param name="_uniqueId"></param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.GetByUniqueId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key FK_Cart_UniqueID index.
            </summary>
            <param name="_uniqueId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.GetByIsShoppingCart(System.Boolean)">
            <summary>
             method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key IX_SHOPPINGCART index.
            </summary>
            <param name="_isShoppingCart"></param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.GetByIsShoppingCart(System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key IX_SHOPPINGCART index.
            </summary>
            <param name="_isShoppingCart"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.GetByCartId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key PK_Cart index.
            </summary>
            <param name="_cartId"></param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Cart"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.GetByCartId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key PK_Cart index.
            </summary>
            <param name="_cartId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Cart"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PetShop.Business.Cart"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PetShop.Business.Cart"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PetShop.Business.TList`1"/> </returns>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PetShop.Business.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Cart</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PetShop.Business.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Cart</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PetShop.Business.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Cart</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Cart} of <c>Cart</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.Find(PetShop.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Cart</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.Find(PetShop.Data.IFilterParameterCollection,PetShop.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PetShop.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Cart</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.Find(PetShop.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Cart</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.Find(PetShop.Data.IFilterParameterCollection,PetShop.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PetShop.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Cart</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.Find(PetShop.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Cart</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.Insert(PetShop.Business.Cart)">
            <summary>
            public virtual method that Inserts a Cart object into the datasource using a transaction.
            </summary>
            <param name="entity">Cart object to Insert.</param>
            <remarks>After Inserting into the datasource, the Cart object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Cart entity = new Cart();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CartService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.Insert(PetShop.Business.TList{PetShop.Business.Cart})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Cart</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Cart</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Cart.
             <code><![CDATA[
             TList<Cart> list = new TList<Cart>();
             Cart entity = new Cart();
             entity.StringProperty = "foo";
             Cart entity2 = new Cart();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CartService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.Update(PetShop.Business.Cart)">
            <summary>
            public virtual method that Updates a Cart object into the datasource using a transaction.
            </summary>
            <param name="entity">Cart object to Update.</param>
            <remarks>After Updateing into the datasource, the Cart object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Cart entity = CartService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CartService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.Update(PetShop.Business.TList{PetShop.Business.Cart})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Cart</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Cart</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Cart.
             <code><![CDATA[
             TList<Cart> list = new TList<Cart>();
             Cart entity = new Cart();
             entity.StringProperty = "foo";
             Cart entity2 = new Cart();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CartService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.Save(PetShop.Business.Cart)">
            <summary>
            public virtual method that Saves a Cart object into the datasource using a transaction.
            </summary>
            <param name="entity">Cart object to Save.</param>
            <remarks>After Saveing into the datasource, the Cart object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Cart entity = CartService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CartService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.Save(PetShop.Business.TList{PetShop.Business.Cart})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Cart</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Cart</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Cart.
             <code><![CDATA[
             TList<Cart> list = new TList<Cart>();
             Cart entity = new Cart();
             entity.StringProperty = "foo";
             Cart entity2 = new Cart();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CartService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.Delete(PetShop.Business.Cart)">
            <summary>
            public virtual method that Deletes a Cart object into the datasource using a transaction.
            </summary>
            <param name="entity">Cart object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Cart object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Cart entity = CartService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CartService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.Delete(PetShop.Business.TList{PetShop.Business.Cart})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Cart</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Cart</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Cart.
             <code><![CDATA[
             TList<Cart> list = new TList<Cart>();
             Cart entity = new Cart();
             entity.StringProperty = "foo";
             Cart entity2 = new Cart();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CartService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.Delete(PetShop.Business.CartKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S int _cartId
            </summary>
            <param name="_cartId">Cart pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.DeepLoadByUniqueId(System.Int32,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PetShop.Business.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <param name="_uniqueId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Cart Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.DeepLoadByIsShoppingCart(System.Boolean,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PetShop.Business.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <param name="_isShoppingCart"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Cart Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.DeepLoadByCartId(System.Int32,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PetShop.Business.Cart"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <param name="_cartId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Cart Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Cart"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.DeepLoad(PetShop.Business.Cart)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Cart Object</param>
            <remarks>
            <seealso cref="M:PetShop.Services.CartServiceBase.DeepLoad(PetShop.Business.Cart)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.DeepLoad(PetShop.Business.Cart,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.CartServiceBase.DeepLoad(PetShop.Business.Cart)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Cart Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.DeepLoad(PetShop.Business.Cart,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PetShop.Business.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PetShop.Business.Cart"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Cart Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Cart})">
            <summary>
            Deep Loads the <see cref="T:PetShop.Business.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.CartServiceBase.DeepLoad(PetShop.Business.Cart)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PetShop.Business.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Cart},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PetShop.Business.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.CartServiceBase.DeepLoad(PetShop.Business.Cart)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PetShop.Business.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Cart},System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PetShop.Business.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PetShop.Business.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PetShop.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PetShop.Business.Cart"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.DeepSave(PetShop.Business.Cart)">
            <summary>
            public virtualDeep Saves the <see cref="T:PetShop.Business.Cart"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Cart Object</param>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.DeepSave(PetShop.Business.Cart,PetShop.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Cart object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Cart Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Cart</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.DeepSave(PetShop.Business.TList{PetShop.Business.Cart})">
            <summary>
            Deep Save the entire <see cref="T:PetShop.Business.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Cart} Object</param>
        </member>
        <member name="M:PetShop.Services.CartServiceBase.DeepSave(PetShop.Business.TList{PetShop.Business.Cart},PetShop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PetShop.Business.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PetShop.Business.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Cart Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PetShop.Services.CartServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PetShop.Services.CartService.#ctor">
            <summary>
            Initializes a new instance of the CartService class.
            </summary>
        </member>
        <member name="M:PetShop.Services.CartService.SaveOrderLineItems(System.Int32,PetShop.Business.TList{PetShop.Business.Cart})">
            <summary>
            Saves the new order line items
            </summary>
            <param name="orderId">The order id of the item</param>
            <param name="cartItems">The cart items</param>
        </member>
        <member name="M:PetShop.Services.CustomCode.PetShopProfileProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
            <summary>
            Returns the collection of settings property values for the specified application instance and settings property group.
            </summary>
            <returns>
            A <see cref="T:System.Configuration.SettingsPropertyValueCollection"/> containing the values for the specified settings property group.
            </returns>
            <param name="context">A <see cref="T:System.Configuration.SettingsContext"/> describing the current application use.
                            </param><param name="collection">A <see cref="T:System.Configuration.SettingsPropertyCollection"/> containing the settings property group whose values are to be retrieved.
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:PetShop.Services.CustomCode.PetShopProfileProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)">
            <summary>
            Sets the values of the specified group of property settings.
            </summary>
            <param name="context">A <see cref="T:System.Configuration.SettingsContext"/> describing the current application usage.
                            </param><param name="collection">A <see cref="T:System.Configuration.SettingsPropertyValueCollection"/> representing the group of property settings to set.
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:PetShop.Services.CustomCode.PetShopProfileProvider.DeleteProfiles(System.Web.Profile.ProfileInfoCollection)">
            <summary>
            When overridden in a derived class, deletes profile properties and information for the supplied list of profiles.
            </summary>
            <returns>
            The number of profiles deleted from the data source.
            </returns>
            <param name="profiles">A <see cref="T:System.Web.Profile.ProfileInfoCollection"/>  of information about profiles that are to be deleted.
                            </param>
        </member>
        <member name="M:PetShop.Services.CustomCode.PetShopProfileProvider.DeleteProfiles(System.String[])">
            <summary>
            When overridden in a derived class, deletes profile properties and information for profiles that match the supplied list of user names.
            </summary>
            <returns>
            The number of profiles deleted from the data source.
            </returns>
            <param name="usernames">A string array of user names for profiles to be deleted.
                            </param>
        </member>
        <member name="M:PetShop.Services.CustomCode.PetShopProfileProvider.DeleteInactiveProfiles(System.Web.Profile.ProfileAuthenticationOption,System.DateTime)">
            <summary>
            When overridden in a derived class, deletes all user-profile data for profiles in which the last activity date occurred before the specified date.
            </summary>
            <returns>
            The number of profiles deleted from the data source.
            </returns>
            <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption"/> values, specifying whether anonymous, authenticated, or both types of profiles are deleted.
                            </param><param name="userInactiveSinceDate">A <see cref="T:System.DateTime"/> that identifies which user profiles are considered inactive. If the <see cref="P:System.Web.Profile.ProfileInfo.LastActivityDate"/>  value of a user profile occurs on or before this date and time, the profile is considered inactive.
                            </param>
        </member>
        <member name="M:PetShop.Services.CustomCode.PetShopProfileProvider.GetNumberOfInactiveProfiles(System.Web.Profile.ProfileAuthenticationOption,System.DateTime)">
            <summary>
            When overridden in a derived class, returns the number of profiles in which the last activity date occurred on or before the specified date.
            </summary>
            <returns>
            The number of profiles in which the last activity date occurred on or before the specified date.
            </returns>
            <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption"/> values, specifying whether anonymous, authenticated, or both types of profiles are returned.
                            </param><param name="userInactiveSinceDate">A <see cref="T:System.DateTime"/> that identifies which user profiles are considered inactive. If the <see cref="P:System.Web.Profile.ProfileInfo.LastActivityDate"/>  of a user profile occurs on or before this date and time, the profile is considered inactive.
                            </param>
        </member>
        <member name="M:PetShop.Services.CustomCode.PetShopProfileProvider.GetAllProfiles(System.Web.Profile.ProfileAuthenticationOption,System.Int32,System.Int32,System.Int32@)">
            <summary>
            When overridden in a derived class, retrieves user profile data for all profiles in the data source.
            </summary>
            <returns>
            A <see cref="T:System.Web.Profile.ProfileInfoCollection"/> containing user-profile information for all profiles in the data source.
            </returns>
            <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption"/> values, specifying whether anonymous, authenticated, or both types of profiles are returned.
                            </param><param name="pageIndex">The index of the page of results to return.
                            </param><param name="pageSize">The size of the page of results to return.
                            </param><param name="totalRecords">When this method returns, contains the total number of profiles.
                            </param>
        </member>
        <member name="M:PetShop.Services.CustomCode.PetShopProfileProvider.GetAllInactiveProfiles(System.Web.Profile.ProfileAuthenticationOption,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            When overridden in a derived class, retrieves user-profile data from the data source for profiles in which the last activity date occurred on or before the specified date.
            </summary>
            <returns>
            A <see cref="T:System.Web.Profile.ProfileInfoCollection"/> containing user-profile information about the inactive profiles.
            </returns>
            <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption"/> values, specifying whether anonymous, authenticated, or both types of profiles are returned.
                            </param><param name="userInactiveSinceDate">A <see cref="T:System.DateTime"/> that identifies which user profiles are considered inactive. If the <see cref="P:System.Web.Profile.ProfileInfo.LastActivityDate"/>  of a user profile occurs on or before this date and time, the profile is considered inactive.
                            </param><param name="pageIndex">The index of the page of results to return.
                            </param><param name="pageSize">The size of the page of results to return.
                            </param><param name="totalRecords">When this method returns, contains the total number of profiles.
                            </param>
        </member>
        <member name="M:PetShop.Services.CustomCode.PetShopProfileProvider.FindProfilesByUserName(System.Web.Profile.ProfileAuthenticationOption,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            When overridden in a derived class, retrieves profile information for profiles in which the user name matches the specified user names.
            </summary>
            <returns>
            A <see cref="T:System.Web.Profile.ProfileInfoCollection"/> containing user-profile information for profiles where the user name matches the supplied <paramref name="usernameToMatch"/> parameter.
            </returns>
            <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption"/> values, specifying whether anonymous, authenticated, or both types of profiles are returned.
                            </param><param name="usernameToMatch">The user name to search for.
                            </param><param name="pageIndex">The index of the page of results to return.
                            </param><param name="pageSize">The size of the page of results to return.
                            </param><param name="totalRecords">When this method returns, contains the total number of profiles.
                            </param>
        </member>
        <member name="M:PetShop.Services.CustomCode.PetShopProfileProvider.FindInactiveProfilesByUserName(System.Web.Profile.ProfileAuthenticationOption,System.String,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            When overridden in a derived class, retrieves profile information for profiles in which the last activity date occurred on or before the specified date and the user name matches the specified user name.
            </summary>
            <returns>
            A <see cref="T:System.Web.Profile.ProfileInfoCollection"/> containing user profile information for inactive profiles where the user name matches the supplied <paramref name="usernameToMatch"/> parameter.
            </returns>
            <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption"/> values, specifying whether anonymous, authenticated, or both types of profiles are returned.
                            </param><param name="usernameToMatch">The user name to search for.
                            </param><param name="userInactiveSinceDate">A <see cref="T:System.DateTime"/> that identifies which user profiles are considered inactive. If the <see cref="P:System.Web.Profile.ProfileInfo.LastActivityDate"/> value of a user profile occurs on or before this date and time, the profile is considered inactive.
                            </param><param name="pageIndex">The index of the page of results to return.
                            </param><param name="pageSize">The size of the page of results to return.
                            </param><param name="totalRecords">When this method returns, contains the total number of profiles.
                            </param>
        </member>
        <member name="M:PetShop.Services.CustomCode.PetShopProfileProvider.UpdateAccount(PetShop.Business.Account@,PetShop.Business.Address)">
            <summary>
            Updartes an account from an address class.
            </summary>
            <param name="account">The account.</param>
            <param name="address">The address.</param>
        </member>
        <member name="M:PetShop.Services.CustomCode.PetShopProfileProvider.DeleteProfile(System.String)">
            <summary>
            Deletes profile data from the database for the specified user name.
            </summary>
            <param name="username">username.</param>
            <returns>true if it was deleted.</returns>
        </member>
        <member name="P:PetShop.Services.CustomCode.PetShopProfileProvider.ApplicationName">
            <summary>
            Gets or sets the name of the currently running application.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that contains the application's shortened name, which does not contain a full path or extension, for example, SimpleAppSettings.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:PetShop.Services.SecurityContext`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:PetShop.Services.SecurityContext`1.#ctor">
            <summary>
             Creates a new <see cref="T:System.Security.SecurityContext"/> instance.
            </summary>
        </member>
        <member name="T:PetShop.Services.IProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:PetShop.Services.IProcessorResult.AddBrokenRulesList(System.Type,PetShop.Business.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:PetShop.Services.IProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PetShop.Services.IProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:PetShop.Services.IProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation.
            </summary>
        </member>
        <member name="T:PetShop.Services.CategoryService">
            <summary>
            An component type implementation of the 'Category' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:PetShop.Services.CategoryServiceBase">
            <summary>
             An object representation of the 'Category' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Category.cs file instead.
             All custom implementations should be done in the <see cref="T:PetShop.Business.Category"/> class.
             </remarks>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PetShop.Business.Category"/> instance .
            </summary>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.CreateCategory(System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PetShop.Business.Category"/> instance.
            </summary>
            <param name="_categoryId"></param>
            <param name="_name"></param>
            <param name="_descn"></param>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.Get(PetShop.Business.CategoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.GetByCategoryId(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key PK__Category__19093A0B7F60ED59 index.
            </summary>
            <param name="_categoryId"></param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Category"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.GetByCategoryId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key PK__Category__19093A0B7F60ED59 index.
            </summary>
            <param name="_categoryId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Category"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PetShop.Business.Category"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PetShop.Business.Category"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PetShop.Business.TList`1"/> </returns>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PetShop.Business.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Category</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PetShop.Business.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Category</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PetShop.Business.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Category</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Category} of <c>Category</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.Find(PetShop.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Category</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.Find(PetShop.Data.IFilterParameterCollection,PetShop.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PetShop.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Category</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.Find(PetShop.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Category</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.Find(PetShop.Data.IFilterParameterCollection,PetShop.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PetShop.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Category</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.Find(PetShop.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Category</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.Insert(PetShop.Business.Category)">
            <summary>
            public virtual method that Inserts a Category object into the datasource using a transaction.
            </summary>
            <param name="entity">Category object to Insert.</param>
            <remarks>After Inserting into the datasource, the Category object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Category entity = new Category();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CategoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.Insert(PetShop.Business.TList{PetShop.Business.Category})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Category</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Category</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Category.
             <code><![CDATA[
             TList<Category> list = new TList<Category>();
             Category entity = new Category();
             entity.StringProperty = "foo";
             Category entity2 = new Category();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CategoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.Update(PetShop.Business.Category)">
            <summary>
            public virtual method that Updates a Category object into the datasource using a transaction.
            </summary>
            <param name="entity">Category object to Update.</param>
            <remarks>After Updateing into the datasource, the Category object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Category entity = CategoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CategoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.Update(PetShop.Business.TList{PetShop.Business.Category})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Category</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Category</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Category.
             <code><![CDATA[
             TList<Category> list = new TList<Category>();
             Category entity = new Category();
             entity.StringProperty = "foo";
             Category entity2 = new Category();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CategoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.Save(PetShop.Business.Category)">
            <summary>
            public virtual method that Saves a Category object into the datasource using a transaction.
            </summary>
            <param name="entity">Category object to Save.</param>
            <remarks>After Saveing into the datasource, the Category object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Category entity = CategoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CategoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.Save(PetShop.Business.TList{PetShop.Business.Category})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Category</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Category</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Category.
             <code><![CDATA[
             TList<Category> list = new TList<Category>();
             Category entity = new Category();
             entity.StringProperty = "foo";
             Category entity2 = new Category();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CategoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.Delete(PetShop.Business.Category)">
            <summary>
            public virtual method that Deletes a Category object into the datasource using a transaction.
            </summary>
            <param name="entity">Category object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Category object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Category entity = CategoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CategoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.Delete(PetShop.Business.TList{PetShop.Business.Category})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Category</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Category</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Category.
             <code><![CDATA[
             TList<Category> list = new TList<Category>();
             Category entity = new Category();
             entity.StringProperty = "foo";
             Category entity2 = new Category();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CategoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.Delete(PetShop.Business.CategoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S string _categoryId
            </summary>
            <param name="_categoryId">Category pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.DeepLoadByCategoryId(System.String,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PetShop.Business.Category"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <param name="_categoryId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Category Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Category"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.DeepLoad(PetShop.Business.Category)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Category Object</param>
            <remarks>
            <seealso cref="M:PetShop.Services.CategoryServiceBase.DeepLoad(PetShop.Business.Category)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.DeepLoad(PetShop.Business.Category,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.CategoryServiceBase.DeepLoad(PetShop.Business.Category)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Category Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.DeepLoad(PetShop.Business.Category,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PetShop.Business.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PetShop.Business.Category"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Category Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Category})">
            <summary>
            Deep Loads the <see cref="T:PetShop.Business.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.CategoryServiceBase.DeepLoad(PetShop.Business.Category)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PetShop.Business.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Category},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PetShop.Business.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.CategoryServiceBase.DeepLoad(PetShop.Business.Category)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PetShop.Business.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Category},System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PetShop.Business.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PetShop.Business.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PetShop.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PetShop.Business.Category"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.DeepSave(PetShop.Business.Category)">
            <summary>
            public virtualDeep Saves the <see cref="T:PetShop.Business.Category"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Category Object</param>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.DeepSave(PetShop.Business.Category,PetShop.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Category object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Category Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Category</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.DeepSave(PetShop.Business.TList{PetShop.Business.Category})">
            <summary>
            Deep Save the entire <see cref="T:PetShop.Business.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Category} Object</param>
        </member>
        <member name="M:PetShop.Services.CategoryServiceBase.DeepSave(PetShop.Business.TList{PetShop.Business.Category},PetShop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PetShop.Business.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PetShop.Business.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Category Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PetShop.Services.CategoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PetShop.Services.CategoryService.#ctor">
            <summary>
            Initializes a new instance of the CategoryService class.
            </summary>
        </member>
        <member name="T:PetShop.Services.InventoryService">
            <summary>
            An component type implementation of the 'Inventory' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:PetShop.Services.InventoryServiceBase">
            <summary>
             An object representation of the 'Inventory' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Inventory.cs file instead.
             All custom implementations should be done in the <see cref="T:PetShop.Business.Inventory"/> class.
             </remarks>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PetShop.Business.Inventory"/> instance .
            </summary>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.CreateInventory(System.String,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:PetShop.Business.Inventory"/> instance.
            </summary>
            <param name="_itemId"></param>
            <param name="_qty"></param>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.Get(PetShop.Business.InventoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.GetByItemId(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key PK__Inventor__727E838B03317E3D index.
            </summary>
            <param name="_itemId"></param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Inventory"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.GetByItemId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key PK__Inventor__727E838B03317E3D index.
            </summary>
            <param name="_itemId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Inventory"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PetShop.Business.Inventory"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PetShop.Business.Inventory"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PetShop.Business.TList`1"/> </returns>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PetShop.Business.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Inventory</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PetShop.Business.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Inventory</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PetShop.Business.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Inventory</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Inventory} of <c>Inventory</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.Find(PetShop.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Inventory</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.Find(PetShop.Data.IFilterParameterCollection,PetShop.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PetShop.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Inventory</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.Find(PetShop.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Inventory</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.Find(PetShop.Data.IFilterParameterCollection,PetShop.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PetShop.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Inventory</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.Find(PetShop.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Inventory</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.Insert(PetShop.Business.Inventory)">
            <summary>
            public virtual method that Inserts a Inventory object into the datasource using a transaction.
            </summary>
            <param name="entity">Inventory object to Insert.</param>
            <remarks>After Inserting into the datasource, the Inventory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Inventory entity = new Inventory();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	InventoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.Insert(PetShop.Business.TList{PetShop.Business.Inventory})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Inventory</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Inventory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Inventory.
             <code><![CDATA[
             TList<Inventory> list = new TList<Inventory>();
             Inventory entity = new Inventory();
             entity.StringProperty = "foo";
             Inventory entity2 = new Inventory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	InventoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.Update(PetShop.Business.Inventory)">
            <summary>
            public virtual method that Updates a Inventory object into the datasource using a transaction.
            </summary>
            <param name="entity">Inventory object to Update.</param>
            <remarks>After Updateing into the datasource, the Inventory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Inventory entity = InventoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	InventoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.Update(PetShop.Business.TList{PetShop.Business.Inventory})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Inventory</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Inventory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Inventory.
             <code><![CDATA[
             TList<Inventory> list = new TList<Inventory>();
             Inventory entity = new Inventory();
             entity.StringProperty = "foo";
             Inventory entity2 = new Inventory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	InventoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.Save(PetShop.Business.Inventory)">
            <summary>
            public virtual method that Saves a Inventory object into the datasource using a transaction.
            </summary>
            <param name="entity">Inventory object to Save.</param>
            <remarks>After Saveing into the datasource, the Inventory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Inventory entity = InventoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	InventoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.Save(PetShop.Business.TList{PetShop.Business.Inventory})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Inventory</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Inventory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Inventory.
             <code><![CDATA[
             TList<Inventory> list = new TList<Inventory>();
             Inventory entity = new Inventory();
             entity.StringProperty = "foo";
             Inventory entity2 = new Inventory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	InventoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.Delete(PetShop.Business.Inventory)">
            <summary>
            public virtual method that Deletes a Inventory object into the datasource using a transaction.
            </summary>
            <param name="entity">Inventory object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Inventory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Inventory entity = InventoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	InventoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.Delete(PetShop.Business.TList{PetShop.Business.Inventory})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Inventory</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Inventory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Inventory.
             <code><![CDATA[
             TList<Inventory> list = new TList<Inventory>();
             Inventory entity = new Inventory();
             entity.StringProperty = "foo";
             Inventory entity2 = new Inventory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	InventoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.Delete(PetShop.Business.InventoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S string _itemId
            </summary>
            <param name="_itemId">Inventory pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.DeepLoadByItemId(System.String,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PetShop.Business.Inventory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <param name="_itemId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Inventory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Inventory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.DeepLoad(PetShop.Business.Inventory)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Inventory Object</param>
            <remarks>
            <seealso cref="M:PetShop.Services.InventoryServiceBase.DeepLoad(PetShop.Business.Inventory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.DeepLoad(PetShop.Business.Inventory,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.InventoryServiceBase.DeepLoad(PetShop.Business.Inventory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Inventory Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.DeepLoad(PetShop.Business.Inventory,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PetShop.Business.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PetShop.Business.Inventory"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Inventory Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Inventory})">
            <summary>
            Deep Loads the <see cref="T:PetShop.Business.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.InventoryServiceBase.DeepLoad(PetShop.Business.Inventory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PetShop.Business.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Inventory},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PetShop.Business.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.InventoryServiceBase.DeepLoad(PetShop.Business.Inventory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PetShop.Business.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Inventory},System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PetShop.Business.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PetShop.Business.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PetShop.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PetShop.Business.Inventory"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.DeepSave(PetShop.Business.Inventory)">
            <summary>
            public virtualDeep Saves the <see cref="T:PetShop.Business.Inventory"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Inventory Object</param>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.DeepSave(PetShop.Business.Inventory,PetShop.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Inventory object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Inventory Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Inventory</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.DeepSave(PetShop.Business.TList{PetShop.Business.Inventory})">
            <summary>
            Deep Save the entire <see cref="T:PetShop.Business.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Inventory} Object</param>
        </member>
        <member name="M:PetShop.Services.InventoryServiceBase.DeepSave(PetShop.Business.TList{PetShop.Business.Inventory},PetShop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PetShop.Business.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PetShop.Business.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Inventory Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PetShop.Services.InventoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PetShop.Services.InventoryService.#ctor">
            <summary>
            Initializes a new instance of the InventoryService class.
            </summary>
        </member>
        <member name="T:PetShop.Services.ConnectionScope">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="T:PetShop.Services.ConnectionScopeBase">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="T:PetShop.Services.IConnectionScope">
            <summary>
            Connection Scope Interface
            </summary>
        </member>
        <member name="P:PetShop.Services.IConnectionScope.ConnectionStringKey">
            <summary>
            Gets or sets the connection string key.
            </summary>
            <value>The connection string key.</value>
        </member>
        <member name="P:PetShop.Services.IConnectionScope.DataProvider">
            <summary>
            Gets or sets the data provider.
            </summary>
            <value>The data provider.</value>
        </member>
        <member name="P:PetShop.Services.IConnectionScope.DynamicConnectionString">
            <summary>
            Gets or sets the dynamic connection string.
            </summary>
            <value>The dynamic connection string.</value>
        </member>
        <member name="P:PetShop.Services.IConnectionScope.HasTransaction">
            <summary>
            Gets a value indicating whether this instance has transaction.
            </summary>
            <value>
            	<c>true</c> if this instance has transaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PetShop.Services.IConnectionScope.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="M:PetShop.Services.ConnectionScopeBase.#ctor">
            <summary>
            Initializes a new instance of the ConnectionScope class.
            </summary>
        </member>
        <member name="F:PetShop.Services.ConnectionScopeBase.connectionStringKey">
            <summary>
            The ConnectionStringKey member variable.
            </summary>
        </member>
        <member name="F:PetShop.Services.ConnectionScopeBase.dynamicConnectionString">
            <summary>
            The DynamicConnectionString member variable.
            </summary>
        </member>
        <member name="F:PetShop.Services.ConnectionScopeBase.transactionManager">
            <summary>
            The TransactionManager member variable.
            </summary>
        </member>
        <member name="F:PetShop.Services.ConnectionScopeBase.dataProvider">
            <summary>
            The NetTiersProvider member variable.
            </summary>
        </member>
        <member name="P:PetShop.Services.ConnectionScopeBase.ConnectionStringKey">
            <summary>
            Gets or sets the ConnectionStringKey property.
            </summary>
        </member>
        <member name="P:PetShop.Services.ConnectionScopeBase.DynamicConnectionString">
            <summary>
            Gets or sets the DynamicConnectionString property.
            </summary>
        </member>
        <member name="P:PetShop.Services.ConnectionScopeBase.TransactionManager">
            <summary>
            Gets or sets the TransactionManager property.
            </summary>
        </member>
        <member name="P:PetShop.Services.ConnectionScopeBase.DataProvider">
             <summary>
             Gets or Sets the Current DataProvider property of the <c>ConnectionScope</c> Object.
             </summary>
             <remarks>
             To use a dynamic connection, you must set both the 
             DynamicConnectionString and a unique ConnectionStringKey properties;
            </remarks>
        </member>
        <member name="P:PetShop.Services.ConnectionScopeBase.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="M:PetShop.Services.ConnectionScope.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:PetShop.Services.ConnectionScope.NewThread(System.Threading.ThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:PetShop.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:PetShop.Services.ConnectionScope.NewThread(System.Threading.ParameterizedThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:PetShop.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:PetShop.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ThreadStart)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:PetShop.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <param name="state">An object containing data to be used by the method.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:PetShop.Services.ConnectionScope.Copy(PetShop.Services.ConnectionScope)">
            <summary>
            Copies the values from the specified <paramref name="scope"/> object
            to the <see cref="T:PetShop.Services.ConnectionScope"/> used by the current thread.
            </summary>
            <param name="scope">A <see cref="T:PetShop.Services.ConnectionScope"/> object.</param>
        </member>
        <member name="M:PetShop.Services.ConnectionScope.ValidateOrCreateTransaction">
            <summary>
            Validates an existing <see cref="T:PetShop.Data.TransactionManager"/> if one exists,
            otherwise creates a new <see cref="T:PetShop.Data.TransactionManager"/> to use.
            </summary>
        </member>
        <member name="M:PetShop.Services.ConnectionScope.ValidateOrCreateTransaction(System.Boolean)">
            <summary>
            Validates an existing <see cref="T:PetShop.Data.TransactionManager"/> if one exists,
            otherwise creates a new <see cref="T:PetShop.Data.TransactionManager"/> to use.
            </summary>
            <param name="createTransaction">determines whether to create a new transaction</param>
        </member>
        <member name="M:PetShop.Services.ConnectionScope.CreateTransaction">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>.
            </summary>
        </member>
        <member name="M:PetShop.Services.ConnectionScope.CreateTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>
            with the specified <see cref="T:System.Data.IsolationLevel"/>.
            </summary>
            <param name="level">Determines which <see cref="T:System.Data.IsolationLevel"/> to use for the transaction.</param>
        </member>
        <member name="M:PetShop.Services.ConnectionScope.Complete">
            <summary>
            Completes this transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PetShop.Services.ConnectionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:PetShop.Services.ConnectionScope.Current">
            <summary>
            Gets a reference to the ConnectionScope object for the current thread.
            </summary>
        </member>
        <member name="P:PetShop.Services.ConnectionScope.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:PetShop.Services.DomainUtil">
            <summary>
            DomainUtil class.
            </summary>
        </member>
        <member name="M:PetShop.Services.DomainUtil.GetErrorsFromList``1(PetShop.Business.TList{``0})">
            <summary>
            Aggregates all the errors in a collection
            </summary>
        </member>
        <member name="M:PetShop.Services.DomainUtil.HandleException(System.Exception,System.String)">
            <summary>
            Wraps call to tohe <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/> class which handles all exceptions based on the security policy.
            </summary>
        </member>
        <member name="M:PetShop.Services.DomainUtil.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:PetShop.Services.DomainUtil.GetDataValue(System.Data.IDataParameter)">
            <summary>
            Get Value or Default Value from an IDataParamater
            Based on DbType
            </summary>
            <param name="p">The IDataParameter instance type is used to determine the default value.</param>
            <returns></returns>
        </member>
        <member name="M:PetShop.Services.DomainUtil.DefaultToDBNull(System.Object,System.Data.DbType)">
            <summary>
            Checks to see if the Default Value has been set to the parameter.
            If it's the default value, then create.
            </summary>
            <param name="val">The value we want to check.</param>
            <param name="dbtype">The DbType from wich we take the default value.</param>
            <returns></returns>
        </member>
        <member name="M:PetShop.Services.DomainUtil.GetParameterValue``1(System.Data.IDataParameter)">
            <summary>
            Generic method to return the value of a nullable parameter
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="parameter">Parameter from which to extract the value</param>
            <returns></returns>
        </member>
        <member name="M:PetShop.Services.DomainUtil.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader to a DataSet.  For use when a custom stored procedure returns an <see cref="T:System.Data.IDataReader"/>, it will
            convert all result sets returned as a DataSet.
            </summary>
            <param name="reader">The reader to convert</param>
            <returns>A dataset with one table per result in the reader</returns>
        </member>
        <member name="T:PetShop.Services.ItemService">
            <summary>
            An component type implementation of the 'Item' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:PetShop.Services.ItemServiceBase">
            <summary>
             An object representation of the 'Item' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Item.cs file instead.
             All custom implementations should be done in the <see cref="T:PetShop.Business.Item"/> class.
             </remarks>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PetShop.Business.Item"/> instance .
            </summary>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.CreateItem(System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PetShop.Business.Item"/> instance.
            </summary>
            <param name="_itemId"></param>
            <param name="_productId"></param>
            <param name="_listPrice"></param>
            <param name="_unitCost"></param>
            <param name="_supplier"></param>
            <param name="_status"></param>
            <param name="_name"></param>
            <param name="_image"></param>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.GetByProductId(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the FK__Item__ProductId__117F9D94 key.
            	FK__Item__ProductId__117F9D94 Description: 
            </summary>
            <param name="_productId"></param>
            <returns>Returns a generic collection of Item objects.</returns>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.GetByProductId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the FK__Item__ProductId__117F9D94 key.
            	FK__Item__ProductId__117F9D94 Description: 
            </summary>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PetShop.Business.TList`1"/> of <c>Item</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.GetBySupplier(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the FK__Item__Supplier__1273C1CD key.
            	FK__Item__Supplier__1273C1CD Description: 
            </summary>
            <param name="_supplier"></param>
            <returns>Returns a generic collection of Item objects.</returns>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.GetBySupplier(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the FK__Item__Supplier__1273C1CD key.
            	FK__Item__Supplier__1273C1CD Description: 
            </summary>
            <param name="_supplier"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PetShop.Business.TList`1"/> of <c>Item</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.Get(PetShop.Business.ItemKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.GetByProductIdItemIdListPriceName(System.String,System.String,System.Nullable{System.Decimal},System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key IxItem index.
            </summary>
            <param name="_productId"></param>
            <param name="_itemId"></param>
            <param name="_listPrice"></param>
            <param name="_name"></param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.GetByProductIdItemIdListPriceName(System.String,System.String,System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key IxItem index.
            </summary>
            <param name="_productId"></param>
            <param name="_itemId"></param>
            <param name="_listPrice"></param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.GetByItemId(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key PK__Item__727E838B0F975522 index.
            </summary>
            <param name="_itemId"></param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Item"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.GetByItemId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key PK__Item__727E838B0F975522 index.
            </summary>
            <param name="_itemId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Item"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PetShop.Business.Item"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PetShop.Business.Item"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PetShop.Business.TList`1"/> </returns>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PetShop.Business.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Item</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PetShop.Business.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Item</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PetShop.Business.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Item</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Item} of <c>Item</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.Find(PetShop.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Item</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.Find(PetShop.Data.IFilterParameterCollection,PetShop.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PetShop.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Item</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.Find(PetShop.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Item</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.Find(PetShop.Data.IFilterParameterCollection,PetShop.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PetShop.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Item</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.Find(PetShop.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Item</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.Insert(PetShop.Business.Item)">
            <summary>
            public virtual method that Inserts a Item object into the datasource using a transaction.
            </summary>
            <param name="entity">Item object to Insert.</param>
            <remarks>After Inserting into the datasource, the Item object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Item entity = new Item();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ItemService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.Insert(PetShop.Business.TList{PetShop.Business.Item})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Item</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Item</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Item.
             <code><![CDATA[
             TList<Item> list = new TList<Item>();
             Item entity = new Item();
             entity.StringProperty = "foo";
             Item entity2 = new Item();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.Update(PetShop.Business.Item)">
            <summary>
            public virtual method that Updates a Item object into the datasource using a transaction.
            </summary>
            <param name="entity">Item object to Update.</param>
            <remarks>After Updateing into the datasource, the Item object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Item entity = ItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ItemService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.Update(PetShop.Business.TList{PetShop.Business.Item})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Item</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Item</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Item.
             <code><![CDATA[
             TList<Item> list = new TList<Item>();
             Item entity = new Item();
             entity.StringProperty = "foo";
             Item entity2 = new Item();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.Save(PetShop.Business.Item)">
            <summary>
            public virtual method that Saves a Item object into the datasource using a transaction.
            </summary>
            <param name="entity">Item object to Save.</param>
            <remarks>After Saveing into the datasource, the Item object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Item entity = ItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ItemService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.Save(PetShop.Business.TList{PetShop.Business.Item})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Item</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Item</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Item.
             <code><![CDATA[
             TList<Item> list = new TList<Item>();
             Item entity = new Item();
             entity.StringProperty = "foo";
             Item entity2 = new Item();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.Delete(PetShop.Business.Item)">
            <summary>
            public virtual method that Deletes a Item object into the datasource using a transaction.
            </summary>
            <param name="entity">Item object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Item object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Item entity = ItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ItemService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.Delete(PetShop.Business.TList{PetShop.Business.Item})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Item</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Item</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Item.
             <code><![CDATA[
             TList<Item> list = new TList<Item>();
             Item entity = new Item();
             entity.StringProperty = "foo";
             Item entity2 = new Item();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ItemService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.Delete(PetShop.Business.ItemKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S string _itemId
            </summary>
            <param name="_itemId">Item pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.DeepLoadByProductIdItemIdListPriceName(System.String,System.String,System.Nullable{System.Decimal},System.String,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PetShop.Business.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <param name="_productId"></param>
            <param name="_itemId"></param>
            <param name="_listPrice"></param>
            <param name="_name"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Item Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.DeepLoadByItemId(System.String,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PetShop.Business.Item"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <param name="_itemId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Item Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Item"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.DeepLoad(PetShop.Business.Item)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Item Object</param>
            <remarks>
            <seealso cref="M:PetShop.Services.ItemServiceBase.DeepLoad(PetShop.Business.Item)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.DeepLoad(PetShop.Business.Item,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.ItemServiceBase.DeepLoad(PetShop.Business.Item)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Item Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.DeepLoad(PetShop.Business.Item,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PetShop.Business.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PetShop.Business.Item"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Item Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Item})">
            <summary>
            Deep Loads the <see cref="T:PetShop.Business.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.ItemServiceBase.DeepLoad(PetShop.Business.Item)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PetShop.Business.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Item},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PetShop.Business.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.ItemServiceBase.DeepLoad(PetShop.Business.Item)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PetShop.Business.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Item},System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PetShop.Business.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PetShop.Business.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PetShop.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PetShop.Business.Item"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.DeepSave(PetShop.Business.Item)">
            <summary>
            public virtualDeep Saves the <see cref="T:PetShop.Business.Item"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Item Object</param>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.DeepSave(PetShop.Business.Item,PetShop.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Item object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Item Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Item</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.DeepSave(PetShop.Business.TList{PetShop.Business.Item})">
            <summary>
            Deep Save the entire <see cref="T:PetShop.Business.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Item} Object</param>
        </member>
        <member name="M:PetShop.Services.ItemServiceBase.DeepSave(PetShop.Business.TList{PetShop.Business.Item},PetShop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PetShop.Business.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PetShop.Business.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Item Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PetShop.Services.ItemServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PetShop.Services.ItemService.#ctor">
            <summary>
            Initializes a new instance of the ItemService class.
            </summary>
        </member>
        <member name="T:PetShop.Services.LineItemServiceBase">
            <summary>
             An object representation of the 'LineItem' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the LineItem.cs file instead.
             All custom implementations should be done in the <see cref="T:PetShop.Business.LineItem"/> class.
             </remarks>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PetShop.Business.LineItem"/> instance .
            </summary>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.CreateLineItem(System.Int32,System.Int32,System.String,System.Int32,System.Decimal)">
            <summary>
             A simple factory method to create a new <see cref="T:PetShop.Business.LineItem"/> instance.
            </summary>
            <param name="_orderId"></param>
            <param name="_lineNum"></param>
            <param name="_itemId"></param>
            <param name="_quantity"></param>
            <param name="_unitPrice"></param>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.GetByOrderId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the FK__LineItem__OrderI__03317E3D key.
            	FK__LineItem__OrderI__03317E3D Description: 
            </summary>
            <param name="_orderId"></param>
            <returns>Returns a generic collection of LineItem objects.</returns>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.GetByOrderId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the FK__LineItem__OrderI__03317E3D key.
            	FK__LineItem__OrderI__03317E3D Description: 
            </summary>
            <param name="_orderId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PetShop.Business.TList`1"/> of <c>LineItem</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.Get(PetShop.Business.LineItemKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.GetByOrderIdLineNum(System.Int32,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key PkLineItem index.
            </summary>
            <param name="_orderId"></param>
            <param name="_lineNum"></param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.LineItem"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.GetByOrderIdLineNum(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key PkLineItem index.
            </summary>
            <param name="_orderId"></param>
            <param name="_lineNum"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.LineItem"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PetShop.Business.LineItem"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PetShop.Business.LineItem"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PetShop.Business.TList`1"/> </returns>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PetShop.Business.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LineItem</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PetShop.Business.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LineItem</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PetShop.Business.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LineItem</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{LineItem} of <c>LineItem</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.Find(PetShop.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>LineItem</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.Find(PetShop.Data.IFilterParameterCollection,PetShop.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PetShop.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>LineItem</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.Find(PetShop.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>LineItem</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.Find(PetShop.Data.IFilterParameterCollection,PetShop.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PetShop.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>LineItem</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.Find(PetShop.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>LineItem</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.Insert(PetShop.Business.LineItem)">
            <summary>
            public virtual method that Inserts a LineItem object into the datasource using a transaction.
            </summary>
            <param name="entity">LineItem object to Insert.</param>
            <remarks>After Inserting into the datasource, the LineItem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            LineItem entity = new LineItem();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	LineItemService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.Insert(PetShop.Business.TList{PetShop.Business.LineItem})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LineItem</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>LineItem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of LineItem.
             <code><![CDATA[
             TList<LineItem> list = new TList<LineItem>();
             LineItem entity = new LineItem();
             entity.StringProperty = "foo";
             LineItem entity2 = new LineItem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LineItemService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.Update(PetShop.Business.LineItem)">
            <summary>
            public virtual method that Updates a LineItem object into the datasource using a transaction.
            </summary>
            <param name="entity">LineItem object to Update.</param>
            <remarks>After Updateing into the datasource, the LineItem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            LineItem entity = LineItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	LineItemService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.Update(PetShop.Business.TList{PetShop.Business.LineItem})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LineItem</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>LineItem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of LineItem.
             <code><![CDATA[
             TList<LineItem> list = new TList<LineItem>();
             LineItem entity = new LineItem();
             entity.StringProperty = "foo";
             LineItem entity2 = new LineItem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LineItemService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.Save(PetShop.Business.LineItem)">
            <summary>
            public virtual method that Saves a LineItem object into the datasource using a transaction.
            </summary>
            <param name="entity">LineItem object to Save.</param>
            <remarks>After Saveing into the datasource, the LineItem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            LineItem entity = LineItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	LineItemService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.Save(PetShop.Business.TList{PetShop.Business.LineItem})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LineItem</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>LineItem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of LineItem.
             <code><![CDATA[
             TList<LineItem> list = new TList<LineItem>();
             LineItem entity = new LineItem();
             entity.StringProperty = "foo";
             LineItem entity2 = new LineItem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LineItemService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.Delete(PetShop.Business.LineItem)">
            <summary>
            public virtual method that Deletes a LineItem object into the datasource using a transaction.
            </summary>
            <param name="entity">LineItem object to Delete.</param>
            <remarks>After Deleteing into the datasource, the LineItem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            LineItem entity = LineItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	LineItemService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.Delete(PetShop.Business.TList{PetShop.Business.LineItem})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LineItem</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>LineItem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of LineItem.
             <code><![CDATA[
             TList<LineItem> list = new TList<LineItem>();
             LineItem entity = new LineItem();
             entity.StringProperty = "foo";
             LineItem entity2 = new LineItem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LineItemService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.Delete(PetShop.Business.LineItemKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S int _orderId, int _lineNum
            </summary>
            <param name="_orderId">LineItem pk id.</param>
            <param name="_lineNum">LineItem pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.DeepLoadByOrderIdLineNum(System.Int32,System.Int32,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PetShop.Business.LineItem"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <param name="_orderId"></param>
            <param name="_lineNum"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LineItem Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.LineItem"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.DeepLoad(PetShop.Business.LineItem)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">LineItem Object</param>
            <remarks>
            <seealso cref="M:PetShop.Services.LineItemServiceBase.DeepLoad(PetShop.Business.LineItem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.DeepLoad(PetShop.Business.LineItem,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.LineItemServiceBase.DeepLoad(PetShop.Business.LineItem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">LineItem Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.DeepLoad(PetShop.Business.LineItem,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PetShop.Business.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PetShop.Business.LineItem"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LineItem Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.LineItem})">
            <summary>
            Deep Loads the <see cref="T:PetShop.Business.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.LineItemServiceBase.DeepLoad(PetShop.Business.LineItem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PetShop.Business.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.LineItem},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PetShop.Business.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.LineItemServiceBase.DeepLoad(PetShop.Business.LineItem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PetShop.Business.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.LineItem},System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PetShop.Business.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PetShop.Business.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PetShop.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PetShop.Business.LineItem"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.DeepSave(PetShop.Business.LineItem)">
            <summary>
            public virtualDeep Saves the <see cref="T:PetShop.Business.LineItem"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">LineItem Object</param>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.DeepSave(PetShop.Business.LineItem,PetShop.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the LineItem object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">LineItem Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>LineItem</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.DeepSave(PetShop.Business.TList{PetShop.Business.LineItem})">
            <summary>
            Deep Save the entire <see cref="T:PetShop.Business.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{LineItem} Object</param>
        </member>
        <member name="M:PetShop.Services.LineItemServiceBase.DeepSave(PetShop.Business.TList{PetShop.Business.LineItem},PetShop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PetShop.Business.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PetShop.Business.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LineItem Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PetShop.Services.LineItemServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:PetShop.Services.ProcessorBase">
            <summary>
            The interface that each complex business unit of work processor will use.
            </summary>
        </member>
        <member name="T:PetShop.Services.IProcessor">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:PetShop.Services.IProcessor.Process">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:PetShop.Services.IProcessor.ChangeProcessorState(PetShop.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="P:PetShop.Services.IProcessor.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PetShop.Services.IProcessor.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="M:PetShop.Services.ProcessorBase.Process">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:PetShop.Services.ProcessorBase.ChangeProcessorState(PetShop.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:PetShop.Services.ProcessorBase.OnNotifyProcessorStateChanging(PetShop.Services.ProcessorState)">
            <summary>
            Raises the ProcessorStateChanging event.
            </summary>
            <param name="newProcessorState"></param>
        </member>
        <member name="P:PetShop.Services.ProcessorBase.ProcessResult">
            <summary>
            Provides the current process result of it's operation.
            </summary>
        </member>
        <member name="P:PetShop.Services.ProcessorBase.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>The name of the type of the processors to execute</value>
        </member>
        <member name="P:PetShop.Services.ProcessorBase.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="E:PetShop.Services.ProcessorBase.ProcessorStateChanging">
            <summary>
            The ProcessorStateChanging event.
            </summary>
        </member>
        <member name="T:PetShop.Services.ProcessorBase.ProcessorStateChangingEventHandler">
            <summary>
            The ProcessorStateChangingEventHandler event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:PetShop.Services.ProfileService">
            <summary>
            An component type implementation of the 'Profiles' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:PetShop.Services.ProfileServiceBase">
            <summary>
             An object representation of the 'Profiles' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Profile.cs file instead.
             All custom implementations should be done in the <see cref="T:PetShop.Business.Profile"/> class.
             </remarks>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PetShop.Business.Profile"/> instance .
            </summary>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.CreateProfile(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:PetShop.Business.Profile"/> instance.
            </summary>
            <param name="_username"></param>
            <param name="_applicationName"></param>
            <param name="_isAnonymous"></param>
            <param name="_lastActivityDate"></param>
            <param name="_lastUpdatedDate"></param>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.Get(PetShop.Business.ProfileKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.GetByUsernameApplicationName(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key PK_Profiles index.
            </summary>
            <param name="_username"></param>
            <param name="_applicationName"></param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Profile"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.GetByUsernameApplicationName(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key PK_Profiles index.
            </summary>
            <param name="_username"></param>
            <param name="_applicationName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Profile"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.GetByUniqueId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key PK_Profiles_1 index.
            </summary>
            <param name="_uniqueId"></param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Profile"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.GetByUniqueId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PetShop.Business.TList`1"/> from the datasource based on the primary key PK_Profiles_1 index.
            </summary>
            <param name="_uniqueId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Profile"/> class.</returns>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PetShop.Business.Profile"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PetShop.Business.Profile"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PetShop.Business.TList`1"/> </returns>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PetShop.Business.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Profile</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PetShop.Business.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Profile</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PetShop.Business.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Profile</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Profile} of <c>Profile</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.Find(PetShop.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Profile</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.Find(PetShop.Data.IFilterParameterCollection,PetShop.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PetShop.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Profile</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.Find(PetShop.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Profile</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.Find(PetShop.Data.IFilterParameterCollection,PetShop.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PetShop.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Profile</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.Find(PetShop.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Profile</c> objects.</returns>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.Insert(PetShop.Business.Profile)">
            <summary>
            public virtual method that Inserts a Profile object into the datasource using a transaction.
            </summary>
            <param name="entity">Profile object to Insert.</param>
            <remarks>After Inserting into the datasource, the Profile object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Profile entity = new Profile();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProfileService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.Insert(PetShop.Business.TList{PetShop.Business.Profile})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Profile</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Profile</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Profile.
             <code><![CDATA[
             TList<Profile> list = new TList<Profile>();
             Profile entity = new Profile();
             entity.StringProperty = "foo";
             Profile entity2 = new Profile();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProfileService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.Update(PetShop.Business.Profile)">
            <summary>
            public virtual method that Updates a Profile object into the datasource using a transaction.
            </summary>
            <param name="entity">Profile object to Update.</param>
            <remarks>After Updateing into the datasource, the Profile object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Profile entity = ProfileService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProfileService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.Update(PetShop.Business.TList{PetShop.Business.Profile})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Profile</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Profile</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Profile.
             <code><![CDATA[
             TList<Profile> list = new TList<Profile>();
             Profile entity = new Profile();
             entity.StringProperty = "foo";
             Profile entity2 = new Profile();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProfileService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.Save(PetShop.Business.Profile)">
            <summary>
            public virtual method that Saves a Profile object into the datasource using a transaction.
            </summary>
            <param name="entity">Profile object to Save.</param>
            <remarks>After Saveing into the datasource, the Profile object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Profile entity = ProfileService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProfileService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.Save(PetShop.Business.TList{PetShop.Business.Profile})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Profile</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Profile</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Profile.
             <code><![CDATA[
             TList<Profile> list = new TList<Profile>();
             Profile entity = new Profile();
             entity.StringProperty = "foo";
             Profile entity2 = new Profile();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProfileService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.Delete(PetShop.Business.Profile)">
            <summary>
            public virtual method that Deletes a Profile object into the datasource using a transaction.
            </summary>
            <param name="entity">Profile object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Profile object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Profile entity = ProfileService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProfileService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.Delete(PetShop.Business.TList{PetShop.Business.Profile})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PetShop.Business.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Profile</c> objects in a <see cref="T:PetShop.Business.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Profile</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Profile.
             <code><![CDATA[
             TList<Profile> list = new TList<Profile>();
             Profile entity = new Profile();
             entity.StringProperty = "foo";
             Profile entity2 = new Profile();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProfileService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.Delete(PetShop.Business.ProfileKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S int _uniqueId
            </summary>
            <param name="_uniqueId">Profile pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.DeepLoadByUsernameApplicationName(System.String,System.String,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PetShop.Business.Profile"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <param name="_username"></param>
            <param name="_applicationName"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Profile Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Profile"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.DeepLoadByUniqueId(System.Int32,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PetShop.Business.Profile"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <param name="_uniqueId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Profile Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PetShop.Business.Profile"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.DeepLoad(PetShop.Business.Profile)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Profile Object</param>
            <remarks>
            <seealso cref="M:PetShop.Services.ProfileServiceBase.DeepLoad(PetShop.Business.Profile)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.DeepLoad(PetShop.Business.Profile,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.ProfileServiceBase.DeepLoad(PetShop.Business.Profile)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Profile Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.DeepLoad(PetShop.Business.Profile,System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PetShop.Business.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PetShop.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PetShop.Business.Profile"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Profile Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Profile})">
            <summary>
            Deep Loads the <see cref="T:PetShop.Business.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.ProfileServiceBase.DeepLoad(PetShop.Business.Profile)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PetShop.Business.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Profile},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PetShop.Business.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PetShop.Services.ProfileServiceBase.DeepLoad(PetShop.Business.Profile)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PetShop.Business.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.DeepLoad(PetShop.Business.TList{PetShop.Business.Profile},System.Boolean,PetShop.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PetShop.Business.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PetShop.Business.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PetShop.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PetShop.Business.Profile"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.DeepSave(PetShop.Business.Profile)">
            <summary>
            public virtualDeep Saves the <see cref="T:PetShop.Business.Profile"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Profile Object</param>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.DeepSave(PetShop.Business.Profile,PetShop.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Profile object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Profile Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Profile</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.DeepSave(PetShop.Business.TList{PetShop.Business.Profile})">
            <summary>
            Deep Save the entire <see cref="T:PetShop.Business.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Profile} Object</param>
        </member>
        <member name="M:PetShop.Services.ProfileServiceBase.DeepSave(PetShop.Business.TList{PetShop.Business.Profile},PetShop.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PetShop.Business.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PetShop.Business.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Profile Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PetShop.Services.ProfileServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PetShop.Services.ProfileService.#ctor">
            <summary>
            Initializes a new instance of the ProfileService class.
            </summary>
        </member>
        <member name="T:PetShop.Services.ContextView`2">
            <summary>
            Used to create a general view of the current context.  
            Useful for firing events and giving the UI a picture of 
            current State of Operation.
            </summary>
            <typeparam name="Entity">The Entity object</typeparam>
            <typeparam name="Domain">Type that holds </typeparam>
        </member>
        <member name="M:PetShop.Services.ContextView`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PetShop.Services.ContextView`2"/> class.
            </summary>
        </member>
        <member name="M:PetShop.Services.ContextView`2.#ctor(`0,PetShop.Services.SecurityContext{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:PetShop.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
        </member>
        <member name="M:PetShop.Services.ContextView`2.#ctor(`0,PetShop.Services.SecurityContext{`0},PetShop.Data.TransactionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:PetShop.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
            <param name="transactionManager">The transaction manager.</param>
        </member>
        <member name="P:PetShop.Services.ContextView`2.PersistingObject">
            <summary>
            Gets or sets the persisting object.
            </summary>
            <value>The persisting object.</value>
        </member>
        <member name="P:PetShop.Services.ContextView`2.SecurityContext">
            <summary>
            Gets or sets the security context.
            </summary>
            <value>The security context.</value>
        </member>
        <member name="P:PetShop.Services.ContextView`2.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="T:PetShop.Services.ServiceViewBase`1">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:PetShop.Services.ServiceViewBaseCore`1">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:PetShop.Services.ServiceViewBaseCore`1.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:PetShop.Services.ServiceViewBaseCore`1.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:PetShop.Services.ServiceViewBaseCore`1.OnProcessStarting(PetShop.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:PetShop.Services.ServiceViewBaseCore`1.OnProcessEnded(PetShop.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:PetShop.Services.ServiceViewBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PetShop.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PetShop.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PetShop.Services.ServiceViewBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PetShop.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PetShop.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PetShop.Services.ServiceViewBaseCore`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PetShop.Services.ServiceViewBaseCore`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:PetShop.Services.ServiceViewBaseCore`1.Find(PetShop.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PetShop.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="P:PetShop.Services.ServiceViewBaseCore`1.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PetShop.Services.ServiceViewBaseCore`1.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PetShop.Services.ServiceViewBaseCore`1.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:PetShop.Services.ServiceViewBaseCore`1.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:PetShop.Services.ServiceViewBaseCore`1.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:PetShop.Services.ServiceViewBaseCore`1.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:PetShop.Services.ServiceViewBaseCore`1.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:PetShop.Services.ServiceViewBaseCore`1.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:PetShop.Services.ServiceViewBaseCore`1.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="T:PetShop.Services.GenericProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary> 
        </member>
        <member name="M:PetShop.Services.GenericProcessorResult.#ctor">
            <summary>
            Initializes a new instance of the GenericProcessorResult class.
            </summary>
        </member>
        <member name="M:PetShop.Services.GenericProcessorResult.AddBrokenRulesList(System.Type,PetShop.Business.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:PetShop.Services.GenericProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PetShop.Services.GenericProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:PetShop.Services.GenericProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation. 
            This is set by the processor.
            </summary>
        </member>
        <member name="T:PetShop.Services.ProcessorState">
            <summary>
            ProcessorState enumeration.
            </summary>
        </member>
        <member name="F:PetShop.Services.ProcessorState.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:PetShop.Services.ProcessorState.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:PetShop.Services.ProcessorState.Stopped">
            <summary>
            Stopped
            </summary>
        </member>
        <member name="F:PetShop.Services.ProcessorState.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="M:PetShop.Services.CustomCode.ProfileManager.GetAnonymousUser">
            <summary>
            Gets the Anonymous user.
            </summary>
            <returns>The Anonymous user</returns>
        </member>
        <member name="M:PetShop.Services.CustomCode.ProfileManager.GetCurrentUser(System.String)">
            <summary>
            Gets a user by the username.
            </summary>
            <param name="username">the username.</param>
            <returns>The user if it is found, otherwise returns the anonymous user.</returns>
        </member>
        <member name="M:PetShop.Services.CustomCode.ProfileManager.CreateUser(System.String,System.Boolean)">
            <summary>
            Creates a new user.
            </summary>
            <param name="username">The username.</param>
            <param name="isAnonymous">True if the the user anonymous.</param>
            <returns>A newly created user.</returns>
        </member>
        <member name="F:PetShop.Services.CustomCode.ProfileManager.Nested.Current">
            <summary>
            Current singleton instance.
            </summary>
        </member>
        <member name="T:PetShop.Services.ProcessStartingHandler">
            <summary>
            ProcessStartingHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:PetShop.Services.ProcessEndedHandler">
            <summary>
            ProcessEndedHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:PetShop.Services.ProcessorEventArgs">
            <summary>
            Processor Event Args
            </summary>
        </member>
        <member name="M:PetShop.Services.ProcessorEventArgs.#ctor(PetShop.Services.ProcessorBase)">
            <summary>
            Initializes a new instance of the ProcessorEventArgs class.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="P:PetShop.Services.ProcessorEventArgs.Processor">
            <summary>
            Gets or sets the processor.
            </summary>
            <value>The processor.</value>
        </member>
        <member name="T:PetShop.Services.ServiceResult">
            <summary>
            The class provides a notification pattern for the processor execution.
            </summary>
        </member>
        <member name="P:PetShop.Services.ServiceResult.HasErrors">
            <summary>
               Determines whethere the containing service, has errors.
            </summary>
        </member>
        <member name="P:PetShop.Services.ServiceResult.Error">
            <summary>
               Provides a string of errors accumulated with a new line of delimeted errors.
            </summary>
        </member>
        <member name="P:PetShop.Services.ServiceResult.ProcessBrokenRuleLists">
            <summary>
               Provides an aggregated group of BrokenRuleList for each of the executed processes.
            </summary>
        </member>
        <member name="P:PetShop.Services.ServiceResult.ProcessorResultList">
            <summary>
               Determines whethere the containing processs results that were enlisted in the service.
            </summary>
        </member>
        <member name="P:PetShop.Services.ServiceResult.ExceptionList">
             <summary>
            	Provides the List of UnHandled Exceptions that occured during processing.
             </summary>
            <value>A list of rules that were broken in the process</value>		
        </member>
        <member name="T:PetShop.Services.LineItemService">
            <summary>
            An component type implementation of the 'LineItem' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:PetShop.Services.LineItemService.#ctor">
            <summary>
            Initializes a new instance of the LineItemService class.
            </summary>
        </member>
    </members>
</doc>
