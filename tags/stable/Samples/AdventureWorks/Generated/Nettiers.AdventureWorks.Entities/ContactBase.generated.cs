
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Contact.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Nettiers.AdventureWorks.Entities.Validation;
#endregion

namespace Nettiers.AdventureWorks.Entities
{
	///<summary>
	/// Names of each employee, customer contact, and vendor contact.	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ContactBase : EntityBase, IContact, IEntityId<ContactKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ContactEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ContactEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ContactEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Contact> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ContactEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ContactEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ContactBase"/> instance.
		///</summary>
		public ContactBase()
		{
			this.entityData = new ContactEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ContactBase"/> instance.
		///</summary>
		///<param name="_nameStyle">0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.</param>
		///<param name="_title">A courtesy title. For example, Mr. or Ms.</param>
		///<param name="_firstName">First name of the person.</param>
		///<param name="_middleName">Middle name or middle initial of the person.</param>
		///<param name="_lastName">Last name of the person.</param>
		///<param name="_suffix">Surname suffix. For example, Sr. or Jr.</param>
		///<param name="_emailAddress">E-mail address for the person.</param>
		///<param name="_emailPromotion">0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners. </param>
		///<param name="_phone">Phone number associated with the person.</param>
		///<param name="_passwordHash">Password for the e-mail account.</param>
		///<param name="_passwordSalt">Random value concatenated with the password string before the password is hashed.</param>
		///<param name="_additionalContactInfo">Additional contact information about the person stored in xml format. </param>
		///<param name="_modifiedDate">Date and time the record was last updated.</param>
		public ContactBase(System.Boolean _nameStyle, System.String _title, System.String _firstName, 
			System.String _middleName, System.String _lastName, System.String _suffix, System.String _emailAddress, 
			System.Int32 _emailPromotion, System.String _phone, System.String _passwordHash, System.String _passwordSalt, 
			string _additionalContactInfo, System.DateTime _modifiedDate)
		{
			this.entityData = new ContactEntityData();
			this.backupData = null;

			this.NameStyle = _nameStyle;
			this.Title = _title;
			this.FirstName = _firstName;
			this.MiddleName = _middleName;
			this.LastName = _lastName;
			this.Suffix = _suffix;
			this.EmailAddress = _emailAddress;
			this.EmailPromotion = _emailPromotion;
			this.Phone = _phone;
			this.PasswordHash = _passwordHash;
			this.PasswordSalt = _passwordSalt;
			this.AdditionalContactInfo = _additionalContactInfo;
			this.ModifiedDate = _modifiedDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Contact"/> instance.
		///</summary>
		///<param name="_nameStyle">0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.</param>
		///<param name="_title">A courtesy title. For example, Mr. or Ms.</param>
		///<param name="_firstName">First name of the person.</param>
		///<param name="_middleName">Middle name or middle initial of the person.</param>
		///<param name="_lastName">Last name of the person.</param>
		///<param name="_suffix">Surname suffix. For example, Sr. or Jr.</param>
		///<param name="_emailAddress">E-mail address for the person.</param>
		///<param name="_emailPromotion">0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners. </param>
		///<param name="_phone">Phone number associated with the person.</param>
		///<param name="_passwordHash">Password for the e-mail account.</param>
		///<param name="_passwordSalt">Random value concatenated with the password string before the password is hashed.</param>
		///<param name="_additionalContactInfo">Additional contact information about the person stored in xml format. </param>
		///<param name="_modifiedDate">Date and time the record was last updated.</param>
		public static Contact CreateContact(System.Boolean _nameStyle, System.String _title, System.String _firstName, 
			System.String _middleName, System.String _lastName, System.String _suffix, System.String _emailAddress, 
			System.Int32 _emailPromotion, System.String _phone, System.String _passwordHash, System.String _passwordSalt, 
			string _additionalContactInfo, System.DateTime _modifiedDate)
		{
			Contact newContact = new Contact();
			newContact.NameStyle = _nameStyle;
			newContact.Title = _title;
			newContact.FirstName = _firstName;
			newContact.MiddleName = _middleName;
			newContact.LastName = _lastName;
			newContact.Suffix = _suffix;
			newContact.EmailAddress = _emailAddress;
			newContact.EmailPromotion = _emailPromotion;
			newContact.Phone = _phone;
			newContact.PasswordHash = _passwordHash;
			newContact.PasswordSalt = _passwordSalt;
			newContact.AdditionalContactInfo = _additionalContactInfo;
			newContact.ModifiedDate = _modifiedDate;
			return newContact;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ContactId property. 
		///		Primary key for Contact records.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@"Primary key for Contact records."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 ContactId
		{
			get
			{
				return this.entityData.ContactId; 
			}
			
			set
			{
				if (this.entityData.ContactId == value)
					return;
				
                OnPropertyChanging("ContactId");                    
				OnColumnChanging(ContactColumn.ContactId, this.entityData.ContactId);
				this.entityData.ContactId = value;
				this.EntityId.ContactId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ContactColumn.ContactId, this.entityData.ContactId);
				OnPropertyChanged("ContactId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NameStyle property. 
		///		0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean NameStyle
		{
			get
			{
				return this.entityData.NameStyle; 
			}
			
			set
			{
				if (this.entityData.NameStyle == value)
					return;
				
                OnPropertyChanging("NameStyle");                    
				OnColumnChanging(ContactColumn.NameStyle, this.entityData.NameStyle);
				this.entityData.NameStyle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ContactColumn.NameStyle, this.entityData.NameStyle);
				OnPropertyChanged("NameStyle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Title property. 
		///		A courtesy title. For example, Mr. or Ms.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"A courtesy title. For example, Mr. or Ms."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 8)]
		public virtual System.String Title
		{
			get
			{
				return this.entityData.Title; 
			}
			
			set
			{
				if (this.entityData.Title == value)
					return;
				
                OnPropertyChanging("Title");                    
				OnColumnChanging(ContactColumn.Title, this.entityData.Title);
				this.entityData.Title = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ContactColumn.Title, this.entityData.Title);
				OnPropertyChanged("Title");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FirstName property. 
		///		First name of the person.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"First name of the person."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String FirstName
		{
			get
			{
				return this.entityData.FirstName; 
			}
			
			set
			{
				if (this.entityData.FirstName == value)
					return;
				
                OnPropertyChanging("FirstName");                    
				OnColumnChanging(ContactColumn.FirstName, this.entityData.FirstName);
				this.entityData.FirstName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ContactColumn.FirstName, this.entityData.FirstName);
				OnPropertyChanged("FirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MiddleName property. 
		///		Middle name or middle initial of the person.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Middle name or middle initial of the person."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String MiddleName
		{
			get
			{
				return this.entityData.MiddleName; 
			}
			
			set
			{
				if (this.entityData.MiddleName == value)
					return;
				
                OnPropertyChanging("MiddleName");                    
				OnColumnChanging(ContactColumn.MiddleName, this.entityData.MiddleName);
				this.entityData.MiddleName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ContactColumn.MiddleName, this.entityData.MiddleName);
				OnPropertyChanged("MiddleName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastName property. 
		///		Last name of the person.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Last name of the person."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String LastName
		{
			get
			{
				return this.entityData.LastName; 
			}
			
			set
			{
				if (this.entityData.LastName == value)
					return;
				
                OnPropertyChanging("LastName");                    
				OnColumnChanging(ContactColumn.LastName, this.entityData.LastName);
				this.entityData.LastName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ContactColumn.LastName, this.entityData.LastName);
				OnPropertyChanged("LastName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Suffix property. 
		///		Surname suffix. For example, Sr. or Jr.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Surname suffix. For example, Sr. or Jr."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String Suffix
		{
			get
			{
				return this.entityData.Suffix; 
			}
			
			set
			{
				if (this.entityData.Suffix == value)
					return;
				
                OnPropertyChanging("Suffix");                    
				OnColumnChanging(ContactColumn.Suffix, this.entityData.Suffix);
				this.entityData.Suffix = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ContactColumn.Suffix, this.entityData.Suffix);
				OnPropertyChanged("Suffix");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmailAddress property. 
		///		E-mail address for the person.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"E-mail address for the person."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String EmailAddress
		{
			get
			{
				return this.entityData.EmailAddress; 
			}
			
			set
			{
				if (this.entityData.EmailAddress == value)
					return;
				
                OnPropertyChanging("EmailAddress");                    
				OnColumnChanging(ContactColumn.EmailAddress, this.entityData.EmailAddress);
				this.entityData.EmailAddress = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ContactColumn.EmailAddress, this.entityData.EmailAddress);
				OnPropertyChanged("EmailAddress");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmailPromotion property. 
		///		0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners. 
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners. "), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 EmailPromotion
		{
			get
			{
				return this.entityData.EmailPromotion; 
			}
			
			set
			{
				if (this.entityData.EmailPromotion == value)
					return;
				
                OnPropertyChanging("EmailPromotion");                    
				OnColumnChanging(ContactColumn.EmailPromotion, this.entityData.EmailPromotion);
				this.entityData.EmailPromotion = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ContactColumn.EmailPromotion, this.entityData.EmailPromotion);
				OnPropertyChanged("EmailPromotion");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Phone property. 
		///		Phone number associated with the person.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Phone number associated with the person."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 25)]
		public virtual System.String Phone
		{
			get
			{
				return this.entityData.Phone; 
			}
			
			set
			{
				if (this.entityData.Phone == value)
					return;
				
                OnPropertyChanging("Phone");                    
				OnColumnChanging(ContactColumn.Phone, this.entityData.Phone);
				this.entityData.Phone = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ContactColumn.Phone, this.entityData.Phone);
				OnPropertyChanged("Phone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PasswordHash property. 
		///		Password for the e-mail account.
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Password for the e-mail account."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 128)]
		public virtual System.String PasswordHash
		{
			get
			{
				return this.entityData.PasswordHash; 
			}
			
			set
			{
				if (this.entityData.PasswordHash == value)
					return;
				
                OnPropertyChanging("PasswordHash");                    
				OnColumnChanging(ContactColumn.PasswordHash, this.entityData.PasswordHash);
				this.entityData.PasswordHash = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ContactColumn.PasswordHash, this.entityData.PasswordHash);
				OnPropertyChanged("PasswordHash");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PasswordSalt property. 
		///		Random value concatenated with the password string before the password is hashed.
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Random value concatenated with the password string before the password is hashed."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String PasswordSalt
		{
			get
			{
				return this.entityData.PasswordSalt; 
			}
			
			set
			{
				if (this.entityData.PasswordSalt == value)
					return;
				
                OnPropertyChanging("PasswordSalt");                    
				OnColumnChanging(ContactColumn.PasswordSalt, this.entityData.PasswordSalt);
				this.entityData.PasswordSalt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ContactColumn.PasswordSalt, this.entityData.PasswordSalt);
				OnPropertyChanged("PasswordSalt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdditionalContactInfo property. 
		///		Additional contact information about the person stored in xml format. 
		/// </summary>
		/// <value>This type is xml.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Additional contact information about the person stored in xml format. "), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual string AdditionalContactInfo
		{
			get
			{
				return this.entityData.AdditionalContactInfo; 
			}
			
			set
			{
				if (this.entityData.AdditionalContactInfo == value)
					return;
				
                OnPropertyChanging("AdditionalContactInfo");                    
				OnColumnChanging(ContactColumn.AdditionalContactInfo, this.entityData.AdditionalContactInfo);
				this.entityData.AdditionalContactInfo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ContactColumn.AdditionalContactInfo, this.entityData.AdditionalContactInfo);
				OnPropertyChanged("AdditionalContactInfo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Rowguid property. 
		///		ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, true, false)]
		public virtual System.Guid Rowguid
		{
			get
			{
				return this.entityData.Rowguid; 
			}
			
			set
			{
				if (this.entityData.Rowguid == value)
					return;
				
                OnPropertyChanging("Rowguid");                    
				OnColumnChanging(ContactColumn.Rowguid, this.entityData.Rowguid);
				this.entityData.Rowguid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ContactColumn.Rowguid, this.entityData.Rowguid);
				OnPropertyChanged("Rowguid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModifiedDate property. 
		///		Date and time the record was last updated.
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Date and time the record was last updated."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ModifiedDate
		{
			get
			{
				return this.entityData.ModifiedDate; 
			}
			
			set
			{
				if (this.entityData.ModifiedDate == value)
					return;
				
                OnPropertyChanging("ModifiedDate");                    
				OnColumnChanging(ContactColumn.ModifiedDate, this.entityData.ModifiedDate);
				this.entityData.ModifiedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ContactColumn.ModifiedDate, this.entityData.ModifiedDate);
				OnPropertyChanged("ModifiedDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of Employee objects
		///	which are related to this object through the relation FK_Employee_Contact_ContactID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Employee> EmployeeCollection
		{
			get { return entityData.EmployeeCollection; }
			set { entityData.EmployeeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SalesOrderHeader objects
		///	which are related to this object through the relation FK_SalesOrderHeader_Contact_ContactID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SalesOrderHeader> SalesOrderHeaderCollection
		{
			get { return entityData.SalesOrderHeaderCollection; }
			set { entityData.SalesOrderHeaderCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Individual objects
		///	which are related to this object through the relation FK_Individual_Contact_ContactID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Individual> IndividualCollection
		{
			get { return entityData.IndividualCollection; }
			set { entityData.IndividualCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of StoreContact objects
		///	which are related to this object through the relation FK_StoreContact_Contact_ContactID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<StoreContact> StoreContactCollection
		{
			get { return entityData.StoreContactCollection; }
			set { entityData.StoreContactCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ContactCreditCard objects
		///	which are related to this object through the relation FK_ContactCreditCard_Contact_ContactID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ContactCreditCard> ContactCreditCardCollection
		{
			get { return entityData.ContactCreditCardCollection; }
			set { entityData.ContactCreditCardCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of VendorContact objects
		///	which are related to this object through the relation FK_VendorContact_Contact_ContactID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<VendorContact> VendorContactCollection
		{
			get { return entityData.VendorContactCollection; }
			set { entityData.VendorContactCollection = value; }	
		}

		/// <summary>
		///	Holds a collection of CreditCardFromContactCreditCard objects
		///	which are related to this object through the junction table ContactCreditCard
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CreditCard> CreditCardIdCreditCardCollection_From_ContactCreditCard
		{
			get { return entityData.CreditCardIdCreditCardCollection_From_ContactCreditCard; }
			set { entityData.CreditCardIdCreditCardCollection_From_ContactCreditCard = value; }	
		}

		/// <summary>
		///	Holds a collection of StoreFromStoreContact objects
		///	which are related to this object through the junction table StoreContact
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Store> CustomerIdStoreCollection_From_StoreContact
		{
			get { return entityData.CustomerIdStoreCollection_From_StoreContact; }
			set { entityData.CustomerIdStoreCollection_From_StoreContact = value; }	
		}

		/// <summary>
		///	Holds a collection of VendorFromVendorContact objects
		///	which are related to this object through the junction table VendorContact
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Vendor> VendorIdVendorCollection_From_VendorContact
		{
			get { return entityData.VendorIdVendorCollection_From_VendorContact; }
			set { entityData.VendorIdVendorCollection_From_VendorContact = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Title", "Title", 8));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("FirstName", "First Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FirstName", "First Name", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MiddleName", "Middle Name", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("LastName", "Last Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LastName", "Last Name", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Suffix", "Suffix", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EmailAddress", "Email Address", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Phone", "Phone", 25));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("PasswordHash", "Password Hash"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PasswordHash", "Password Hash", 128));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("PasswordSalt", "Password Salt"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PasswordSalt", "Password Salt", 10));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Contact"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ContactID", "NameStyle", "Title", "FirstName", "MiddleName", "LastName", "Suffix", "EmailAddress", "EmailPromotion", "Phone", "PasswordHash", "PasswordSalt", "AdditionalContactInfo", "rowguid", "ModifiedDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ContactEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Contact) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Contact>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Contact);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Contact Entity 
		///</summary>
		protected virtual Contact Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Contact copy = new Contact();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.ContactId = this.ContactId;
				copy.NameStyle = this.NameStyle;
				copy.Title = this.Title;
				copy.FirstName = this.FirstName;
				copy.MiddleName = this.MiddleName;
				copy.LastName = this.LastName;
				copy.Suffix = this.Suffix;
				copy.EmailAddress = this.EmailAddress;
				copy.EmailPromotion = this.EmailPromotion;
				copy.Phone = this.Phone;
				copy.PasswordHash = this.PasswordHash;
				copy.PasswordSalt = this.PasswordSalt;
				copy.AdditionalContactInfo = this.AdditionalContactInfo;
				copy.Rowguid = this.Rowguid;
				copy.ModifiedDate = this.ModifiedDate;
			
		
			//deep copy nested objects
			copy.EmployeeCollection = (TList<Employee>) MakeCopyOf(this.EmployeeCollection, existingCopies); 
			copy.SalesOrderHeaderCollection = (TList<SalesOrderHeader>) MakeCopyOf(this.SalesOrderHeaderCollection, existingCopies); 
			copy.IndividualCollection = (TList<Individual>) MakeCopyOf(this.IndividualCollection, existingCopies); 
			copy.StoreContactCollection = (TList<StoreContact>) MakeCopyOf(this.StoreContactCollection, existingCopies); 
			copy.ContactCreditCardCollection = (TList<ContactCreditCard>) MakeCopyOf(this.ContactCreditCardCollection, existingCopies); 
			copy.VendorContactCollection = (TList<VendorContact>) MakeCopyOf(this.VendorContactCollection, existingCopies); 
			copy.CreditCardIdCreditCardCollection_From_ContactCreditCard = (TList<CreditCard>) MakeCopyOf(this.CreditCardIdCreditCardCollection_From_ContactCreditCard, existingCopies); 
			copy.CustomerIdStoreCollection_From_StoreContact = (TList<Store>) MakeCopyOf(this.CustomerIdStoreCollection_From_StoreContact, existingCopies); 
			copy.VendorIdVendorCollection_From_VendorContact = (TList<Vendor>) MakeCopyOf(this.VendorIdVendorCollection_From_VendorContact, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Contact Entity 
		///</summary>
		public virtual Contact Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Contact Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Contact DeepCopy()
		{
			return EntityHelper.Clone<Contact>(this as Contact);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ContactEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ContactEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ContactEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ContactColumn column)
		{
			switch(column)
			{
					case ContactColumn.ContactId:
					return entityData.ContactId != _originalData.ContactId;
					case ContactColumn.NameStyle:
					return entityData.NameStyle != _originalData.NameStyle;
					case ContactColumn.Title:
					return entityData.Title != _originalData.Title;
					case ContactColumn.FirstName:
					return entityData.FirstName != _originalData.FirstName;
					case ContactColumn.MiddleName:
					return entityData.MiddleName != _originalData.MiddleName;
					case ContactColumn.LastName:
					return entityData.LastName != _originalData.LastName;
					case ContactColumn.Suffix:
					return entityData.Suffix != _originalData.Suffix;
					case ContactColumn.EmailAddress:
					return entityData.EmailAddress != _originalData.EmailAddress;
					case ContactColumn.EmailPromotion:
					return entityData.EmailPromotion != _originalData.EmailPromotion;
					case ContactColumn.Phone:
					return entityData.Phone != _originalData.Phone;
					case ContactColumn.PasswordHash:
					return entityData.PasswordHash != _originalData.PasswordHash;
					case ContactColumn.PasswordSalt:
					return entityData.PasswordSalt != _originalData.PasswordSalt;
					case ContactColumn.AdditionalContactInfo:
					return entityData.AdditionalContactInfo != _originalData.AdditionalContactInfo;
					case ContactColumn.Rowguid:
					return entityData.Rowguid != _originalData.Rowguid;
					case ContactColumn.ModifiedDate:
					return entityData.ModifiedDate != _originalData.ModifiedDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ContactColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ContactId != _originalData.ContactId;
			result = result || entityData.NameStyle != _originalData.NameStyle;
			result = result || entityData.Title != _originalData.Title;
			result = result || entityData.FirstName != _originalData.FirstName;
			result = result || entityData.MiddleName != _originalData.MiddleName;
			result = result || entityData.LastName != _originalData.LastName;
			result = result || entityData.Suffix != _originalData.Suffix;
			result = result || entityData.EmailAddress != _originalData.EmailAddress;
			result = result || entityData.EmailPromotion != _originalData.EmailPromotion;
			result = result || entityData.Phone != _originalData.Phone;
			result = result || entityData.PasswordHash != _originalData.PasswordHash;
			result = result || entityData.PasswordSalt != _originalData.PasswordSalt;
			result = result || entityData.AdditionalContactInfo != _originalData.AdditionalContactInfo;
			result = result || entityData.Rowguid != _originalData.Rowguid;
			result = result || entityData.ModifiedDate != _originalData.ModifiedDate;
			return result;
		}	
		
		///<summary>
		///  Returns a Contact Entity with the original data.
		///</summary>
		public Contact GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateContact(
				_originalData.NameStyle,
				_originalData.Title,
				_originalData.FirstName,
				_originalData.MiddleName,
				_originalData.LastName,
				_originalData.Suffix,
				_originalData.EmailAddress,
				_originalData.EmailPromotion,
				_originalData.Phone,
				_originalData.PasswordHash,
				_originalData.PasswordSalt,
				_originalData.AdditionalContactInfo,
				_originalData.ModifiedDate
				);
				
			return (Contact)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ContactBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ContactBase)
				return ValueEquals(this, (ContactBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ContactBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ContactId.GetHashCode() ^ 
					this.NameStyle.GetHashCode() ^ 
					((this.Title == null) ? string.Empty : this.Title.ToString()).GetHashCode() ^ 
					this.FirstName.GetHashCode() ^ 
					((this.MiddleName == null) ? string.Empty : this.MiddleName.ToString()).GetHashCode() ^ 
					this.LastName.GetHashCode() ^ 
					((this.Suffix == null) ? string.Empty : this.Suffix.ToString()).GetHashCode() ^ 
					((this.EmailAddress == null) ? string.Empty : this.EmailAddress.ToString()).GetHashCode() ^ 
					this.EmailPromotion.GetHashCode() ^ 
					((this.Phone == null) ? string.Empty : this.Phone.ToString()).GetHashCode() ^ 
					this.PasswordHash.GetHashCode() ^ 
					this.PasswordSalt.GetHashCode() ^ 
					((this.AdditionalContactInfo == null) ? string.Empty : this.AdditionalContactInfo.ToString()).GetHashCode() ^ 
					this.Rowguid.GetHashCode() ^ 
					this.ModifiedDate.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ContactBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ContactBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ContactBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ContactBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ContactBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ContactBase Object1, ContactBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ContactId != Object2.ContactId)
				equal = false;
			if (Object1.NameStyle != Object2.NameStyle)
				equal = false;
			if ( Object1.Title != null && Object2.Title != null )
			{
				if (Object1.Title != Object2.Title)
					equal = false;
			}
			else if (Object1.Title == null ^ Object2.Title == null )
			{
				equal = false;
			}
			if (Object1.FirstName != Object2.FirstName)
				equal = false;
			if ( Object1.MiddleName != null && Object2.MiddleName != null )
			{
				if (Object1.MiddleName != Object2.MiddleName)
					equal = false;
			}
			else if (Object1.MiddleName == null ^ Object2.MiddleName == null )
			{
				equal = false;
			}
			if (Object1.LastName != Object2.LastName)
				equal = false;
			if ( Object1.Suffix != null && Object2.Suffix != null )
			{
				if (Object1.Suffix != Object2.Suffix)
					equal = false;
			}
			else if (Object1.Suffix == null ^ Object2.Suffix == null )
			{
				equal = false;
			}
			if ( Object1.EmailAddress != null && Object2.EmailAddress != null )
			{
				if (Object1.EmailAddress != Object2.EmailAddress)
					equal = false;
			}
			else if (Object1.EmailAddress == null ^ Object2.EmailAddress == null )
			{
				equal = false;
			}
			if (Object1.EmailPromotion != Object2.EmailPromotion)
				equal = false;
			if ( Object1.Phone != null && Object2.Phone != null )
			{
				if (Object1.Phone != Object2.Phone)
					equal = false;
			}
			else if (Object1.Phone == null ^ Object2.Phone == null )
			{
				equal = false;
			}
			if (Object1.PasswordHash != Object2.PasswordHash)
				equal = false;
			if (Object1.PasswordSalt != Object2.PasswordSalt)
				equal = false;
			if ( Object1.AdditionalContactInfo != null && Object2.AdditionalContactInfo != null )
			{
				if (Object1.AdditionalContactInfo != Object2.AdditionalContactInfo)
					equal = false;
			}
			else if (Object1.AdditionalContactInfo == null ^ Object2.AdditionalContactInfo == null )
			{
				equal = false;
			}
			if (Object1.Rowguid != Object2.Rowguid)
				equal = false;
			if (Object1.ModifiedDate != Object2.ModifiedDate)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ContactBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ContactComparer GetComparer()
        {
            return new ContactComparer();
        }
        */

        // Comparer delegates back to Contact
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Contact rhs, ContactColumn which)
        {
            switch (which)
            {
            	
            	
            	case ContactColumn.ContactId:
            		return this.ContactId.CompareTo(rhs.ContactId);
            		
            		                 
            	
            	
            	case ContactColumn.NameStyle:
            		return this.NameStyle.CompareTo(rhs.NameStyle);
            		
            		                 
            	
            	
            	case ContactColumn.Title:
            		return this.Title.CompareTo(rhs.Title);
            		
            		                 
            	
            	
            	case ContactColumn.FirstName:
            		return this.FirstName.CompareTo(rhs.FirstName);
            		
            		                 
            	
            	
            	case ContactColumn.MiddleName:
            		return this.MiddleName.CompareTo(rhs.MiddleName);
            		
            		                 
            	
            	
            	case ContactColumn.LastName:
            		return this.LastName.CompareTo(rhs.LastName);
            		
            		                 
            	
            	
            	case ContactColumn.Suffix:
            		return this.Suffix.CompareTo(rhs.Suffix);
            		
            		                 
            	
            	
            	case ContactColumn.EmailAddress:
            		return this.EmailAddress.CompareTo(rhs.EmailAddress);
            		
            		                 
            	
            	
            	case ContactColumn.EmailPromotion:
            		return this.EmailPromotion.CompareTo(rhs.EmailPromotion);
            		
            		                 
            	
            	
            	case ContactColumn.Phone:
            		return this.Phone.CompareTo(rhs.Phone);
            		
            		                 
            	
            	
            	case ContactColumn.PasswordHash:
            		return this.PasswordHash.CompareTo(rhs.PasswordHash);
            		
            		                 
            	
            	
            	case ContactColumn.PasswordSalt:
            		return this.PasswordSalt.CompareTo(rhs.PasswordSalt);
            		
            		                 
            	
            	
            	case ContactColumn.AdditionalContactInfo:
            		return this.AdditionalContactInfo.CompareTo(rhs.AdditionalContactInfo);
            		
            		                 
            	
            	
            	case ContactColumn.Rowguid:
            		return this.Rowguid.CompareTo(rhs.Rowguid);
            		
            		                 
            	
            	
            	case ContactColumn.ModifiedDate:
            		return this.ModifiedDate.CompareTo(rhs.ModifiedDate);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ContactKey> Members
		
		// member variable for the EntityId property
		private ContactKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ContactKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ContactKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Contact")
					.Append("|").Append( this.ContactId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{16}{15}- ContactId: {0}{15}- NameStyle: {1}{15}- Title: {2}{15}- FirstName: {3}{15}- MiddleName: {4}{15}- LastName: {5}{15}- Suffix: {6}{15}- EmailAddress: {7}{15}- EmailPromotion: {8}{15}- Phone: {9}{15}- PasswordHash: {10}{15}- PasswordSalt: {11}{15}- AdditionalContactInfo: {12}{15}- Rowguid: {13}{15}- ModifiedDate: {14}{15}{17}", 
				this.ContactId,
				this.NameStyle,
				(this.Title == null) ? string.Empty : this.Title.ToString(),
				this.FirstName,
				(this.MiddleName == null) ? string.Empty : this.MiddleName.ToString(),
				this.LastName,
				(this.Suffix == null) ? string.Empty : this.Suffix.ToString(),
				(this.EmailAddress == null) ? string.Empty : this.EmailAddress.ToString(),
				this.EmailPromotion,
				(this.Phone == null) ? string.Empty : this.Phone.ToString(),
				this.PasswordHash,
				this.PasswordSalt,
				(this.AdditionalContactInfo == null) ? string.Empty : this.AdditionalContactInfo.ToString(),
				this.Rowguid,
				this.ModifiedDate,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Contact' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ContactEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ContactID : Primary key for Contact records.
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Contact"</remarks>
		public System.Int32 ContactId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// NameStyle : 0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.
		/// </summary>
		public System.Boolean NameStyle = false;
		
		/// <summary>
		/// Title : A courtesy title. For example, Mr. or Ms.
		/// </summary>
		public System.String Title = null;
		
		/// <summary>
		/// FirstName : First name of the person.
		/// </summary>
		public System.String FirstName = string.Empty;
		
		/// <summary>
		/// MiddleName : Middle name or middle initial of the person.
		/// </summary>
		public System.String MiddleName = null;
		
		/// <summary>
		/// LastName : Last name of the person.
		/// </summary>
		public System.String LastName = string.Empty;
		
		/// <summary>
		/// Suffix : Surname suffix. For example, Sr. or Jr.
		/// </summary>
		public System.String Suffix = null;
		
		/// <summary>
		/// EmailAddress : E-mail address for the person.
		/// </summary>
		public System.String EmailAddress = null;
		
		/// <summary>
		/// EmailPromotion : 0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners. 
		/// </summary>
		public System.Int32 EmailPromotion = (int)0;
		
		/// <summary>
		/// Phone : Phone number associated with the person.
		/// </summary>
		public System.String Phone = null;
		
		/// <summary>
		/// PasswordHash : Password for the e-mail account.
		/// </summary>
		public System.String PasswordHash = string.Empty;
		
		/// <summary>
		/// PasswordSalt : Random value concatenated with the password string before the password is hashed.
		/// </summary>
		public System.String PasswordSalt = string.Empty;
		
		/// <summary>
		/// AdditionalContactInfo : Additional contact information about the person stored in xml format. 
		/// </summary>
		public string AdditionalContactInfo = null;
		
		/// <summary>
		/// rowguid : ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		public System.Guid Rowguid = Guid.Empty;
		
		/// <summary>
		/// ModifiedDate : Date and time the record was last updated.
		/// </summary>
		public System.DateTime ModifiedDate = DateTime.MinValue;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region EmployeeCollection
		
		private TList<Employee> _employeeContactId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _employeeContactId
		/// </summary>
		
		public TList<Employee> EmployeeCollection
		{
			get
			{
				if (_employeeContactId == null)
				{
				_employeeContactId = new TList<Employee>();
				}
	
				return _employeeContactId;
			}
			set { _employeeContactId = value; }
		}
		
		#endregion

		#region SalesOrderHeaderCollection
		
		private TList<SalesOrderHeader> _salesOrderHeaderContactId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _salesOrderHeaderContactId
		/// </summary>
		
		public TList<SalesOrderHeader> SalesOrderHeaderCollection
		{
			get
			{
				if (_salesOrderHeaderContactId == null)
				{
				_salesOrderHeaderContactId = new TList<SalesOrderHeader>();
				}
	
				return _salesOrderHeaderContactId;
			}
			set { _salesOrderHeaderContactId = value; }
		}
		
		#endregion

		#region IndividualCollection
		
		private TList<Individual> _individualContactId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _individualContactId
		/// </summary>
		
		public TList<Individual> IndividualCollection
		{
			get
			{
				if (_individualContactId == null)
				{
				_individualContactId = new TList<Individual>();
				}
	
				return _individualContactId;
			}
			set { _individualContactId = value; }
		}
		
		#endregion

		#region StoreContactCollection
		
		private TList<StoreContact> _storeContactContactId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _storeContactContactId
		/// </summary>
		
		public TList<StoreContact> StoreContactCollection
		{
			get
			{
				if (_storeContactContactId == null)
				{
				_storeContactContactId = new TList<StoreContact>();
				}
	
				return _storeContactContactId;
			}
			set { _storeContactContactId = value; }
		}
		
		#endregion

		#region ContactCreditCardCollection
		
		private TList<ContactCreditCard> _contactCreditCardContactId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _contactCreditCardContactId
		/// </summary>
		
		public TList<ContactCreditCard> ContactCreditCardCollection
		{
			get
			{
				if (_contactCreditCardContactId == null)
				{
				_contactCreditCardContactId = new TList<ContactCreditCard>();
				}
	
				return _contactCreditCardContactId;
			}
			set { _contactCreditCardContactId = value; }
		}
		
		#endregion

		#region VendorContactCollection
		
		private TList<VendorContact> _vendorContactContactId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _vendorContactContactId
		/// </summary>
		
		public TList<VendorContact> VendorContactCollection
		{
			get
			{
				if (_vendorContactContactId == null)
				{
				_vendorContactContactId = new TList<VendorContact>();
				}
	
				return _vendorContactContactId;
			}
			set { _vendorContactContactId = value; }
		}
		
		#endregion

		#region CreditCardIdCreditCardCollection_From_ContactCreditCard
		
		private TList<CreditCard> creditCardIdCreditCardCollectionFromContactCreditCard;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table creditCardIdCreditCardCollectionFromContactCreditCard
		/// </summary>
		
		public TList<CreditCard> CreditCardIdCreditCardCollection_From_ContactCreditCard
		{
			get
			{
				if (creditCardIdCreditCardCollectionFromContactCreditCard == null)
				{
				creditCardIdCreditCardCollectionFromContactCreditCard = new TList<CreditCard>();
				}
	
				return creditCardIdCreditCardCollectionFromContactCreditCard;
			}
			set { creditCardIdCreditCardCollectionFromContactCreditCard = value; }
		}
		
		#endregion 

		#region CustomerIdStoreCollection_From_StoreContact
		
		private TList<Store> customerIdStoreCollectionFromStoreContact;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table customerIdStoreCollectionFromStoreContact
		/// </summary>
		
		public TList<Store> CustomerIdStoreCollection_From_StoreContact
		{
			get
			{
				if (customerIdStoreCollectionFromStoreContact == null)
				{
				customerIdStoreCollectionFromStoreContact = new TList<Store>();
				}
	
				return customerIdStoreCollectionFromStoreContact;
			}
			set { customerIdStoreCollectionFromStoreContact = value; }
		}
		
		#endregion 

		#region VendorIdVendorCollection_From_VendorContact
		
		private TList<Vendor> vendorIdVendorCollectionFromVendorContact;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table vendorIdVendorCollectionFromVendorContact
		/// </summary>
		
		public TList<Vendor> VendorIdVendorCollection_From_VendorContact
		{
			get
			{
				if (vendorIdVendorCollectionFromVendorContact == null)
				{
				vendorIdVendorCollectionFromVendorContact = new TList<Vendor>();
				}
	
				return vendorIdVendorCollectionFromVendorContact;
			}
			set { vendorIdVendorCollectionFromVendorContact = value; }
		}
		
		#endregion 

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ContactEntityData _tmp = new ContactEntityData();
						
			_tmp.ContactId = this.ContactId;
			
			_tmp.NameStyle = this.NameStyle;
			_tmp.Title = this.Title;
			_tmp.FirstName = this.FirstName;
			_tmp.MiddleName = this.MiddleName;
			_tmp.LastName = this.LastName;
			_tmp.Suffix = this.Suffix;
			_tmp.EmailAddress = this.EmailAddress;
			_tmp.EmailPromotion = this.EmailPromotion;
			_tmp.Phone = this.Phone;
			_tmp.PasswordHash = this.PasswordHash;
			_tmp.PasswordSalt = this.PasswordSalt;
			_tmp.AdditionalContactInfo = this.AdditionalContactInfo;
			_tmp.Rowguid = this.Rowguid;
			_tmp.ModifiedDate = this.ModifiedDate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._employeeContactId != null)
				_tmp.EmployeeCollection = (TList<Employee>) MakeCopyOf(this.EmployeeCollection); 
			if (this._salesOrderHeaderContactId != null)
				_tmp.SalesOrderHeaderCollection = (TList<SalesOrderHeader>) MakeCopyOf(this.SalesOrderHeaderCollection); 
			if (this._individualContactId != null)
				_tmp.IndividualCollection = (TList<Individual>) MakeCopyOf(this.IndividualCollection); 
			if (this._storeContactContactId != null)
				_tmp.StoreContactCollection = (TList<StoreContact>) MakeCopyOf(this.StoreContactCollection); 
			if (this._contactCreditCardContactId != null)
				_tmp.ContactCreditCardCollection = (TList<ContactCreditCard>) MakeCopyOf(this.ContactCreditCardCollection); 
			if (this._vendorContactContactId != null)
				_tmp.VendorContactCollection = (TList<VendorContact>) MakeCopyOf(this.VendorContactCollection); 
			if (this.creditCardIdCreditCardCollectionFromContactCreditCard != null)
				_tmp.CreditCardIdCreditCardCollection_From_ContactCreditCard = (TList<CreditCard>) MakeCopyOf(this.CreditCardIdCreditCardCollection_From_ContactCreditCard); 
			if (this.customerIdStoreCollectionFromStoreContact != null)
				_tmp.CustomerIdStoreCollection_From_StoreContact = (TList<Store>) MakeCopyOf(this.CustomerIdStoreCollection_From_StoreContact); 
			if (this.vendorIdVendorCollectionFromVendorContact != null)
				_tmp.VendorIdVendorCollection_From_VendorContact = (TList<Vendor>) MakeCopyOf(this.VendorIdVendorCollection_From_VendorContact); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ContactEntityData _tmp = new ContactEntityData();
						
			_tmp.ContactId = this.ContactId;
			
			_tmp.NameStyle = this.NameStyle;
			_tmp.Title = this.Title;
			_tmp.FirstName = this.FirstName;
			_tmp.MiddleName = this.MiddleName;
			_tmp.LastName = this.LastName;
			_tmp.Suffix = this.Suffix;
			_tmp.EmailAddress = this.EmailAddress;
			_tmp.EmailPromotion = this.EmailPromotion;
			_tmp.Phone = this.Phone;
			_tmp.PasswordHash = this.PasswordHash;
			_tmp.PasswordSalt = this.PasswordSalt;
			_tmp.AdditionalContactInfo = this.AdditionalContactInfo;
			_tmp.Rowguid = this.Rowguid;
			_tmp.ModifiedDate = this.ModifiedDate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EmployeeCollection = (TList<Employee>) MakeCopyOf(this.EmployeeCollection, existingCopies); 
			_tmp.SalesOrderHeaderCollection = (TList<SalesOrderHeader>) MakeCopyOf(this.SalesOrderHeaderCollection, existingCopies); 
			_tmp.IndividualCollection = (TList<Individual>) MakeCopyOf(this.IndividualCollection, existingCopies); 
			_tmp.StoreContactCollection = (TList<StoreContact>) MakeCopyOf(this.StoreContactCollection, existingCopies); 
			_tmp.ContactCreditCardCollection = (TList<ContactCreditCard>) MakeCopyOf(this.ContactCreditCardCollection, existingCopies); 
			_tmp.VendorContactCollection = (TList<VendorContact>) MakeCopyOf(this.VendorContactCollection, existingCopies); 
			_tmp.CreditCardIdCreditCardCollection_From_ContactCreditCard = (TList<CreditCard>) MakeCopyOf(this.CreditCardIdCreditCardCollection_From_ContactCreditCard, existingCopies); 
			_tmp.CustomerIdStoreCollection_From_StoreContact = (TList<Store>) MakeCopyOf(this.CustomerIdStoreCollection_From_StoreContact, existingCopies); 
			_tmp.VendorIdVendorCollection_From_VendorContact = (TList<Vendor>) MakeCopyOf(this.VendorIdVendorCollection_From_VendorContact, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ContactColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ContactColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ContactColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ContactColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ContactColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ContactColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ContactEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ContactEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ContactColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ContactColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ContactEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ContactEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ContactEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Contact"/> object.
	/// </remarks>
	public class ContactEventArgs : System.EventArgs
	{
		private ContactColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ContactEventArgs class.
		///</summary>
		public ContactEventArgs(ContactColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ContactEventArgs class.
		///</summary>
		public ContactEventArgs(ContactColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ContactColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ContactColumn" />
		public ContactColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Contact related events.
	///</summary>
	public delegate void ContactEventHandler(object sender, ContactEventArgs e);
	
	#region ContactComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ContactComparer : System.Collections.Generic.IComparer<Contact>
	{
		ContactColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ContactComparer"/> class.
        /// </summary>
		public ContactComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ContactComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ContactComparer(ContactColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Contact"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Contact"/> to compare.</param>
        /// <param name="b">The second <c>Contact</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Contact a, Contact b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Contact entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Contact a, Contact b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ContactColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ContactKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Contact"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ContactKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ContactKey class.
		/// </summary>
		public ContactKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ContactKey class.
		/// </summary>
		public ContactKey(ContactBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.ContactId = entity.ContactId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ContactKey class.
		/// </summary>
		public ContactKey(System.Int32 _contactId)
		{
			#region Init Properties

			this.ContactId = _contactId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ContactBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ContactBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ContactId property
		private System.Int32 _contactId;
		
		/// <summary>
		/// Gets or sets the ContactId property.
		/// </summary>
		public System.Int32 ContactId
		{
			get { return _contactId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ContactId = value;
				
				_contactId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ContactId = ( values["ContactId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ContactId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ContactId", ContactId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ContactId: {0}{1}",
								ContactId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ContactColumn Enum
	
	/// <summary>
	/// Enumerate the Contact columns.
	/// </summary>
	[Serializable]
	public enum ContactColumn : int
	{
		/// <summary>
		/// ContactId : Primary key for Contact records.
		/// </summary>
		[EnumTextValue("ContactID")]
		[ColumnEnum("ContactID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		ContactId = 1,
		/// <summary>
		/// NameStyle : 0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.
		/// </summary>
		[EnumTextValue("NameStyle")]
		[ColumnEnum("NameStyle", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		NameStyle = 2,
		/// <summary>
		/// Title : A courtesy title. For example, Mr. or Ms.
		/// </summary>
		[EnumTextValue("Title")]
		[ColumnEnum("Title", typeof(System.String), System.Data.DbType.String, false, false, true, 8)]
		Title = 3,
		/// <summary>
		/// FirstName : First name of the person.
		/// </summary>
		[EnumTextValue("FirstName")]
		[ColumnEnum("FirstName", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		FirstName = 4,
		/// <summary>
		/// MiddleName : Middle name or middle initial of the person.
		/// </summary>
		[EnumTextValue("MiddleName")]
		[ColumnEnum("MiddleName", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		MiddleName = 5,
		/// <summary>
		/// LastName : Last name of the person.
		/// </summary>
		[EnumTextValue("LastName")]
		[ColumnEnum("LastName", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		LastName = 6,
		/// <summary>
		/// Suffix : Surname suffix. For example, Sr. or Jr.
		/// </summary>
		[EnumTextValue("Suffix")]
		[ColumnEnum("Suffix", typeof(System.String), System.Data.DbType.String, false, false, true, 10)]
		Suffix = 7,
		/// <summary>
		/// EmailAddress : E-mail address for the person.
		/// </summary>
		[EnumTextValue("EmailAddress")]
		[ColumnEnum("EmailAddress", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		EmailAddress = 8,
		/// <summary>
		/// EmailPromotion : 0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners. 
		/// </summary>
		[EnumTextValue("EmailPromotion")]
		[ColumnEnum("EmailPromotion", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		EmailPromotion = 9,
		/// <summary>
		/// Phone : Phone number associated with the person.
		/// </summary>
		[EnumTextValue("Phone")]
		[ColumnEnum("Phone", typeof(System.String), System.Data.DbType.String, false, false, true, 25)]
		Phone = 10,
		/// <summary>
		/// PasswordHash : Password for the e-mail account.
		/// </summary>
		[EnumTextValue("PasswordHash")]
		[ColumnEnum("PasswordHash", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 128)]
		PasswordHash = 11,
		/// <summary>
		/// PasswordSalt : Random value concatenated with the password string before the password is hashed.
		/// </summary>
		[EnumTextValue("PasswordSalt")]
		[ColumnEnum("PasswordSalt", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		PasswordSalt = 12,
		/// <summary>
		/// AdditionalContactInfo : Additional contact information about the person stored in xml format. 
		/// </summary>
		[EnumTextValue("AdditionalContactInfo")]
		[ColumnEnum("AdditionalContactInfo", typeof(string), System.Data.DbType.Xml, false, false, true)]
		AdditionalContactInfo = 13,
		/// <summary>
		/// Rowguid : ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[EnumTextValue("rowguid")]
		[ColumnEnum("rowguid", typeof(System.Guid), System.Data.DbType.Guid, false, true, false)]
		Rowguid = 14,
		/// <summary>
		/// ModifiedDate : Date and time the record was last updated.
		/// </summary>
		[EnumTextValue("ModifiedDate")]
		[ColumnEnum("ModifiedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ModifiedDate = 15
	}//End enum

	#endregion ContactColumn Enum

} // end namespace
