
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Product.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Nettiers.AdventureWorks.Entities.Validation;
#endregion

namespace Nettiers.AdventureWorks.Entities
{
	///<summary>
	/// Products sold or used in the manfacturing of sold products.	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ProductBase : EntityBase, IProduct, IEntityId<ProductKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ProductEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ProductEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ProductEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Product> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ProductEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ProductEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ProductBase"/> instance.
		///</summary>
		public ProductBase()
		{
			this.entityData = new ProductEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ProductBase"/> instance.
		///</summary>
		///<param name="_name">Name of the product.</param>
		///<param name="_productNumber">Unique product identification number.</param>
		///<param name="_makeFlag">0 = Product is purchased, 1 = Product is manufactured in-house.</param>
		///<param name="_finishedGoodsFlag">0 = Product is not a salable item. 1 = Product is salable.</param>
		///<param name="_color">Product color.</param>
		///<param name="_safetyStockLevel">Minimum inventory quantity. </param>
		///<param name="_reorderPoint">Inventory level that triggers a purchase order or work order. </param>
		///<param name="_standardCost">Standard cost of the product.</param>
		///<param name="_listPrice">Selling price.</param>
		///<param name="_size">Product size.</param>
		///<param name="_sizeUnitMeasureCode">Unit of measure for Size column.</param>
		///<param name="_weightUnitMeasureCode">Unit of measure for Weight column.</param>
		///<param name="_weight">Product weight.</param>
		///<param name="_daysToManufacture">Number of days required to manufacture the product.</param>
		///<param name="_productLine">R = Road, M = Mountain, T = Touring, S = Standard</param>
		///<param name="_safeNameClass">H = High, M = Medium, L = Low</param>
		///<param name="_style">W = Womens, M = Mens, U = Universal</param>
		///<param name="_productSubcategoryId">Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID. </param>
		///<param name="_productModelId">Product is a member of this product model. Foreign key to ProductModel.ProductModelID.</param>
		///<param name="_sellStartDate">Date the product was available for sale.</param>
		///<param name="_sellEndDate">Date the product was no longer available for sale.</param>
		///<param name="_discontinuedDate">Date the product was discontinued.</param>
		///<param name="_modifiedDate">Date and time the record was last updated.</param>
		public ProductBase(System.String _name, System.String _productNumber, System.Boolean _makeFlag, 
			System.Boolean _finishedGoodsFlag, System.String _color, System.Int16 _safetyStockLevel, System.Int16 _reorderPoint, 
			System.Decimal _standardCost, System.Decimal _listPrice, System.String _size, System.String _sizeUnitMeasureCode, 
			System.String _weightUnitMeasureCode, System.Decimal? _weight, System.Int32 _daysToManufacture, System.String _productLine, 
			System.String _safeNameClass, System.String _style, System.Int32? _productSubcategoryId, System.Int32? _productModelId, 
			System.DateTime _sellStartDate, System.DateTime? _sellEndDate, System.DateTime? _discontinuedDate, System.DateTime _modifiedDate)
		{
			this.entityData = new ProductEntityData();
			this.backupData = null;

			this.Name = _name;
			this.ProductNumber = _productNumber;
			this.MakeFlag = _makeFlag;
			this.FinishedGoodsFlag = _finishedGoodsFlag;
			this.Color = _color;
			this.SafetyStockLevel = _safetyStockLevel;
			this.ReorderPoint = _reorderPoint;
			this.StandardCost = _standardCost;
			this.ListPrice = _listPrice;
			this.Size = _size;
			this.SizeUnitMeasureCode = _sizeUnitMeasureCode;
			this.WeightUnitMeasureCode = _weightUnitMeasureCode;
			this.Weight = _weight;
			this.DaysToManufacture = _daysToManufacture;
			this.ProductLine = _productLine;
			this.SafeNameClass = _safeNameClass;
			this.Style = _style;
			this.ProductSubcategoryId = _productSubcategoryId;
			this.ProductModelId = _productModelId;
			this.SellStartDate = _sellStartDate;
			this.SellEndDate = _sellEndDate;
			this.DiscontinuedDate = _discontinuedDate;
			this.ModifiedDate = _modifiedDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Product"/> instance.
		///</summary>
		///<param name="_name">Name of the product.</param>
		///<param name="_productNumber">Unique product identification number.</param>
		///<param name="_makeFlag">0 = Product is purchased, 1 = Product is manufactured in-house.</param>
		///<param name="_finishedGoodsFlag">0 = Product is not a salable item. 1 = Product is salable.</param>
		///<param name="_color">Product color.</param>
		///<param name="_safetyStockLevel">Minimum inventory quantity. </param>
		///<param name="_reorderPoint">Inventory level that triggers a purchase order or work order. </param>
		///<param name="_standardCost">Standard cost of the product.</param>
		///<param name="_listPrice">Selling price.</param>
		///<param name="_size">Product size.</param>
		///<param name="_sizeUnitMeasureCode">Unit of measure for Size column.</param>
		///<param name="_weightUnitMeasureCode">Unit of measure for Weight column.</param>
		///<param name="_weight">Product weight.</param>
		///<param name="_daysToManufacture">Number of days required to manufacture the product.</param>
		///<param name="_productLine">R = Road, M = Mountain, T = Touring, S = Standard</param>
		///<param name="_safeNameClass">H = High, M = Medium, L = Low</param>
		///<param name="_style">W = Womens, M = Mens, U = Universal</param>
		///<param name="_productSubcategoryId">Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID. </param>
		///<param name="_productModelId">Product is a member of this product model. Foreign key to ProductModel.ProductModelID.</param>
		///<param name="_sellStartDate">Date the product was available for sale.</param>
		///<param name="_sellEndDate">Date the product was no longer available for sale.</param>
		///<param name="_discontinuedDate">Date the product was discontinued.</param>
		///<param name="_modifiedDate">Date and time the record was last updated.</param>
		public static Product CreateProduct(System.String _name, System.String _productNumber, System.Boolean _makeFlag, 
			System.Boolean _finishedGoodsFlag, System.String _color, System.Int16 _safetyStockLevel, System.Int16 _reorderPoint, 
			System.Decimal _standardCost, System.Decimal _listPrice, System.String _size, System.String _sizeUnitMeasureCode, 
			System.String _weightUnitMeasureCode, System.Decimal? _weight, System.Int32 _daysToManufacture, System.String _productLine, 
			System.String _safeNameClass, System.String _style, System.Int32? _productSubcategoryId, System.Int32? _productModelId, 
			System.DateTime _sellStartDate, System.DateTime? _sellEndDate, System.DateTime? _discontinuedDate, System.DateTime _modifiedDate)
		{
			Product newProduct = new Product();
			newProduct.Name = _name;
			newProduct.ProductNumber = _productNumber;
			newProduct.MakeFlag = _makeFlag;
			newProduct.FinishedGoodsFlag = _finishedGoodsFlag;
			newProduct.Color = _color;
			newProduct.SafetyStockLevel = _safetyStockLevel;
			newProduct.ReorderPoint = _reorderPoint;
			newProduct.StandardCost = _standardCost;
			newProduct.ListPrice = _listPrice;
			newProduct.Size = _size;
			newProduct.SizeUnitMeasureCode = _sizeUnitMeasureCode;
			newProduct.WeightUnitMeasureCode = _weightUnitMeasureCode;
			newProduct.Weight = _weight;
			newProduct.DaysToManufacture = _daysToManufacture;
			newProduct.ProductLine = _productLine;
			newProduct.SafeNameClass = _safeNameClass;
			newProduct.Style = _style;
			newProduct.ProductSubcategoryId = _productSubcategoryId;
			newProduct.ProductModelId = _productModelId;
			newProduct.SellStartDate = _sellStartDate;
			newProduct.SellEndDate = _sellEndDate;
			newProduct.DiscontinuedDate = _discontinuedDate;
			newProduct.ModifiedDate = _modifiedDate;
			return newProduct;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ProductId property. 
		///		Primary key for Product records.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@"Primary key for Product records."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 ProductId
		{
			get
			{
				return this.entityData.ProductId; 
			}
			
			set
			{
				if (this.entityData.ProductId == value)
					return;
				
                OnPropertyChanging("ProductId");                    
				OnColumnChanging(ProductColumn.ProductId, this.entityData.ProductId);
				this.entityData.ProductId = value;
				this.EntityId.ProductId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductColumn.ProductId, this.entityData.ProductId);
				OnPropertyChanged("ProductId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		Name of the product.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Name of the product."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
				
                OnPropertyChanging("Name");                    
				OnColumnChanging(ProductColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProductNumber property. 
		///		Unique product identification number.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Unique product identification number."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 25)]
		public virtual System.String ProductNumber
		{
			get
			{
				return this.entityData.ProductNumber; 
			}
			
			set
			{
				if (this.entityData.ProductNumber == value)
					return;
				
                OnPropertyChanging("ProductNumber");                    
				OnColumnChanging(ProductColumn.ProductNumber, this.entityData.ProductNumber);
				this.entityData.ProductNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductColumn.ProductNumber, this.entityData.ProductNumber);
				OnPropertyChanged("ProductNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MakeFlag property. 
		///		0 = Product is purchased, 1 = Product is manufactured in-house.
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"0 = Product is purchased, 1 = Product is manufactured in-house."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean MakeFlag
		{
			get
			{
				return this.entityData.MakeFlag; 
			}
			
			set
			{
				if (this.entityData.MakeFlag == value)
					return;
				
                OnPropertyChanging("MakeFlag");                    
				OnColumnChanging(ProductColumn.MakeFlag, this.entityData.MakeFlag);
				this.entityData.MakeFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductColumn.MakeFlag, this.entityData.MakeFlag);
				OnPropertyChanged("MakeFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FinishedGoodsFlag property. 
		///		0 = Product is not a salable item. 1 = Product is salable.
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"0 = Product is not a salable item. 1 = Product is salable."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean FinishedGoodsFlag
		{
			get
			{
				return this.entityData.FinishedGoodsFlag; 
			}
			
			set
			{
				if (this.entityData.FinishedGoodsFlag == value)
					return;
				
                OnPropertyChanging("FinishedGoodsFlag");                    
				OnColumnChanging(ProductColumn.FinishedGoodsFlag, this.entityData.FinishedGoodsFlag);
				this.entityData.FinishedGoodsFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductColumn.FinishedGoodsFlag, this.entityData.FinishedGoodsFlag);
				OnPropertyChanged("FinishedGoodsFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Color property. 
		///		Product color.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Product color."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String Color
		{
			get
			{
				return this.entityData.Color; 
			}
			
			set
			{
				if (this.entityData.Color == value)
					return;
				
                OnPropertyChanging("Color");                    
				OnColumnChanging(ProductColumn.Color, this.entityData.Color);
				this.entityData.Color = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductColumn.Color, this.entityData.Color);
				OnPropertyChanged("Color");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SafetyStockLevel property. 
		///		Minimum inventory quantity. 
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Minimum inventory quantity. "), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int16 SafetyStockLevel
		{
			get
			{
				return this.entityData.SafetyStockLevel; 
			}
			
			set
			{
				if (this.entityData.SafetyStockLevel == value)
					return;
				
                OnPropertyChanging("SafetyStockLevel");                    
				OnColumnChanging(ProductColumn.SafetyStockLevel, this.entityData.SafetyStockLevel);
				this.entityData.SafetyStockLevel = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductColumn.SafetyStockLevel, this.entityData.SafetyStockLevel);
				OnPropertyChanged("SafetyStockLevel");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReorderPoint property. 
		///		Inventory level that triggers a purchase order or work order. 
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Inventory level that triggers a purchase order or work order. "), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int16 ReorderPoint
		{
			get
			{
				return this.entityData.ReorderPoint; 
			}
			
			set
			{
				if (this.entityData.ReorderPoint == value)
					return;
				
                OnPropertyChanging("ReorderPoint");                    
				OnColumnChanging(ProductColumn.ReorderPoint, this.entityData.ReorderPoint);
				this.entityData.ReorderPoint = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductColumn.ReorderPoint, this.entityData.ReorderPoint);
				OnPropertyChanged("ReorderPoint");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StandardCost property. 
		///		Standard cost of the product.
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Standard cost of the product."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal StandardCost
		{
			get
			{
				return this.entityData.StandardCost; 
			}
			
			set
			{
				if (this.entityData.StandardCost == value)
					return;
				
                OnPropertyChanging("StandardCost");                    
				OnColumnChanging(ProductColumn.StandardCost, this.entityData.StandardCost);
				this.entityData.StandardCost = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductColumn.StandardCost, this.entityData.StandardCost);
				OnPropertyChanged("StandardCost");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ListPrice property. 
		///		Selling price.
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Selling price."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ListPrice
		{
			get
			{
				return this.entityData.ListPrice; 
			}
			
			set
			{
				if (this.entityData.ListPrice == value)
					return;
				
                OnPropertyChanging("ListPrice");                    
				OnColumnChanging(ProductColumn.ListPrice, this.entityData.ListPrice);
				this.entityData.ListPrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductColumn.ListPrice, this.entityData.ListPrice);
				OnPropertyChanged("ListPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Size property. 
		///		Product size.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Product size."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 5)]
		public virtual System.String Size
		{
			get
			{
				return this.entityData.Size; 
			}
			
			set
			{
				if (this.entityData.Size == value)
					return;
				
                OnPropertyChanging("Size");                    
				OnColumnChanging(ProductColumn.Size, this.entityData.Size);
				this.entityData.Size = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductColumn.Size, this.entityData.Size);
				OnPropertyChanged("Size");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SizeUnitMeasureCode property. 
		///		Unit of measure for Size column.
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Unit of measure for Size column."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 3)]
		public virtual System.String SizeUnitMeasureCode
		{
			get
			{
				return this.entityData.SizeUnitMeasureCode; 
			}
			
			set
			{
				if (this.entityData.SizeUnitMeasureCode == value)
					return;
				
                OnPropertyChanging("SizeUnitMeasureCode");                    
				OnColumnChanging(ProductColumn.SizeUnitMeasureCode, this.entityData.SizeUnitMeasureCode);
				this.entityData.SizeUnitMeasureCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductColumn.SizeUnitMeasureCode, this.entityData.SizeUnitMeasureCode);
				OnPropertyChanged("SizeUnitMeasureCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WeightUnitMeasureCode property. 
		///		Unit of measure for Weight column.
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Unit of measure for Weight column."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 3)]
		public virtual System.String WeightUnitMeasureCode
		{
			get
			{
				return this.entityData.WeightUnitMeasureCode; 
			}
			
			set
			{
				if (this.entityData.WeightUnitMeasureCode == value)
					return;
				
                OnPropertyChanging("WeightUnitMeasureCode");                    
				OnColumnChanging(ProductColumn.WeightUnitMeasureCode, this.entityData.WeightUnitMeasureCode);
				this.entityData.WeightUnitMeasureCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductColumn.WeightUnitMeasureCode, this.entityData.WeightUnitMeasureCode);
				OnPropertyChanged("WeightUnitMeasureCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Weight property. 
		///		Product weight.
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWeightNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Product weight."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Weight
		{
			get
			{
				return this.entityData.Weight; 
			}
			
			set
			{
				if (this.entityData.Weight == value)
					return;
				
                OnPropertyChanging("Weight");                    
				OnColumnChanging(ProductColumn.Weight, this.entityData.Weight);
				this.entityData.Weight = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductColumn.Weight, this.entityData.Weight);
				OnPropertyChanged("Weight");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DaysToManufacture property. 
		///		Number of days required to manufacture the product.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Number of days required to manufacture the product."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 DaysToManufacture
		{
			get
			{
				return this.entityData.DaysToManufacture; 
			}
			
			set
			{
				if (this.entityData.DaysToManufacture == value)
					return;
				
                OnPropertyChanging("DaysToManufacture");                    
				OnColumnChanging(ProductColumn.DaysToManufacture, this.entityData.DaysToManufacture);
				this.entityData.DaysToManufacture = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductColumn.DaysToManufacture, this.entityData.DaysToManufacture);
				OnPropertyChanged("DaysToManufacture");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProductLine property. 
		///		R = Road, M = Mountain, T = Touring, S = Standard
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"R = Road, M = Mountain, T = Touring, S = Standard"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 2)]
		public virtual System.String ProductLine
		{
			get
			{
				return this.entityData.ProductLine; 
			}
			
			set
			{
				if (this.entityData.ProductLine == value)
					return;
				
                OnPropertyChanging("ProductLine");                    
				OnColumnChanging(ProductColumn.ProductLine, this.entityData.ProductLine);
				this.entityData.ProductLine = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductColumn.ProductLine, this.entityData.ProductLine);
				OnPropertyChanged("ProductLine");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SafeNameClass property. 
		///		H = High, M = Medium, L = Low
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"H = High, M = Medium, L = Low"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 2)]
		public virtual System.String SafeNameClass
		{
			get
			{
				return this.entityData.SafeNameClass; 
			}
			
			set
			{
				if (this.entityData.SafeNameClass == value)
					return;
				
                OnPropertyChanging("SafeNameClass");                    
				OnColumnChanging(ProductColumn.SafeNameClass, this.entityData.SafeNameClass);
				this.entityData.SafeNameClass = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductColumn.SafeNameClass, this.entityData.SafeNameClass);
				OnPropertyChanged("SafeNameClass");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Style property. 
		///		W = Womens, M = Mens, U = Universal
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"W = Womens, M = Mens, U = Universal"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 2)]
		public virtual System.String Style
		{
			get
			{
				return this.entityData.Style; 
			}
			
			set
			{
				if (this.entityData.Style == value)
					return;
				
                OnPropertyChanging("Style");                    
				OnColumnChanging(ProductColumn.Style, this.entityData.Style);
				this.entityData.Style = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductColumn.Style, this.entityData.Style);
				OnPropertyChanged("Style");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProductSubcategoryId property. 
		///		Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID. 
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsProductSubcategoryIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID. "), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ProductSubcategoryId
		{
			get
			{
				return this.entityData.ProductSubcategoryId; 
			}
			
			set
			{
				if (this.entityData.ProductSubcategoryId == value)
					return;
				
                OnPropertyChanging("ProductSubcategoryId");                    
				OnColumnChanging(ProductColumn.ProductSubcategoryId, this.entityData.ProductSubcategoryId);
				this.entityData.ProductSubcategoryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductColumn.ProductSubcategoryId, this.entityData.ProductSubcategoryId);
				OnPropertyChanged("ProductSubcategoryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProductModelId property. 
		///		Product is a member of this product model. Foreign key to ProductModel.ProductModelID.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsProductModelIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Product is a member of this product model. Foreign key to ProductModel.ProductModelID."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ProductModelId
		{
			get
			{
				return this.entityData.ProductModelId; 
			}
			
			set
			{
				if (this.entityData.ProductModelId == value)
					return;
				
                OnPropertyChanging("ProductModelId");                    
				OnColumnChanging(ProductColumn.ProductModelId, this.entityData.ProductModelId);
				this.entityData.ProductModelId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductColumn.ProductModelId, this.entityData.ProductModelId);
				OnPropertyChanged("ProductModelId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SellStartDate property. 
		///		Date the product was available for sale.
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Date the product was available for sale."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime SellStartDate
		{
			get
			{
				return this.entityData.SellStartDate; 
			}
			
			set
			{
				if (this.entityData.SellStartDate == value)
					return;
				
                OnPropertyChanging("SellStartDate");                    
				OnColumnChanging(ProductColumn.SellStartDate, this.entityData.SellStartDate);
				this.entityData.SellStartDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductColumn.SellStartDate, this.entityData.SellStartDate);
				OnPropertyChanged("SellStartDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SellEndDate property. 
		///		Date the product was no longer available for sale.
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsSellEndDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Date the product was no longer available for sale."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? SellEndDate
		{
			get
			{
				return this.entityData.SellEndDate; 
			}
			
			set
			{
				if (this.entityData.SellEndDate == value)
					return;
				
                OnPropertyChanging("SellEndDate");                    
				OnColumnChanging(ProductColumn.SellEndDate, this.entityData.SellEndDate);
				this.entityData.SellEndDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductColumn.SellEndDate, this.entityData.SellEndDate);
				OnPropertyChanged("SellEndDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DiscontinuedDate property. 
		///		Date the product was discontinued.
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsDiscontinuedDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Date the product was discontinued."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DiscontinuedDate
		{
			get
			{
				return this.entityData.DiscontinuedDate; 
			}
			
			set
			{
				if (this.entityData.DiscontinuedDate == value)
					return;
				
                OnPropertyChanging("DiscontinuedDate");                    
				OnColumnChanging(ProductColumn.DiscontinuedDate, this.entityData.DiscontinuedDate);
				this.entityData.DiscontinuedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductColumn.DiscontinuedDate, this.entityData.DiscontinuedDate);
				OnPropertyChanged("DiscontinuedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Rowguid property. 
		///		ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, true, false)]
		public virtual System.Guid Rowguid
		{
			get
			{
				return this.entityData.Rowguid; 
			}
			
			set
			{
				if (this.entityData.Rowguid == value)
					return;
				
                OnPropertyChanging("Rowguid");                    
				OnColumnChanging(ProductColumn.Rowguid, this.entityData.Rowguid);
				this.entityData.Rowguid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductColumn.Rowguid, this.entityData.Rowguid);
				OnPropertyChanged("Rowguid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModifiedDate property. 
		///		Date and time the record was last updated.
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Date and time the record was last updated."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ModifiedDate
		{
			get
			{
				return this.entityData.ModifiedDate; 
			}
			
			set
			{
				if (this.entityData.ModifiedDate == value)
					return;
				
                OnPropertyChanging("ModifiedDate");                    
				OnColumnChanging(ProductColumn.ModifiedDate, this.entityData.ModifiedDate);
				this.entityData.ModifiedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductColumn.ModifiedDate, this.entityData.ModifiedDate);
				OnPropertyChanged("ModifiedDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="ProductModel"/>.
		/// </summary>
		/// <value>The source ProductModel for ProductModelId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ProductModel ProductModelIdSource
      	{
            get { return entityData.ProductModelIdSource; }
            set { entityData.ProductModelIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ProductSubcategory"/>.
		/// </summary>
		/// <value>The source ProductSubcategory for ProductSubcategoryId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ProductSubcategory ProductSubcategoryIdSource
      	{
            get { return entityData.ProductSubcategoryIdSource; }
            set { entityData.ProductSubcategoryIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="UnitMeasure"/>.
		/// </summary>
		/// <value>The source UnitMeasure for SizeUnitMeasureCode.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual UnitMeasure SizeUnitMeasureCodeSource
      	{
            get { return entityData.SizeUnitMeasureCodeSource; }
            set { entityData.SizeUnitMeasureCodeSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="UnitMeasure"/>.
		/// </summary>
		/// <value>The source UnitMeasure for WeightUnitMeasureCode.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual UnitMeasure WeightUnitMeasureCodeSource
      	{
            get { return entityData.WeightUnitMeasureCodeSource; }
            set { entityData.WeightUnitMeasureCodeSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of ProductProductPhoto objects
		///	which are related to this object through the relation FK_ProductProductPhoto_Product_ProductID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ProductProductPhoto> ProductProductPhotoCollection
		{
			get { return entityData.ProductProductPhotoCollection; }
			set { entityData.ProductProductPhotoCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of TransactionHistory objects
		///	which are related to this object through the relation FK_TransactionHistory_Product_ProductID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<TransactionHistory> TransactionHistoryCollection
		{
			get { return entityData.TransactionHistoryCollection; }
			set { entityData.TransactionHistoryCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ProductVendor objects
		///	which are related to this object through the relation FK_ProductVendor_Product_ProductID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ProductVendor> ProductVendorCollection
		{
			get { return entityData.ProductVendorCollection; }
			set { entityData.ProductVendorCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of BillOfMaterials objects
		///	which are related to this object through the relation FK_BillOfMaterials_Product_ProductAssemblyID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<BillOfMaterials> BillOfMaterialsCollectionGetByProductAssemblyId
		{
			get { return entityData.BillOfMaterialsCollectionGetByProductAssemblyId; }
			set { entityData.BillOfMaterialsCollectionGetByProductAssemblyId = value; }	
		}

		/// <summary>
		///	Holds a collection of DocumentFromProductDocument objects
		///	which are related to this object through the junction table ProductDocument
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Document> DocumentIdDocumentCollection_From_ProductDocument
		{
			get { return entityData.DocumentIdDocumentCollection_From_ProductDocument; }
			set { entityData.DocumentIdDocumentCollection_From_ProductDocument = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SpecialOfferProduct objects
		///	which are related to this object through the relation FK_SpecialOfferProduct_Product_ProductID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SpecialOfferProduct> SpecialOfferProductCollection
		{
			get { return entityData.SpecialOfferProductCollection; }
			set { entityData.SpecialOfferProductCollection = value; }	
		}

		/// <summary>
		///	Holds a collection of ProductPhotoFromProductProductPhoto objects
		///	which are related to this object through the junction table ProductProductPhoto
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ProductPhoto> ProductPhotoIdProductPhotoCollection_From_ProductProductPhoto
		{
			get { return entityData.ProductPhotoIdProductPhotoCollection_From_ProductProductPhoto; }
			set { entityData.ProductPhotoIdProductPhotoCollection_From_ProductProductPhoto = value; }	
		}
	
		/// <summary>
		///	Holds a collection of BillOfMaterials objects
		///	which are related to this object through the relation FK_BillOfMaterials_Product_ComponentID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<BillOfMaterials> BillOfMaterialsCollectionGetByComponentId
		{
			get { return entityData.BillOfMaterialsCollectionGetByComponentId; }
			set { entityData.BillOfMaterialsCollectionGetByComponentId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ProductInventory objects
		///	which are related to this object through the relation FK_ProductInventory_Product_ProductID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ProductInventory> ProductInventoryCollection
		{
			get { return entityData.ProductInventoryCollection; }
			set { entityData.ProductInventoryCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ProductDocument objects
		///	which are related to this object through the relation FK_ProductDocument_Product_ProductID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ProductDocument> ProductDocumentCollection
		{
			get { return entityData.ProductDocumentCollection; }
			set { entityData.ProductDocumentCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ProductReview objects
		///	which are related to this object through the relation FK_ProductReview_Product_ProductID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ProductReview> ProductReviewCollection
		{
			get { return entityData.ProductReviewCollection; }
			set { entityData.ProductReviewCollection = value; }	
		}

		/// <summary>
		///	Holds a collection of VendorFromProductVendor objects
		///	which are related to this object through the junction table ProductVendor
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Vendor> VendorIdVendorCollection_From_ProductVendor
		{
			get { return entityData.VendorIdVendorCollection_From_ProductVendor; }
			set { entityData.VendorIdVendorCollection_From_ProductVendor = value; }	
		}
	
		/// <summary>
		///	Holds a collection of WorkOrder objects
		///	which are related to this object through the relation FK_WorkOrder_Product_ProductID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<WorkOrder> WorkOrderCollection
		{
			get { return entityData.WorkOrderCollection; }
			set { entityData.WorkOrderCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of PurchaseOrderDetail objects
		///	which are related to this object through the relation FK_PurchaseOrderDetail_Product_ProductID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PurchaseOrderDetail> PurchaseOrderDetailCollection
		{
			get { return entityData.PurchaseOrderDetailCollection; }
			set { entityData.PurchaseOrderDetailCollection = value; }	
		}

		/// <summary>
		///	Holds a collection of LocationFromProductInventory objects
		///	which are related to this object through the junction table ProductInventory
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Location> LocationIdLocationCollection_From_ProductInventory
		{
			get { return entityData.LocationIdLocationCollection_From_ProductInventory; }
			set { entityData.LocationIdLocationCollection_From_ProductInventory = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ProductListPriceHistory objects
		///	which are related to this object through the relation FK_ProductListPriceHistory_Product_ProductID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ProductListPriceHistory> ProductListPriceHistoryCollection
		{
			get { return entityData.ProductListPriceHistoryCollection; }
			set { entityData.ProductListPriceHistoryCollection = value; }	
		}

		/// <summary>
		///	Holds a collection of SpecialOfferFromSpecialOfferProduct objects
		///	which are related to this object through the junction table SpecialOfferProduct
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SpecialOffer> SpecialOfferIdSpecialOfferCollection_From_SpecialOfferProduct
		{
			get { return entityData.SpecialOfferIdSpecialOfferCollection_From_SpecialOfferProduct; }
			set { entityData.SpecialOfferIdSpecialOfferCollection_From_SpecialOfferProduct = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ShoppingCartItem objects
		///	which are related to this object through the relation FK_ShoppingCartItem_Product_ProductID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ShoppingCartItem> ShoppingCartItemCollection
		{
			get { return entityData.ShoppingCartItemCollection; }
			set { entityData.ShoppingCartItemCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ProductCostHistory objects
		///	which are related to this object through the relation FK_ProductCostHistory_Product_ProductID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ProductCostHistory> ProductCostHistoryCollection
		{
			get { return entityData.ProductCostHistoryCollection; }
			set { entityData.ProductCostHistoryCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Name", "Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Name", "Name", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ProductNumber", "Product Number"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ProductNumber", "Product Number", 25));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Color", "Color", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Size", "Size", 5));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SizeUnitMeasureCode", "Size Unit Measure Code", 3));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("WeightUnitMeasureCode", "Weight Unit Measure Code", 3));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ProductLine", "Product Line", 2));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SafeNameClass", "Class", 2));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Style", "Style", 2));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Product"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ProductID", "Name", "ProductNumber", "MakeFlag", "FinishedGoodsFlag", "Color", "SafetyStockLevel", "ReorderPoint", "StandardCost", "ListPrice", "Size", "SizeUnitMeasureCode", "WeightUnitMeasureCode", "Weight", "DaysToManufacture", "ProductLine", "Class", "Style", "ProductSubcategoryID", "ProductModelID", "SellStartDate", "SellEndDate", "DiscontinuedDate", "rowguid", "ModifiedDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ProductEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Product) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Product>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Product);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Product Entity 
		///</summary>
		protected virtual Product Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Product copy = new Product();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.ProductId = this.ProductId;
				copy.Name = this.Name;
				copy.ProductNumber = this.ProductNumber;
				copy.MakeFlag = this.MakeFlag;
				copy.FinishedGoodsFlag = this.FinishedGoodsFlag;
				copy.Color = this.Color;
				copy.SafetyStockLevel = this.SafetyStockLevel;
				copy.ReorderPoint = this.ReorderPoint;
				copy.StandardCost = this.StandardCost;
				copy.ListPrice = this.ListPrice;
				copy.Size = this.Size;
				copy.SizeUnitMeasureCode = this.SizeUnitMeasureCode;
				copy.WeightUnitMeasureCode = this.WeightUnitMeasureCode;
				copy.Weight = this.Weight;
				copy.DaysToManufacture = this.DaysToManufacture;
				copy.ProductLine = this.ProductLine;
				copy.SafeNameClass = this.SafeNameClass;
				copy.Style = this.Style;
				copy.ProductSubcategoryId = this.ProductSubcategoryId;
				copy.ProductModelId = this.ProductModelId;
				copy.SellStartDate = this.SellStartDate;
				copy.SellEndDate = this.SellEndDate;
				copy.DiscontinuedDate = this.DiscontinuedDate;
				copy.Rowguid = this.Rowguid;
				copy.ModifiedDate = this.ModifiedDate;
			
			if (this.ProductModelIdSource != null && existingCopies.Contains(this.ProductModelIdSource))
				copy.ProductModelIdSource = existingCopies[this.ProductModelIdSource] as ProductModel;
			else
				copy.ProductModelIdSource = MakeCopyOf(this.ProductModelIdSource, existingCopies) as ProductModel;
			if (this.ProductSubcategoryIdSource != null && existingCopies.Contains(this.ProductSubcategoryIdSource))
				copy.ProductSubcategoryIdSource = existingCopies[this.ProductSubcategoryIdSource] as ProductSubcategory;
			else
				copy.ProductSubcategoryIdSource = MakeCopyOf(this.ProductSubcategoryIdSource, existingCopies) as ProductSubcategory;
			if (this.SizeUnitMeasureCodeSource != null && existingCopies.Contains(this.SizeUnitMeasureCodeSource))
				copy.SizeUnitMeasureCodeSource = existingCopies[this.SizeUnitMeasureCodeSource] as UnitMeasure;
			else
				copy.SizeUnitMeasureCodeSource = MakeCopyOf(this.SizeUnitMeasureCodeSource, existingCopies) as UnitMeasure;
			if (this.WeightUnitMeasureCodeSource != null && existingCopies.Contains(this.WeightUnitMeasureCodeSource))
				copy.WeightUnitMeasureCodeSource = existingCopies[this.WeightUnitMeasureCodeSource] as UnitMeasure;
			else
				copy.WeightUnitMeasureCodeSource = MakeCopyOf(this.WeightUnitMeasureCodeSource, existingCopies) as UnitMeasure;
		
			//deep copy nested objects
			copy.ProductProductPhotoCollection = (TList<ProductProductPhoto>) MakeCopyOf(this.ProductProductPhotoCollection, existingCopies); 
			copy.TransactionHistoryCollection = (TList<TransactionHistory>) MakeCopyOf(this.TransactionHistoryCollection, existingCopies); 
			copy.ProductVendorCollection = (TList<ProductVendor>) MakeCopyOf(this.ProductVendorCollection, existingCopies); 
			copy.BillOfMaterialsCollectionGetByProductAssemblyId = (TList<BillOfMaterials>) MakeCopyOf(this.BillOfMaterialsCollectionGetByProductAssemblyId, existingCopies); 
			copy.DocumentIdDocumentCollection_From_ProductDocument = (TList<Document>) MakeCopyOf(this.DocumentIdDocumentCollection_From_ProductDocument, existingCopies); 
			copy.SpecialOfferProductCollection = (TList<SpecialOfferProduct>) MakeCopyOf(this.SpecialOfferProductCollection, existingCopies); 
			copy.ProductPhotoIdProductPhotoCollection_From_ProductProductPhoto = (TList<ProductPhoto>) MakeCopyOf(this.ProductPhotoIdProductPhotoCollection_From_ProductProductPhoto, existingCopies); 
			copy.BillOfMaterialsCollectionGetByComponentId = (TList<BillOfMaterials>) MakeCopyOf(this.BillOfMaterialsCollectionGetByComponentId, existingCopies); 
			copy.ProductInventoryCollection = (TList<ProductInventory>) MakeCopyOf(this.ProductInventoryCollection, existingCopies); 
			copy.ProductDocumentCollection = (TList<ProductDocument>) MakeCopyOf(this.ProductDocumentCollection, existingCopies); 
			copy.ProductReviewCollection = (TList<ProductReview>) MakeCopyOf(this.ProductReviewCollection, existingCopies); 
			copy.VendorIdVendorCollection_From_ProductVendor = (TList<Vendor>) MakeCopyOf(this.VendorIdVendorCollection_From_ProductVendor, existingCopies); 
			copy.WorkOrderCollection = (TList<WorkOrder>) MakeCopyOf(this.WorkOrderCollection, existingCopies); 
			copy.PurchaseOrderDetailCollection = (TList<PurchaseOrderDetail>) MakeCopyOf(this.PurchaseOrderDetailCollection, existingCopies); 
			copy.LocationIdLocationCollection_From_ProductInventory = (TList<Location>) MakeCopyOf(this.LocationIdLocationCollection_From_ProductInventory, existingCopies); 
			copy.ProductListPriceHistoryCollection = (TList<ProductListPriceHistory>) MakeCopyOf(this.ProductListPriceHistoryCollection, existingCopies); 
			copy.SpecialOfferIdSpecialOfferCollection_From_SpecialOfferProduct = (TList<SpecialOffer>) MakeCopyOf(this.SpecialOfferIdSpecialOfferCollection_From_SpecialOfferProduct, existingCopies); 
			copy.ShoppingCartItemCollection = (TList<ShoppingCartItem>) MakeCopyOf(this.ShoppingCartItemCollection, existingCopies); 
			copy.ProductCostHistoryCollection = (TList<ProductCostHistory>) MakeCopyOf(this.ProductCostHistoryCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Product Entity 
		///</summary>
		public virtual Product Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Product Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Product DeepCopy()
		{
			return EntityHelper.Clone<Product>(this as Product);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ProductEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ProductEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ProductEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ProductColumn column)
		{
			switch(column)
			{
					case ProductColumn.ProductId:
					return entityData.ProductId != _originalData.ProductId;
					case ProductColumn.Name:
					return entityData.Name != _originalData.Name;
					case ProductColumn.ProductNumber:
					return entityData.ProductNumber != _originalData.ProductNumber;
					case ProductColumn.MakeFlag:
					return entityData.MakeFlag != _originalData.MakeFlag;
					case ProductColumn.FinishedGoodsFlag:
					return entityData.FinishedGoodsFlag != _originalData.FinishedGoodsFlag;
					case ProductColumn.Color:
					return entityData.Color != _originalData.Color;
					case ProductColumn.SafetyStockLevel:
					return entityData.SafetyStockLevel != _originalData.SafetyStockLevel;
					case ProductColumn.ReorderPoint:
					return entityData.ReorderPoint != _originalData.ReorderPoint;
					case ProductColumn.StandardCost:
					return entityData.StandardCost != _originalData.StandardCost;
					case ProductColumn.ListPrice:
					return entityData.ListPrice != _originalData.ListPrice;
					case ProductColumn.Size:
					return entityData.Size != _originalData.Size;
					case ProductColumn.SizeUnitMeasureCode:
					return entityData.SizeUnitMeasureCode != _originalData.SizeUnitMeasureCode;
					case ProductColumn.WeightUnitMeasureCode:
					return entityData.WeightUnitMeasureCode != _originalData.WeightUnitMeasureCode;
					case ProductColumn.Weight:
					return entityData.Weight != _originalData.Weight;
					case ProductColumn.DaysToManufacture:
					return entityData.DaysToManufacture != _originalData.DaysToManufacture;
					case ProductColumn.ProductLine:
					return entityData.ProductLine != _originalData.ProductLine;
					case ProductColumn.SafeNameClass:
					return entityData.SafeNameClass != _originalData.SafeNameClass;
					case ProductColumn.Style:
					return entityData.Style != _originalData.Style;
					case ProductColumn.ProductSubcategoryId:
					return entityData.ProductSubcategoryId != _originalData.ProductSubcategoryId;
					case ProductColumn.ProductModelId:
					return entityData.ProductModelId != _originalData.ProductModelId;
					case ProductColumn.SellStartDate:
					return entityData.SellStartDate != _originalData.SellStartDate;
					case ProductColumn.SellEndDate:
					return entityData.SellEndDate != _originalData.SellEndDate;
					case ProductColumn.DiscontinuedDate:
					return entityData.DiscontinuedDate != _originalData.DiscontinuedDate;
					case ProductColumn.Rowguid:
					return entityData.Rowguid != _originalData.Rowguid;
					case ProductColumn.ModifiedDate:
					return entityData.ModifiedDate != _originalData.ModifiedDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ProductColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ProductId != _originalData.ProductId;
			result = result || entityData.Name != _originalData.Name;
			result = result || entityData.ProductNumber != _originalData.ProductNumber;
			result = result || entityData.MakeFlag != _originalData.MakeFlag;
			result = result || entityData.FinishedGoodsFlag != _originalData.FinishedGoodsFlag;
			result = result || entityData.Color != _originalData.Color;
			result = result || entityData.SafetyStockLevel != _originalData.SafetyStockLevel;
			result = result || entityData.ReorderPoint != _originalData.ReorderPoint;
			result = result || entityData.StandardCost != _originalData.StandardCost;
			result = result || entityData.ListPrice != _originalData.ListPrice;
			result = result || entityData.Size != _originalData.Size;
			result = result || entityData.SizeUnitMeasureCode != _originalData.SizeUnitMeasureCode;
			result = result || entityData.WeightUnitMeasureCode != _originalData.WeightUnitMeasureCode;
			result = result || entityData.Weight != _originalData.Weight;
			result = result || entityData.DaysToManufacture != _originalData.DaysToManufacture;
			result = result || entityData.ProductLine != _originalData.ProductLine;
			result = result || entityData.SafeNameClass != _originalData.SafeNameClass;
			result = result || entityData.Style != _originalData.Style;
			result = result || entityData.ProductSubcategoryId != _originalData.ProductSubcategoryId;
			result = result || entityData.ProductModelId != _originalData.ProductModelId;
			result = result || entityData.SellStartDate != _originalData.SellStartDate;
			result = result || entityData.SellEndDate != _originalData.SellEndDate;
			result = result || entityData.DiscontinuedDate != _originalData.DiscontinuedDate;
			result = result || entityData.Rowguid != _originalData.Rowguid;
			result = result || entityData.ModifiedDate != _originalData.ModifiedDate;
			return result;
		}	
		
		///<summary>
		///  Returns a Product Entity with the original data.
		///</summary>
		public Product GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateProduct(
				_originalData.Name,
				_originalData.ProductNumber,
				_originalData.MakeFlag,
				_originalData.FinishedGoodsFlag,
				_originalData.Color,
				_originalData.SafetyStockLevel,
				_originalData.ReorderPoint,
				_originalData.StandardCost,
				_originalData.ListPrice,
				_originalData.Size,
				_originalData.SizeUnitMeasureCode,
				_originalData.WeightUnitMeasureCode,
				_originalData.Weight,
				_originalData.DaysToManufacture,
				_originalData.ProductLine,
				_originalData.SafeNameClass,
				_originalData.Style,
				_originalData.ProductSubcategoryId,
				_originalData.ProductModelId,
				_originalData.SellStartDate,
				_originalData.SellEndDate,
				_originalData.DiscontinuedDate,
				_originalData.ModifiedDate
				);
				
			return (Product)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ProductBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ProductBase)
				return ValueEquals(this, (ProductBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ProductBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ProductId.GetHashCode() ^ 
					this.Name.GetHashCode() ^ 
					this.ProductNumber.GetHashCode() ^ 
					this.MakeFlag.GetHashCode() ^ 
					this.FinishedGoodsFlag.GetHashCode() ^ 
					((this.Color == null) ? string.Empty : this.Color.ToString()).GetHashCode() ^ 
					this.SafetyStockLevel.GetHashCode() ^ 
					this.ReorderPoint.GetHashCode() ^ 
					this.StandardCost.GetHashCode() ^ 
					this.ListPrice.GetHashCode() ^ 
					((this.Size == null) ? string.Empty : this.Size.ToString()).GetHashCode() ^ 
					((this.SizeUnitMeasureCode == null) ? string.Empty : this.SizeUnitMeasureCode.ToString()).GetHashCode() ^ 
					((this.WeightUnitMeasureCode == null) ? string.Empty : this.WeightUnitMeasureCode.ToString()).GetHashCode() ^ 
					((this.Weight == null) ? string.Empty : this.Weight.ToString()).GetHashCode() ^ 
					this.DaysToManufacture.GetHashCode() ^ 
					((this.ProductLine == null) ? string.Empty : this.ProductLine.ToString()).GetHashCode() ^ 
					((this.SafeNameClass == null) ? string.Empty : this.SafeNameClass.ToString()).GetHashCode() ^ 
					((this.Style == null) ? string.Empty : this.Style.ToString()).GetHashCode() ^ 
					((this.ProductSubcategoryId == null) ? string.Empty : this.ProductSubcategoryId.ToString()).GetHashCode() ^ 
					((this.ProductModelId == null) ? string.Empty : this.ProductModelId.ToString()).GetHashCode() ^ 
					this.SellStartDate.GetHashCode() ^ 
					((this.SellEndDate == null) ? string.Empty : this.SellEndDate.ToString()).GetHashCode() ^ 
					((this.DiscontinuedDate == null) ? string.Empty : this.DiscontinuedDate.ToString()).GetHashCode() ^ 
					this.Rowguid.GetHashCode() ^ 
					this.ModifiedDate.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ProductBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ProductBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ProductBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ProductBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ProductBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ProductBase Object1, ProductBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ProductId != Object2.ProductId)
				equal = false;
			if (Object1.Name != Object2.Name)
				equal = false;
			if (Object1.ProductNumber != Object2.ProductNumber)
				equal = false;
			if (Object1.MakeFlag != Object2.MakeFlag)
				equal = false;
			if (Object1.FinishedGoodsFlag != Object2.FinishedGoodsFlag)
				equal = false;
			if ( Object1.Color != null && Object2.Color != null )
			{
				if (Object1.Color != Object2.Color)
					equal = false;
			}
			else if (Object1.Color == null ^ Object2.Color == null )
			{
				equal = false;
			}
			if (Object1.SafetyStockLevel != Object2.SafetyStockLevel)
				equal = false;
			if (Object1.ReorderPoint != Object2.ReorderPoint)
				equal = false;
			if (Object1.StandardCost != Object2.StandardCost)
				equal = false;
			if (Object1.ListPrice != Object2.ListPrice)
				equal = false;
			if ( Object1.Size != null && Object2.Size != null )
			{
				if (Object1.Size != Object2.Size)
					equal = false;
			}
			else if (Object1.Size == null ^ Object2.Size == null )
			{
				equal = false;
			}
			if ( Object1.SizeUnitMeasureCode != null && Object2.SizeUnitMeasureCode != null )
			{
				if (Object1.SizeUnitMeasureCode != Object2.SizeUnitMeasureCode)
					equal = false;
			}
			else if (Object1.SizeUnitMeasureCode == null ^ Object2.SizeUnitMeasureCode == null )
			{
				equal = false;
			}
			if ( Object1.WeightUnitMeasureCode != null && Object2.WeightUnitMeasureCode != null )
			{
				if (Object1.WeightUnitMeasureCode != Object2.WeightUnitMeasureCode)
					equal = false;
			}
			else if (Object1.WeightUnitMeasureCode == null ^ Object2.WeightUnitMeasureCode == null )
			{
				equal = false;
			}
			if ( Object1.Weight != null && Object2.Weight != null )
			{
				if (Object1.Weight != Object2.Weight)
					equal = false;
			}
			else if (Object1.Weight == null ^ Object2.Weight == null )
			{
				equal = false;
			}
			if (Object1.DaysToManufacture != Object2.DaysToManufacture)
				equal = false;
			if ( Object1.ProductLine != null && Object2.ProductLine != null )
			{
				if (Object1.ProductLine != Object2.ProductLine)
					equal = false;
			}
			else if (Object1.ProductLine == null ^ Object2.ProductLine == null )
			{
				equal = false;
			}
			if ( Object1.SafeNameClass != null && Object2.SafeNameClass != null )
			{
				if (Object1.SafeNameClass != Object2.SafeNameClass)
					equal = false;
			}
			else if (Object1.SafeNameClass == null ^ Object2.SafeNameClass == null )
			{
				equal = false;
			}
			if ( Object1.Style != null && Object2.Style != null )
			{
				if (Object1.Style != Object2.Style)
					equal = false;
			}
			else if (Object1.Style == null ^ Object2.Style == null )
			{
				equal = false;
			}
			if ( Object1.ProductSubcategoryId != null && Object2.ProductSubcategoryId != null )
			{
				if (Object1.ProductSubcategoryId != Object2.ProductSubcategoryId)
					equal = false;
			}
			else if (Object1.ProductSubcategoryId == null ^ Object2.ProductSubcategoryId == null )
			{
				equal = false;
			}
			if ( Object1.ProductModelId != null && Object2.ProductModelId != null )
			{
				if (Object1.ProductModelId != Object2.ProductModelId)
					equal = false;
			}
			else if (Object1.ProductModelId == null ^ Object2.ProductModelId == null )
			{
				equal = false;
			}
			if (Object1.SellStartDate != Object2.SellStartDate)
				equal = false;
			if ( Object1.SellEndDate != null && Object2.SellEndDate != null )
			{
				if (Object1.SellEndDate != Object2.SellEndDate)
					equal = false;
			}
			else if (Object1.SellEndDate == null ^ Object2.SellEndDate == null )
			{
				equal = false;
			}
			if ( Object1.DiscontinuedDate != null && Object2.DiscontinuedDate != null )
			{
				if (Object1.DiscontinuedDate != Object2.DiscontinuedDate)
					equal = false;
			}
			else if (Object1.DiscontinuedDate == null ^ Object2.DiscontinuedDate == null )
			{
				equal = false;
			}
			if (Object1.Rowguid != Object2.Rowguid)
				equal = false;
			if (Object1.ModifiedDate != Object2.ModifiedDate)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ProductBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ProductComparer GetComparer()
        {
            return new ProductComparer();
        }
        */

        // Comparer delegates back to Product
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Product rhs, ProductColumn which)
        {
            switch (which)
            {
            	
            	
            	case ProductColumn.ProductId:
            		return this.ProductId.CompareTo(rhs.ProductId);
            		
            		                 
            	
            	
            	case ProductColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case ProductColumn.ProductNumber:
            		return this.ProductNumber.CompareTo(rhs.ProductNumber);
            		
            		                 
            	
            	
            	case ProductColumn.MakeFlag:
            		return this.MakeFlag.CompareTo(rhs.MakeFlag);
            		
            		                 
            	
            	
            	case ProductColumn.FinishedGoodsFlag:
            		return this.FinishedGoodsFlag.CompareTo(rhs.FinishedGoodsFlag);
            		
            		                 
            	
            	
            	case ProductColumn.Color:
            		return this.Color.CompareTo(rhs.Color);
            		
            		                 
            	
            	
            	case ProductColumn.SafetyStockLevel:
            		return this.SafetyStockLevel.CompareTo(rhs.SafetyStockLevel);
            		
            		                 
            	
            	
            	case ProductColumn.ReorderPoint:
            		return this.ReorderPoint.CompareTo(rhs.ReorderPoint);
            		
            		                 
            	
            	
            	case ProductColumn.StandardCost:
            		return this.StandardCost.CompareTo(rhs.StandardCost);
            		
            		                 
            	
            	
            	case ProductColumn.ListPrice:
            		return this.ListPrice.CompareTo(rhs.ListPrice);
            		
            		                 
            	
            	
            	case ProductColumn.Size:
            		return this.Size.CompareTo(rhs.Size);
            		
            		                 
            	
            	
            	case ProductColumn.SizeUnitMeasureCode:
            		return this.SizeUnitMeasureCode.CompareTo(rhs.SizeUnitMeasureCode);
            		
            		                 
            	
            	
            	case ProductColumn.WeightUnitMeasureCode:
            		return this.WeightUnitMeasureCode.CompareTo(rhs.WeightUnitMeasureCode);
            		
            		                 
            	
            	
            	case ProductColumn.Weight:
            		return this.Weight.Value.CompareTo(rhs.Weight.Value);
            		
            		                 
            	
            	
            	case ProductColumn.DaysToManufacture:
            		return this.DaysToManufacture.CompareTo(rhs.DaysToManufacture);
            		
            		                 
            	
            	
            	case ProductColumn.ProductLine:
            		return this.ProductLine.CompareTo(rhs.ProductLine);
            		
            		                 
            	
            	
            	case ProductColumn.SafeNameClass:
            		return this.SafeNameClass.CompareTo(rhs.SafeNameClass);
            		
            		                 
            	
            	
            	case ProductColumn.Style:
            		return this.Style.CompareTo(rhs.Style);
            		
            		                 
            	
            	
            	case ProductColumn.ProductSubcategoryId:
            		return this.ProductSubcategoryId.Value.CompareTo(rhs.ProductSubcategoryId.Value);
            		
            		                 
            	
            	
            	case ProductColumn.ProductModelId:
            		return this.ProductModelId.Value.CompareTo(rhs.ProductModelId.Value);
            		
            		                 
            	
            	
            	case ProductColumn.SellStartDate:
            		return this.SellStartDate.CompareTo(rhs.SellStartDate);
            		
            		                 
            	
            	
            	case ProductColumn.SellEndDate:
            		return this.SellEndDate.Value.CompareTo(rhs.SellEndDate.Value);
            		
            		                 
            	
            	
            	case ProductColumn.DiscontinuedDate:
            		return this.DiscontinuedDate.Value.CompareTo(rhs.DiscontinuedDate.Value);
            		
            		                 
            	
            	
            	case ProductColumn.Rowguid:
            		return this.Rowguid.CompareTo(rhs.Rowguid);
            		
            		                 
            	
            	
            	case ProductColumn.ModifiedDate:
            		return this.ModifiedDate.CompareTo(rhs.ModifiedDate);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ProductKey> Members
		
		// member variable for the EntityId property
		private ProductKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ProductKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ProductKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Product")
					.Append("|").Append( this.ProductId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{26}{25}- ProductId: {0}{25}- Name: {1}{25}- ProductNumber: {2}{25}- MakeFlag: {3}{25}- FinishedGoodsFlag: {4}{25}- Color: {5}{25}- SafetyStockLevel: {6}{25}- ReorderPoint: {7}{25}- StandardCost: {8}{25}- ListPrice: {9}{25}- Size: {10}{25}- SizeUnitMeasureCode: {11}{25}- WeightUnitMeasureCode: {12}{25}- Weight: {13}{25}- DaysToManufacture: {14}{25}- ProductLine: {15}{25}- SafeNameClass: {16}{25}- Style: {17}{25}- ProductSubcategoryId: {18}{25}- ProductModelId: {19}{25}- SellStartDate: {20}{25}- SellEndDate: {21}{25}- DiscontinuedDate: {22}{25}- Rowguid: {23}{25}- ModifiedDate: {24}{25}{27}", 
				this.ProductId,
				this.Name,
				this.ProductNumber,
				this.MakeFlag,
				this.FinishedGoodsFlag,
				(this.Color == null) ? string.Empty : this.Color.ToString(),
				this.SafetyStockLevel,
				this.ReorderPoint,
				this.StandardCost,
				this.ListPrice,
				(this.Size == null) ? string.Empty : this.Size.ToString(),
				(this.SizeUnitMeasureCode == null) ? string.Empty : this.SizeUnitMeasureCode.ToString(),
				(this.WeightUnitMeasureCode == null) ? string.Empty : this.WeightUnitMeasureCode.ToString(),
				(this.Weight == null) ? string.Empty : this.Weight.ToString(),
				this.DaysToManufacture,
				(this.ProductLine == null) ? string.Empty : this.ProductLine.ToString(),
				(this.SafeNameClass == null) ? string.Empty : this.SafeNameClass.ToString(),
				(this.Style == null) ? string.Empty : this.Style.ToString(),
				(this.ProductSubcategoryId == null) ? string.Empty : this.ProductSubcategoryId.ToString(),
				(this.ProductModelId == null) ? string.Empty : this.ProductModelId.ToString(),
				this.SellStartDate,
				(this.SellEndDate == null) ? string.Empty : this.SellEndDate.ToString(),
				(this.DiscontinuedDate == null) ? string.Empty : this.DiscontinuedDate.ToString(),
				this.Rowguid,
				this.ModifiedDate,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Product' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ProductEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ProductID : Primary key for Product records.
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Product"</remarks>
		public System.Int32 ProductId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// Name : Name of the product.
		/// </summary>
		public System.String Name = string.Empty;
		
		/// <summary>
		/// ProductNumber : Unique product identification number.
		/// </summary>
		public System.String ProductNumber = string.Empty;
		
		/// <summary>
		/// MakeFlag : 0 = Product is purchased, 1 = Product is manufactured in-house.
		/// </summary>
		public System.Boolean MakeFlag = false;
		
		/// <summary>
		/// FinishedGoodsFlag : 0 = Product is not a salable item. 1 = Product is salable.
		/// </summary>
		public System.Boolean FinishedGoodsFlag = false;
		
		/// <summary>
		/// Color : Product color.
		/// </summary>
		public System.String Color = null;
		
		/// <summary>
		/// SafetyStockLevel : Minimum inventory quantity. 
		/// </summary>
		public System.Int16 SafetyStockLevel = (short)0;
		
		/// <summary>
		/// ReorderPoint : Inventory level that triggers a purchase order or work order. 
		/// </summary>
		public System.Int16 ReorderPoint = (short)0;
		
		/// <summary>
		/// StandardCost : Standard cost of the product.
		/// </summary>
		public System.Decimal StandardCost = 0;
		
		/// <summary>
		/// ListPrice : Selling price.
		/// </summary>
		public System.Decimal ListPrice = 0;
		
		/// <summary>
		/// Size : Product size.
		/// </summary>
		public System.String Size = null;
		
		/// <summary>
		/// SizeUnitMeasureCode : Unit of measure for Size column.
		/// </summary>
		public System.String SizeUnitMeasureCode = null;
		
		/// <summary>
		/// WeightUnitMeasureCode : Unit of measure for Weight column.
		/// </summary>
		public System.String WeightUnitMeasureCode = null;
		
		/// <summary>
		/// Weight : Product weight.
		/// </summary>
		public System.Decimal? Weight = null;
		
		/// <summary>
		/// DaysToManufacture : Number of days required to manufacture the product.
		/// </summary>
		public System.Int32 DaysToManufacture = (int)0;
		
		/// <summary>
		/// ProductLine : R = Road, M = Mountain, T = Touring, S = Standard
		/// </summary>
		public System.String ProductLine = null;
		
		/// <summary>
		/// Class : H = High, M = Medium, L = Low
		/// </summary>
		public System.String SafeNameClass = null;
		
		/// <summary>
		/// Style : W = Womens, M = Mens, U = Universal
		/// </summary>
		public System.String Style = null;
		
		/// <summary>
		/// ProductSubcategoryID : Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID. 
		/// </summary>
		public System.Int32? ProductSubcategoryId = null;
		
		/// <summary>
		/// ProductModelID : Product is a member of this product model. Foreign key to ProductModel.ProductModelID.
		/// </summary>
		public System.Int32? ProductModelId = null;
		
		/// <summary>
		/// SellStartDate : Date the product was available for sale.
		/// </summary>
		public System.DateTime SellStartDate = DateTime.MinValue;
		
		/// <summary>
		/// SellEndDate : Date the product was no longer available for sale.
		/// </summary>
		public System.DateTime? SellEndDate = null;
		
		/// <summary>
		/// DiscontinuedDate : Date the product was discontinued.
		/// </summary>
		public System.DateTime? DiscontinuedDate = null;
		
		/// <summary>
		/// rowguid : ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		public System.Guid Rowguid = Guid.Empty;
		
		/// <summary>
		/// ModifiedDate : Date and time the record was last updated.
		/// </summary>
		public System.DateTime ModifiedDate = DateTime.MinValue;
		#endregion
			
		#region Source Foreign Key Property
				
		private ProductModel _productModelIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ProductModel"/>.
		/// </summary>
		/// <value>The source ProductModel for ProductModelId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ProductModel ProductModelIdSource
      	{
            get { return this._productModelIdSource; }
            set { this._productModelIdSource = value; }
      	}
		private ProductSubcategory _productSubcategoryIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ProductSubcategory"/>.
		/// </summary>
		/// <value>The source ProductSubcategory for ProductSubcategoryId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ProductSubcategory ProductSubcategoryIdSource
      	{
            get { return this._productSubcategoryIdSource; }
            set { this._productSubcategoryIdSource = value; }
      	}
		private UnitMeasure _sizeUnitMeasureCodeSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="UnitMeasure"/>.
		/// </summary>
		/// <value>The source UnitMeasure for SizeUnitMeasureCode.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual UnitMeasure SizeUnitMeasureCodeSource
      	{
            get { return this._sizeUnitMeasureCodeSource; }
            set { this._sizeUnitMeasureCodeSource = value; }
      	}
		private UnitMeasure _weightUnitMeasureCodeSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="UnitMeasure"/>.
		/// </summary>
		/// <value>The source UnitMeasure for WeightUnitMeasureCode.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual UnitMeasure WeightUnitMeasureCodeSource
      	{
            get { return this._weightUnitMeasureCodeSource; }
            set { this._weightUnitMeasureCodeSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region ProductProductPhotoCollection
		
		private TList<ProductProductPhoto> _productProductPhotoProductId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _productProductPhotoProductId
		/// </summary>
		
		public TList<ProductProductPhoto> ProductProductPhotoCollection
		{
			get
			{
				if (_productProductPhotoProductId == null)
				{
				_productProductPhotoProductId = new TList<ProductProductPhoto>();
				}
	
				return _productProductPhotoProductId;
			}
			set { _productProductPhotoProductId = value; }
		}
		
		#endregion

		#region TransactionHistoryCollection
		
		private TList<TransactionHistory> _transactionHistoryProductId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _transactionHistoryProductId
		/// </summary>
		
		public TList<TransactionHistory> TransactionHistoryCollection
		{
			get
			{
				if (_transactionHistoryProductId == null)
				{
				_transactionHistoryProductId = new TList<TransactionHistory>();
				}
	
				return _transactionHistoryProductId;
			}
			set { _transactionHistoryProductId = value; }
		}
		
		#endregion

		#region ProductVendorCollection
		
		private TList<ProductVendor> _productVendorProductId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _productVendorProductId
		/// </summary>
		
		public TList<ProductVendor> ProductVendorCollection
		{
			get
			{
				if (_productVendorProductId == null)
				{
				_productVendorProductId = new TList<ProductVendor>();
				}
	
				return _productVendorProductId;
			}
			set { _productVendorProductId = value; }
		}
		
		#endregion

		#region BillOfMaterialsCollectionGetByProductAssemblyId
		
		private TList<BillOfMaterials> _billOfMaterialsProductAssemblyIdGetByProductAssemblyId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _billOfMaterialsProductAssemblyIdGetByProductAssemblyId
		/// </summary>
		
		public TList<BillOfMaterials> BillOfMaterialsCollectionGetByProductAssemblyId
		{
			get
			{
				if (_billOfMaterialsProductAssemblyIdGetByProductAssemblyId == null)
				{
				_billOfMaterialsProductAssemblyIdGetByProductAssemblyId = new TList<BillOfMaterials>();
				}
	
				return _billOfMaterialsProductAssemblyIdGetByProductAssemblyId;
			}
			set { _billOfMaterialsProductAssemblyIdGetByProductAssemblyId = value; }
		}
		
		#endregion

		#region DocumentIdDocumentCollection_From_ProductDocument
		
		private TList<Document> documentIdDocumentCollectionFromProductDocument;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table documentIdDocumentCollectionFromProductDocument
		/// </summary>
		
		public TList<Document> DocumentIdDocumentCollection_From_ProductDocument
		{
			get
			{
				if (documentIdDocumentCollectionFromProductDocument == null)
				{
				documentIdDocumentCollectionFromProductDocument = new TList<Document>();
				}
	
				return documentIdDocumentCollectionFromProductDocument;
			}
			set { documentIdDocumentCollectionFromProductDocument = value; }
		}
		
		#endregion 

		#region SpecialOfferProductCollection
		
		private TList<SpecialOfferProduct> _specialOfferProductProductId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _specialOfferProductProductId
		/// </summary>
		
		public TList<SpecialOfferProduct> SpecialOfferProductCollection
		{
			get
			{
				if (_specialOfferProductProductId == null)
				{
				_specialOfferProductProductId = new TList<SpecialOfferProduct>();
				}
	
				return _specialOfferProductProductId;
			}
			set { _specialOfferProductProductId = value; }
		}
		
		#endregion

		#region ProductPhotoIdProductPhotoCollection_From_ProductProductPhoto
		
		private TList<ProductPhoto> productPhotoIdProductPhotoCollectionFromProductProductPhoto;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table productPhotoIdProductPhotoCollectionFromProductProductPhoto
		/// </summary>
		
		public TList<ProductPhoto> ProductPhotoIdProductPhotoCollection_From_ProductProductPhoto
		{
			get
			{
				if (productPhotoIdProductPhotoCollectionFromProductProductPhoto == null)
				{
				productPhotoIdProductPhotoCollectionFromProductProductPhoto = new TList<ProductPhoto>();
				}
	
				return productPhotoIdProductPhotoCollectionFromProductProductPhoto;
			}
			set { productPhotoIdProductPhotoCollectionFromProductProductPhoto = value; }
		}
		
		#endregion 

		#region BillOfMaterialsCollectionGetByComponentId
		
		private TList<BillOfMaterials> _billOfMaterialsProductAssemblyIdGetByComponentId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _billOfMaterialsProductAssemblyIdGetByComponentId
		/// </summary>
		
		public TList<BillOfMaterials> BillOfMaterialsCollectionGetByComponentId
		{
			get
			{
				if (_billOfMaterialsProductAssemblyIdGetByComponentId == null)
				{
				_billOfMaterialsProductAssemblyIdGetByComponentId = new TList<BillOfMaterials>();
				}
	
				return _billOfMaterialsProductAssemblyIdGetByComponentId;
			}
			set { _billOfMaterialsProductAssemblyIdGetByComponentId = value; }
		}
		
		#endregion

		#region ProductInventoryCollection
		
		private TList<ProductInventory> _productInventoryProductId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _productInventoryProductId
		/// </summary>
		
		public TList<ProductInventory> ProductInventoryCollection
		{
			get
			{
				if (_productInventoryProductId == null)
				{
				_productInventoryProductId = new TList<ProductInventory>();
				}
	
				return _productInventoryProductId;
			}
			set { _productInventoryProductId = value; }
		}
		
		#endregion

		#region ProductDocumentCollection
		
		private TList<ProductDocument> _productDocumentProductId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _productDocumentProductId
		/// </summary>
		
		public TList<ProductDocument> ProductDocumentCollection
		{
			get
			{
				if (_productDocumentProductId == null)
				{
				_productDocumentProductId = new TList<ProductDocument>();
				}
	
				return _productDocumentProductId;
			}
			set { _productDocumentProductId = value; }
		}
		
		#endregion

		#region ProductReviewCollection
		
		private TList<ProductReview> _productReviewProductId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _productReviewProductId
		/// </summary>
		
		public TList<ProductReview> ProductReviewCollection
		{
			get
			{
				if (_productReviewProductId == null)
				{
				_productReviewProductId = new TList<ProductReview>();
				}
	
				return _productReviewProductId;
			}
			set { _productReviewProductId = value; }
		}
		
		#endregion

		#region VendorIdVendorCollection_From_ProductVendor
		
		private TList<Vendor> vendorIdVendorCollectionFromProductVendor;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table vendorIdVendorCollectionFromProductVendor
		/// </summary>
		
		public TList<Vendor> VendorIdVendorCollection_From_ProductVendor
		{
			get
			{
				if (vendorIdVendorCollectionFromProductVendor == null)
				{
				vendorIdVendorCollectionFromProductVendor = new TList<Vendor>();
				}
	
				return vendorIdVendorCollectionFromProductVendor;
			}
			set { vendorIdVendorCollectionFromProductVendor = value; }
		}
		
		#endregion 

		#region WorkOrderCollection
		
		private TList<WorkOrder> _workOrderProductId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _workOrderProductId
		/// </summary>
		
		public TList<WorkOrder> WorkOrderCollection
		{
			get
			{
				if (_workOrderProductId == null)
				{
				_workOrderProductId = new TList<WorkOrder>();
				}
	
				return _workOrderProductId;
			}
			set { _workOrderProductId = value; }
		}
		
		#endregion

		#region PurchaseOrderDetailCollection
		
		private TList<PurchaseOrderDetail> _purchaseOrderDetailProductId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _purchaseOrderDetailProductId
		/// </summary>
		
		public TList<PurchaseOrderDetail> PurchaseOrderDetailCollection
		{
			get
			{
				if (_purchaseOrderDetailProductId == null)
				{
				_purchaseOrderDetailProductId = new TList<PurchaseOrderDetail>();
				}
	
				return _purchaseOrderDetailProductId;
			}
			set { _purchaseOrderDetailProductId = value; }
		}
		
		#endregion

		#region LocationIdLocationCollection_From_ProductInventory
		
		private TList<Location> locationIdLocationCollectionFromProductInventory;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table locationIdLocationCollectionFromProductInventory
		/// </summary>
		
		public TList<Location> LocationIdLocationCollection_From_ProductInventory
		{
			get
			{
				if (locationIdLocationCollectionFromProductInventory == null)
				{
				locationIdLocationCollectionFromProductInventory = new TList<Location>();
				}
	
				return locationIdLocationCollectionFromProductInventory;
			}
			set { locationIdLocationCollectionFromProductInventory = value; }
		}
		
		#endregion 

		#region ProductListPriceHistoryCollection
		
		private TList<ProductListPriceHistory> _productListPriceHistoryProductId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _productListPriceHistoryProductId
		/// </summary>
		
		public TList<ProductListPriceHistory> ProductListPriceHistoryCollection
		{
			get
			{
				if (_productListPriceHistoryProductId == null)
				{
				_productListPriceHistoryProductId = new TList<ProductListPriceHistory>();
				}
	
				return _productListPriceHistoryProductId;
			}
			set { _productListPriceHistoryProductId = value; }
		}
		
		#endregion

		#region SpecialOfferIdSpecialOfferCollection_From_SpecialOfferProduct
		
		private TList<SpecialOffer> specialOfferIdSpecialOfferCollectionFromSpecialOfferProduct;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table specialOfferIdSpecialOfferCollectionFromSpecialOfferProduct
		/// </summary>
		
		public TList<SpecialOffer> SpecialOfferIdSpecialOfferCollection_From_SpecialOfferProduct
		{
			get
			{
				if (specialOfferIdSpecialOfferCollectionFromSpecialOfferProduct == null)
				{
				specialOfferIdSpecialOfferCollectionFromSpecialOfferProduct = new TList<SpecialOffer>();
				}
	
				return specialOfferIdSpecialOfferCollectionFromSpecialOfferProduct;
			}
			set { specialOfferIdSpecialOfferCollectionFromSpecialOfferProduct = value; }
		}
		
		#endregion 

		#region ShoppingCartItemCollection
		
		private TList<ShoppingCartItem> _shoppingCartItemProductId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _shoppingCartItemProductId
		/// </summary>
		
		public TList<ShoppingCartItem> ShoppingCartItemCollection
		{
			get
			{
				if (_shoppingCartItemProductId == null)
				{
				_shoppingCartItemProductId = new TList<ShoppingCartItem>();
				}
	
				return _shoppingCartItemProductId;
			}
			set { _shoppingCartItemProductId = value; }
		}
		
		#endregion

		#region ProductCostHistoryCollection
		
		private TList<ProductCostHistory> _productCostHistoryProductId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _productCostHistoryProductId
		/// </summary>
		
		public TList<ProductCostHistory> ProductCostHistoryCollection
		{
			get
			{
				if (_productCostHistoryProductId == null)
				{
				_productCostHistoryProductId = new TList<ProductCostHistory>();
				}
	
				return _productCostHistoryProductId;
			}
			set { _productCostHistoryProductId = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ProductEntityData _tmp = new ProductEntityData();
						
			_tmp.ProductId = this.ProductId;
			
			_tmp.Name = this.Name;
			_tmp.ProductNumber = this.ProductNumber;
			_tmp.MakeFlag = this.MakeFlag;
			_tmp.FinishedGoodsFlag = this.FinishedGoodsFlag;
			_tmp.Color = this.Color;
			_tmp.SafetyStockLevel = this.SafetyStockLevel;
			_tmp.ReorderPoint = this.ReorderPoint;
			_tmp.StandardCost = this.StandardCost;
			_tmp.ListPrice = this.ListPrice;
			_tmp.Size = this.Size;
			_tmp.SizeUnitMeasureCode = this.SizeUnitMeasureCode;
			_tmp.WeightUnitMeasureCode = this.WeightUnitMeasureCode;
			_tmp.Weight = this.Weight;
			_tmp.DaysToManufacture = this.DaysToManufacture;
			_tmp.ProductLine = this.ProductLine;
			_tmp.SafeNameClass = this.SafeNameClass;
			_tmp.Style = this.Style;
			_tmp.ProductSubcategoryId = this.ProductSubcategoryId;
			_tmp.ProductModelId = this.ProductModelId;
			_tmp.SellStartDate = this.SellStartDate;
			_tmp.SellEndDate = this.SellEndDate;
			_tmp.DiscontinuedDate = this.DiscontinuedDate;
			_tmp.Rowguid = this.Rowguid;
			_tmp.ModifiedDate = this.ModifiedDate;
			
			#region Source Parent Composite Entities
			if (this.ProductModelIdSource != null)
				_tmp.ProductModelIdSource = MakeCopyOf(this.ProductModelIdSource) as ProductModel;
			if (this.ProductSubcategoryIdSource != null)
				_tmp.ProductSubcategoryIdSource = MakeCopyOf(this.ProductSubcategoryIdSource) as ProductSubcategory;
			if (this.SizeUnitMeasureCodeSource != null)
				_tmp.SizeUnitMeasureCodeSource = MakeCopyOf(this.SizeUnitMeasureCodeSource) as UnitMeasure;
			if (this.WeightUnitMeasureCodeSource != null)
				_tmp.WeightUnitMeasureCodeSource = MakeCopyOf(this.WeightUnitMeasureCodeSource) as UnitMeasure;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._productProductPhotoProductId != null)
				_tmp.ProductProductPhotoCollection = (TList<ProductProductPhoto>) MakeCopyOf(this.ProductProductPhotoCollection); 
			if (this._transactionHistoryProductId != null)
				_tmp.TransactionHistoryCollection = (TList<TransactionHistory>) MakeCopyOf(this.TransactionHistoryCollection); 
			if (this._productVendorProductId != null)
				_tmp.ProductVendorCollection = (TList<ProductVendor>) MakeCopyOf(this.ProductVendorCollection); 
			if (this._billOfMaterialsProductAssemblyIdGetByProductAssemblyId != null)
				_tmp.BillOfMaterialsCollectionGetByProductAssemblyId = (TList<BillOfMaterials>) MakeCopyOf(this.BillOfMaterialsCollectionGetByProductAssemblyId); 
			if (this.documentIdDocumentCollectionFromProductDocument != null)
				_tmp.DocumentIdDocumentCollection_From_ProductDocument = (TList<Document>) MakeCopyOf(this.DocumentIdDocumentCollection_From_ProductDocument); 
			if (this._specialOfferProductProductId != null)
				_tmp.SpecialOfferProductCollection = (TList<SpecialOfferProduct>) MakeCopyOf(this.SpecialOfferProductCollection); 
			if (this.productPhotoIdProductPhotoCollectionFromProductProductPhoto != null)
				_tmp.ProductPhotoIdProductPhotoCollection_From_ProductProductPhoto = (TList<ProductPhoto>) MakeCopyOf(this.ProductPhotoIdProductPhotoCollection_From_ProductProductPhoto); 
			if (this._billOfMaterialsProductAssemblyIdGetByComponentId != null)
				_tmp.BillOfMaterialsCollectionGetByComponentId = (TList<BillOfMaterials>) MakeCopyOf(this.BillOfMaterialsCollectionGetByComponentId); 
			if (this._productInventoryProductId != null)
				_tmp.ProductInventoryCollection = (TList<ProductInventory>) MakeCopyOf(this.ProductInventoryCollection); 
			if (this._productDocumentProductId != null)
				_tmp.ProductDocumentCollection = (TList<ProductDocument>) MakeCopyOf(this.ProductDocumentCollection); 
			if (this._productReviewProductId != null)
				_tmp.ProductReviewCollection = (TList<ProductReview>) MakeCopyOf(this.ProductReviewCollection); 
			if (this.vendorIdVendorCollectionFromProductVendor != null)
				_tmp.VendorIdVendorCollection_From_ProductVendor = (TList<Vendor>) MakeCopyOf(this.VendorIdVendorCollection_From_ProductVendor); 
			if (this._workOrderProductId != null)
				_tmp.WorkOrderCollection = (TList<WorkOrder>) MakeCopyOf(this.WorkOrderCollection); 
			if (this._purchaseOrderDetailProductId != null)
				_tmp.PurchaseOrderDetailCollection = (TList<PurchaseOrderDetail>) MakeCopyOf(this.PurchaseOrderDetailCollection); 
			if (this.locationIdLocationCollectionFromProductInventory != null)
				_tmp.LocationIdLocationCollection_From_ProductInventory = (TList<Location>) MakeCopyOf(this.LocationIdLocationCollection_From_ProductInventory); 
			if (this._productListPriceHistoryProductId != null)
				_tmp.ProductListPriceHistoryCollection = (TList<ProductListPriceHistory>) MakeCopyOf(this.ProductListPriceHistoryCollection); 
			if (this.specialOfferIdSpecialOfferCollectionFromSpecialOfferProduct != null)
				_tmp.SpecialOfferIdSpecialOfferCollection_From_SpecialOfferProduct = (TList<SpecialOffer>) MakeCopyOf(this.SpecialOfferIdSpecialOfferCollection_From_SpecialOfferProduct); 
			if (this._shoppingCartItemProductId != null)
				_tmp.ShoppingCartItemCollection = (TList<ShoppingCartItem>) MakeCopyOf(this.ShoppingCartItemCollection); 
			if (this._productCostHistoryProductId != null)
				_tmp.ProductCostHistoryCollection = (TList<ProductCostHistory>) MakeCopyOf(this.ProductCostHistoryCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ProductEntityData _tmp = new ProductEntityData();
						
			_tmp.ProductId = this.ProductId;
			
			_tmp.Name = this.Name;
			_tmp.ProductNumber = this.ProductNumber;
			_tmp.MakeFlag = this.MakeFlag;
			_tmp.FinishedGoodsFlag = this.FinishedGoodsFlag;
			_tmp.Color = this.Color;
			_tmp.SafetyStockLevel = this.SafetyStockLevel;
			_tmp.ReorderPoint = this.ReorderPoint;
			_tmp.StandardCost = this.StandardCost;
			_tmp.ListPrice = this.ListPrice;
			_tmp.Size = this.Size;
			_tmp.SizeUnitMeasureCode = this.SizeUnitMeasureCode;
			_tmp.WeightUnitMeasureCode = this.WeightUnitMeasureCode;
			_tmp.Weight = this.Weight;
			_tmp.DaysToManufacture = this.DaysToManufacture;
			_tmp.ProductLine = this.ProductLine;
			_tmp.SafeNameClass = this.SafeNameClass;
			_tmp.Style = this.Style;
			_tmp.ProductSubcategoryId = this.ProductSubcategoryId;
			_tmp.ProductModelId = this.ProductModelId;
			_tmp.SellStartDate = this.SellStartDate;
			_tmp.SellEndDate = this.SellEndDate;
			_tmp.DiscontinuedDate = this.DiscontinuedDate;
			_tmp.Rowguid = this.Rowguid;
			_tmp.ModifiedDate = this.ModifiedDate;
			
			#region Source Parent Composite Entities
			if (this.ProductModelIdSource != null && existingCopies.Contains(this.ProductModelIdSource))
				_tmp.ProductModelIdSource = existingCopies[this.ProductModelIdSource] as ProductModel;
			else
				_tmp.ProductModelIdSource = MakeCopyOf(this.ProductModelIdSource, existingCopies) as ProductModel;
			if (this.ProductSubcategoryIdSource != null && existingCopies.Contains(this.ProductSubcategoryIdSource))
				_tmp.ProductSubcategoryIdSource = existingCopies[this.ProductSubcategoryIdSource] as ProductSubcategory;
			else
				_tmp.ProductSubcategoryIdSource = MakeCopyOf(this.ProductSubcategoryIdSource, existingCopies) as ProductSubcategory;
			if (this.SizeUnitMeasureCodeSource != null && existingCopies.Contains(this.SizeUnitMeasureCodeSource))
				_tmp.SizeUnitMeasureCodeSource = existingCopies[this.SizeUnitMeasureCodeSource] as UnitMeasure;
			else
				_tmp.SizeUnitMeasureCodeSource = MakeCopyOf(this.SizeUnitMeasureCodeSource, existingCopies) as UnitMeasure;
			if (this.WeightUnitMeasureCodeSource != null && existingCopies.Contains(this.WeightUnitMeasureCodeSource))
				_tmp.WeightUnitMeasureCodeSource = existingCopies[this.WeightUnitMeasureCodeSource] as UnitMeasure;
			else
				_tmp.WeightUnitMeasureCodeSource = MakeCopyOf(this.WeightUnitMeasureCodeSource, existingCopies) as UnitMeasure;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.ProductProductPhotoCollection = (TList<ProductProductPhoto>) MakeCopyOf(this.ProductProductPhotoCollection, existingCopies); 
			_tmp.TransactionHistoryCollection = (TList<TransactionHistory>) MakeCopyOf(this.TransactionHistoryCollection, existingCopies); 
			_tmp.ProductVendorCollection = (TList<ProductVendor>) MakeCopyOf(this.ProductVendorCollection, existingCopies); 
			_tmp.BillOfMaterialsCollectionGetByProductAssemblyId = (TList<BillOfMaterials>) MakeCopyOf(this.BillOfMaterialsCollectionGetByProductAssemblyId, existingCopies); 
			_tmp.DocumentIdDocumentCollection_From_ProductDocument = (TList<Document>) MakeCopyOf(this.DocumentIdDocumentCollection_From_ProductDocument, existingCopies); 
			_tmp.SpecialOfferProductCollection = (TList<SpecialOfferProduct>) MakeCopyOf(this.SpecialOfferProductCollection, existingCopies); 
			_tmp.ProductPhotoIdProductPhotoCollection_From_ProductProductPhoto = (TList<ProductPhoto>) MakeCopyOf(this.ProductPhotoIdProductPhotoCollection_From_ProductProductPhoto, existingCopies); 
			_tmp.BillOfMaterialsCollectionGetByComponentId = (TList<BillOfMaterials>) MakeCopyOf(this.BillOfMaterialsCollectionGetByComponentId, existingCopies); 
			_tmp.ProductInventoryCollection = (TList<ProductInventory>) MakeCopyOf(this.ProductInventoryCollection, existingCopies); 
			_tmp.ProductDocumentCollection = (TList<ProductDocument>) MakeCopyOf(this.ProductDocumentCollection, existingCopies); 
			_tmp.ProductReviewCollection = (TList<ProductReview>) MakeCopyOf(this.ProductReviewCollection, existingCopies); 
			_tmp.VendorIdVendorCollection_From_ProductVendor = (TList<Vendor>) MakeCopyOf(this.VendorIdVendorCollection_From_ProductVendor, existingCopies); 
			_tmp.WorkOrderCollection = (TList<WorkOrder>) MakeCopyOf(this.WorkOrderCollection, existingCopies); 
			_tmp.PurchaseOrderDetailCollection = (TList<PurchaseOrderDetail>) MakeCopyOf(this.PurchaseOrderDetailCollection, existingCopies); 
			_tmp.LocationIdLocationCollection_From_ProductInventory = (TList<Location>) MakeCopyOf(this.LocationIdLocationCollection_From_ProductInventory, existingCopies); 
			_tmp.ProductListPriceHistoryCollection = (TList<ProductListPriceHistory>) MakeCopyOf(this.ProductListPriceHistoryCollection, existingCopies); 
			_tmp.SpecialOfferIdSpecialOfferCollection_From_SpecialOfferProduct = (TList<SpecialOffer>) MakeCopyOf(this.SpecialOfferIdSpecialOfferCollection_From_SpecialOfferProduct, existingCopies); 
			_tmp.ShoppingCartItemCollection = (TList<ShoppingCartItem>) MakeCopyOf(this.ShoppingCartItemCollection, existingCopies); 
			_tmp.ProductCostHistoryCollection = (TList<ProductCostHistory>) MakeCopyOf(this.ProductCostHistoryCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProductColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ProductColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProductColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ProductColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProductColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ProductColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ProductEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ProductEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProductColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ProductColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ProductEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ProductEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ProductEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Product"/> object.
	/// </remarks>
	public class ProductEventArgs : System.EventArgs
	{
		private ProductColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ProductEventArgs class.
		///</summary>
		public ProductEventArgs(ProductColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ProductEventArgs class.
		///</summary>
		public ProductEventArgs(ProductColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ProductColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ProductColumn" />
		public ProductColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Product related events.
	///</summary>
	public delegate void ProductEventHandler(object sender, ProductEventArgs e);
	
	#region ProductComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ProductComparer : System.Collections.Generic.IComparer<Product>
	{
		ProductColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ProductComparer"/> class.
        /// </summary>
		public ProductComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ProductComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ProductComparer(ProductColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Product"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Product"/> to compare.</param>
        /// <param name="b">The second <c>Product</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Product a, Product b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Product entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Product a, Product b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ProductColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ProductKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Product"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ProductKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ProductKey class.
		/// </summary>
		public ProductKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ProductKey class.
		/// </summary>
		public ProductKey(ProductBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.ProductId = entity.ProductId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ProductKey class.
		/// </summary>
		public ProductKey(System.Int32 _productId)
		{
			#region Init Properties

			this.ProductId = _productId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ProductBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ProductBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ProductId property
		private System.Int32 _productId;
		
		/// <summary>
		/// Gets or sets the ProductId property.
		/// </summary>
		public System.Int32 ProductId
		{
			get { return _productId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ProductId = value;
				
				_productId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ProductId = ( values["ProductId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ProductId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ProductId", ProductId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ProductId: {0}{1}",
								ProductId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ProductColumn Enum
	
	/// <summary>
	/// Enumerate the Product columns.
	/// </summary>
	[Serializable]
	public enum ProductColumn : int
	{
		/// <summary>
		/// ProductId : Primary key for Product records.
		/// </summary>
		[EnumTextValue("ProductID")]
		[ColumnEnum("ProductID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		ProductId = 1,
		/// <summary>
		/// Name : Name of the product.
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Name = 2,
		/// <summary>
		/// ProductNumber : Unique product identification number.
		/// </summary>
		[EnumTextValue("ProductNumber")]
		[ColumnEnum("ProductNumber", typeof(System.String), System.Data.DbType.String, false, false, false, 25)]
		ProductNumber = 3,
		/// <summary>
		/// MakeFlag : 0 = Product is purchased, 1 = Product is manufactured in-house.
		/// </summary>
		[EnumTextValue("MakeFlag")]
		[ColumnEnum("MakeFlag", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		MakeFlag = 4,
		/// <summary>
		/// FinishedGoodsFlag : 0 = Product is not a salable item. 1 = Product is salable.
		/// </summary>
		[EnumTextValue("FinishedGoodsFlag")]
		[ColumnEnum("FinishedGoodsFlag", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		FinishedGoodsFlag = 5,
		/// <summary>
		/// Color : Product color.
		/// </summary>
		[EnumTextValue("Color")]
		[ColumnEnum("Color", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		Color = 6,
		/// <summary>
		/// SafetyStockLevel : Minimum inventory quantity. 
		/// </summary>
		[EnumTextValue("SafetyStockLevel")]
		[ColumnEnum("SafetyStockLevel", typeof(System.Int16), System.Data.DbType.Int16, false, false, false)]
		SafetyStockLevel = 7,
		/// <summary>
		/// ReorderPoint : Inventory level that triggers a purchase order or work order. 
		/// </summary>
		[EnumTextValue("ReorderPoint")]
		[ColumnEnum("ReorderPoint", typeof(System.Int16), System.Data.DbType.Int16, false, false, false)]
		ReorderPoint = 8,
		/// <summary>
		/// StandardCost : Standard cost of the product.
		/// </summary>
		[EnumTextValue("StandardCost")]
		[ColumnEnum("StandardCost", typeof(System.Decimal), System.Data.DbType.Currency, false, false, false)]
		StandardCost = 9,
		/// <summary>
		/// ListPrice : Selling price.
		/// </summary>
		[EnumTextValue("ListPrice")]
		[ColumnEnum("ListPrice", typeof(System.Decimal), System.Data.DbType.Currency, false, false, false)]
		ListPrice = 10,
		/// <summary>
		/// Size : Product size.
		/// </summary>
		[EnumTextValue("Size")]
		[ColumnEnum("Size", typeof(System.String), System.Data.DbType.String, false, false, true, 5)]
		Size = 11,
		/// <summary>
		/// SizeUnitMeasureCode : Unit of measure for Size column.
		/// </summary>
		[EnumTextValue("SizeUnitMeasureCode")]
		[ColumnEnum("SizeUnitMeasureCode", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 3)]
		SizeUnitMeasureCode = 12,
		/// <summary>
		/// WeightUnitMeasureCode : Unit of measure for Weight column.
		/// </summary>
		[EnumTextValue("WeightUnitMeasureCode")]
		[ColumnEnum("WeightUnitMeasureCode", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 3)]
		WeightUnitMeasureCode = 13,
		/// <summary>
		/// Weight : Product weight.
		/// </summary>
		[EnumTextValue("Weight")]
		[ColumnEnum("Weight", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Weight = 14,
		/// <summary>
		/// DaysToManufacture : Number of days required to manufacture the product.
		/// </summary>
		[EnumTextValue("DaysToManufacture")]
		[ColumnEnum("DaysToManufacture", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		DaysToManufacture = 15,
		/// <summary>
		/// ProductLine : R = Road, M = Mountain, T = Touring, S = Standard
		/// </summary>
		[EnumTextValue("ProductLine")]
		[ColumnEnum("ProductLine", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 2)]
		ProductLine = 16,
		/// <summary>
		/// SafeNameClass : H = High, M = Medium, L = Low
		/// </summary>
		[EnumTextValue("Class")]
		[ColumnEnum("Class", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 2)]
		SafeNameClass = 17,
		/// <summary>
		/// Style : W = Womens, M = Mens, U = Universal
		/// </summary>
		[EnumTextValue("Style")]
		[ColumnEnum("Style", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 2)]
		Style = 18,
		/// <summary>
		/// ProductSubcategoryId : Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID. 
		/// </summary>
		[EnumTextValue("ProductSubcategoryID")]
		[ColumnEnum("ProductSubcategoryID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ProductSubcategoryId = 19,
		/// <summary>
		/// ProductModelId : Product is a member of this product model. Foreign key to ProductModel.ProductModelID.
		/// </summary>
		[EnumTextValue("ProductModelID")]
		[ColumnEnum("ProductModelID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ProductModelId = 20,
		/// <summary>
		/// SellStartDate : Date the product was available for sale.
		/// </summary>
		[EnumTextValue("SellStartDate")]
		[ColumnEnum("SellStartDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		SellStartDate = 21,
		/// <summary>
		/// SellEndDate : Date the product was no longer available for sale.
		/// </summary>
		[EnumTextValue("SellEndDate")]
		[ColumnEnum("SellEndDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		SellEndDate = 22,
		/// <summary>
		/// DiscontinuedDate : Date the product was discontinued.
		/// </summary>
		[EnumTextValue("DiscontinuedDate")]
		[ColumnEnum("DiscontinuedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DiscontinuedDate = 23,
		/// <summary>
		/// Rowguid : ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[EnumTextValue("rowguid")]
		[ColumnEnum("rowguid", typeof(System.Guid), System.Data.DbType.Guid, false, true, false)]
		Rowguid = 24,
		/// <summary>
		/// ModifiedDate : Date and time the record was last updated.
		/// </summary>
		[EnumTextValue("ModifiedDate")]
		[ColumnEnum("ModifiedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ModifiedDate = 25
	}//End enum

	#endregion ProductColumn Enum

} // end namespace
