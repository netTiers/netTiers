using System;
using System.ComponentModel;

namespace Nettiers.AdventureWorks.Entities
{
	/// <summary>
	///		The data structure representation of the 'Employee' table via interface.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	public interface IEmployee 
	{
		/// <summary>			
		/// EmployeeID : Primary key for Employee records.
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Employee"</remarks>
		System.Int32 EmployeeId { get; set; }
				
		
		
		/// <summary>
		/// NationalIDNumber : Unique national identification number such as a social security number.
		/// </summary>
		System.String  NationalIdNumber  { get; set; }
		
		/// <summary>
		/// ContactID : Identifies the employee in the Contact table. Foreign key to Contact.ContactID.
		/// </summary>
		System.Int32  ContactId  { get; set; }
		
		/// <summary>
		/// LoginID : Network login.
		/// </summary>
		System.String  LoginId  { get; set; }
		
		/// <summary>
		/// ManagerID : Manager to whom the employee is assigned. Foreign Key to Employee.M
		/// </summary>
		System.Int32?  ManagerId  { get; set; }
		
		/// <summary>
		/// Title : Work title such as Buyer or Sales Representative.
		/// </summary>
		System.String  Title  { get; set; }
		
		/// <summary>
		/// BirthDate : Date of birth.
		/// </summary>
		System.DateTime  BirthDate  { get; set; }
		
		/// <summary>
		/// MaritalStatus : M = Married, S = Single
		/// </summary>
		System.String  MaritalStatus  { get; set; }
		
		/// <summary>
		/// Gender : M = Male, F = Female
		/// </summary>
		System.String  Gender  { get; set; }
		
		/// <summary>
		/// HireDate : Employee hired on this date.
		/// </summary>
		System.DateTime  HireDate  { get; set; }
		
		/// <summary>
		/// SalariedFlag : Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.
		/// </summary>
		System.Boolean  SalariedFlag  { get; set; }
		
		/// <summary>
		/// VacationHours : Number of available vacation hours.
		/// </summary>
		System.Int16  VacationHours  { get; set; }
		
		/// <summary>
		/// SickLeaveHours : Number of available sick leave hours.
		/// </summary>
		System.Int16  SickLeaveHours  { get; set; }
		
		/// <summary>
		/// CurrentFlag : 0 = Inactive, 1 = Active
		/// </summary>
		System.Boolean  CurrentFlag  { get; set; }
		
		/// <summary>
		/// rowguid : ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		System.Guid  Rowguid  { get; set; }
		
		/// <summary>
		/// ModifiedDate : Date and time the record was last updated.
		/// </summary>
		System.DateTime  ModifiedDate  { get; set; }
			
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		System.Object Clone();
		
		#region Data Properties


		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _employeeManagerId
		/// </summary>	
		TList<Employee> EmployeeCollection {  get;  set;}	


		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _jobCandidateEmployeeId
		/// </summary>	
		TList<JobCandidate> JobCandidateCollection {  get;  set;}	
	

		/// <summary>
		///	Holds a  SalesPerson entity object
		///	which is related to this object through the relation _salesPersonSalesPersonId
		/// </summary>
		SalesPerson SalesPerson { get; set; }


		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _employeeAddressEmployeeId
		/// </summary>	
		TList<EmployeeAddress> EmployeeAddressCollection {  get;  set;}	


		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _employeePayHistoryEmployeeId
		/// </summary>	
		TList<EmployeePayHistory> EmployeePayHistoryCollection {  get;  set;}	


		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _purchaseOrderHeaderEmployeeId
		/// </summary>	
		TList<PurchaseOrderHeader> PurchaseOrderHeaderCollection {  get;  set;}	

		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table addressIdAddressCollectionFromEmployeeAddress
		/// </summary>	
		TList<Address> AddressIdAddressCollection_From_EmployeeAddress { get; set; }	


		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _employeeDepartmentHistoryEmployeeId
		/// </summary>	
		TList<EmployeeDepartmentHistory> EmployeeDepartmentHistoryCollection {  get;  set;}	

		#endregion Data Properties

	}
}


