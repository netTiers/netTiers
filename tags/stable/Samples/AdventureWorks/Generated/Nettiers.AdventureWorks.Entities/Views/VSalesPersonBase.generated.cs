/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VSalesPerson.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace Nettiers.AdventureWorks.Entities
{
	///<summary>
	/// Sales representiatives (names and addresses) and their sales-related information.	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("VSalesPersonBase")]
	public abstract partial class VSalesPersonBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// SalesPersonID : 
		/// </summary>
		private System.Int32		  _salesPersonId = (int)0;
		
		/// <summary>
		/// Title : 
		/// </summary>
		private System.String		  _title = null;
		
		/// <summary>
		/// FirstName : 
		/// </summary>
		private System.String		  _firstName = string.Empty;
		
		/// <summary>
		/// MiddleName : 
		/// </summary>
		private System.String		  _middleName = null;
		
		/// <summary>
		/// LastName : 
		/// </summary>
		private System.String		  _lastName = string.Empty;
		
		/// <summary>
		/// Suffix : 
		/// </summary>
		private System.String		  _suffix = null;
		
		/// <summary>
		/// JobTitle : 
		/// </summary>
		private System.String		  _jobTitle = string.Empty;
		
		/// <summary>
		/// Phone : 
		/// </summary>
		private System.String		  _phone = null;
		
		/// <summary>
		/// EmailAddress : 
		/// </summary>
		private System.String		  _emailAddress = null;
		
		/// <summary>
		/// EmailPromotion : 
		/// </summary>
		private System.Int32		  _emailPromotion = (int)0;
		
		/// <summary>
		/// AddressLine1 : 
		/// </summary>
		private System.String		  _addressLine1 = string.Empty;
		
		/// <summary>
		/// AddressLine2 : 
		/// </summary>
		private System.String		  _addressLine2 = null;
		
		/// <summary>
		/// City : 
		/// </summary>
		private System.String		  _city = string.Empty;
		
		/// <summary>
		/// StateProvinceName : 
		/// </summary>
		private System.String		  _stateProvinceName = string.Empty;
		
		/// <summary>
		/// PostalCode : 
		/// </summary>
		private System.String		  _postalCode = string.Empty;
		
		/// <summary>
		/// CountryRegionName : 
		/// </summary>
		private System.String		  _countryRegionName = string.Empty;
		
		/// <summary>
		/// TerritoryName : 
		/// </summary>
		private System.String		  _territoryName = null;
		
		/// <summary>
		/// TerritoryGroup : 
		/// </summary>
		private System.String		  _territoryGroup = null;
		
		/// <summary>
		/// SalesQuota : 
		/// </summary>
		private System.Decimal?		  _salesQuota = null;
		
		/// <summary>
		/// SalesYTD : 
		/// </summary>
		private System.Decimal		  _salesYtd = 0;
		
		/// <summary>
		/// SalesLastYear : 
		/// </summary>
		private System.Decimal		  _salesLastYear = 0;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VSalesPersonBase"/> instance.
		///</summary>
		public VSalesPersonBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="VSalesPersonBase"/> instance.
		///</summary>
		///<param name="_salesPersonId"></param>
		///<param name="_title"></param>
		///<param name="_firstName"></param>
		///<param name="_middleName"></param>
		///<param name="_lastName"></param>
		///<param name="_suffix"></param>
		///<param name="_jobTitle"></param>
		///<param name="_phone"></param>
		///<param name="_emailAddress"></param>
		///<param name="_emailPromotion"></param>
		///<param name="_addressLine1"></param>
		///<param name="_addressLine2"></param>
		///<param name="_city"></param>
		///<param name="_stateProvinceName"></param>
		///<param name="_postalCode"></param>
		///<param name="_countryRegionName"></param>
		///<param name="_territoryName"></param>
		///<param name="_territoryGroup"></param>
		///<param name="_salesQuota"></param>
		///<param name="_salesYtd"></param>
		///<param name="_salesLastYear"></param>
		public VSalesPersonBase(System.Int32 _salesPersonId, System.String _title, System.String _firstName, System.String _middleName, System.String _lastName, System.String _suffix, System.String _jobTitle, System.String _phone, System.String _emailAddress, System.Int32 _emailPromotion, System.String _addressLine1, System.String _addressLine2, System.String _city, System.String _stateProvinceName, System.String _postalCode, System.String _countryRegionName, System.String _territoryName, System.String _territoryGroup, System.Decimal? _salesQuota, System.Decimal _salesYtd, System.Decimal _salesLastYear)
		{
			this._salesPersonId = _salesPersonId;
			this._title = _title;
			this._firstName = _firstName;
			this._middleName = _middleName;
			this._lastName = _lastName;
			this._suffix = _suffix;
			this._jobTitle = _jobTitle;
			this._phone = _phone;
			this._emailAddress = _emailAddress;
			this._emailPromotion = _emailPromotion;
			this._addressLine1 = _addressLine1;
			this._addressLine2 = _addressLine2;
			this._city = _city;
			this._stateProvinceName = _stateProvinceName;
			this._postalCode = _postalCode;
			this._countryRegionName = _countryRegionName;
			this._territoryName = _territoryName;
			this._territoryGroup = _territoryGroup;
			this._salesQuota = _salesQuota;
			this._salesYtd = _salesYtd;
			this._salesLastYear = _salesLastYear;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VSalesPerson"/> instance.
		///</summary>
		///<param name="_salesPersonId"></param>
		///<param name="_title"></param>
		///<param name="_firstName"></param>
		///<param name="_middleName"></param>
		///<param name="_lastName"></param>
		///<param name="_suffix"></param>
		///<param name="_jobTitle"></param>
		///<param name="_phone"></param>
		///<param name="_emailAddress"></param>
		///<param name="_emailPromotion"></param>
		///<param name="_addressLine1"></param>
		///<param name="_addressLine2"></param>
		///<param name="_city"></param>
		///<param name="_stateProvinceName"></param>
		///<param name="_postalCode"></param>
		///<param name="_countryRegionName"></param>
		///<param name="_territoryName"></param>
		///<param name="_territoryGroup"></param>
		///<param name="_salesQuota"></param>
		///<param name="_salesYtd"></param>
		///<param name="_salesLastYear"></param>
		public static VSalesPerson CreateVSalesPerson(System.Int32 _salesPersonId, System.String _title, System.String _firstName, System.String _middleName, System.String _lastName, System.String _suffix, System.String _jobTitle, System.String _phone, System.String _emailAddress, System.Int32 _emailPromotion, System.String _addressLine1, System.String _addressLine2, System.String _city, System.String _stateProvinceName, System.String _postalCode, System.String _countryRegionName, System.String _territoryName, System.String _territoryGroup, System.Decimal? _salesQuota, System.Decimal _salesYtd, System.Decimal _salesLastYear)
		{
			VSalesPerson newVSalesPerson = new VSalesPerson();
			newVSalesPerson.SalesPersonId = _salesPersonId;
			newVSalesPerson.Title = _title;
			newVSalesPerson.FirstName = _firstName;
			newVSalesPerson.MiddleName = _middleName;
			newVSalesPerson.LastName = _lastName;
			newVSalesPerson.Suffix = _suffix;
			newVSalesPerson.JobTitle = _jobTitle;
			newVSalesPerson.Phone = _phone;
			newVSalesPerson.EmailAddress = _emailAddress;
			newVSalesPerson.EmailPromotion = _emailPromotion;
			newVSalesPerson.AddressLine1 = _addressLine1;
			newVSalesPerson.AddressLine2 = _addressLine2;
			newVSalesPerson.City = _city;
			newVSalesPerson.StateProvinceName = _stateProvinceName;
			newVSalesPerson.PostalCode = _postalCode;
			newVSalesPerson.CountryRegionName = _countryRegionName;
			newVSalesPerson.TerritoryName = _territoryName;
			newVSalesPerson.TerritoryGroup = _territoryGroup;
			newVSalesPerson.SalesQuota = _salesQuota;
			newVSalesPerson.SalesYtd = _salesYtd;
			newVSalesPerson.SalesLastYear = _salesLastYear;
			return newVSalesPerson;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the SalesPersonID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 SalesPersonId
		{
			get
			{
				return this._salesPersonId; 
			}
			set
			{
				if (_salesPersonId == value)
					return;
					
				this._salesPersonId = value;
				this._isDirty = true;
				
				OnPropertyChanged("SalesPersonId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Title property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Title
		{
			get
			{
				return this._title; 
			}
			set
			{
				if (_title == value)
					return;
					
				this._title = value;
				this._isDirty = true;
				
				OnPropertyChanged("Title");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FirstName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String FirstName
		{
			get
			{
				return this._firstName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "FirstName does not allow null values.");
				if (_firstName == value)
					return;
					
				this._firstName = value;
				this._isDirty = true;
				
				OnPropertyChanged("FirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MiddleName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MiddleName
		{
			get
			{
				return this._middleName; 
			}
			set
			{
				if (_middleName == value)
					return;
					
				this._middleName = value;
				this._isDirty = true;
				
				OnPropertyChanged("MiddleName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LastName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String LastName
		{
			get
			{
				return this._lastName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "LastName does not allow null values.");
				if (_lastName == value)
					return;
					
				this._lastName = value;
				this._isDirty = true;
				
				OnPropertyChanged("LastName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Suffix property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Suffix
		{
			get
			{
				return this._suffix; 
			}
			set
			{
				if (_suffix == value)
					return;
					
				this._suffix = value;
				this._isDirty = true;
				
				OnPropertyChanged("Suffix");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the JobTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String JobTitle
		{
			get
			{
				return this._jobTitle; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "JobTitle does not allow null values.");
				if (_jobTitle == value)
					return;
					
				this._jobTitle = value;
				this._isDirty = true;
				
				OnPropertyChanged("JobTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Phone property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Phone
		{
			get
			{
				return this._phone; 
			}
			set
			{
				if (_phone == value)
					return;
					
				this._phone = value;
				this._isDirty = true;
				
				OnPropertyChanged("Phone");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the EmailAddress property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String EmailAddress
		{
			get
			{
				return this._emailAddress; 
			}
			set
			{
				if (_emailAddress == value)
					return;
					
				this._emailAddress = value;
				this._isDirty = true;
				
				OnPropertyChanged("EmailAddress");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the EmailPromotion property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 EmailPromotion
		{
			get
			{
				return this._emailPromotion; 
			}
			set
			{
				if (_emailPromotion == value)
					return;
					
				this._emailPromotion = value;
				this._isDirty = true;
				
				OnPropertyChanged("EmailPromotion");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AddressLine1 property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String AddressLine1
		{
			get
			{
				return this._addressLine1; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "AddressLine1 does not allow null values.");
				if (_addressLine1 == value)
					return;
					
				this._addressLine1 = value;
				this._isDirty = true;
				
				OnPropertyChanged("AddressLine1");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AddressLine2 property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String AddressLine2
		{
			get
			{
				return this._addressLine2; 
			}
			set
			{
				if (_addressLine2 == value)
					return;
					
				this._addressLine2 = value;
				this._isDirty = true;
				
				OnPropertyChanged("AddressLine2");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the City property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String City
		{
			get
			{
				return this._city; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "City does not allow null values.");
				if (_city == value)
					return;
					
				this._city = value;
				this._isDirty = true;
				
				OnPropertyChanged("City");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the StateProvinceName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String StateProvinceName
		{
			get
			{
				return this._stateProvinceName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "StateProvinceName does not allow null values.");
				if (_stateProvinceName == value)
					return;
					
				this._stateProvinceName = value;
				this._isDirty = true;
				
				OnPropertyChanged("StateProvinceName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the PostalCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String PostalCode
		{
			get
			{
				return this._postalCode; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "PostalCode does not allow null values.");
				if (_postalCode == value)
					return;
					
				this._postalCode = value;
				this._isDirty = true;
				
				OnPropertyChanged("PostalCode");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CountryRegionName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CountryRegionName
		{
			get
			{
				return this._countryRegionName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "CountryRegionName does not allow null values.");
				if (_countryRegionName == value)
					return;
					
				this._countryRegionName = value;
				this._isDirty = true;
				
				OnPropertyChanged("CountryRegionName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TerritoryName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TerritoryName
		{
			get
			{
				return this._territoryName; 
			}
			set
			{
				if (_territoryName == value)
					return;
					
				this._territoryName = value;
				this._isDirty = true;
				
				OnPropertyChanged("TerritoryName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TerritoryGroup property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TerritoryGroup
		{
			get
			{
				return this._territoryGroup; 
			}
			set
			{
				if (_territoryGroup == value)
					return;
					
				this._territoryGroup = value;
				this._isDirty = true;
				
				OnPropertyChanged("TerritoryGroup");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SalesQuota property. 
		///		
		/// </summary>
		/// <value>This type is money</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsSalesQuotaNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? SalesQuota
		{
			get
			{
				return this._salesQuota; 
			}
			set
			{
				if (_salesQuota == value && SalesQuota != null )
					return;
					
				this._salesQuota = value;
				this._isDirty = true;
				
				OnPropertyChanged("SalesQuota");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SalesYTD property. 
		///		
		/// </summary>
		/// <value>This type is money</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal SalesYtd
		{
			get
			{
				return this._salesYtd; 
			}
			set
			{
				if (_salesYtd == value)
					return;
					
				this._salesYtd = value;
				this._isDirty = true;
				
				OnPropertyChanged("SalesYtd");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SalesLastYear property. 
		///		
		/// </summary>
		/// <value>This type is money</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal SalesLastYear
		{
			get
			{
				return this._salesLastYear; 
			}
			set
			{
				if (_salesLastYear == value)
					return;
					
				this._salesLastYear = value;
				this._isDirty = true;
				
				OnPropertyChanged("SalesLastYear");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "vSalesPerson"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VSalesPersonBase Entity 
		///</summary>
		public virtual VSalesPersonBase Copy()
		{
			//shallow copy entity
			VSalesPerson copy = new VSalesPerson();
				copy.SalesPersonId = this.SalesPersonId;
				copy.Title = this.Title;
				copy.FirstName = this.FirstName;
				copy.MiddleName = this.MiddleName;
				copy.LastName = this.LastName;
				copy.Suffix = this.Suffix;
				copy.JobTitle = this.JobTitle;
				copy.Phone = this.Phone;
				copy.EmailAddress = this.EmailAddress;
				copy.EmailPromotion = this.EmailPromotion;
				copy.AddressLine1 = this.AddressLine1;
				copy.AddressLine2 = this.AddressLine2;
				copy.City = this.City;
				copy.StateProvinceName = this.StateProvinceName;
				copy.PostalCode = this.PostalCode;
				copy.CountryRegionName = this.CountryRegionName;
				copy.TerritoryName = this.TerritoryName;
				copy.TerritoryGroup = this.TerritoryGroup;
				copy.SalesQuota = this.SalesQuota;
				copy.SalesYtd = this.SalesYtd;
				copy.SalesLastYear = this.SalesLastYear;
			copy.AcceptChanges();
			return (VSalesPerson)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VSalesPersonBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VSalesPersonBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="VSalesPersonBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="VSalesPersonBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VSalesPersonBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(VSalesPersonBase Object1, VSalesPersonBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.SalesPersonId != Object2.SalesPersonId)
				equal = false;
			if (Object1.Title != null && Object2.Title != null )
			{
				if (Object1.Title != Object2.Title)
					equal = false;
			}
			else if (Object1.Title == null ^ Object1.Title == null )
			{
				equal = false;
			}
			if (Object1.FirstName != Object2.FirstName)
				equal = false;
			if (Object1.MiddleName != null && Object2.MiddleName != null )
			{
				if (Object1.MiddleName != Object2.MiddleName)
					equal = false;
			}
			else if (Object1.MiddleName == null ^ Object1.MiddleName == null )
			{
				equal = false;
			}
			if (Object1.LastName != Object2.LastName)
				equal = false;
			if (Object1.Suffix != null && Object2.Suffix != null )
			{
				if (Object1.Suffix != Object2.Suffix)
					equal = false;
			}
			else if (Object1.Suffix == null ^ Object1.Suffix == null )
			{
				equal = false;
			}
			if (Object1.JobTitle != Object2.JobTitle)
				equal = false;
			if (Object1.Phone != null && Object2.Phone != null )
			{
				if (Object1.Phone != Object2.Phone)
					equal = false;
			}
			else if (Object1.Phone == null ^ Object1.Phone == null )
			{
				equal = false;
			}
			if (Object1.EmailAddress != null && Object2.EmailAddress != null )
			{
				if (Object1.EmailAddress != Object2.EmailAddress)
					equal = false;
			}
			else if (Object1.EmailAddress == null ^ Object1.EmailAddress == null )
			{
				equal = false;
			}
			if (Object1.EmailPromotion != Object2.EmailPromotion)
				equal = false;
			if (Object1.AddressLine1 != Object2.AddressLine1)
				equal = false;
			if (Object1.AddressLine2 != null && Object2.AddressLine2 != null )
			{
				if (Object1.AddressLine2 != Object2.AddressLine2)
					equal = false;
			}
			else if (Object1.AddressLine2 == null ^ Object1.AddressLine2 == null )
			{
				equal = false;
			}
			if (Object1.City != Object2.City)
				equal = false;
			if (Object1.StateProvinceName != Object2.StateProvinceName)
				equal = false;
			if (Object1.PostalCode != Object2.PostalCode)
				equal = false;
			if (Object1.CountryRegionName != Object2.CountryRegionName)
				equal = false;
			if (Object1.TerritoryName != null && Object2.TerritoryName != null )
			{
				if (Object1.TerritoryName != Object2.TerritoryName)
					equal = false;
			}
			else if (Object1.TerritoryName == null ^ Object1.TerritoryName == null )
			{
				equal = false;
			}
			if (Object1.TerritoryGroup != null && Object2.TerritoryGroup != null )
			{
				if (Object1.TerritoryGroup != Object2.TerritoryGroup)
					equal = false;
			}
			else if (Object1.TerritoryGroup == null ^ Object1.TerritoryGroup == null )
			{
				equal = false;
			}
			if (Object1.SalesQuota != null && Object2.SalesQuota != null )
			{
				if (Object1.SalesQuota != Object2.SalesQuota)
					equal = false;
			}
			else if (Object1.SalesQuota == null ^ Object1.SalesQuota == null )
			{
				equal = false;
			}
			if (Object1.SalesYtd != Object2.SalesYtd)
				equal = false;
			if (Object1.SalesLastYear != Object2.SalesLastYear)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(VSalesPerson entity, string propertyName)
		{
			switch (propertyName)
			{
				case "SalesPersonId":
					return entity.SalesPersonId;
				case "Title":
					return entity.Title;
				case "FirstName":
					return entity.FirstName;
				case "MiddleName":
					return entity.MiddleName;
				case "LastName":
					return entity.LastName;
				case "Suffix":
					return entity.Suffix;
				case "JobTitle":
					return entity.JobTitle;
				case "Phone":
					return entity.Phone;
				case "EmailAddress":
					return entity.EmailAddress;
				case "EmailPromotion":
					return entity.EmailPromotion;
				case "AddressLine1":
					return entity.AddressLine1;
				case "AddressLine2":
					return entity.AddressLine2;
				case "City":
					return entity.City;
				case "StateProvinceName":
					return entity.StateProvinceName;
				case "PostalCode":
					return entity.PostalCode;
				case "CountryRegionName":
					return entity.CountryRegionName;
				case "TerritoryName":
					return entity.TerritoryName;
				case "TerritoryGroup":
					return entity.TerritoryGroup;
				case "SalesQuota":
					return entity.SalesQuota;
				case "SalesYtd":
					return entity.SalesYtd;
				case "SalesLastYear":
					return entity.SalesLastYear;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as VSalesPerson, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{22}{21}- SalesPersonId: {0}{21}- Title: {1}{21}- FirstName: {2}{21}- MiddleName: {3}{21}- LastName: {4}{21}- Suffix: {5}{21}- JobTitle: {6}{21}- Phone: {7}{21}- EmailAddress: {8}{21}- EmailPromotion: {9}{21}- AddressLine1: {10}{21}- AddressLine2: {11}{21}- City: {12}{21}- StateProvinceName: {13}{21}- PostalCode: {14}{21}- CountryRegionName: {15}{21}- TerritoryName: {16}{21}- TerritoryGroup: {17}{21}- SalesQuota: {18}{21}- SalesYtd: {19}{21}- SalesLastYear: {20}{21}", 
				this.SalesPersonId,
				(this.Title == null) ? string.Empty : this.Title.ToString(),
			     
				this.FirstName,
				(this.MiddleName == null) ? string.Empty : this.MiddleName.ToString(),
			     
				this.LastName,
				(this.Suffix == null) ? string.Empty : this.Suffix.ToString(),
			     
				this.JobTitle,
				(this.Phone == null) ? string.Empty : this.Phone.ToString(),
			     
				(this.EmailAddress == null) ? string.Empty : this.EmailAddress.ToString(),
			     
				this.EmailPromotion,
				this.AddressLine1,
				(this.AddressLine2 == null) ? string.Empty : this.AddressLine2.ToString(),
			     
				this.City,
				this.StateProvinceName,
				this.PostalCode,
				this.CountryRegionName,
				(this.TerritoryName == null) ? string.Empty : this.TerritoryName.ToString(),
			     
				(this.TerritoryGroup == null) ? string.Empty : this.TerritoryGroup.ToString(),
			     
				(this.SalesQuota == null) ? string.Empty : this.SalesQuota.ToString(),
			     
				this.SalesYtd,
				this.SalesLastYear,
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the VSalesPerson columns.
	/// </summary>
	[Serializable]
	public enum VSalesPersonColumn
	{
		/// <summary>
		/// SalesPersonID : 
		/// </summary>
		[EnumTextValue("SalesPersonID")]
		[ColumnEnum("SalesPersonID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SalesPersonId,
		/// <summary>
		/// Title : 
		/// </summary>
		[EnumTextValue("Title")]
		[ColumnEnum("Title", typeof(System.String), System.Data.DbType.String, false, false, true, 8)]
		Title,
		/// <summary>
		/// FirstName : 
		/// </summary>
		[EnumTextValue("FirstName")]
		[ColumnEnum("FirstName", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		FirstName,
		/// <summary>
		/// MiddleName : 
		/// </summary>
		[EnumTextValue("MiddleName")]
		[ColumnEnum("MiddleName", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		MiddleName,
		/// <summary>
		/// LastName : 
		/// </summary>
		[EnumTextValue("LastName")]
		[ColumnEnum("LastName", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		LastName,
		/// <summary>
		/// Suffix : 
		/// </summary>
		[EnumTextValue("Suffix")]
		[ColumnEnum("Suffix", typeof(System.String), System.Data.DbType.String, false, false, true, 10)]
		Suffix,
		/// <summary>
		/// JobTitle : 
		/// </summary>
		[EnumTextValue("JobTitle")]
		[ColumnEnum("JobTitle", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		JobTitle,
		/// <summary>
		/// Phone : 
		/// </summary>
		[EnumTextValue("Phone")]
		[ColumnEnum("Phone", typeof(System.String), System.Data.DbType.String, false, false, true, 25)]
		Phone,
		/// <summary>
		/// EmailAddress : 
		/// </summary>
		[EnumTextValue("EmailAddress")]
		[ColumnEnum("EmailAddress", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		EmailAddress,
		/// <summary>
		/// EmailPromotion : 
		/// </summary>
		[EnumTextValue("EmailPromotion")]
		[ColumnEnum("EmailPromotion", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		EmailPromotion,
		/// <summary>
		/// AddressLine1 : 
		/// </summary>
		[EnumTextValue("AddressLine1")]
		[ColumnEnum("AddressLine1", typeof(System.String), System.Data.DbType.String, false, false, false, 60)]
		AddressLine1,
		/// <summary>
		/// AddressLine2 : 
		/// </summary>
		[EnumTextValue("AddressLine2")]
		[ColumnEnum("AddressLine2", typeof(System.String), System.Data.DbType.String, false, false, true, 60)]
		AddressLine2,
		/// <summary>
		/// City : 
		/// </summary>
		[EnumTextValue("City")]
		[ColumnEnum("City", typeof(System.String), System.Data.DbType.String, false, false, false, 30)]
		City,
		/// <summary>
		/// StateProvinceName : 
		/// </summary>
		[EnumTextValue("StateProvinceName")]
		[ColumnEnum("StateProvinceName", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		StateProvinceName,
		/// <summary>
		/// PostalCode : 
		/// </summary>
		[EnumTextValue("PostalCode")]
		[ColumnEnum("PostalCode", typeof(System.String), System.Data.DbType.String, false, false, false, 15)]
		PostalCode,
		/// <summary>
		/// CountryRegionName : 
		/// </summary>
		[EnumTextValue("CountryRegionName")]
		[ColumnEnum("CountryRegionName", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		CountryRegionName,
		/// <summary>
		/// TerritoryName : 
		/// </summary>
		[EnumTextValue("TerritoryName")]
		[ColumnEnum("TerritoryName", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		TerritoryName,
		/// <summary>
		/// TerritoryGroup : 
		/// </summary>
		[EnumTextValue("TerritoryGroup")]
		[ColumnEnum("TerritoryGroup", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		TerritoryGroup,
		/// <summary>
		/// SalesQuota : 
		/// </summary>
		[EnumTextValue("SalesQuota")]
		[ColumnEnum("SalesQuota", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		SalesQuota,
		/// <summary>
		/// SalesYTD : 
		/// </summary>
		[EnumTextValue("SalesYTD")]
		[ColumnEnum("SalesYTD", typeof(System.Decimal), System.Data.DbType.Currency, false, false, false)]
		SalesYtd,
		/// <summary>
		/// SalesLastYear : 
		/// </summary>
		[EnumTextValue("SalesLastYear")]
		[ColumnEnum("SalesLastYear", typeof(System.Decimal), System.Data.DbType.Currency, false, false, false)]
		SalesLastYear
	}//End enum

} // end namespace
