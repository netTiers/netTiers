/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VProductAndDescription.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace Nettiers.AdventureWorks.Entities
{
	///<summary>
	/// Product names and descriptions. Product descriptions are provided in multiple languages.	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("VProductAndDescriptionBase")]
	public abstract partial class VProductAndDescriptionBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// ProductID : 
		/// </summary>
		private System.Int32		  _productId = (int)0;
		
		/// <summary>
		/// Name : 
		/// </summary>
		private System.String		  _name = string.Empty;
		
		/// <summary>
		/// ProductModel : 
		/// </summary>
		private System.String		  _productModel = string.Empty;
		
		/// <summary>
		/// CultureID : 
		/// </summary>
		private System.String		  _cultureId = string.Empty;
		
		/// <summary>
		/// Description : 
		/// </summary>
		private System.String		  _description = string.Empty;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VProductAndDescriptionBase"/> instance.
		///</summary>
		public VProductAndDescriptionBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="VProductAndDescriptionBase"/> instance.
		///</summary>
		///<param name="_productId"></param>
		///<param name="_name"></param>
		///<param name="_productModel"></param>
		///<param name="_cultureId"></param>
		///<param name="_description"></param>
		public VProductAndDescriptionBase(System.Int32 _productId, System.String _name, System.String _productModel, System.String _cultureId, System.String _description)
		{
			this._productId = _productId;
			this._name = _name;
			this._productModel = _productModel;
			this._cultureId = _cultureId;
			this._description = _description;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VProductAndDescription"/> instance.
		///</summary>
		///<param name="_productId"></param>
		///<param name="_name"></param>
		///<param name="_productModel"></param>
		///<param name="_cultureId"></param>
		///<param name="_description"></param>
		public static VProductAndDescription CreateVProductAndDescription(System.Int32 _productId, System.String _name, System.String _productModel, System.String _cultureId, System.String _description)
		{
			VProductAndDescription newVProductAndDescription = new VProductAndDescription();
			newVProductAndDescription.ProductId = _productId;
			newVProductAndDescription.Name = _name;
			newVProductAndDescription.ProductModel = _productModel;
			newVProductAndDescription.CultureId = _cultureId;
			newVProductAndDescription.Description = _description;
			return newVProductAndDescription;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the ProductID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 ProductId
		{
			get
			{
				return this._productId; 
			}
			set
			{
				if (_productId == value)
					return;
					
				this._productId = value;
				this._isDirty = true;
				
				OnPropertyChanged("ProductId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Name
		{
			get
			{
				return this._name; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "Name does not allow null values.");
				if (_name == value)
					return;
					
				this._name = value;
				this._isDirty = true;
				
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ProductModel property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ProductModel
		{
			get
			{
				return this._productModel; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "ProductModel does not allow null values.");
				if (_productModel == value)
					return;
					
				this._productModel = value;
				this._isDirty = true;
				
				OnPropertyChanged("ProductModel");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CultureID property. 
		///		
		/// </summary>
		/// <value>This type is nchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CultureId
		{
			get
			{
				return this._cultureId; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "CultureId does not allow null values.");
				if (_cultureId == value)
					return;
					
				this._cultureId = value;
				this._isDirty = true;
				
				OnPropertyChanged("CultureId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Description
		{
			get
			{
				return this._description; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "Description does not allow null values.");
				if (_description == value)
					return;
					
				this._description = value;
				this._isDirty = true;
				
				OnPropertyChanged("Description");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "vProductAndDescription"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VProductAndDescriptionBase Entity 
		///</summary>
		public virtual VProductAndDescriptionBase Copy()
		{
			//shallow copy entity
			VProductAndDescription copy = new VProductAndDescription();
				copy.ProductId = this.ProductId;
				copy.Name = this.Name;
				copy.ProductModel = this.ProductModel;
				copy.CultureId = this.CultureId;
				copy.Description = this.Description;
			copy.AcceptChanges();
			return (VProductAndDescription)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VProductAndDescriptionBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VProductAndDescriptionBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="VProductAndDescriptionBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="VProductAndDescriptionBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VProductAndDescriptionBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(VProductAndDescriptionBase Object1, VProductAndDescriptionBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.ProductId != Object2.ProductId)
				equal = false;
			if (Object1.Name != Object2.Name)
				equal = false;
			if (Object1.ProductModel != Object2.ProductModel)
				equal = false;
			if (Object1.CultureId != Object2.CultureId)
				equal = false;
			if (Object1.Description != Object2.Description)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(VProductAndDescription entity, string propertyName)
		{
			switch (propertyName)
			{
				case "ProductId":
					return entity.ProductId;
				case "Name":
					return entity.Name;
				case "ProductModel":
					return entity.ProductModel;
				case "CultureId":
					return entity.CultureId;
				case "Description":
					return entity.Description;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as VProductAndDescription, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{6}{5}- ProductId: {0}{5}- Name: {1}{5}- ProductModel: {2}{5}- CultureId: {3}{5}- Description: {4}{5}", 
				this.ProductId,
				this.Name,
				this.ProductModel,
				this.CultureId,
				this.Description,
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the VProductAndDescription columns.
	/// </summary>
	[Serializable]
	public enum VProductAndDescriptionColumn
	{
		/// <summary>
		/// ProductID : 
		/// </summary>
		[EnumTextValue("ProductID")]
		[ColumnEnum("ProductID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ProductId,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Name,
		/// <summary>
		/// ProductModel : 
		/// </summary>
		[EnumTextValue("ProductModel")]
		[ColumnEnum("ProductModel", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		ProductModel,
		/// <summary>
		/// CultureID : 
		/// </summary>
		[EnumTextValue("CultureID")]
		[ColumnEnum("CultureID", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, false, 6)]
		CultureId,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.String, false, false, false, 400)]
		Description
	}//End enum

} // end namespace
