/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VJobCandidateEmployment.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace Nettiers.AdventureWorks.Entities
{
	///<summary>
	/// Displays the content from each employement history related element in the xml column Resume in the HumanResources.JobCandidate table. The content has been localized into French, Simplified Chinese and Thai. Some data may not display correctly unless supplemental language support is installed.	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("VJobCandidateEmploymentBase")]
	public abstract partial class VJobCandidateEmploymentBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// JobCandidateID : 
		/// </summary>
		private System.Int32		  _jobCandidateId = (int)0;
		
		/// <summary>
		/// Emp.StartDate : 
		/// </summary>
		private System.DateTime?		  _safeNameEmpStartDate = null;
		
		/// <summary>
		/// Emp.EndDate : 
		/// </summary>
		private System.DateTime?		  _safeNameEmpEndDate = null;
		
		/// <summary>
		/// Emp.OrgName : 
		/// </summary>
		private System.String		  _safeNameEmpOrgName = null;
		
		/// <summary>
		/// Emp.JobTitle : 
		/// </summary>
		private System.String		  _safeNameEmpJobTitle = null;
		
		/// <summary>
		/// Emp.Responsibility : 
		/// </summary>
		private System.String		  _safeNameEmpResponsibility = null;
		
		/// <summary>
		/// Emp.FunctionCategory : 
		/// </summary>
		private System.String		  _safeNameEmpFunctionCategory = null;
		
		/// <summary>
		/// Emp.IndustryCategory : 
		/// </summary>
		private System.String		  _safeNameEmpIndustryCategory = null;
		
		/// <summary>
		/// Emp.Loc.CountryRegion : 
		/// </summary>
		private System.String		  _safeNameEmpLocCountryRegion = null;
		
		/// <summary>
		/// Emp.Loc.State : 
		/// </summary>
		private System.String		  _safeNameEmpLocState = null;
		
		/// <summary>
		/// Emp.Loc.City : 
		/// </summary>
		private System.String		  _safeNameEmpLocCity = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VJobCandidateEmploymentBase"/> instance.
		///</summary>
		public VJobCandidateEmploymentBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="VJobCandidateEmploymentBase"/> instance.
		///</summary>
		///<param name="_jobCandidateId"></param>
		///<param name="_safeNameEmpStartDate"></param>
		///<param name="_safeNameEmpEndDate"></param>
		///<param name="_safeNameEmpOrgName"></param>
		///<param name="_safeNameEmpJobTitle"></param>
		///<param name="_safeNameEmpResponsibility"></param>
		///<param name="_safeNameEmpFunctionCategory"></param>
		///<param name="_safeNameEmpIndustryCategory"></param>
		///<param name="_safeNameEmpLocCountryRegion"></param>
		///<param name="_safeNameEmpLocState"></param>
		///<param name="_safeNameEmpLocCity"></param>
		public VJobCandidateEmploymentBase(System.Int32 _jobCandidateId, System.DateTime? _safeNameEmpStartDate, System.DateTime? _safeNameEmpEndDate, System.String _safeNameEmpOrgName, System.String _safeNameEmpJobTitle, System.String _safeNameEmpResponsibility, System.String _safeNameEmpFunctionCategory, System.String _safeNameEmpIndustryCategory, System.String _safeNameEmpLocCountryRegion, System.String _safeNameEmpLocState, System.String _safeNameEmpLocCity)
		{
			this._jobCandidateId = _jobCandidateId;
			this._safeNameEmpStartDate = _safeNameEmpStartDate;
			this._safeNameEmpEndDate = _safeNameEmpEndDate;
			this._safeNameEmpOrgName = _safeNameEmpOrgName;
			this._safeNameEmpJobTitle = _safeNameEmpJobTitle;
			this._safeNameEmpResponsibility = _safeNameEmpResponsibility;
			this._safeNameEmpFunctionCategory = _safeNameEmpFunctionCategory;
			this._safeNameEmpIndustryCategory = _safeNameEmpIndustryCategory;
			this._safeNameEmpLocCountryRegion = _safeNameEmpLocCountryRegion;
			this._safeNameEmpLocState = _safeNameEmpLocState;
			this._safeNameEmpLocCity = _safeNameEmpLocCity;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VJobCandidateEmployment"/> instance.
		///</summary>
		///<param name="_jobCandidateId"></param>
		///<param name="_safeNameEmpStartDate"></param>
		///<param name="_safeNameEmpEndDate"></param>
		///<param name="_safeNameEmpOrgName"></param>
		///<param name="_safeNameEmpJobTitle"></param>
		///<param name="_safeNameEmpResponsibility"></param>
		///<param name="_safeNameEmpFunctionCategory"></param>
		///<param name="_safeNameEmpIndustryCategory"></param>
		///<param name="_safeNameEmpLocCountryRegion"></param>
		///<param name="_safeNameEmpLocState"></param>
		///<param name="_safeNameEmpLocCity"></param>
		public static VJobCandidateEmployment CreateVJobCandidateEmployment(System.Int32 _jobCandidateId, System.DateTime? _safeNameEmpStartDate, System.DateTime? _safeNameEmpEndDate, System.String _safeNameEmpOrgName, System.String _safeNameEmpJobTitle, System.String _safeNameEmpResponsibility, System.String _safeNameEmpFunctionCategory, System.String _safeNameEmpIndustryCategory, System.String _safeNameEmpLocCountryRegion, System.String _safeNameEmpLocState, System.String _safeNameEmpLocCity)
		{
			VJobCandidateEmployment newVJobCandidateEmployment = new VJobCandidateEmployment();
			newVJobCandidateEmployment.JobCandidateId = _jobCandidateId;
			newVJobCandidateEmployment.SafeNameEmpStartDate = _safeNameEmpStartDate;
			newVJobCandidateEmployment.SafeNameEmpEndDate = _safeNameEmpEndDate;
			newVJobCandidateEmployment.SafeNameEmpOrgName = _safeNameEmpOrgName;
			newVJobCandidateEmployment.SafeNameEmpJobTitle = _safeNameEmpJobTitle;
			newVJobCandidateEmployment.SafeNameEmpResponsibility = _safeNameEmpResponsibility;
			newVJobCandidateEmployment.SafeNameEmpFunctionCategory = _safeNameEmpFunctionCategory;
			newVJobCandidateEmployment.SafeNameEmpIndustryCategory = _safeNameEmpIndustryCategory;
			newVJobCandidateEmployment.SafeNameEmpLocCountryRegion = _safeNameEmpLocCountryRegion;
			newVJobCandidateEmployment.SafeNameEmpLocState = _safeNameEmpLocState;
			newVJobCandidateEmployment.SafeNameEmpLocCity = _safeNameEmpLocCity;
			return newVJobCandidateEmployment;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the JobCandidateID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 JobCandidateId
		{
			get
			{
				return this._jobCandidateId; 
			}
			set
			{
				if (_jobCandidateId == value)
					return;
					
				this._jobCandidateId = value;
				this._isDirty = true;
				
				OnPropertyChanged("JobCandidateId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Emp.StartDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsSafeNameEmpStartDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? SafeNameEmpStartDate
		{
			get
			{
				return this._safeNameEmpStartDate; 
			}
			set
			{
				if (_safeNameEmpStartDate == value && SafeNameEmpStartDate != null )
					return;
					
				this._safeNameEmpStartDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("SafeNameEmpStartDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Emp.EndDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsSafeNameEmpEndDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? SafeNameEmpEndDate
		{
			get
			{
				return this._safeNameEmpEndDate; 
			}
			set
			{
				if (_safeNameEmpEndDate == value && SafeNameEmpEndDate != null )
					return;
					
				this._safeNameEmpEndDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("SafeNameEmpEndDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Emp.OrgName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SafeNameEmpOrgName
		{
			get
			{
				return this._safeNameEmpOrgName; 
			}
			set
			{
				if (_safeNameEmpOrgName == value)
					return;
					
				this._safeNameEmpOrgName = value;
				this._isDirty = true;
				
				OnPropertyChanged("SafeNameEmpOrgName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Emp.JobTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SafeNameEmpJobTitle
		{
			get
			{
				return this._safeNameEmpJobTitle; 
			}
			set
			{
				if (_safeNameEmpJobTitle == value)
					return;
					
				this._safeNameEmpJobTitle = value;
				this._isDirty = true;
				
				OnPropertyChanged("SafeNameEmpJobTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Emp.Responsibility property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SafeNameEmpResponsibility
		{
			get
			{
				return this._safeNameEmpResponsibility; 
			}
			set
			{
				if (_safeNameEmpResponsibility == value)
					return;
					
				this._safeNameEmpResponsibility = value;
				this._isDirty = true;
				
				OnPropertyChanged("SafeNameEmpResponsibility");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Emp.FunctionCategory property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SafeNameEmpFunctionCategory
		{
			get
			{
				return this._safeNameEmpFunctionCategory; 
			}
			set
			{
				if (_safeNameEmpFunctionCategory == value)
					return;
					
				this._safeNameEmpFunctionCategory = value;
				this._isDirty = true;
				
				OnPropertyChanged("SafeNameEmpFunctionCategory");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Emp.IndustryCategory property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SafeNameEmpIndustryCategory
		{
			get
			{
				return this._safeNameEmpIndustryCategory; 
			}
			set
			{
				if (_safeNameEmpIndustryCategory == value)
					return;
					
				this._safeNameEmpIndustryCategory = value;
				this._isDirty = true;
				
				OnPropertyChanged("SafeNameEmpIndustryCategory");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Emp.Loc.CountryRegion property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SafeNameEmpLocCountryRegion
		{
			get
			{
				return this._safeNameEmpLocCountryRegion; 
			}
			set
			{
				if (_safeNameEmpLocCountryRegion == value)
					return;
					
				this._safeNameEmpLocCountryRegion = value;
				this._isDirty = true;
				
				OnPropertyChanged("SafeNameEmpLocCountryRegion");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Emp.Loc.State property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SafeNameEmpLocState
		{
			get
			{
				return this._safeNameEmpLocState; 
			}
			set
			{
				if (_safeNameEmpLocState == value)
					return;
					
				this._safeNameEmpLocState = value;
				this._isDirty = true;
				
				OnPropertyChanged("SafeNameEmpLocState");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Emp.Loc.City property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SafeNameEmpLocCity
		{
			get
			{
				return this._safeNameEmpLocCity; 
			}
			set
			{
				if (_safeNameEmpLocCity == value)
					return;
					
				this._safeNameEmpLocCity = value;
				this._isDirty = true;
				
				OnPropertyChanged("SafeNameEmpLocCity");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "vJobCandidateEmployment"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VJobCandidateEmploymentBase Entity 
		///</summary>
		public virtual VJobCandidateEmploymentBase Copy()
		{
			//shallow copy entity
			VJobCandidateEmployment copy = new VJobCandidateEmployment();
				copy.JobCandidateId = this.JobCandidateId;
				copy.SafeNameEmpStartDate = this.SafeNameEmpStartDate;
				copy.SafeNameEmpEndDate = this.SafeNameEmpEndDate;
				copy.SafeNameEmpOrgName = this.SafeNameEmpOrgName;
				copy.SafeNameEmpJobTitle = this.SafeNameEmpJobTitle;
				copy.SafeNameEmpResponsibility = this.SafeNameEmpResponsibility;
				copy.SafeNameEmpFunctionCategory = this.SafeNameEmpFunctionCategory;
				copy.SafeNameEmpIndustryCategory = this.SafeNameEmpIndustryCategory;
				copy.SafeNameEmpLocCountryRegion = this.SafeNameEmpLocCountryRegion;
				copy.SafeNameEmpLocState = this.SafeNameEmpLocState;
				copy.SafeNameEmpLocCity = this.SafeNameEmpLocCity;
			copy.AcceptChanges();
			return (VJobCandidateEmployment)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VJobCandidateEmploymentBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VJobCandidateEmploymentBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="VJobCandidateEmploymentBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="VJobCandidateEmploymentBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VJobCandidateEmploymentBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(VJobCandidateEmploymentBase Object1, VJobCandidateEmploymentBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.JobCandidateId != Object2.JobCandidateId)
				equal = false;
			if (Object1.SafeNameEmpStartDate != null && Object2.SafeNameEmpStartDate != null )
			{
				if (Object1.SafeNameEmpStartDate != Object2.SafeNameEmpStartDate)
					equal = false;
			}
			else if (Object1.SafeNameEmpStartDate == null ^ Object1.SafeNameEmpStartDate == null )
			{
				equal = false;
			}
			if (Object1.SafeNameEmpEndDate != null && Object2.SafeNameEmpEndDate != null )
			{
				if (Object1.SafeNameEmpEndDate != Object2.SafeNameEmpEndDate)
					equal = false;
			}
			else if (Object1.SafeNameEmpEndDate == null ^ Object1.SafeNameEmpEndDate == null )
			{
				equal = false;
			}
			if (Object1.SafeNameEmpOrgName != null && Object2.SafeNameEmpOrgName != null )
			{
				if (Object1.SafeNameEmpOrgName != Object2.SafeNameEmpOrgName)
					equal = false;
			}
			else if (Object1.SafeNameEmpOrgName == null ^ Object1.SafeNameEmpOrgName == null )
			{
				equal = false;
			}
			if (Object1.SafeNameEmpJobTitle != null && Object2.SafeNameEmpJobTitle != null )
			{
				if (Object1.SafeNameEmpJobTitle != Object2.SafeNameEmpJobTitle)
					equal = false;
			}
			else if (Object1.SafeNameEmpJobTitle == null ^ Object1.SafeNameEmpJobTitle == null )
			{
				equal = false;
			}
			if (Object1.SafeNameEmpResponsibility != null && Object2.SafeNameEmpResponsibility != null )
			{
				if (Object1.SafeNameEmpResponsibility != Object2.SafeNameEmpResponsibility)
					equal = false;
			}
			else if (Object1.SafeNameEmpResponsibility == null ^ Object1.SafeNameEmpResponsibility == null )
			{
				equal = false;
			}
			if (Object1.SafeNameEmpFunctionCategory != null && Object2.SafeNameEmpFunctionCategory != null )
			{
				if (Object1.SafeNameEmpFunctionCategory != Object2.SafeNameEmpFunctionCategory)
					equal = false;
			}
			else if (Object1.SafeNameEmpFunctionCategory == null ^ Object1.SafeNameEmpFunctionCategory == null )
			{
				equal = false;
			}
			if (Object1.SafeNameEmpIndustryCategory != null && Object2.SafeNameEmpIndustryCategory != null )
			{
				if (Object1.SafeNameEmpIndustryCategory != Object2.SafeNameEmpIndustryCategory)
					equal = false;
			}
			else if (Object1.SafeNameEmpIndustryCategory == null ^ Object1.SafeNameEmpIndustryCategory == null )
			{
				equal = false;
			}
			if (Object1.SafeNameEmpLocCountryRegion != null && Object2.SafeNameEmpLocCountryRegion != null )
			{
				if (Object1.SafeNameEmpLocCountryRegion != Object2.SafeNameEmpLocCountryRegion)
					equal = false;
			}
			else if (Object1.SafeNameEmpLocCountryRegion == null ^ Object1.SafeNameEmpLocCountryRegion == null )
			{
				equal = false;
			}
			if (Object1.SafeNameEmpLocState != null && Object2.SafeNameEmpLocState != null )
			{
				if (Object1.SafeNameEmpLocState != Object2.SafeNameEmpLocState)
					equal = false;
			}
			else if (Object1.SafeNameEmpLocState == null ^ Object1.SafeNameEmpLocState == null )
			{
				equal = false;
			}
			if (Object1.SafeNameEmpLocCity != null && Object2.SafeNameEmpLocCity != null )
			{
				if (Object1.SafeNameEmpLocCity != Object2.SafeNameEmpLocCity)
					equal = false;
			}
			else if (Object1.SafeNameEmpLocCity == null ^ Object1.SafeNameEmpLocCity == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(VJobCandidateEmployment entity, string propertyName)
		{
			switch (propertyName)
			{
				case "JobCandidateId":
					return entity.JobCandidateId;
				case "SafeNameEmpStartDate":
					return entity.SafeNameEmpStartDate;
				case "SafeNameEmpEndDate":
					return entity.SafeNameEmpEndDate;
				case "SafeNameEmpOrgName":
					return entity.SafeNameEmpOrgName;
				case "SafeNameEmpJobTitle":
					return entity.SafeNameEmpJobTitle;
				case "SafeNameEmpResponsibility":
					return entity.SafeNameEmpResponsibility;
				case "SafeNameEmpFunctionCategory":
					return entity.SafeNameEmpFunctionCategory;
				case "SafeNameEmpIndustryCategory":
					return entity.SafeNameEmpIndustryCategory;
				case "SafeNameEmpLocCountryRegion":
					return entity.SafeNameEmpLocCountryRegion;
				case "SafeNameEmpLocState":
					return entity.SafeNameEmpLocState;
				case "SafeNameEmpLocCity":
					return entity.SafeNameEmpLocCity;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as VJobCandidateEmployment, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- JobCandidateId: {0}{11}- SafeNameEmpStartDate: {1}{11}- SafeNameEmpEndDate: {2}{11}- SafeNameEmpOrgName: {3}{11}- SafeNameEmpJobTitle: {4}{11}- SafeNameEmpResponsibility: {5}{11}- SafeNameEmpFunctionCategory: {6}{11}- SafeNameEmpIndustryCategory: {7}{11}- SafeNameEmpLocCountryRegion: {8}{11}- SafeNameEmpLocState: {9}{11}- SafeNameEmpLocCity: {10}{11}", 
				this.JobCandidateId,
				(this.SafeNameEmpStartDate == null) ? string.Empty : this.SafeNameEmpStartDate.ToString(),
			     
				(this.SafeNameEmpEndDate == null) ? string.Empty : this.SafeNameEmpEndDate.ToString(),
			     
				(this.SafeNameEmpOrgName == null) ? string.Empty : this.SafeNameEmpOrgName.ToString(),
			     
				(this.SafeNameEmpJobTitle == null) ? string.Empty : this.SafeNameEmpJobTitle.ToString(),
			     
				(this.SafeNameEmpResponsibility == null) ? string.Empty : this.SafeNameEmpResponsibility.ToString(),
			     
				(this.SafeNameEmpFunctionCategory == null) ? string.Empty : this.SafeNameEmpFunctionCategory.ToString(),
			     
				(this.SafeNameEmpIndustryCategory == null) ? string.Empty : this.SafeNameEmpIndustryCategory.ToString(),
			     
				(this.SafeNameEmpLocCountryRegion == null) ? string.Empty : this.SafeNameEmpLocCountryRegion.ToString(),
			     
				(this.SafeNameEmpLocState == null) ? string.Empty : this.SafeNameEmpLocState.ToString(),
			     
				(this.SafeNameEmpLocCity == null) ? string.Empty : this.SafeNameEmpLocCity.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the VJobCandidateEmployment columns.
	/// </summary>
	[Serializable]
	public enum VJobCandidateEmploymentColumn
	{
		/// <summary>
		/// JobCandidateID : 
		/// </summary>
		[EnumTextValue("JobCandidateID")]
		[ColumnEnum("JobCandidateID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		JobCandidateId,
		/// <summary>
		/// Emp.StartDate : 
		/// </summary>
		[EnumTextValue("Emp.StartDate")]
		[ColumnEnum("Emp.StartDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		SafeNameEmpStartDate,
		/// <summary>
		/// Emp.EndDate : 
		/// </summary>
		[EnumTextValue("Emp.EndDate")]
		[ColumnEnum("Emp.EndDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		SafeNameEmpEndDate,
		/// <summary>
		/// Emp.OrgName : 
		/// </summary>
		[EnumTextValue("Emp.OrgName")]
		[ColumnEnum("Emp.OrgName", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		SafeNameEmpOrgName,
		/// <summary>
		/// Emp.JobTitle : 
		/// </summary>
		[EnumTextValue("Emp.JobTitle")]
		[ColumnEnum("Emp.JobTitle", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		SafeNameEmpJobTitle,
		/// <summary>
		/// Emp.Responsibility : 
		/// </summary>
		[EnumTextValue("Emp.Responsibility")]
		[ColumnEnum("Emp.Responsibility", typeof(System.String), System.Data.DbType.String, false, false, true)]
		SafeNameEmpResponsibility,
		/// <summary>
		/// Emp.FunctionCategory : 
		/// </summary>
		[EnumTextValue("Emp.FunctionCategory")]
		[ColumnEnum("Emp.FunctionCategory", typeof(System.String), System.Data.DbType.String, false, false, true)]
		SafeNameEmpFunctionCategory,
		/// <summary>
		/// Emp.IndustryCategory : 
		/// </summary>
		[EnumTextValue("Emp.IndustryCategory")]
		[ColumnEnum("Emp.IndustryCategory", typeof(System.String), System.Data.DbType.String, false, false, true)]
		SafeNameEmpIndustryCategory,
		/// <summary>
		/// Emp.Loc.CountryRegion : 
		/// </summary>
		[EnumTextValue("Emp.Loc.CountryRegion")]
		[ColumnEnum("Emp.Loc.CountryRegion", typeof(System.String), System.Data.DbType.String, false, false, true)]
		SafeNameEmpLocCountryRegion,
		/// <summary>
		/// Emp.Loc.State : 
		/// </summary>
		[EnumTextValue("Emp.Loc.State")]
		[ColumnEnum("Emp.Loc.State", typeof(System.String), System.Data.DbType.String, false, false, true)]
		SafeNameEmpLocState,
		/// <summary>
		/// Emp.Loc.City : 
		/// </summary>
		[EnumTextValue("Emp.Loc.City")]
		[ColumnEnum("Emp.Loc.City", typeof(System.String), System.Data.DbType.String, false, false, true)]
		SafeNameEmpLocCity
	}//End enum

} // end namespace
