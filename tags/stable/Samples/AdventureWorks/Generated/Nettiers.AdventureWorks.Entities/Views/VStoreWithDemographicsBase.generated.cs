/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VStoreWithDemographics.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace Nettiers.AdventureWorks.Entities
{
	///<summary>
	/// Stores (names and addresses) that sell Adventure Works Cycles products to consumers.	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("VStoreWithDemographicsBase")]
	public abstract partial class VStoreWithDemographicsBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// CustomerID : 
		/// </summary>
		private System.Int32		  _customerId = (int)0;
		
		/// <summary>
		/// Name : 
		/// </summary>
		private System.String		  _name = string.Empty;
		
		/// <summary>
		/// ContactType : 
		/// </summary>
		private System.String		  _contactType = string.Empty;
		
		/// <summary>
		/// Title : 
		/// </summary>
		private System.String		  _title = null;
		
		/// <summary>
		/// FirstName : 
		/// </summary>
		private System.String		  _firstName = string.Empty;
		
		/// <summary>
		/// MiddleName : 
		/// </summary>
		private System.String		  _middleName = null;
		
		/// <summary>
		/// LastName : 
		/// </summary>
		private System.String		  _lastName = string.Empty;
		
		/// <summary>
		/// Suffix : 
		/// </summary>
		private System.String		  _suffix = null;
		
		/// <summary>
		/// Phone : 
		/// </summary>
		private System.String		  _phone = null;
		
		/// <summary>
		/// EmailAddress : 
		/// </summary>
		private System.String		  _emailAddress = null;
		
		/// <summary>
		/// EmailPromotion : 
		/// </summary>
		private System.Int32		  _emailPromotion = (int)0;
		
		/// <summary>
		/// AddressType : 
		/// </summary>
		private System.String		  _addressType = string.Empty;
		
		/// <summary>
		/// AddressLine1 : 
		/// </summary>
		private System.String		  _addressLine1 = string.Empty;
		
		/// <summary>
		/// AddressLine2 : 
		/// </summary>
		private System.String		  _addressLine2 = null;
		
		/// <summary>
		/// City : 
		/// </summary>
		private System.String		  _city = string.Empty;
		
		/// <summary>
		/// StateProvinceName : 
		/// </summary>
		private System.String		  _stateProvinceName = string.Empty;
		
		/// <summary>
		/// PostalCode : 
		/// </summary>
		private System.String		  _postalCode = string.Empty;
		
		/// <summary>
		/// CountryRegionName : 
		/// </summary>
		private System.String		  _countryRegionName = string.Empty;
		
		/// <summary>
		/// AnnualSales : 
		/// </summary>
		private System.Decimal?		  _annualSales = null;
		
		/// <summary>
		/// AnnualRevenue : 
		/// </summary>
		private System.Decimal?		  _annualRevenue = null;
		
		/// <summary>
		/// BankName : 
		/// </summary>
		private System.String		  _bankName = null;
		
		/// <summary>
		/// BusinessType : 
		/// </summary>
		private System.String		  _businessType = null;
		
		/// <summary>
		/// YearOpened : 
		/// </summary>
		private System.Int32?		  _yearOpened = null;
		
		/// <summary>
		/// Specialty : 
		/// </summary>
		private System.String		  _specialty = null;
		
		/// <summary>
		/// SquareFeet : 
		/// </summary>
		private System.Int32?		  _squareFeet = null;
		
		/// <summary>
		/// Brands : 
		/// </summary>
		private System.String		  _brands = null;
		
		/// <summary>
		/// Internet : 
		/// </summary>
		private System.String		  _internet = null;
		
		/// <summary>
		/// NumberEmployees : 
		/// </summary>
		private System.Int32?		  _numberEmployees = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VStoreWithDemographicsBase"/> instance.
		///</summary>
		public VStoreWithDemographicsBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="VStoreWithDemographicsBase"/> instance.
		///</summary>
		///<param name="_customerId"></param>
		///<param name="_name"></param>
		///<param name="_contactType"></param>
		///<param name="_title"></param>
		///<param name="_firstName"></param>
		///<param name="_middleName"></param>
		///<param name="_lastName"></param>
		///<param name="_suffix"></param>
		///<param name="_phone"></param>
		///<param name="_emailAddress"></param>
		///<param name="_emailPromotion"></param>
		///<param name="_addressType"></param>
		///<param name="_addressLine1"></param>
		///<param name="_addressLine2"></param>
		///<param name="_city"></param>
		///<param name="_stateProvinceName"></param>
		///<param name="_postalCode"></param>
		///<param name="_countryRegionName"></param>
		///<param name="_annualSales"></param>
		///<param name="_annualRevenue"></param>
		///<param name="_bankName"></param>
		///<param name="_businessType"></param>
		///<param name="_yearOpened"></param>
		///<param name="_specialty"></param>
		///<param name="_squareFeet"></param>
		///<param name="_brands"></param>
		///<param name="_internet"></param>
		///<param name="_numberEmployees"></param>
		public VStoreWithDemographicsBase(System.Int32 _customerId, System.String _name, System.String _contactType, System.String _title, System.String _firstName, System.String _middleName, System.String _lastName, System.String _suffix, System.String _phone, System.String _emailAddress, System.Int32 _emailPromotion, System.String _addressType, System.String _addressLine1, System.String _addressLine2, System.String _city, System.String _stateProvinceName, System.String _postalCode, System.String _countryRegionName, System.Decimal? _annualSales, System.Decimal? _annualRevenue, System.String _bankName, System.String _businessType, System.Int32? _yearOpened, System.String _specialty, System.Int32? _squareFeet, System.String _brands, System.String _internet, System.Int32? _numberEmployees)
		{
			this._customerId = _customerId;
			this._name = _name;
			this._contactType = _contactType;
			this._title = _title;
			this._firstName = _firstName;
			this._middleName = _middleName;
			this._lastName = _lastName;
			this._suffix = _suffix;
			this._phone = _phone;
			this._emailAddress = _emailAddress;
			this._emailPromotion = _emailPromotion;
			this._addressType = _addressType;
			this._addressLine1 = _addressLine1;
			this._addressLine2 = _addressLine2;
			this._city = _city;
			this._stateProvinceName = _stateProvinceName;
			this._postalCode = _postalCode;
			this._countryRegionName = _countryRegionName;
			this._annualSales = _annualSales;
			this._annualRevenue = _annualRevenue;
			this._bankName = _bankName;
			this._businessType = _businessType;
			this._yearOpened = _yearOpened;
			this._specialty = _specialty;
			this._squareFeet = _squareFeet;
			this._brands = _brands;
			this._internet = _internet;
			this._numberEmployees = _numberEmployees;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VStoreWithDemographics"/> instance.
		///</summary>
		///<param name="_customerId"></param>
		///<param name="_name"></param>
		///<param name="_contactType"></param>
		///<param name="_title"></param>
		///<param name="_firstName"></param>
		///<param name="_middleName"></param>
		///<param name="_lastName"></param>
		///<param name="_suffix"></param>
		///<param name="_phone"></param>
		///<param name="_emailAddress"></param>
		///<param name="_emailPromotion"></param>
		///<param name="_addressType"></param>
		///<param name="_addressLine1"></param>
		///<param name="_addressLine2"></param>
		///<param name="_city"></param>
		///<param name="_stateProvinceName"></param>
		///<param name="_postalCode"></param>
		///<param name="_countryRegionName"></param>
		///<param name="_annualSales"></param>
		///<param name="_annualRevenue"></param>
		///<param name="_bankName"></param>
		///<param name="_businessType"></param>
		///<param name="_yearOpened"></param>
		///<param name="_specialty"></param>
		///<param name="_squareFeet"></param>
		///<param name="_brands"></param>
		///<param name="_internet"></param>
		///<param name="_numberEmployees"></param>
		public static VStoreWithDemographics CreateVStoreWithDemographics(System.Int32 _customerId, System.String _name, System.String _contactType, System.String _title, System.String _firstName, System.String _middleName, System.String _lastName, System.String _suffix, System.String _phone, System.String _emailAddress, System.Int32 _emailPromotion, System.String _addressType, System.String _addressLine1, System.String _addressLine2, System.String _city, System.String _stateProvinceName, System.String _postalCode, System.String _countryRegionName, System.Decimal? _annualSales, System.Decimal? _annualRevenue, System.String _bankName, System.String _businessType, System.Int32? _yearOpened, System.String _specialty, System.Int32? _squareFeet, System.String _brands, System.String _internet, System.Int32? _numberEmployees)
		{
			VStoreWithDemographics newVStoreWithDemographics = new VStoreWithDemographics();
			newVStoreWithDemographics.CustomerId = _customerId;
			newVStoreWithDemographics.Name = _name;
			newVStoreWithDemographics.ContactType = _contactType;
			newVStoreWithDemographics.Title = _title;
			newVStoreWithDemographics.FirstName = _firstName;
			newVStoreWithDemographics.MiddleName = _middleName;
			newVStoreWithDemographics.LastName = _lastName;
			newVStoreWithDemographics.Suffix = _suffix;
			newVStoreWithDemographics.Phone = _phone;
			newVStoreWithDemographics.EmailAddress = _emailAddress;
			newVStoreWithDemographics.EmailPromotion = _emailPromotion;
			newVStoreWithDemographics.AddressType = _addressType;
			newVStoreWithDemographics.AddressLine1 = _addressLine1;
			newVStoreWithDemographics.AddressLine2 = _addressLine2;
			newVStoreWithDemographics.City = _city;
			newVStoreWithDemographics.StateProvinceName = _stateProvinceName;
			newVStoreWithDemographics.PostalCode = _postalCode;
			newVStoreWithDemographics.CountryRegionName = _countryRegionName;
			newVStoreWithDemographics.AnnualSales = _annualSales;
			newVStoreWithDemographics.AnnualRevenue = _annualRevenue;
			newVStoreWithDemographics.BankName = _bankName;
			newVStoreWithDemographics.BusinessType = _businessType;
			newVStoreWithDemographics.YearOpened = _yearOpened;
			newVStoreWithDemographics.Specialty = _specialty;
			newVStoreWithDemographics.SquareFeet = _squareFeet;
			newVStoreWithDemographics.Brands = _brands;
			newVStoreWithDemographics.Internet = _internet;
			newVStoreWithDemographics.NumberEmployees = _numberEmployees;
			return newVStoreWithDemographics;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the CustomerID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 CustomerId
		{
			get
			{
				return this._customerId; 
			}
			set
			{
				if (_customerId == value)
					return;
					
				this._customerId = value;
				this._isDirty = true;
				
				OnPropertyChanged("CustomerId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Name
		{
			get
			{
				return this._name; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "Name does not allow null values.");
				if (_name == value)
					return;
					
				this._name = value;
				this._isDirty = true;
				
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ContactType property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ContactType
		{
			get
			{
				return this._contactType; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "ContactType does not allow null values.");
				if (_contactType == value)
					return;
					
				this._contactType = value;
				this._isDirty = true;
				
				OnPropertyChanged("ContactType");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Title property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Title
		{
			get
			{
				return this._title; 
			}
			set
			{
				if (_title == value)
					return;
					
				this._title = value;
				this._isDirty = true;
				
				OnPropertyChanged("Title");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FirstName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String FirstName
		{
			get
			{
				return this._firstName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "FirstName does not allow null values.");
				if (_firstName == value)
					return;
					
				this._firstName = value;
				this._isDirty = true;
				
				OnPropertyChanged("FirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MiddleName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MiddleName
		{
			get
			{
				return this._middleName; 
			}
			set
			{
				if (_middleName == value)
					return;
					
				this._middleName = value;
				this._isDirty = true;
				
				OnPropertyChanged("MiddleName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LastName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String LastName
		{
			get
			{
				return this._lastName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "LastName does not allow null values.");
				if (_lastName == value)
					return;
					
				this._lastName = value;
				this._isDirty = true;
				
				OnPropertyChanged("LastName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Suffix property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Suffix
		{
			get
			{
				return this._suffix; 
			}
			set
			{
				if (_suffix == value)
					return;
					
				this._suffix = value;
				this._isDirty = true;
				
				OnPropertyChanged("Suffix");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Phone property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Phone
		{
			get
			{
				return this._phone; 
			}
			set
			{
				if (_phone == value)
					return;
					
				this._phone = value;
				this._isDirty = true;
				
				OnPropertyChanged("Phone");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the EmailAddress property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String EmailAddress
		{
			get
			{
				return this._emailAddress; 
			}
			set
			{
				if (_emailAddress == value)
					return;
					
				this._emailAddress = value;
				this._isDirty = true;
				
				OnPropertyChanged("EmailAddress");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the EmailPromotion property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 EmailPromotion
		{
			get
			{
				return this._emailPromotion; 
			}
			set
			{
				if (_emailPromotion == value)
					return;
					
				this._emailPromotion = value;
				this._isDirty = true;
				
				OnPropertyChanged("EmailPromotion");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AddressType property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String AddressType
		{
			get
			{
				return this._addressType; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "AddressType does not allow null values.");
				if (_addressType == value)
					return;
					
				this._addressType = value;
				this._isDirty = true;
				
				OnPropertyChanged("AddressType");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AddressLine1 property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String AddressLine1
		{
			get
			{
				return this._addressLine1; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "AddressLine1 does not allow null values.");
				if (_addressLine1 == value)
					return;
					
				this._addressLine1 = value;
				this._isDirty = true;
				
				OnPropertyChanged("AddressLine1");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AddressLine2 property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String AddressLine2
		{
			get
			{
				return this._addressLine2; 
			}
			set
			{
				if (_addressLine2 == value)
					return;
					
				this._addressLine2 = value;
				this._isDirty = true;
				
				OnPropertyChanged("AddressLine2");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the City property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String City
		{
			get
			{
				return this._city; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "City does not allow null values.");
				if (_city == value)
					return;
					
				this._city = value;
				this._isDirty = true;
				
				OnPropertyChanged("City");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the StateProvinceName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String StateProvinceName
		{
			get
			{
				return this._stateProvinceName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "StateProvinceName does not allow null values.");
				if (_stateProvinceName == value)
					return;
					
				this._stateProvinceName = value;
				this._isDirty = true;
				
				OnPropertyChanged("StateProvinceName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the PostalCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String PostalCode
		{
			get
			{
				return this._postalCode; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "PostalCode does not allow null values.");
				if (_postalCode == value)
					return;
					
				this._postalCode = value;
				this._isDirty = true;
				
				OnPropertyChanged("PostalCode");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CountryRegionName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CountryRegionName
		{
			get
			{
				return this._countryRegionName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "CountryRegionName does not allow null values.");
				if (_countryRegionName == value)
					return;
					
				this._countryRegionName = value;
				this._isDirty = true;
				
				OnPropertyChanged("CountryRegionName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AnnualSales property. 
		///		
		/// </summary>
		/// <value>This type is money</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsAnnualSalesNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? AnnualSales
		{
			get
			{
				return this._annualSales; 
			}
			set
			{
				if (_annualSales == value && AnnualSales != null )
					return;
					
				this._annualSales = value;
				this._isDirty = true;
				
				OnPropertyChanged("AnnualSales");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AnnualRevenue property. 
		///		
		/// </summary>
		/// <value>This type is money</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsAnnualRevenueNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? AnnualRevenue
		{
			get
			{
				return this._annualRevenue; 
			}
			set
			{
				if (_annualRevenue == value && AnnualRevenue != null )
					return;
					
				this._annualRevenue = value;
				this._isDirty = true;
				
				OnPropertyChanged("AnnualRevenue");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the BankName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String BankName
		{
			get
			{
				return this._bankName; 
			}
			set
			{
				if (_bankName == value)
					return;
					
				this._bankName = value;
				this._isDirty = true;
				
				OnPropertyChanged("BankName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the BusinessType property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String BusinessType
		{
			get
			{
				return this._businessType; 
			}
			set
			{
				if (_businessType == value)
					return;
					
				this._businessType = value;
				this._isDirty = true;
				
				OnPropertyChanged("BusinessType");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the YearOpened property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsYearOpenedNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? YearOpened
		{
			get
			{
				return this._yearOpened; 
			}
			set
			{
				if (_yearOpened == value && YearOpened != null )
					return;
					
				this._yearOpened = value;
				this._isDirty = true;
				
				OnPropertyChanged("YearOpened");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Specialty property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Specialty
		{
			get
			{
				return this._specialty; 
			}
			set
			{
				if (_specialty == value)
					return;
					
				this._specialty = value;
				this._isDirty = true;
				
				OnPropertyChanged("Specialty");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SquareFeet property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSquareFeetNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? SquareFeet
		{
			get
			{
				return this._squareFeet; 
			}
			set
			{
				if (_squareFeet == value && SquareFeet != null )
					return;
					
				this._squareFeet = value;
				this._isDirty = true;
				
				OnPropertyChanged("SquareFeet");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Brands property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Brands
		{
			get
			{
				return this._brands; 
			}
			set
			{
				if (_brands == value)
					return;
					
				this._brands = value;
				this._isDirty = true;
				
				OnPropertyChanged("Brands");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Internet property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Internet
		{
			get
			{
				return this._internet; 
			}
			set
			{
				if (_internet == value)
					return;
					
				this._internet = value;
				this._isDirty = true;
				
				OnPropertyChanged("Internet");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NumberEmployees property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsNumberEmployeesNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? NumberEmployees
		{
			get
			{
				return this._numberEmployees; 
			}
			set
			{
				if (_numberEmployees == value && NumberEmployees != null )
					return;
					
				this._numberEmployees = value;
				this._isDirty = true;
				
				OnPropertyChanged("NumberEmployees");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "vStoreWithDemographics"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VStoreWithDemographicsBase Entity 
		///</summary>
		public virtual VStoreWithDemographicsBase Copy()
		{
			//shallow copy entity
			VStoreWithDemographics copy = new VStoreWithDemographics();
				copy.CustomerId = this.CustomerId;
				copy.Name = this.Name;
				copy.ContactType = this.ContactType;
				copy.Title = this.Title;
				copy.FirstName = this.FirstName;
				copy.MiddleName = this.MiddleName;
				copy.LastName = this.LastName;
				copy.Suffix = this.Suffix;
				copy.Phone = this.Phone;
				copy.EmailAddress = this.EmailAddress;
				copy.EmailPromotion = this.EmailPromotion;
				copy.AddressType = this.AddressType;
				copy.AddressLine1 = this.AddressLine1;
				copy.AddressLine2 = this.AddressLine2;
				copy.City = this.City;
				copy.StateProvinceName = this.StateProvinceName;
				copy.PostalCode = this.PostalCode;
				copy.CountryRegionName = this.CountryRegionName;
				copy.AnnualSales = this.AnnualSales;
				copy.AnnualRevenue = this.AnnualRevenue;
				copy.BankName = this.BankName;
				copy.BusinessType = this.BusinessType;
				copy.YearOpened = this.YearOpened;
				copy.Specialty = this.Specialty;
				copy.SquareFeet = this.SquareFeet;
				copy.Brands = this.Brands;
				copy.Internet = this.Internet;
				copy.NumberEmployees = this.NumberEmployees;
			copy.AcceptChanges();
			return (VStoreWithDemographics)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VStoreWithDemographicsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VStoreWithDemographicsBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="VStoreWithDemographicsBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="VStoreWithDemographicsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VStoreWithDemographicsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(VStoreWithDemographicsBase Object1, VStoreWithDemographicsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.CustomerId != Object2.CustomerId)
				equal = false;
			if (Object1.Name != Object2.Name)
				equal = false;
			if (Object1.ContactType != Object2.ContactType)
				equal = false;
			if (Object1.Title != null && Object2.Title != null )
			{
				if (Object1.Title != Object2.Title)
					equal = false;
			}
			else if (Object1.Title == null ^ Object1.Title == null )
			{
				equal = false;
			}
			if (Object1.FirstName != Object2.FirstName)
				equal = false;
			if (Object1.MiddleName != null && Object2.MiddleName != null )
			{
				if (Object1.MiddleName != Object2.MiddleName)
					equal = false;
			}
			else if (Object1.MiddleName == null ^ Object1.MiddleName == null )
			{
				equal = false;
			}
			if (Object1.LastName != Object2.LastName)
				equal = false;
			if (Object1.Suffix != null && Object2.Suffix != null )
			{
				if (Object1.Suffix != Object2.Suffix)
					equal = false;
			}
			else if (Object1.Suffix == null ^ Object1.Suffix == null )
			{
				equal = false;
			}
			if (Object1.Phone != null && Object2.Phone != null )
			{
				if (Object1.Phone != Object2.Phone)
					equal = false;
			}
			else if (Object1.Phone == null ^ Object1.Phone == null )
			{
				equal = false;
			}
			if (Object1.EmailAddress != null && Object2.EmailAddress != null )
			{
				if (Object1.EmailAddress != Object2.EmailAddress)
					equal = false;
			}
			else if (Object1.EmailAddress == null ^ Object1.EmailAddress == null )
			{
				equal = false;
			}
			if (Object1.EmailPromotion != Object2.EmailPromotion)
				equal = false;
			if (Object1.AddressType != Object2.AddressType)
				equal = false;
			if (Object1.AddressLine1 != Object2.AddressLine1)
				equal = false;
			if (Object1.AddressLine2 != null && Object2.AddressLine2 != null )
			{
				if (Object1.AddressLine2 != Object2.AddressLine2)
					equal = false;
			}
			else if (Object1.AddressLine2 == null ^ Object1.AddressLine2 == null )
			{
				equal = false;
			}
			if (Object1.City != Object2.City)
				equal = false;
			if (Object1.StateProvinceName != Object2.StateProvinceName)
				equal = false;
			if (Object1.PostalCode != Object2.PostalCode)
				equal = false;
			if (Object1.CountryRegionName != Object2.CountryRegionName)
				equal = false;
			if (Object1.AnnualSales != null && Object2.AnnualSales != null )
			{
				if (Object1.AnnualSales != Object2.AnnualSales)
					equal = false;
			}
			else if (Object1.AnnualSales == null ^ Object1.AnnualSales == null )
			{
				equal = false;
			}
			if (Object1.AnnualRevenue != null && Object2.AnnualRevenue != null )
			{
				if (Object1.AnnualRevenue != Object2.AnnualRevenue)
					equal = false;
			}
			else if (Object1.AnnualRevenue == null ^ Object1.AnnualRevenue == null )
			{
				equal = false;
			}
			if (Object1.BankName != null && Object2.BankName != null )
			{
				if (Object1.BankName != Object2.BankName)
					equal = false;
			}
			else if (Object1.BankName == null ^ Object1.BankName == null )
			{
				equal = false;
			}
			if (Object1.BusinessType != null && Object2.BusinessType != null )
			{
				if (Object1.BusinessType != Object2.BusinessType)
					equal = false;
			}
			else if (Object1.BusinessType == null ^ Object1.BusinessType == null )
			{
				equal = false;
			}
			if (Object1.YearOpened != null && Object2.YearOpened != null )
			{
				if (Object1.YearOpened != Object2.YearOpened)
					equal = false;
			}
			else if (Object1.YearOpened == null ^ Object1.YearOpened == null )
			{
				equal = false;
			}
			if (Object1.Specialty != null && Object2.Specialty != null )
			{
				if (Object1.Specialty != Object2.Specialty)
					equal = false;
			}
			else if (Object1.Specialty == null ^ Object1.Specialty == null )
			{
				equal = false;
			}
			if (Object1.SquareFeet != null && Object2.SquareFeet != null )
			{
				if (Object1.SquareFeet != Object2.SquareFeet)
					equal = false;
			}
			else if (Object1.SquareFeet == null ^ Object1.SquareFeet == null )
			{
				equal = false;
			}
			if (Object1.Brands != null && Object2.Brands != null )
			{
				if (Object1.Brands != Object2.Brands)
					equal = false;
			}
			else if (Object1.Brands == null ^ Object1.Brands == null )
			{
				equal = false;
			}
			if (Object1.Internet != null && Object2.Internet != null )
			{
				if (Object1.Internet != Object2.Internet)
					equal = false;
			}
			else if (Object1.Internet == null ^ Object1.Internet == null )
			{
				equal = false;
			}
			if (Object1.NumberEmployees != null && Object2.NumberEmployees != null )
			{
				if (Object1.NumberEmployees != Object2.NumberEmployees)
					equal = false;
			}
			else if (Object1.NumberEmployees == null ^ Object1.NumberEmployees == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(VStoreWithDemographics entity, string propertyName)
		{
			switch (propertyName)
			{
				case "CustomerId":
					return entity.CustomerId;
				case "Name":
					return entity.Name;
				case "ContactType":
					return entity.ContactType;
				case "Title":
					return entity.Title;
				case "FirstName":
					return entity.FirstName;
				case "MiddleName":
					return entity.MiddleName;
				case "LastName":
					return entity.LastName;
				case "Suffix":
					return entity.Suffix;
				case "Phone":
					return entity.Phone;
				case "EmailAddress":
					return entity.EmailAddress;
				case "EmailPromotion":
					return entity.EmailPromotion;
				case "AddressType":
					return entity.AddressType;
				case "AddressLine1":
					return entity.AddressLine1;
				case "AddressLine2":
					return entity.AddressLine2;
				case "City":
					return entity.City;
				case "StateProvinceName":
					return entity.StateProvinceName;
				case "PostalCode":
					return entity.PostalCode;
				case "CountryRegionName":
					return entity.CountryRegionName;
				case "AnnualSales":
					return entity.AnnualSales;
				case "AnnualRevenue":
					return entity.AnnualRevenue;
				case "BankName":
					return entity.BankName;
				case "BusinessType":
					return entity.BusinessType;
				case "YearOpened":
					return entity.YearOpened;
				case "Specialty":
					return entity.Specialty;
				case "SquareFeet":
					return entity.SquareFeet;
				case "Brands":
					return entity.Brands;
				case "Internet":
					return entity.Internet;
				case "NumberEmployees":
					return entity.NumberEmployees;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as VStoreWithDemographics, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{29}{28}- CustomerId: {0}{28}- Name: {1}{28}- ContactType: {2}{28}- Title: {3}{28}- FirstName: {4}{28}- MiddleName: {5}{28}- LastName: {6}{28}- Suffix: {7}{28}- Phone: {8}{28}- EmailAddress: {9}{28}- EmailPromotion: {10}{28}- AddressType: {11}{28}- AddressLine1: {12}{28}- AddressLine2: {13}{28}- City: {14}{28}- StateProvinceName: {15}{28}- PostalCode: {16}{28}- CountryRegionName: {17}{28}- AnnualSales: {18}{28}- AnnualRevenue: {19}{28}- BankName: {20}{28}- BusinessType: {21}{28}- YearOpened: {22}{28}- Specialty: {23}{28}- SquareFeet: {24}{28}- Brands: {25}{28}- Internet: {26}{28}- NumberEmployees: {27}{28}", 
				this.CustomerId,
				this.Name,
				this.ContactType,
				(this.Title == null) ? string.Empty : this.Title.ToString(),
			     
				this.FirstName,
				(this.MiddleName == null) ? string.Empty : this.MiddleName.ToString(),
			     
				this.LastName,
				(this.Suffix == null) ? string.Empty : this.Suffix.ToString(),
			     
				(this.Phone == null) ? string.Empty : this.Phone.ToString(),
			     
				(this.EmailAddress == null) ? string.Empty : this.EmailAddress.ToString(),
			     
				this.EmailPromotion,
				this.AddressType,
				this.AddressLine1,
				(this.AddressLine2 == null) ? string.Empty : this.AddressLine2.ToString(),
			     
				this.City,
				this.StateProvinceName,
				this.PostalCode,
				this.CountryRegionName,
				(this.AnnualSales == null) ? string.Empty : this.AnnualSales.ToString(),
			     
				(this.AnnualRevenue == null) ? string.Empty : this.AnnualRevenue.ToString(),
			     
				(this.BankName == null) ? string.Empty : this.BankName.ToString(),
			     
				(this.BusinessType == null) ? string.Empty : this.BusinessType.ToString(),
			     
				(this.YearOpened == null) ? string.Empty : this.YearOpened.ToString(),
			     
				(this.Specialty == null) ? string.Empty : this.Specialty.ToString(),
			     
				(this.SquareFeet == null) ? string.Empty : this.SquareFeet.ToString(),
			     
				(this.Brands == null) ? string.Empty : this.Brands.ToString(),
			     
				(this.Internet == null) ? string.Empty : this.Internet.ToString(),
			     
				(this.NumberEmployees == null) ? string.Empty : this.NumberEmployees.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the VStoreWithDemographics columns.
	/// </summary>
	[Serializable]
	public enum VStoreWithDemographicsColumn
	{
		/// <summary>
		/// CustomerID : 
		/// </summary>
		[EnumTextValue("CustomerID")]
		[ColumnEnum("CustomerID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CustomerId,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Name,
		/// <summary>
		/// ContactType : 
		/// </summary>
		[EnumTextValue("ContactType")]
		[ColumnEnum("ContactType", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		ContactType,
		/// <summary>
		/// Title : 
		/// </summary>
		[EnumTextValue("Title")]
		[ColumnEnum("Title", typeof(System.String), System.Data.DbType.String, false, false, true, 8)]
		Title,
		/// <summary>
		/// FirstName : 
		/// </summary>
		[EnumTextValue("FirstName")]
		[ColumnEnum("FirstName", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		FirstName,
		/// <summary>
		/// MiddleName : 
		/// </summary>
		[EnumTextValue("MiddleName")]
		[ColumnEnum("MiddleName", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		MiddleName,
		/// <summary>
		/// LastName : 
		/// </summary>
		[EnumTextValue("LastName")]
		[ColumnEnum("LastName", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		LastName,
		/// <summary>
		/// Suffix : 
		/// </summary>
		[EnumTextValue("Suffix")]
		[ColumnEnum("Suffix", typeof(System.String), System.Data.DbType.String, false, false, true, 10)]
		Suffix,
		/// <summary>
		/// Phone : 
		/// </summary>
		[EnumTextValue("Phone")]
		[ColumnEnum("Phone", typeof(System.String), System.Data.DbType.String, false, false, true, 25)]
		Phone,
		/// <summary>
		/// EmailAddress : 
		/// </summary>
		[EnumTextValue("EmailAddress")]
		[ColumnEnum("EmailAddress", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		EmailAddress,
		/// <summary>
		/// EmailPromotion : 
		/// </summary>
		[EnumTextValue("EmailPromotion")]
		[ColumnEnum("EmailPromotion", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		EmailPromotion,
		/// <summary>
		/// AddressType : 
		/// </summary>
		[EnumTextValue("AddressType")]
		[ColumnEnum("AddressType", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		AddressType,
		/// <summary>
		/// AddressLine1 : 
		/// </summary>
		[EnumTextValue("AddressLine1")]
		[ColumnEnum("AddressLine1", typeof(System.String), System.Data.DbType.String, false, false, false, 60)]
		AddressLine1,
		/// <summary>
		/// AddressLine2 : 
		/// </summary>
		[EnumTextValue("AddressLine2")]
		[ColumnEnum("AddressLine2", typeof(System.String), System.Data.DbType.String, false, false, true, 60)]
		AddressLine2,
		/// <summary>
		/// City : 
		/// </summary>
		[EnumTextValue("City")]
		[ColumnEnum("City", typeof(System.String), System.Data.DbType.String, false, false, false, 30)]
		City,
		/// <summary>
		/// StateProvinceName : 
		/// </summary>
		[EnumTextValue("StateProvinceName")]
		[ColumnEnum("StateProvinceName", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		StateProvinceName,
		/// <summary>
		/// PostalCode : 
		/// </summary>
		[EnumTextValue("PostalCode")]
		[ColumnEnum("PostalCode", typeof(System.String), System.Data.DbType.String, false, false, false, 15)]
		PostalCode,
		/// <summary>
		/// CountryRegionName : 
		/// </summary>
		[EnumTextValue("CountryRegionName")]
		[ColumnEnum("CountryRegionName", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		CountryRegionName,
		/// <summary>
		/// AnnualSales : 
		/// </summary>
		[EnumTextValue("AnnualSales")]
		[ColumnEnum("AnnualSales", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		AnnualSales,
		/// <summary>
		/// AnnualRevenue : 
		/// </summary>
		[EnumTextValue("AnnualRevenue")]
		[ColumnEnum("AnnualRevenue", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		AnnualRevenue,
		/// <summary>
		/// BankName : 
		/// </summary>
		[EnumTextValue("BankName")]
		[ColumnEnum("BankName", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		BankName,
		/// <summary>
		/// BusinessType : 
		/// </summary>
		[EnumTextValue("BusinessType")]
		[ColumnEnum("BusinessType", typeof(System.String), System.Data.DbType.String, false, false, true, 5)]
		BusinessType,
		/// <summary>
		/// YearOpened : 
		/// </summary>
		[EnumTextValue("YearOpened")]
		[ColumnEnum("YearOpened", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		YearOpened,
		/// <summary>
		/// Specialty : 
		/// </summary>
		[EnumTextValue("Specialty")]
		[ColumnEnum("Specialty", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Specialty,
		/// <summary>
		/// SquareFeet : 
		/// </summary>
		[EnumTextValue("SquareFeet")]
		[ColumnEnum("SquareFeet", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SquareFeet,
		/// <summary>
		/// Brands : 
		/// </summary>
		[EnumTextValue("Brands")]
		[ColumnEnum("Brands", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		Brands,
		/// <summary>
		/// Internet : 
		/// </summary>
		[EnumTextValue("Internet")]
		[ColumnEnum("Internet", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		Internet,
		/// <summary>
		/// NumberEmployees : 
		/// </summary>
		[EnumTextValue("NumberEmployees")]
		[ColumnEnum("NumberEmployees", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		NumberEmployees
	}//End enum

} // end namespace
