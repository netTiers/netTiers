
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file StudentMasterIndex.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Nettiers.AdventureWorks.Entities.Validation;
#endregion

namespace Nettiers.AdventureWorks.Entities
{
	///<summary>
	/// An object representation of the 'STUDENT_MASTER_INDEX' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class StudentMasterIndexBase : EntityBase, IStudentMasterIndex, IEntityId<StudentMasterIndexKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private StudentMasterIndexEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private StudentMasterIndexEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private StudentMasterIndexEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<StudentMasterIndex> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event StudentMasterIndexEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event StudentMasterIndexEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="StudentMasterIndexBase"/> instance.
		///</summary>
		public StudentMasterIndexBase()
		{
			this.entityData = new StudentMasterIndexEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="StudentMasterIndexBase"/> instance.
		///</summary>
		///<param name="_studentId"></param>
		///<param name="_epassId"></param>
		///<param name="_studentUpn"></param>
		///<param name="_ssabsaId"></param>
		///<param name="_surname"></param>
		///<param name="_firstName"></param>
		///<param name="_otherNames"></param>
		///<param name="_knownName"></param>
		///<param name="_legalName"></param>
		///<param name="_dob"></param>
		///<param name="_gender"></param>
		///<param name="_indigeneousStatus"></param>
		///<param name="_lbote"></param>
		///<param name="_eslPhase"></param>
		///<param name="_tribalGroup"></param>
		///<param name="_slpCreatedFlag"></param>
		///<param name="_addressLine1"></param>
		///<param name="_addressLine2"></param>
		///<param name="_addressLine3"></param>
		///<param name="_addressLine4"></param>
		///<param name="_suburb"></param>
		///<param name="_postcode"></param>
		///<param name="_phone1"></param>
		///<param name="_phone2"></param>
		///<param name="_sourceSystem"></param>
		///<param name="_phoneticMatchId"></param>
		public StudentMasterIndexBase(System.Int32 _studentId, System.String _epassId, 
			System.String _studentUpn, System.String _ssabsaId, System.String _surname, 
			System.String _firstName, System.String _otherNames, System.String _knownName, 
			System.String _legalName, System.DateTime? _dob, System.String _gender, 
			System.String _indigeneousStatus, System.String _lbote, System.String _eslPhase, 
			System.String _tribalGroup, System.String _slpCreatedFlag, System.String _addressLine1, 
			System.String _addressLine2, System.String _addressLine3, System.String _addressLine4, 
			System.String _suburb, System.String _postcode, System.String _phone1, 
			System.String _phone2, System.String _sourceSystem, System.Int32? _phoneticMatchId)
		{
			this.entityData = new StudentMasterIndexEntityData();
			this.backupData = null;

			this.StudentId = _studentId;
			this.EpassId = _epassId;
			this.StudentUpn = _studentUpn;
			this.SsabsaId = _ssabsaId;
			this.Surname = _surname;
			this.FirstName = _firstName;
			this.OtherNames = _otherNames;
			this.KnownName = _knownName;
			this.LegalName = _legalName;
			this.Dob = _dob;
			this.Gender = _gender;
			this.IndigeneousStatus = _indigeneousStatus;
			this.Lbote = _lbote;
			this.EslPhase = _eslPhase;
			this.TribalGroup = _tribalGroup;
			this.SlpCreatedFlag = _slpCreatedFlag;
			this.AddressLine1 = _addressLine1;
			this.AddressLine2 = _addressLine2;
			this.AddressLine3 = _addressLine3;
			this.AddressLine4 = _addressLine4;
			this.Suburb = _suburb;
			this.Postcode = _postcode;
			this.Phone1 = _phone1;
			this.Phone2 = _phone2;
			this.SourceSystem = _sourceSystem;
			this.PhoneticMatchId = _phoneticMatchId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="StudentMasterIndex"/> instance.
		///</summary>
		///<param name="_studentId"></param>
		///<param name="_epassId"></param>
		///<param name="_studentUpn"></param>
		///<param name="_ssabsaId"></param>
		///<param name="_surname"></param>
		///<param name="_firstName"></param>
		///<param name="_otherNames"></param>
		///<param name="_knownName"></param>
		///<param name="_legalName"></param>
		///<param name="_dob"></param>
		///<param name="_gender"></param>
		///<param name="_indigeneousStatus"></param>
		///<param name="_lbote"></param>
		///<param name="_eslPhase"></param>
		///<param name="_tribalGroup"></param>
		///<param name="_slpCreatedFlag"></param>
		///<param name="_addressLine1"></param>
		///<param name="_addressLine2"></param>
		///<param name="_addressLine3"></param>
		///<param name="_addressLine4"></param>
		///<param name="_suburb"></param>
		///<param name="_postcode"></param>
		///<param name="_phone1"></param>
		///<param name="_phone2"></param>
		///<param name="_sourceSystem"></param>
		///<param name="_phoneticMatchId"></param>
		public static StudentMasterIndex CreateStudentMasterIndex(System.Int32 _studentId, System.String _epassId, 
			System.String _studentUpn, System.String _ssabsaId, System.String _surname, 
			System.String _firstName, System.String _otherNames, System.String _knownName, 
			System.String _legalName, System.DateTime? _dob, System.String _gender, 
			System.String _indigeneousStatus, System.String _lbote, System.String _eslPhase, 
			System.String _tribalGroup, System.String _slpCreatedFlag, System.String _addressLine1, 
			System.String _addressLine2, System.String _addressLine3, System.String _addressLine4, 
			System.String _suburb, System.String _postcode, System.String _phone1, 
			System.String _phone2, System.String _sourceSystem, System.Int32? _phoneticMatchId)
		{
			StudentMasterIndex newStudentMasterIndex = new StudentMasterIndex();
			newStudentMasterIndex.StudentId = _studentId;
			newStudentMasterIndex.EpassId = _epassId;
			newStudentMasterIndex.StudentUpn = _studentUpn;
			newStudentMasterIndex.SsabsaId = _ssabsaId;
			newStudentMasterIndex.Surname = _surname;
			newStudentMasterIndex.FirstName = _firstName;
			newStudentMasterIndex.OtherNames = _otherNames;
			newStudentMasterIndex.KnownName = _knownName;
			newStudentMasterIndex.LegalName = _legalName;
			newStudentMasterIndex.Dob = _dob;
			newStudentMasterIndex.Gender = _gender;
			newStudentMasterIndex.IndigeneousStatus = _indigeneousStatus;
			newStudentMasterIndex.Lbote = _lbote;
			newStudentMasterIndex.EslPhase = _eslPhase;
			newStudentMasterIndex.TribalGroup = _tribalGroup;
			newStudentMasterIndex.SlpCreatedFlag = _slpCreatedFlag;
			newStudentMasterIndex.AddressLine1 = _addressLine1;
			newStudentMasterIndex.AddressLine2 = _addressLine2;
			newStudentMasterIndex.AddressLine3 = _addressLine3;
			newStudentMasterIndex.AddressLine4 = _addressLine4;
			newStudentMasterIndex.Suburb = _suburb;
			newStudentMasterIndex.Postcode = _postcode;
			newStudentMasterIndex.Phone1 = _phone1;
			newStudentMasterIndex.Phone2 = _phone2;
			newStudentMasterIndex.SourceSystem = _sourceSystem;
			newStudentMasterIndex.PhoneticMatchId = _phoneticMatchId;
			return newStudentMasterIndex;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the StudentId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 StudentId
		{
			get
			{
				return this.entityData.StudentId; 
			}
			
			set
			{
				if (this.entityData.StudentId == value)
					return;
					
				OnColumnChanging(StudentMasterIndexColumn.StudentId, this.entityData.StudentId);
				this.entityData.StudentId = value;
				this.EntityId.StudentId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StudentMasterIndexColumn.StudentId, this.entityData.StudentId);
				OnPropertyChanged("StudentId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the STUDENT_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the STUDENT_ID property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalStudentId
		{
			get { return this.entityData.OriginalStudentId; }
			set { this.entityData.OriginalStudentId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EpassId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String EpassId
		{
			get
			{
				return this.entityData.EpassId; 
			}
			
			set
			{
				if (this.entityData.EpassId == value)
					return;
					
				OnColumnChanging(StudentMasterIndexColumn.EpassId, this.entityData.EpassId);
				this.entityData.EpassId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StudentMasterIndexColumn.EpassId, this.entityData.EpassId);
				OnPropertyChanged("EpassId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StudentUpn property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 13)]
		public virtual System.String StudentUpn
		{
			get
			{
				return this.entityData.StudentUpn; 
			}
			
			set
			{
				if (this.entityData.StudentUpn == value)
					return;
					
				OnColumnChanging(StudentMasterIndexColumn.StudentUpn, this.entityData.StudentUpn);
				this.entityData.StudentUpn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StudentMasterIndexColumn.StudentUpn, this.entityData.StudentUpn);
				OnPropertyChanged("StudentUpn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SsabsaId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String SsabsaId
		{
			get
			{
				return this.entityData.SsabsaId; 
			}
			
			set
			{
				if (this.entityData.SsabsaId == value)
					return;
					
				OnColumnChanging(StudentMasterIndexColumn.SsabsaId, this.entityData.SsabsaId);
				this.entityData.SsabsaId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StudentMasterIndexColumn.SsabsaId, this.entityData.SsabsaId);
				OnPropertyChanged("SsabsaId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Surname property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String Surname
		{
			get
			{
				return this.entityData.Surname; 
			}
			
			set
			{
				if (this.entityData.Surname == value)
					return;
					
				OnColumnChanging(StudentMasterIndexColumn.Surname, this.entityData.Surname);
				this.entityData.Surname = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StudentMasterIndexColumn.Surname, this.entityData.Surname);
				OnPropertyChanged("Surname");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FirstName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 25)]
		public virtual System.String FirstName
		{
			get
			{
				return this.entityData.FirstName; 
			}
			
			set
			{
				if (this.entityData.FirstName == value)
					return;
					
				OnColumnChanging(StudentMasterIndexColumn.FirstName, this.entityData.FirstName);
				this.entityData.FirstName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StudentMasterIndexColumn.FirstName, this.entityData.FirstName);
				OnPropertyChanged("FirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OtherNames property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String OtherNames
		{
			get
			{
				return this.entityData.OtherNames; 
			}
			
			set
			{
				if (this.entityData.OtherNames == value)
					return;
					
				OnColumnChanging(StudentMasterIndexColumn.OtherNames, this.entityData.OtherNames);
				this.entityData.OtherNames = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StudentMasterIndexColumn.OtherNames, this.entityData.OtherNames);
				OnPropertyChanged("OtherNames");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the KnownName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 25)]
		public virtual System.String KnownName
		{
			get
			{
				return this.entityData.KnownName; 
			}
			
			set
			{
				if (this.entityData.KnownName == value)
					return;
					
				OnColumnChanging(StudentMasterIndexColumn.KnownName, this.entityData.KnownName);
				this.entityData.KnownName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StudentMasterIndexColumn.KnownName, this.entityData.KnownName);
				OnPropertyChanged("KnownName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LegalName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String LegalName
		{
			get
			{
				return this.entityData.LegalName; 
			}
			
			set
			{
				if (this.entityData.LegalName == value)
					return;
					
				OnColumnChanging(StudentMasterIndexColumn.LegalName, this.entityData.LegalName);
				this.entityData.LegalName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StudentMasterIndexColumn.LegalName, this.entityData.LegalName);
				OnPropertyChanged("LegalName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Dob property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsDobNull() and perform business logic appropriately.
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? Dob
		{
			get
			{
				return this.entityData.Dob; 
			}
			
			set
			{
				if (this.entityData.Dob == value)
					return;
					
				OnColumnChanging(StudentMasterIndexColumn.Dob, this.entityData.Dob);
				this.entityData.Dob = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StudentMasterIndexColumn.Dob, this.entityData.Dob);
				OnPropertyChanged("Dob");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Gender property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 6)]
		public virtual System.String Gender
		{
			get
			{
				return this.entityData.Gender; 
			}
			
			set
			{
				if (this.entityData.Gender == value)
					return;
					
				OnColumnChanging(StudentMasterIndexColumn.Gender, this.entityData.Gender);
				this.entityData.Gender = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StudentMasterIndexColumn.Gender, this.entityData.Gender);
				OnPropertyChanged("Gender");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IndigeneousStatus property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 40)]
		public virtual System.String IndigeneousStatus
		{
			get
			{
				return this.entityData.IndigeneousStatus; 
			}
			
			set
			{
				if (this.entityData.IndigeneousStatus == value)
					return;
					
				OnColumnChanging(StudentMasterIndexColumn.IndigeneousStatus, this.entityData.IndigeneousStatus);
				this.entityData.IndigeneousStatus = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StudentMasterIndexColumn.IndigeneousStatus, this.entityData.IndigeneousStatus);
				OnPropertyChanged("IndigeneousStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Lbote property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 3)]
		public virtual System.String Lbote
		{
			get
			{
				return this.entityData.Lbote; 
			}
			
			set
			{
				if (this.entityData.Lbote == value)
					return;
					
				OnColumnChanging(StudentMasterIndexColumn.Lbote, this.entityData.Lbote);
				this.entityData.Lbote = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StudentMasterIndexColumn.Lbote, this.entityData.Lbote);
				OnPropertyChanged("Lbote");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EslPhase property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 25)]
		public virtual System.String EslPhase
		{
			get
			{
				return this.entityData.EslPhase; 
			}
			
			set
			{
				if (this.entityData.EslPhase == value)
					return;
					
				OnColumnChanging(StudentMasterIndexColumn.EslPhase, this.entityData.EslPhase);
				this.entityData.EslPhase = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StudentMasterIndexColumn.EslPhase, this.entityData.EslPhase);
				OnPropertyChanged("EslPhase");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TribalGroup property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String TribalGroup
		{
			get
			{
				return this.entityData.TribalGroup; 
			}
			
			set
			{
				if (this.entityData.TribalGroup == value)
					return;
					
				OnColumnChanging(StudentMasterIndexColumn.TribalGroup, this.entityData.TribalGroup);
				this.entityData.TribalGroup = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StudentMasterIndexColumn.TribalGroup, this.entityData.TribalGroup);
				OnPropertyChanged("TribalGroup");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SlpCreatedFlag property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 3)]
		public virtual System.String SlpCreatedFlag
		{
			get
			{
				return this.entityData.SlpCreatedFlag; 
			}
			
			set
			{
				if (this.entityData.SlpCreatedFlag == value)
					return;
					
				OnColumnChanging(StudentMasterIndexColumn.SlpCreatedFlag, this.entityData.SlpCreatedFlag);
				this.entityData.SlpCreatedFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StudentMasterIndexColumn.SlpCreatedFlag, this.entityData.SlpCreatedFlag);
				OnPropertyChanged("SlpCreatedFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AddressLine1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String AddressLine1
		{
			get
			{
				return this.entityData.AddressLine1; 
			}
			
			set
			{
				if (this.entityData.AddressLine1 == value)
					return;
					
				OnColumnChanging(StudentMasterIndexColumn.AddressLine1, this.entityData.AddressLine1);
				this.entityData.AddressLine1 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StudentMasterIndexColumn.AddressLine1, this.entityData.AddressLine1);
				OnPropertyChanged("AddressLine1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AddressLine2 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String AddressLine2
		{
			get
			{
				return this.entityData.AddressLine2; 
			}
			
			set
			{
				if (this.entityData.AddressLine2 == value)
					return;
					
				OnColumnChanging(StudentMasterIndexColumn.AddressLine2, this.entityData.AddressLine2);
				this.entityData.AddressLine2 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StudentMasterIndexColumn.AddressLine2, this.entityData.AddressLine2);
				OnPropertyChanged("AddressLine2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AddressLine3 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String AddressLine3
		{
			get
			{
				return this.entityData.AddressLine3; 
			}
			
			set
			{
				if (this.entityData.AddressLine3 == value)
					return;
					
				OnColumnChanging(StudentMasterIndexColumn.AddressLine3, this.entityData.AddressLine3);
				this.entityData.AddressLine3 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StudentMasterIndexColumn.AddressLine3, this.entityData.AddressLine3);
				OnPropertyChanged("AddressLine3");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AddressLine4 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String AddressLine4
		{
			get
			{
				return this.entityData.AddressLine4; 
			}
			
			set
			{
				if (this.entityData.AddressLine4 == value)
					return;
					
				OnColumnChanging(StudentMasterIndexColumn.AddressLine4, this.entityData.AddressLine4);
				this.entityData.AddressLine4 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StudentMasterIndexColumn.AddressLine4, this.entityData.AddressLine4);
				OnPropertyChanged("AddressLine4");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Suburb property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Suburb
		{
			get
			{
				return this.entityData.Suburb; 
			}
			
			set
			{
				if (this.entityData.Suburb == value)
					return;
					
				OnColumnChanging(StudentMasterIndexColumn.Suburb, this.entityData.Suburb);
				this.entityData.Suburb = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StudentMasterIndexColumn.Suburb, this.entityData.Suburb);
				OnPropertyChanged("Suburb");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Postcode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 4)]
		public virtual System.String Postcode
		{
			get
			{
				return this.entityData.Postcode; 
			}
			
			set
			{
				if (this.entityData.Postcode == value)
					return;
					
				OnColumnChanging(StudentMasterIndexColumn.Postcode, this.entityData.Postcode);
				this.entityData.Postcode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StudentMasterIndexColumn.Postcode, this.entityData.Postcode);
				OnPropertyChanged("Postcode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Phone1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String Phone1
		{
			get
			{
				return this.entityData.Phone1; 
			}
			
			set
			{
				if (this.entityData.Phone1 == value)
					return;
					
				OnColumnChanging(StudentMasterIndexColumn.Phone1, this.entityData.Phone1);
				this.entityData.Phone1 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StudentMasterIndexColumn.Phone1, this.entityData.Phone1);
				OnPropertyChanged("Phone1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Phone2 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String Phone2
		{
			get
			{
				return this.entityData.Phone2; 
			}
			
			set
			{
				if (this.entityData.Phone2 == value)
					return;
					
				OnColumnChanging(StudentMasterIndexColumn.Phone2, this.entityData.Phone2);
				this.entityData.Phone2 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StudentMasterIndexColumn.Phone2, this.entityData.Phone2);
				OnPropertyChanged("Phone2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SourceSystem property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 25)]
		public virtual System.String SourceSystem
		{
			get
			{
				return this.entityData.SourceSystem; 
			}
			
			set
			{
				if (this.entityData.SourceSystem == value)
					return;
					
				OnColumnChanging(StudentMasterIndexColumn.SourceSystem, this.entityData.SourceSystem);
				this.entityData.SourceSystem = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StudentMasterIndexColumn.SourceSystem, this.entityData.SourceSystem);
				OnPropertyChanged("SourceSystem");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PhoneticMatchId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPhoneticMatchIdNull() and perform business logic appropriately.
		/// </remarks>





		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PhoneticMatchId
		{
			get
			{
				return this.entityData.PhoneticMatchId; 
			}
			
			set
			{
				if (this.entityData.PhoneticMatchId == value)
					return;
					
				OnColumnChanging(StudentMasterIndexColumn.PhoneticMatchId, this.entityData.PhoneticMatchId);
				this.entityData.PhoneticMatchId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StudentMasterIndexColumn.PhoneticMatchId, this.entityData.PhoneticMatchId);
				OnPropertyChanged("PhoneticMatchId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EpassId", "Epass Id", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("StudentUpn", "Student Upn", 13));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SsabsaId", "Ssabsa Id", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Surname", "Surname", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FirstName", "First Name", 25));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("OtherNames", "Other Names", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("KnownName", "Known Name", 25));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LegalName", "Legal Name", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Gender", "Gender", 6));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("IndigeneousStatus", "Indigeneous Status", 40));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Lbote", "Lbote", 3));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EslPhase", "Esl Phase", 25));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TribalGroup", "Tribal Group", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SlpCreatedFlag", "Slp Created Flag", 3));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AddressLine1", "Address Line1", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AddressLine2", "Address Line2", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AddressLine3", "Address Line3", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AddressLine4", "Address Line4", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Suburb", "Suburb", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Postcode", "Postcode", 4));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Phone1", "Phone1", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Phone2", "Phone2", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SourceSystem", "Source System", 25));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "STUDENT_MASTER_INDEX"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"STUDENT_ID", "EPASS_ID", "STUDENT_UPN", "SSABSA_ID", "SURNAME", "FIRST_NAME", "OTHER_NAMES", "KNOWN_NAME", "LEGAL_NAME", "DOB", "GENDER", "INDIGENEOUS_STATUS", "LBOTE", "ESL_PHASE", "TRIBAL_GROUP", "SLP_CREATED_FLAG", "ADDRESS_LINE_1", "ADDRESS_LINE_2", "ADDRESS_LINE_3", "ADDRESS_LINE_4", "SUBURB", "POSTCODE", "PHONE1", "PHONE2", "SOURCE_SYSTEM", "PHONETIC_MATCH_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as StudentMasterIndexEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (StudentMasterIndex) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<StudentMasterIndex>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as StudentMasterIndex);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed StudentMasterIndex Entity 
		///</summary>
		protected virtual StudentMasterIndex Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			StudentMasterIndex copy = new StudentMasterIndex();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.StudentId = this.StudentId;
					copy.OriginalStudentId = this.OriginalStudentId;
				copy.EpassId = this.EpassId;
				copy.StudentUpn = this.StudentUpn;
				copy.SsabsaId = this.SsabsaId;
				copy.Surname = this.Surname;
				copy.FirstName = this.FirstName;
				copy.OtherNames = this.OtherNames;
				copy.KnownName = this.KnownName;
				copy.LegalName = this.LegalName;
				copy.Dob = this.Dob;
				copy.Gender = this.Gender;
				copy.IndigeneousStatus = this.IndigeneousStatus;
				copy.Lbote = this.Lbote;
				copy.EslPhase = this.EslPhase;
				copy.TribalGroup = this.TribalGroup;
				copy.SlpCreatedFlag = this.SlpCreatedFlag;
				copy.AddressLine1 = this.AddressLine1;
				copy.AddressLine2 = this.AddressLine2;
				copy.AddressLine3 = this.AddressLine3;
				copy.AddressLine4 = this.AddressLine4;
				copy.Suburb = this.Suburb;
				copy.Postcode = this.Postcode;
				copy.Phone1 = this.Phone1;
				copy.Phone2 = this.Phone2;
				copy.SourceSystem = this.SourceSystem;
				copy.PhoneticMatchId = this.PhoneticMatchId;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed StudentMasterIndex Entity 
		///</summary>
		public virtual StudentMasterIndex Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed StudentMasterIndex Entity which is a deep copy of the current entity.
		///</summary>
		public virtual StudentMasterIndex DeepCopy()
		{
			return EntityHelper.Clone<StudentMasterIndex>(this as StudentMasterIndex);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as StudentMasterIndexEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new StudentMasterIndexEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as StudentMasterIndexEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(StudentMasterIndexColumn column)
		{
			switch(column)
			{
					case StudentMasterIndexColumn.StudentId:
					return entityData.StudentId != _originalData.StudentId;
					case StudentMasterIndexColumn.EpassId:
					return entityData.EpassId != _originalData.EpassId;
					case StudentMasterIndexColumn.StudentUpn:
					return entityData.StudentUpn != _originalData.StudentUpn;
					case StudentMasterIndexColumn.SsabsaId:
					return entityData.SsabsaId != _originalData.SsabsaId;
					case StudentMasterIndexColumn.Surname:
					return entityData.Surname != _originalData.Surname;
					case StudentMasterIndexColumn.FirstName:
					return entityData.FirstName != _originalData.FirstName;
					case StudentMasterIndexColumn.OtherNames:
					return entityData.OtherNames != _originalData.OtherNames;
					case StudentMasterIndexColumn.KnownName:
					return entityData.KnownName != _originalData.KnownName;
					case StudentMasterIndexColumn.LegalName:
					return entityData.LegalName != _originalData.LegalName;
					case StudentMasterIndexColumn.Dob:
					return entityData.Dob != _originalData.Dob;
					case StudentMasterIndexColumn.Gender:
					return entityData.Gender != _originalData.Gender;
					case StudentMasterIndexColumn.IndigeneousStatus:
					return entityData.IndigeneousStatus != _originalData.IndigeneousStatus;
					case StudentMasterIndexColumn.Lbote:
					return entityData.Lbote != _originalData.Lbote;
					case StudentMasterIndexColumn.EslPhase:
					return entityData.EslPhase != _originalData.EslPhase;
					case StudentMasterIndexColumn.TribalGroup:
					return entityData.TribalGroup != _originalData.TribalGroup;
					case StudentMasterIndexColumn.SlpCreatedFlag:
					return entityData.SlpCreatedFlag != _originalData.SlpCreatedFlag;
					case StudentMasterIndexColumn.AddressLine1:
					return entityData.AddressLine1 != _originalData.AddressLine1;
					case StudentMasterIndexColumn.AddressLine2:
					return entityData.AddressLine2 != _originalData.AddressLine2;
					case StudentMasterIndexColumn.AddressLine3:
					return entityData.AddressLine3 != _originalData.AddressLine3;
					case StudentMasterIndexColumn.AddressLine4:
					return entityData.AddressLine4 != _originalData.AddressLine4;
					case StudentMasterIndexColumn.Suburb:
					return entityData.Suburb != _originalData.Suburb;
					case StudentMasterIndexColumn.Postcode:
					return entityData.Postcode != _originalData.Postcode;
					case StudentMasterIndexColumn.Phone1:
					return entityData.Phone1 != _originalData.Phone1;
					case StudentMasterIndexColumn.Phone2:
					return entityData.Phone2 != _originalData.Phone2;
					case StudentMasterIndexColumn.SourceSystem:
					return entityData.SourceSystem != _originalData.SourceSystem;
					case StudentMasterIndexColumn.PhoneticMatchId:
					return entityData.PhoneticMatchId != _originalData.PhoneticMatchId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< StudentMasterIndexColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.StudentId != _originalData.StudentId;
			result = result || entityData.EpassId != _originalData.EpassId;
			result = result || entityData.StudentUpn != _originalData.StudentUpn;
			result = result || entityData.SsabsaId != _originalData.SsabsaId;
			result = result || entityData.Surname != _originalData.Surname;
			result = result || entityData.FirstName != _originalData.FirstName;
			result = result || entityData.OtherNames != _originalData.OtherNames;
			result = result || entityData.KnownName != _originalData.KnownName;
			result = result || entityData.LegalName != _originalData.LegalName;
			result = result || entityData.Dob != _originalData.Dob;
			result = result || entityData.Gender != _originalData.Gender;
			result = result || entityData.IndigeneousStatus != _originalData.IndigeneousStatus;
			result = result || entityData.Lbote != _originalData.Lbote;
			result = result || entityData.EslPhase != _originalData.EslPhase;
			result = result || entityData.TribalGroup != _originalData.TribalGroup;
			result = result || entityData.SlpCreatedFlag != _originalData.SlpCreatedFlag;
			result = result || entityData.AddressLine1 != _originalData.AddressLine1;
			result = result || entityData.AddressLine2 != _originalData.AddressLine2;
			result = result || entityData.AddressLine3 != _originalData.AddressLine3;
			result = result || entityData.AddressLine4 != _originalData.AddressLine4;
			result = result || entityData.Suburb != _originalData.Suburb;
			result = result || entityData.Postcode != _originalData.Postcode;
			result = result || entityData.Phone1 != _originalData.Phone1;
			result = result || entityData.Phone2 != _originalData.Phone2;
			result = result || entityData.SourceSystem != _originalData.SourceSystem;
			result = result || entityData.PhoneticMatchId != _originalData.PhoneticMatchId;
			return result;
		}	
		
		///<summary>
		///  Returns a StudentMasterIndex Entity with the original data.
		///</summary>
		public StudentMasterIndex GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateStudentMasterIndex(
				_originalData.StudentId,
				_originalData.EpassId,
				_originalData.StudentUpn,
				_originalData.SsabsaId,
				_originalData.Surname,
				_originalData.FirstName,
				_originalData.OtherNames,
				_originalData.KnownName,
				_originalData.LegalName,
				_originalData.Dob,
				_originalData.Gender,
				_originalData.IndigeneousStatus,
				_originalData.Lbote,
				_originalData.EslPhase,
				_originalData.TribalGroup,
				_originalData.SlpCreatedFlag,
				_originalData.AddressLine1,
				_originalData.AddressLine2,
				_originalData.AddressLine3,
				_originalData.AddressLine4,
				_originalData.Suburb,
				_originalData.Postcode,
				_originalData.Phone1,
				_originalData.Phone2,
				_originalData.SourceSystem,
				_originalData.PhoneticMatchId
				);
				
			return (StudentMasterIndex)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="StudentMasterIndexBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is StudentMasterIndexBase)
				return ValueEquals(this, (StudentMasterIndexBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="StudentMasterIndexBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.StudentId.GetHashCode() ^ 
					((this.EpassId == null) ? string.Empty : this.EpassId.ToString()).GetHashCode() ^ 
					((this.StudentUpn == null) ? string.Empty : this.StudentUpn.ToString()).GetHashCode() ^ 
					((this.SsabsaId == null) ? string.Empty : this.SsabsaId.ToString()).GetHashCode() ^ 
					((this.Surname == null) ? string.Empty : this.Surname.ToString()).GetHashCode() ^ 
					((this.FirstName == null) ? string.Empty : this.FirstName.ToString()).GetHashCode() ^ 
					((this.OtherNames == null) ? string.Empty : this.OtherNames.ToString()).GetHashCode() ^ 
					((this.KnownName == null) ? string.Empty : this.KnownName.ToString()).GetHashCode() ^ 
					((this.LegalName == null) ? string.Empty : this.LegalName.ToString()).GetHashCode() ^ 
					((this.Dob == null) ? string.Empty : this.Dob.ToString()).GetHashCode() ^ 
					((this.Gender == null) ? string.Empty : this.Gender.ToString()).GetHashCode() ^ 
					((this.IndigeneousStatus == null) ? string.Empty : this.IndigeneousStatus.ToString()).GetHashCode() ^ 
					((this.Lbote == null) ? string.Empty : this.Lbote.ToString()).GetHashCode() ^ 
					((this.EslPhase == null) ? string.Empty : this.EslPhase.ToString()).GetHashCode() ^ 
					((this.TribalGroup == null) ? string.Empty : this.TribalGroup.ToString()).GetHashCode() ^ 
					((this.SlpCreatedFlag == null) ? string.Empty : this.SlpCreatedFlag.ToString()).GetHashCode() ^ 
					((this.AddressLine1 == null) ? string.Empty : this.AddressLine1.ToString()).GetHashCode() ^ 
					((this.AddressLine2 == null) ? string.Empty : this.AddressLine2.ToString()).GetHashCode() ^ 
					((this.AddressLine3 == null) ? string.Empty : this.AddressLine3.ToString()).GetHashCode() ^ 
					((this.AddressLine4 == null) ? string.Empty : this.AddressLine4.ToString()).GetHashCode() ^ 
					((this.Suburb == null) ? string.Empty : this.Suburb.ToString()).GetHashCode() ^ 
					((this.Postcode == null) ? string.Empty : this.Postcode.ToString()).GetHashCode() ^ 
					((this.Phone1 == null) ? string.Empty : this.Phone1.ToString()).GetHashCode() ^ 
					((this.Phone2 == null) ? string.Empty : this.Phone2.ToString()).GetHashCode() ^ 
					((this.SourceSystem == null) ? string.Empty : this.SourceSystem.ToString()).GetHashCode() ^ 
					((this.PhoneticMatchId == null) ? string.Empty : this.PhoneticMatchId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="StudentMasterIndexBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(StudentMasterIndexBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="StudentMasterIndexBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="StudentMasterIndexBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="StudentMasterIndexBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(StudentMasterIndexBase Object1, StudentMasterIndexBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.StudentId != Object2.StudentId)
				equal = false;
			if ( Object1.EpassId != null && Object2.EpassId != null )
			{
				if (Object1.EpassId != Object2.EpassId)
					equal = false;
			}
			else if (Object1.EpassId == null ^ Object2.EpassId == null )
			{
				equal = false;
			}
			if ( Object1.StudentUpn != null && Object2.StudentUpn != null )
			{
				if (Object1.StudentUpn != Object2.StudentUpn)
					equal = false;
			}
			else if (Object1.StudentUpn == null ^ Object2.StudentUpn == null )
			{
				equal = false;
			}
			if ( Object1.SsabsaId != null && Object2.SsabsaId != null )
			{
				if (Object1.SsabsaId != Object2.SsabsaId)
					equal = false;
			}
			else if (Object1.SsabsaId == null ^ Object2.SsabsaId == null )
			{
				equal = false;
			}
			if ( Object1.Surname != null && Object2.Surname != null )
			{
				if (Object1.Surname != Object2.Surname)
					equal = false;
			}
			else if (Object1.Surname == null ^ Object2.Surname == null )
			{
				equal = false;
			}
			if ( Object1.FirstName != null && Object2.FirstName != null )
			{
				if (Object1.FirstName != Object2.FirstName)
					equal = false;
			}
			else if (Object1.FirstName == null ^ Object2.FirstName == null )
			{
				equal = false;
			}
			if ( Object1.OtherNames != null && Object2.OtherNames != null )
			{
				if (Object1.OtherNames != Object2.OtherNames)
					equal = false;
			}
			else if (Object1.OtherNames == null ^ Object2.OtherNames == null )
			{
				equal = false;
			}
			if ( Object1.KnownName != null && Object2.KnownName != null )
			{
				if (Object1.KnownName != Object2.KnownName)
					equal = false;
			}
			else if (Object1.KnownName == null ^ Object2.KnownName == null )
			{
				equal = false;
			}
			if ( Object1.LegalName != null && Object2.LegalName != null )
			{
				if (Object1.LegalName != Object2.LegalName)
					equal = false;
			}
			else if (Object1.LegalName == null ^ Object2.LegalName == null )
			{
				equal = false;
			}
			if ( Object1.Dob != null && Object2.Dob != null )
			{
				if (Object1.Dob != Object2.Dob)
					equal = false;
			}
			else if (Object1.Dob == null ^ Object2.Dob == null )
			{
				equal = false;
			}
			if ( Object1.Gender != null && Object2.Gender != null )
			{
				if (Object1.Gender != Object2.Gender)
					equal = false;
			}
			else if (Object1.Gender == null ^ Object2.Gender == null )
			{
				equal = false;
			}
			if ( Object1.IndigeneousStatus != null && Object2.IndigeneousStatus != null )
			{
				if (Object1.IndigeneousStatus != Object2.IndigeneousStatus)
					equal = false;
			}
			else if (Object1.IndigeneousStatus == null ^ Object2.IndigeneousStatus == null )
			{
				equal = false;
			}
			if ( Object1.Lbote != null && Object2.Lbote != null )
			{
				if (Object1.Lbote != Object2.Lbote)
					equal = false;
			}
			else if (Object1.Lbote == null ^ Object2.Lbote == null )
			{
				equal = false;
			}
			if ( Object1.EslPhase != null && Object2.EslPhase != null )
			{
				if (Object1.EslPhase != Object2.EslPhase)
					equal = false;
			}
			else if (Object1.EslPhase == null ^ Object2.EslPhase == null )
			{
				equal = false;
			}
			if ( Object1.TribalGroup != null && Object2.TribalGroup != null )
			{
				if (Object1.TribalGroup != Object2.TribalGroup)
					equal = false;
			}
			else if (Object1.TribalGroup == null ^ Object2.TribalGroup == null )
			{
				equal = false;
			}
			if ( Object1.SlpCreatedFlag != null && Object2.SlpCreatedFlag != null )
			{
				if (Object1.SlpCreatedFlag != Object2.SlpCreatedFlag)
					equal = false;
			}
			else if (Object1.SlpCreatedFlag == null ^ Object2.SlpCreatedFlag == null )
			{
				equal = false;
			}
			if ( Object1.AddressLine1 != null && Object2.AddressLine1 != null )
			{
				if (Object1.AddressLine1 != Object2.AddressLine1)
					equal = false;
			}
			else if (Object1.AddressLine1 == null ^ Object2.AddressLine1 == null )
			{
				equal = false;
			}
			if ( Object1.AddressLine2 != null && Object2.AddressLine2 != null )
			{
				if (Object1.AddressLine2 != Object2.AddressLine2)
					equal = false;
			}
			else if (Object1.AddressLine2 == null ^ Object2.AddressLine2 == null )
			{
				equal = false;
			}
			if ( Object1.AddressLine3 != null && Object2.AddressLine3 != null )
			{
				if (Object1.AddressLine3 != Object2.AddressLine3)
					equal = false;
			}
			else if (Object1.AddressLine3 == null ^ Object2.AddressLine3 == null )
			{
				equal = false;
			}
			if ( Object1.AddressLine4 != null && Object2.AddressLine4 != null )
			{
				if (Object1.AddressLine4 != Object2.AddressLine4)
					equal = false;
			}
			else if (Object1.AddressLine4 == null ^ Object2.AddressLine4 == null )
			{
				equal = false;
			}
			if ( Object1.Suburb != null && Object2.Suburb != null )
			{
				if (Object1.Suburb != Object2.Suburb)
					equal = false;
			}
			else if (Object1.Suburb == null ^ Object2.Suburb == null )
			{
				equal = false;
			}
			if ( Object1.Postcode != null && Object2.Postcode != null )
			{
				if (Object1.Postcode != Object2.Postcode)
					equal = false;
			}
			else if (Object1.Postcode == null ^ Object2.Postcode == null )
			{
				equal = false;
			}
			if ( Object1.Phone1 != null && Object2.Phone1 != null )
			{
				if (Object1.Phone1 != Object2.Phone1)
					equal = false;
			}
			else if (Object1.Phone1 == null ^ Object2.Phone1 == null )
			{
				equal = false;
			}
			if ( Object1.Phone2 != null && Object2.Phone2 != null )
			{
				if (Object1.Phone2 != Object2.Phone2)
					equal = false;
			}
			else if (Object1.Phone2 == null ^ Object2.Phone2 == null )
			{
				equal = false;
			}
			if ( Object1.SourceSystem != null && Object2.SourceSystem != null )
			{
				if (Object1.SourceSystem != Object2.SourceSystem)
					equal = false;
			}
			else if (Object1.SourceSystem == null ^ Object2.SourceSystem == null )
			{
				equal = false;
			}
			if ( Object1.PhoneticMatchId != null && Object2.PhoneticMatchId != null )
			{
				if (Object1.PhoneticMatchId != Object2.PhoneticMatchId)
					equal = false;
			}
			else if (Object1.PhoneticMatchId == null ^ Object2.PhoneticMatchId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((StudentMasterIndexBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static StudentMasterIndexComparer GetComparer()
        {
            return new StudentMasterIndexComparer();
        }
        */

        // Comparer delegates back to StudentMasterIndex
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(StudentMasterIndex rhs, StudentMasterIndexColumn which)
        {
            switch (which)
            {
            	
            	
            	case StudentMasterIndexColumn.StudentId:
            		return this.StudentId.CompareTo(rhs.StudentId);
            		
            		                 
            	
            	
            	case StudentMasterIndexColumn.EpassId:
            		return this.EpassId.CompareTo(rhs.EpassId);
            		
            		                 
            	
            	
            	case StudentMasterIndexColumn.StudentUpn:
            		return this.StudentUpn.CompareTo(rhs.StudentUpn);
            		
            		                 
            	
            	
            	case StudentMasterIndexColumn.SsabsaId:
            		return this.SsabsaId.CompareTo(rhs.SsabsaId);
            		
            		                 
            	
            	
            	case StudentMasterIndexColumn.Surname:
            		return this.Surname.CompareTo(rhs.Surname);
            		
            		                 
            	
            	
            	case StudentMasterIndexColumn.FirstName:
            		return this.FirstName.CompareTo(rhs.FirstName);
            		
            		                 
            	
            	
            	case StudentMasterIndexColumn.OtherNames:
            		return this.OtherNames.CompareTo(rhs.OtherNames);
            		
            		                 
            	
            	
            	case StudentMasterIndexColumn.KnownName:
            		return this.KnownName.CompareTo(rhs.KnownName);
            		
            		                 
            	
            	
            	case StudentMasterIndexColumn.LegalName:
            		return this.LegalName.CompareTo(rhs.LegalName);
            		
            		                 
            	
            	
            	case StudentMasterIndexColumn.Dob:
            		return this.Dob.Value.CompareTo(rhs.Dob.Value);
            		
            		                 
            	
            	
            	case StudentMasterIndexColumn.Gender:
            		return this.Gender.CompareTo(rhs.Gender);
            		
            		                 
            	
            	
            	case StudentMasterIndexColumn.IndigeneousStatus:
            		return this.IndigeneousStatus.CompareTo(rhs.IndigeneousStatus);
            		
            		                 
            	
            	
            	case StudentMasterIndexColumn.Lbote:
            		return this.Lbote.CompareTo(rhs.Lbote);
            		
            		                 
            	
            	
            	case StudentMasterIndexColumn.EslPhase:
            		return this.EslPhase.CompareTo(rhs.EslPhase);
            		
            		                 
            	
            	
            	case StudentMasterIndexColumn.TribalGroup:
            		return this.TribalGroup.CompareTo(rhs.TribalGroup);
            		
            		                 
            	
            	
            	case StudentMasterIndexColumn.SlpCreatedFlag:
            		return this.SlpCreatedFlag.CompareTo(rhs.SlpCreatedFlag);
            		
            		                 
            	
            	
            	case StudentMasterIndexColumn.AddressLine1:
            		return this.AddressLine1.CompareTo(rhs.AddressLine1);
            		
            		                 
            	
            	
            	case StudentMasterIndexColumn.AddressLine2:
            		return this.AddressLine2.CompareTo(rhs.AddressLine2);
            		
            		                 
            	
            	
            	case StudentMasterIndexColumn.AddressLine3:
            		return this.AddressLine3.CompareTo(rhs.AddressLine3);
            		
            		                 
            	
            	
            	case StudentMasterIndexColumn.AddressLine4:
            		return this.AddressLine4.CompareTo(rhs.AddressLine4);
            		
            		                 
            	
            	
            	case StudentMasterIndexColumn.Suburb:
            		return this.Suburb.CompareTo(rhs.Suburb);
            		
            		                 
            	
            	
            	case StudentMasterIndexColumn.Postcode:
            		return this.Postcode.CompareTo(rhs.Postcode);
            		
            		                 
            	
            	
            	case StudentMasterIndexColumn.Phone1:
            		return this.Phone1.CompareTo(rhs.Phone1);
            		
            		                 
            	
            	
            	case StudentMasterIndexColumn.Phone2:
            		return this.Phone2.CompareTo(rhs.Phone2);
            		
            		                 
            	
            	
            	case StudentMasterIndexColumn.SourceSystem:
            		return this.SourceSystem.CompareTo(rhs.SourceSystem);
            		
            		                 
            	
            	
            	case StudentMasterIndexColumn.PhoneticMatchId:
            		return this.PhoneticMatchId.Value.CompareTo(rhs.PhoneticMatchId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<StudentMasterIndexKey> Members
		
		// member variable for the EntityId property
		private StudentMasterIndexKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual StudentMasterIndexKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new StudentMasterIndexKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("StudentMasterIndex")
					.Append("|").Append( this.StudentId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{27}{26}- StudentId: {0}{26}- EpassId: {1}{26}- StudentUpn: {2}{26}- SsabsaId: {3}{26}- Surname: {4}{26}- FirstName: {5}{26}- OtherNames: {6}{26}- KnownName: {7}{26}- LegalName: {8}{26}- Dob: {9}{26}- Gender: {10}{26}- IndigeneousStatus: {11}{26}- Lbote: {12}{26}- EslPhase: {13}{26}- TribalGroup: {14}{26}- SlpCreatedFlag: {15}{26}- AddressLine1: {16}{26}- AddressLine2: {17}{26}- AddressLine3: {18}{26}- AddressLine4: {19}{26}- Suburb: {20}{26}- Postcode: {21}{26}- Phone1: {22}{26}- Phone2: {23}{26}- SourceSystem: {24}{26}- PhoneticMatchId: {25}{26}{28}", 
				this.StudentId,
				(this.EpassId == null) ? string.Empty : this.EpassId.ToString(),
				(this.StudentUpn == null) ? string.Empty : this.StudentUpn.ToString(),
				(this.SsabsaId == null) ? string.Empty : this.SsabsaId.ToString(),
				(this.Surname == null) ? string.Empty : this.Surname.ToString(),
				(this.FirstName == null) ? string.Empty : this.FirstName.ToString(),
				(this.OtherNames == null) ? string.Empty : this.OtherNames.ToString(),
				(this.KnownName == null) ? string.Empty : this.KnownName.ToString(),
				(this.LegalName == null) ? string.Empty : this.LegalName.ToString(),
				(this.Dob == null) ? string.Empty : this.Dob.ToString(),
				(this.Gender == null) ? string.Empty : this.Gender.ToString(),
				(this.IndigeneousStatus == null) ? string.Empty : this.IndigeneousStatus.ToString(),
				(this.Lbote == null) ? string.Empty : this.Lbote.ToString(),
				(this.EslPhase == null) ? string.Empty : this.EslPhase.ToString(),
				(this.TribalGroup == null) ? string.Empty : this.TribalGroup.ToString(),
				(this.SlpCreatedFlag == null) ? string.Empty : this.SlpCreatedFlag.ToString(),
				(this.AddressLine1 == null) ? string.Empty : this.AddressLine1.ToString(),
				(this.AddressLine2 == null) ? string.Empty : this.AddressLine2.ToString(),
				(this.AddressLine3 == null) ? string.Empty : this.AddressLine3.ToString(),
				(this.AddressLine4 == null) ? string.Empty : this.AddressLine4.ToString(),
				(this.Suburb == null) ? string.Empty : this.Suburb.ToString(),
				(this.Postcode == null) ? string.Empty : this.Postcode.ToString(),
				(this.Phone1 == null) ? string.Empty : this.Phone1.ToString(),
				(this.Phone2 == null) ? string.Empty : this.Phone2.ToString(),
				(this.SourceSystem == null) ? string.Empty : this.SourceSystem.ToString(),
				(this.PhoneticMatchId == null) ? string.Empty : this.PhoneticMatchId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'STUDENT_MASTER_INDEX' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class StudentMasterIndexEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// STUDENT_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "STUDENT_MASTER_INDEX"</remarks>
		public System.Int32 StudentId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Int32 OriginalStudentId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// EPASS_ID : 
		/// </summary>
		public System.String		  EpassId = null;
		
		/// <summary>
		/// STUDENT_UPN : 
		/// </summary>
		public System.String		  StudentUpn = null;
		
		/// <summary>
		/// SSABSA_ID : 
		/// </summary>
		public System.String		  SsabsaId = null;
		
		/// <summary>
		/// SURNAME : 
		/// </summary>
		public System.String		  Surname = null;
		
		/// <summary>
		/// FIRST_NAME : 
		/// </summary>
		public System.String		  FirstName = null;
		
		/// <summary>
		/// OTHER_NAMES : 
		/// </summary>
		public System.String		  OtherNames = null;
		
		/// <summary>
		/// KNOWN_NAME : 
		/// </summary>
		public System.String		  KnownName = null;
		
		/// <summary>
		/// LEGAL_NAME : 
		/// </summary>
		public System.String		  LegalName = null;
		
		/// <summary>
		/// DOB : 
		/// </summary>
		public System.DateTime?		  Dob = null;
		
		/// <summary>
		/// GENDER : 
		/// </summary>
		public System.String		  Gender = null;
		
		/// <summary>
		/// INDIGENEOUS_STATUS : 
		/// </summary>
		public System.String		  IndigeneousStatus = null;
		
		/// <summary>
		/// LBOTE : 
		/// </summary>
		public System.String		  Lbote = null;
		
		/// <summary>
		/// ESL_PHASE : 
		/// </summary>
		public System.String		  EslPhase = null;
		
		/// <summary>
		/// TRIBAL_GROUP : 
		/// </summary>
		public System.String		  TribalGroup = null;
		
		/// <summary>
		/// SLP_CREATED_FLAG : 
		/// </summary>
		public System.String		  SlpCreatedFlag = null;
		
		/// <summary>
		/// ADDRESS_LINE_1 : 
		/// </summary>
		public System.String		  AddressLine1 = null;
		
		/// <summary>
		/// ADDRESS_LINE_2 : 
		/// </summary>
		public System.String		  AddressLine2 = null;
		
		/// <summary>
		/// ADDRESS_LINE_3 : 
		/// </summary>
		public System.String		  AddressLine3 = null;
		
		/// <summary>
		/// ADDRESS_LINE_4 : 
		/// </summary>
		public System.String		  AddressLine4 = null;
		
		/// <summary>
		/// SUBURB : 
		/// </summary>
		public System.String		  Suburb = null;
		
		/// <summary>
		/// POSTCODE : 
		/// </summary>
		public System.String		  Postcode = null;
		
		/// <summary>
		/// PHONE1 : 
		/// </summary>
		public System.String		  Phone1 = null;
		
		/// <summary>
		/// PHONE2 : 
		/// </summary>
		public System.String		  Phone2 = null;
		
		/// <summary>
		/// SOURCE_SYSTEM : 
		/// </summary>
		public System.String		  SourceSystem = null;
		
		/// <summary>
		/// PHONETIC_MATCH_ID : 
		/// </summary>
		public System.Int32?		  PhoneticMatchId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			StudentMasterIndexEntityData _tmp = new StudentMasterIndexEntityData();
						
			_tmp.StudentId = this.StudentId;
			_tmp.OriginalStudentId = this.OriginalStudentId;
			
			_tmp.EpassId = this.EpassId;
			_tmp.StudentUpn = this.StudentUpn;
			_tmp.SsabsaId = this.SsabsaId;
			_tmp.Surname = this.Surname;
			_tmp.FirstName = this.FirstName;
			_tmp.OtherNames = this.OtherNames;
			_tmp.KnownName = this.KnownName;
			_tmp.LegalName = this.LegalName;
			_tmp.Dob = this.Dob;
			_tmp.Gender = this.Gender;
			_tmp.IndigeneousStatus = this.IndigeneousStatus;
			_tmp.Lbote = this.Lbote;
			_tmp.EslPhase = this.EslPhase;
			_tmp.TribalGroup = this.TribalGroup;
			_tmp.SlpCreatedFlag = this.SlpCreatedFlag;
			_tmp.AddressLine1 = this.AddressLine1;
			_tmp.AddressLine2 = this.AddressLine2;
			_tmp.AddressLine3 = this.AddressLine3;
			_tmp.AddressLine4 = this.AddressLine4;
			_tmp.Suburb = this.Suburb;
			_tmp.Postcode = this.Postcode;
			_tmp.Phone1 = this.Phone1;
			_tmp.Phone2 = this.Phone2;
			_tmp.SourceSystem = this.SourceSystem;
			_tmp.PhoneticMatchId = this.PhoneticMatchId;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			StudentMasterIndexEntityData _tmp = new StudentMasterIndexEntityData();
						
			_tmp.StudentId = this.StudentId;
			_tmp.OriginalStudentId = this.OriginalStudentId;
			
			_tmp.EpassId = this.EpassId;
			_tmp.StudentUpn = this.StudentUpn;
			_tmp.SsabsaId = this.SsabsaId;
			_tmp.Surname = this.Surname;
			_tmp.FirstName = this.FirstName;
			_tmp.OtherNames = this.OtherNames;
			_tmp.KnownName = this.KnownName;
			_tmp.LegalName = this.LegalName;
			_tmp.Dob = this.Dob;
			_tmp.Gender = this.Gender;
			_tmp.IndigeneousStatus = this.IndigeneousStatus;
			_tmp.Lbote = this.Lbote;
			_tmp.EslPhase = this.EslPhase;
			_tmp.TribalGroup = this.TribalGroup;
			_tmp.SlpCreatedFlag = this.SlpCreatedFlag;
			_tmp.AddressLine1 = this.AddressLine1;
			_tmp.AddressLine2 = this.AddressLine2;
			_tmp.AddressLine3 = this.AddressLine3;
			_tmp.AddressLine4 = this.AddressLine4;
			_tmp.Suburb = this.Suburb;
			_tmp.Postcode = this.Postcode;
			_tmp.Phone1 = this.Phone1;
			_tmp.Phone2 = this.Phone2;
			_tmp.SourceSystem = this.SourceSystem;
			_tmp.PhoneticMatchId = this.PhoneticMatchId;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="StudentMasterIndexColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(StudentMasterIndexColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="StudentMasterIndexColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(StudentMasterIndexColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="StudentMasterIndexColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(StudentMasterIndexColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				StudentMasterIndexEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new StudentMasterIndexEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="StudentMasterIndexColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(StudentMasterIndexColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				StudentMasterIndexEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new StudentMasterIndexEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region StudentMasterIndexEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="StudentMasterIndex"/> object.
	/// </remarks>
	public class StudentMasterIndexEventArgs : System.EventArgs
	{
		private StudentMasterIndexColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the StudentMasterIndexEventArgs class.
		///</summary>
		public StudentMasterIndexEventArgs(StudentMasterIndexColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the StudentMasterIndexEventArgs class.
		///</summary>
		public StudentMasterIndexEventArgs(StudentMasterIndexColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The StudentMasterIndexColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="StudentMasterIndexColumn" />
		public StudentMasterIndexColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all StudentMasterIndex related events.
	///</summary>
	public delegate void StudentMasterIndexEventHandler(object sender, StudentMasterIndexEventArgs e);
	
	#region StudentMasterIndexComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class StudentMasterIndexComparer : System.Collections.Generic.IComparer<StudentMasterIndex>
	{
		StudentMasterIndexColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:StudentMasterIndexComparer"/> class.
        /// </summary>
		public StudentMasterIndexComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:StudentMasterIndexComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public StudentMasterIndexComparer(StudentMasterIndexColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="StudentMasterIndex"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="StudentMasterIndex"/> to compare.</param>
        /// <param name="b">The second <c>StudentMasterIndex</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(StudentMasterIndex a, StudentMasterIndex b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(StudentMasterIndex entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(StudentMasterIndex a, StudentMasterIndex b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public StudentMasterIndexColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region StudentMasterIndexKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="StudentMasterIndex"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class StudentMasterIndexKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the StudentMasterIndexKey class.
		/// </summary>
		public StudentMasterIndexKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the StudentMasterIndexKey class.
		/// </summary>
		public StudentMasterIndexKey(StudentMasterIndexBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.StudentId = entity.StudentId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the StudentMasterIndexKey class.
		/// </summary>
		public StudentMasterIndexKey(System.Int32 _studentId)
		{
			#region Init Properties

			this.StudentId = _studentId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private StudentMasterIndexBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public StudentMasterIndexBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the StudentId property
		private System.Int32 _studentId;
		
		/// <summary>
		/// Gets or sets the StudentId property.
		/// </summary>
		public System.Int32 StudentId
		{
			get { return _studentId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.StudentId = value;
				
				_studentId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				StudentId = ( values["StudentId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["StudentId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("StudentId", StudentId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("StudentId: {0}{1}",
								StudentId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region StudentMasterIndexColumn Enum
	
	/// <summary>
	/// Enumerate the StudentMasterIndex columns.
	/// </summary>
	[Serializable]
	public enum StudentMasterIndexColumn : int
	{
		/// <summary>
		/// StudentId : 
		/// </summary>
		[EnumTextValue("STUDENT_ID")]
		[ColumnEnum("STUDENT_ID", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		StudentId = 1,
		/// <summary>
		/// EpassId : 
		/// </summary>
		[EnumTextValue("EPASS_ID")]
		[ColumnEnum("EPASS_ID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		EpassId = 2,
		/// <summary>
		/// StudentUpn : 
		/// </summary>
		[EnumTextValue("STUDENT_UPN")]
		[ColumnEnum("STUDENT_UPN", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 13)]
		StudentUpn = 3,
		/// <summary>
		/// SsabsaId : 
		/// </summary>
		[EnumTextValue("SSABSA_ID")]
		[ColumnEnum("SSABSA_ID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		SsabsaId = 4,
		/// <summary>
		/// Surname : 
		/// </summary>
		[EnumTextValue("SURNAME")]
		[ColumnEnum("SURNAME", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 30)]
		Surname = 5,
		/// <summary>
		/// FirstName : 
		/// </summary>
		[EnumTextValue("FIRST_NAME")]
		[ColumnEnum("FIRST_NAME", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 25)]
		FirstName = 6,
		/// <summary>
		/// OtherNames : 
		/// </summary>
		[EnumTextValue("OTHER_NAMES")]
		[ColumnEnum("OTHER_NAMES", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		OtherNames = 7,
		/// <summary>
		/// KnownName : 
		/// </summary>
		[EnumTextValue("KNOWN_NAME")]
		[ColumnEnum("KNOWN_NAME", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 25)]
		KnownName = 8,
		/// <summary>
		/// LegalName : 
		/// </summary>
		[EnumTextValue("LEGAL_NAME")]
		[ColumnEnum("LEGAL_NAME", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 30)]
		LegalName = 9,
		/// <summary>
		/// Dob : 
		/// </summary>
		[EnumTextValue("DOB")]
		[ColumnEnum("DOB", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		Dob = 10,
		/// <summary>
		/// Gender : 
		/// </summary>
		[EnumTextValue("GENDER")]
		[ColumnEnum("GENDER", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 6)]
		Gender = 11,
		/// <summary>
		/// IndigeneousStatus : 
		/// </summary>
		[EnumTextValue("INDIGENEOUS_STATUS")]
		[ColumnEnum("INDIGENEOUS_STATUS", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 40)]
		IndigeneousStatus = 12,
		/// <summary>
		/// Lbote : 
		/// </summary>
		[EnumTextValue("LBOTE")]
		[ColumnEnum("LBOTE", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 3)]
		Lbote = 13,
		/// <summary>
		/// EslPhase : 
		/// </summary>
		[EnumTextValue("ESL_PHASE")]
		[ColumnEnum("ESL_PHASE", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 25)]
		EslPhase = 14,
		/// <summary>
		/// TribalGroup : 
		/// </summary>
		[EnumTextValue("TRIBAL_GROUP")]
		[ColumnEnum("TRIBAL_GROUP", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		TribalGroup = 15,
		/// <summary>
		/// SlpCreatedFlag : 
		/// </summary>
		[EnumTextValue("SLP_CREATED_FLAG")]
		[ColumnEnum("SLP_CREATED_FLAG", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 3)]
		SlpCreatedFlag = 16,
		/// <summary>
		/// AddressLine1 : 
		/// </summary>
		[EnumTextValue("ADDRESS_LINE_1")]
		[ColumnEnum("ADDRESS_LINE_1", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		AddressLine1 = 17,
		/// <summary>
		/// AddressLine2 : 
		/// </summary>
		[EnumTextValue("ADDRESS_LINE_2")]
		[ColumnEnum("ADDRESS_LINE_2", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		AddressLine2 = 18,
		/// <summary>
		/// AddressLine3 : 
		/// </summary>
		[EnumTextValue("ADDRESS_LINE_3")]
		[ColumnEnum("ADDRESS_LINE_3", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		AddressLine3 = 19,
		/// <summary>
		/// AddressLine4 : 
		/// </summary>
		[EnumTextValue("ADDRESS_LINE_4")]
		[ColumnEnum("ADDRESS_LINE_4", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		AddressLine4 = 20,
		/// <summary>
		/// Suburb : 
		/// </summary>
		[EnumTextValue("SUBURB")]
		[ColumnEnum("SUBURB", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Suburb = 21,
		/// <summary>
		/// Postcode : 
		/// </summary>
		[EnumTextValue("POSTCODE")]
		[ColumnEnum("POSTCODE", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 4)]
		Postcode = 22,
		/// <summary>
		/// Phone1 : 
		/// </summary>
		[EnumTextValue("PHONE1")]
		[ColumnEnum("PHONE1", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		Phone1 = 23,
		/// <summary>
		/// Phone2 : 
		/// </summary>
		[EnumTextValue("PHONE2")]
		[ColumnEnum("PHONE2", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		Phone2 = 24,
		/// <summary>
		/// SourceSystem : 
		/// </summary>
		[EnumTextValue("SOURCE_SYSTEM")]
		[ColumnEnum("SOURCE_SYSTEM", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 25)]
		SourceSystem = 25,
		/// <summary>
		/// PhoneticMatchId : 
		/// </summary>
		[EnumTextValue("PHONETIC_MATCH_ID")]
		[ColumnEnum("PHONETIC_MATCH_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PhoneticMatchId = 26
	}//End enum

	#endregion StudentMasterIndexColumn Enum

} // end namespace
