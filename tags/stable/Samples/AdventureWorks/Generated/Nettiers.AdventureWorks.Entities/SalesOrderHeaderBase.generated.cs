
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SalesOrderHeader.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Nettiers.AdventureWorks.Entities.Validation;
#endregion

namespace Nettiers.AdventureWorks.Entities
{
	///<summary>
	/// General sales order information.	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SalesOrderHeaderBase : EntityBase, ISalesOrderHeader, IEntityId<SalesOrderHeaderKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SalesOrderHeaderEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SalesOrderHeaderEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SalesOrderHeaderEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SalesOrderHeader> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SalesOrderHeaderEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SalesOrderHeaderEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SalesOrderHeaderBase"/> instance.
		///</summary>
		public SalesOrderHeaderBase()
		{
			this.entityData = new SalesOrderHeaderEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SalesOrderHeaderBase"/> instance.
		///</summary>
		///<param name="_revisionNumber">Incremental number to track changes to the sales order over time.</param>
		///<param name="_orderDate">Dates the sales order was created.</param>
		///<param name="_dueDate">Date the order is due to the customer.</param>
		///<param name="_shipDate">Date the order was shipped to the customer.</param>
		///<param name="_status">Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled</param>
		///<param name="_onlineOrderFlag">0 = Order placed by sales person. 1 = Order placed online by customer.</param>
		///<param name="_purchaseOrderNumber">Customer purchase order number reference. </param>
		///<param name="_accountNumber">Financial accounting number reference.</param>
		///<param name="_customerId">Customer identification number. Foreign key to Customer.CustomerID.</param>
		///<param name="_contactId">Customer contact identification number. Foreign key to Contact.ContactID.</param>
		///<param name="_salesPersonId">Sales person who created the sales order. Foreign key to SalesPerson.SalePersonID.</param>
		///<param name="_territoryId">Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.</param>
		///<param name="_billToAddressId">Customer billing address. Foreign key to Address.AddressID.</param>
		///<param name="_shipToAddressId">Customer shipping address. Foreign key to Address.AddressID.</param>
		///<param name="_shipMethodId">Shipping method. Foreign key to ShipMethod.ShipMethodID.</param>
		///<param name="_creditCardId">Credit card identification number. Foreign key to CreditCard.CreditCardID.</param>
		///<param name="_creditCardApprovalCode">Approval code provided by the credit card company.</param>
		///<param name="_currencyRateId">Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.</param>
		///<param name="_subTotal">Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.</param>
		///<param name="_taxAmt">Tax amount.</param>
		///<param name="_freight">Shipping cost.</param>
		///<param name="_comment">Sales representative comments.</param>
		///<param name="_modifiedDate">Date and time the record was last updated.</param>
		public SalesOrderHeaderBase(System.Byte _revisionNumber, System.DateTime _orderDate, 
			System.DateTime _dueDate, System.DateTime? _shipDate, System.Byte _status, 
			System.Boolean _onlineOrderFlag, System.String _purchaseOrderNumber, System.String _accountNumber, 
			System.Int32 _customerId, System.Int32 _contactId, System.Int32? _salesPersonId, 
			System.Int32? _territoryId, System.Int32 _billToAddressId, System.Int32 _shipToAddressId, 
			System.Int32 _shipMethodId, System.Int32? _creditCardId, System.String _creditCardApprovalCode, 
			System.Int32? _currencyRateId, System.Decimal _subTotal, System.Decimal _taxAmt, 
			System.Decimal _freight, System.String _comment, System.DateTime _modifiedDate)
		{
			this.entityData = new SalesOrderHeaderEntityData();
			this.backupData = null;

			this.RevisionNumber = _revisionNumber;
			this.OrderDate = _orderDate;
			this.DueDate = _dueDate;
			this.ShipDate = _shipDate;
			this.Status = _status;
			this.OnlineOrderFlag = _onlineOrderFlag;
			this.PurchaseOrderNumber = _purchaseOrderNumber;
			this.AccountNumber = _accountNumber;
			this.CustomerId = _customerId;
			this.ContactId = _contactId;
			this.SalesPersonId = _salesPersonId;
			this.TerritoryId = _territoryId;
			this.BillToAddressId = _billToAddressId;
			this.ShipToAddressId = _shipToAddressId;
			this.ShipMethodId = _shipMethodId;
			this.CreditCardId = _creditCardId;
			this.CreditCardApprovalCode = _creditCardApprovalCode;
			this.CurrencyRateId = _currencyRateId;
			this.SubTotal = _subTotal;
			this.TaxAmt = _taxAmt;
			this.Freight = _freight;
			this.Comment = _comment;
			this.ModifiedDate = _modifiedDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SalesOrderHeader"/> instance.
		///</summary>
		///<param name="_revisionNumber">Incremental number to track changes to the sales order over time.</param>
		///<param name="_orderDate">Dates the sales order was created.</param>
		///<param name="_dueDate">Date the order is due to the customer.</param>
		///<param name="_shipDate">Date the order was shipped to the customer.</param>
		///<param name="_status">Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled</param>
		///<param name="_onlineOrderFlag">0 = Order placed by sales person. 1 = Order placed online by customer.</param>
		///<param name="_purchaseOrderNumber">Customer purchase order number reference. </param>
		///<param name="_accountNumber">Financial accounting number reference.</param>
		///<param name="_customerId">Customer identification number. Foreign key to Customer.CustomerID.</param>
		///<param name="_contactId">Customer contact identification number. Foreign key to Contact.ContactID.</param>
		///<param name="_salesPersonId">Sales person who created the sales order. Foreign key to SalesPerson.SalePersonID.</param>
		///<param name="_territoryId">Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.</param>
		///<param name="_billToAddressId">Customer billing address. Foreign key to Address.AddressID.</param>
		///<param name="_shipToAddressId">Customer shipping address. Foreign key to Address.AddressID.</param>
		///<param name="_shipMethodId">Shipping method. Foreign key to ShipMethod.ShipMethodID.</param>
		///<param name="_creditCardId">Credit card identification number. Foreign key to CreditCard.CreditCardID.</param>
		///<param name="_creditCardApprovalCode">Approval code provided by the credit card company.</param>
		///<param name="_currencyRateId">Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.</param>
		///<param name="_subTotal">Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.</param>
		///<param name="_taxAmt">Tax amount.</param>
		///<param name="_freight">Shipping cost.</param>
		///<param name="_comment">Sales representative comments.</param>
		///<param name="_modifiedDate">Date and time the record was last updated.</param>
		public static SalesOrderHeader CreateSalesOrderHeader(System.Byte _revisionNumber, System.DateTime _orderDate, 
			System.DateTime _dueDate, System.DateTime? _shipDate, System.Byte _status, 
			System.Boolean _onlineOrderFlag, System.String _purchaseOrderNumber, System.String _accountNumber, 
			System.Int32 _customerId, System.Int32 _contactId, System.Int32? _salesPersonId, 
			System.Int32? _territoryId, System.Int32 _billToAddressId, System.Int32 _shipToAddressId, 
			System.Int32 _shipMethodId, System.Int32? _creditCardId, System.String _creditCardApprovalCode, 
			System.Int32? _currencyRateId, System.Decimal _subTotal, System.Decimal _taxAmt, 
			System.Decimal _freight, System.String _comment, System.DateTime _modifiedDate)
		{
			SalesOrderHeader newSalesOrderHeader = new SalesOrderHeader();
			newSalesOrderHeader.RevisionNumber = _revisionNumber;
			newSalesOrderHeader.OrderDate = _orderDate;
			newSalesOrderHeader.DueDate = _dueDate;
			newSalesOrderHeader.ShipDate = _shipDate;
			newSalesOrderHeader.Status = _status;
			newSalesOrderHeader.OnlineOrderFlag = _onlineOrderFlag;
			newSalesOrderHeader.PurchaseOrderNumber = _purchaseOrderNumber;
			newSalesOrderHeader.AccountNumber = _accountNumber;
			newSalesOrderHeader.CustomerId = _customerId;
			newSalesOrderHeader.ContactId = _contactId;
			newSalesOrderHeader.SalesPersonId = _salesPersonId;
			newSalesOrderHeader.TerritoryId = _territoryId;
			newSalesOrderHeader.BillToAddressId = _billToAddressId;
			newSalesOrderHeader.ShipToAddressId = _shipToAddressId;
			newSalesOrderHeader.ShipMethodId = _shipMethodId;
			newSalesOrderHeader.CreditCardId = _creditCardId;
			newSalesOrderHeader.CreditCardApprovalCode = _creditCardApprovalCode;
			newSalesOrderHeader.CurrencyRateId = _currencyRateId;
			newSalesOrderHeader.SubTotal = _subTotal;
			newSalesOrderHeader.TaxAmt = _taxAmt;
			newSalesOrderHeader.Freight = _freight;
			newSalesOrderHeader.Comment = _comment;
			newSalesOrderHeader.ModifiedDate = _modifiedDate;
			return newSalesOrderHeader;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SalesOrderId property. 
		///		Primary key.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@"Primary key."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 SalesOrderId
		{
			get
			{
				return this.entityData.SalesOrderId; 
			}
			
			set
			{
				if (this.entityData.SalesOrderId == value)
					return;
				
                OnPropertyChanging("SalesOrderId");                    
				OnColumnChanging(SalesOrderHeaderColumn.SalesOrderId, this.entityData.SalesOrderId);
				this.entityData.SalesOrderId = value;
				this.EntityId.SalesOrderId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.SalesOrderId, this.entityData.SalesOrderId);
				OnPropertyChanged("SalesOrderId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RevisionNumber property. 
		///		Incremental number to track changes to the sales order over time.
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Incremental number to track changes to the sales order over time."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Byte RevisionNumber
		{
			get
			{
				return this.entityData.RevisionNumber; 
			}
			
			set
			{
				if (this.entityData.RevisionNumber == value)
					return;
				
                OnPropertyChanging("RevisionNumber");                    
				OnColumnChanging(SalesOrderHeaderColumn.RevisionNumber, this.entityData.RevisionNumber);
				this.entityData.RevisionNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.RevisionNumber, this.entityData.RevisionNumber);
				OnPropertyChanged("RevisionNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrderDate property. 
		///		Dates the sales order was created.
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Dates the sales order was created."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime OrderDate
		{
			get
			{
				return this.entityData.OrderDate; 
			}
			
			set
			{
				if (this.entityData.OrderDate == value)
					return;
				
                OnPropertyChanging("OrderDate");                    
				OnColumnChanging(SalesOrderHeaderColumn.OrderDate, this.entityData.OrderDate);
				this.entityData.OrderDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.OrderDate, this.entityData.OrderDate);
				OnPropertyChanged("OrderDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DueDate property. 
		///		Date the order is due to the customer.
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Date the order is due to the customer."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime DueDate
		{
			get
			{
				return this.entityData.DueDate; 
			}
			
			set
			{
				if (this.entityData.DueDate == value)
					return;
				
                OnPropertyChanging("DueDate");                    
				OnColumnChanging(SalesOrderHeaderColumn.DueDate, this.entityData.DueDate);
				this.entityData.DueDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.DueDate, this.entityData.DueDate);
				OnPropertyChanged("DueDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipDate property. 
		///		Date the order was shipped to the customer.
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsShipDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Date the order was shipped to the customer."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ShipDate
		{
			get
			{
				return this.entityData.ShipDate; 
			}
			
			set
			{
				if (this.entityData.ShipDate == value)
					return;
				
                OnPropertyChanging("ShipDate");                    
				OnColumnChanging(SalesOrderHeaderColumn.ShipDate, this.entityData.ShipDate);
				this.entityData.ShipDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.ShipDate, this.entityData.ShipDate);
				OnPropertyChanged("ShipDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Byte Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
				
                OnPropertyChanging("Status");                    
				OnColumnChanging(SalesOrderHeaderColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OnlineOrderFlag property. 
		///		0 = Order placed by sales person. 1 = Order placed online by customer.
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"0 = Order placed by sales person. 1 = Order placed online by customer."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean OnlineOrderFlag
		{
			get
			{
				return this.entityData.OnlineOrderFlag; 
			}
			
			set
			{
				if (this.entityData.OnlineOrderFlag == value)
					return;
				
                OnPropertyChanging("OnlineOrderFlag");                    
				OnColumnChanging(SalesOrderHeaderColumn.OnlineOrderFlag, this.entityData.OnlineOrderFlag);
				this.entityData.OnlineOrderFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.OnlineOrderFlag, this.entityData.OnlineOrderFlag);
				OnPropertyChanged("OnlineOrderFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SalesOrderNumber property. 
		///		Unique sales order identification number.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Unique sales order identification number."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 25)]
		public virtual System.String SalesOrderNumber
		{
			get
			{
				return this.entityData.SalesOrderNumber; 
			}
			
			set
			{
				if (this.entityData.SalesOrderNumber == value)
					return;
				
                OnPropertyChanging("SalesOrderNumber");                    
				OnColumnChanging(SalesOrderHeaderColumn.SalesOrderNumber, this.entityData.SalesOrderNumber);
				this.entityData.SalesOrderNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.SalesOrderNumber, this.entityData.SalesOrderNumber);
				OnPropertyChanged("SalesOrderNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PurchaseOrderNumber property. 
		///		Customer purchase order number reference. 
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Customer purchase order number reference. "), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 25)]
		public virtual System.String PurchaseOrderNumber
		{
			get
			{
				return this.entityData.PurchaseOrderNumber; 
			}
			
			set
			{
				if (this.entityData.PurchaseOrderNumber == value)
					return;
				
                OnPropertyChanging("PurchaseOrderNumber");                    
				OnColumnChanging(SalesOrderHeaderColumn.PurchaseOrderNumber, this.entityData.PurchaseOrderNumber);
				this.entityData.PurchaseOrderNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.PurchaseOrderNumber, this.entityData.PurchaseOrderNumber);
				OnPropertyChanged("PurchaseOrderNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccountNumber property. 
		///		Financial accounting number reference.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Financial accounting number reference."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String AccountNumber
		{
			get
			{
				return this.entityData.AccountNumber; 
			}
			
			set
			{
				if (this.entityData.AccountNumber == value)
					return;
				
                OnPropertyChanging("AccountNumber");                    
				OnColumnChanging(SalesOrderHeaderColumn.AccountNumber, this.entityData.AccountNumber);
				this.entityData.AccountNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.AccountNumber, this.entityData.AccountNumber);
				OnPropertyChanged("AccountNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomerId property. 
		///		Customer identification number. Foreign key to Customer.CustomerID.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Customer identification number. Foreign key to Customer.CustomerID."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CustomerId
		{
			get
			{
				return this.entityData.CustomerId; 
			}
			
			set
			{
				if (this.entityData.CustomerId == value)
					return;
				
                OnPropertyChanging("CustomerId");                    
				OnColumnChanging(SalesOrderHeaderColumn.CustomerId, this.entityData.CustomerId);
				this.entityData.CustomerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.CustomerId, this.entityData.CustomerId);
				OnPropertyChanged("CustomerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContactId property. 
		///		Customer contact identification number. Foreign key to Contact.ContactID.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Customer contact identification number. Foreign key to Contact.ContactID."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ContactId
		{
			get
			{
				return this.entityData.ContactId; 
			}
			
			set
			{
				if (this.entityData.ContactId == value)
					return;
				
                OnPropertyChanging("ContactId");                    
				OnColumnChanging(SalesOrderHeaderColumn.ContactId, this.entityData.ContactId);
				this.entityData.ContactId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.ContactId, this.entityData.ContactId);
				OnPropertyChanged("ContactId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SalesPersonId property. 
		///		Sales person who created the sales order. Foreign key to SalesPerson.SalePersonID.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSalesPersonIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Sales person who created the sales order. Foreign key to SalesPerson.SalePersonID."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SalesPersonId
		{
			get
			{
				return this.entityData.SalesPersonId; 
			}
			
			set
			{
				if (this.entityData.SalesPersonId == value)
					return;
				
                OnPropertyChanging("SalesPersonId");                    
				OnColumnChanging(SalesOrderHeaderColumn.SalesPersonId, this.entityData.SalesPersonId);
				this.entityData.SalesPersonId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.SalesPersonId, this.entityData.SalesPersonId);
				OnPropertyChanged("SalesPersonId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TerritoryId property. 
		///		Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTerritoryIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TerritoryId
		{
			get
			{
				return this.entityData.TerritoryId; 
			}
			
			set
			{
				if (this.entityData.TerritoryId == value)
					return;
				
                OnPropertyChanging("TerritoryId");                    
				OnColumnChanging(SalesOrderHeaderColumn.TerritoryId, this.entityData.TerritoryId);
				this.entityData.TerritoryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.TerritoryId, this.entityData.TerritoryId);
				OnPropertyChanged("TerritoryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillToAddressId property. 
		///		Customer billing address. Foreign key to Address.AddressID.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Customer billing address. Foreign key to Address.AddressID."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 BillToAddressId
		{
			get
			{
				return this.entityData.BillToAddressId; 
			}
			
			set
			{
				if (this.entityData.BillToAddressId == value)
					return;
				
                OnPropertyChanging("BillToAddressId");                    
				OnColumnChanging(SalesOrderHeaderColumn.BillToAddressId, this.entityData.BillToAddressId);
				this.entityData.BillToAddressId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.BillToAddressId, this.entityData.BillToAddressId);
				OnPropertyChanged("BillToAddressId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipToAddressId property. 
		///		Customer shipping address. Foreign key to Address.AddressID.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Customer shipping address. Foreign key to Address.AddressID."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ShipToAddressId
		{
			get
			{
				return this.entityData.ShipToAddressId; 
			}
			
			set
			{
				if (this.entityData.ShipToAddressId == value)
					return;
				
                OnPropertyChanging("ShipToAddressId");                    
				OnColumnChanging(SalesOrderHeaderColumn.ShipToAddressId, this.entityData.ShipToAddressId);
				this.entityData.ShipToAddressId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.ShipToAddressId, this.entityData.ShipToAddressId);
				OnPropertyChanged("ShipToAddressId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipMethodId property. 
		///		Shipping method. Foreign key to ShipMethod.ShipMethodID.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Shipping method. Foreign key to ShipMethod.ShipMethodID."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ShipMethodId
		{
			get
			{
				return this.entityData.ShipMethodId; 
			}
			
			set
			{
				if (this.entityData.ShipMethodId == value)
					return;
				
                OnPropertyChanging("ShipMethodId");                    
				OnColumnChanging(SalesOrderHeaderColumn.ShipMethodId, this.entityData.ShipMethodId);
				this.entityData.ShipMethodId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.ShipMethodId, this.entityData.ShipMethodId);
				OnPropertyChanged("ShipMethodId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreditCardId property. 
		///		Credit card identification number. Foreign key to CreditCard.CreditCardID.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCreditCardIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Credit card identification number. Foreign key to CreditCard.CreditCardID."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CreditCardId
		{
			get
			{
				return this.entityData.CreditCardId; 
			}
			
			set
			{
				if (this.entityData.CreditCardId == value)
					return;
				
                OnPropertyChanging("CreditCardId");                    
				OnColumnChanging(SalesOrderHeaderColumn.CreditCardId, this.entityData.CreditCardId);
				this.entityData.CreditCardId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.CreditCardId, this.entityData.CreditCardId);
				OnPropertyChanged("CreditCardId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreditCardApprovalCode property. 
		///		Approval code provided by the credit card company.
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Approval code provided by the credit card company."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String CreditCardApprovalCode
		{
			get
			{
				return this.entityData.CreditCardApprovalCode; 
			}
			
			set
			{
				if (this.entityData.CreditCardApprovalCode == value)
					return;
				
                OnPropertyChanging("CreditCardApprovalCode");                    
				OnColumnChanging(SalesOrderHeaderColumn.CreditCardApprovalCode, this.entityData.CreditCardApprovalCode);
				this.entityData.CreditCardApprovalCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.CreditCardApprovalCode, this.entityData.CreditCardApprovalCode);
				OnPropertyChanged("CreditCardApprovalCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CurrencyRateId property. 
		///		Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCurrencyRateIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CurrencyRateId
		{
			get
			{
				return this.entityData.CurrencyRateId; 
			}
			
			set
			{
				if (this.entityData.CurrencyRateId == value)
					return;
				
                OnPropertyChanging("CurrencyRateId");                    
				OnColumnChanging(SalesOrderHeaderColumn.CurrencyRateId, this.entityData.CurrencyRateId);
				this.entityData.CurrencyRateId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.CurrencyRateId, this.entityData.CurrencyRateId);
				OnPropertyChanged("CurrencyRateId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SubTotal property. 
		///		Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SubTotal
		{
			get
			{
				return this.entityData.SubTotal; 
			}
			
			set
			{
				if (this.entityData.SubTotal == value)
					return;
				
                OnPropertyChanging("SubTotal");                    
				OnColumnChanging(SalesOrderHeaderColumn.SubTotal, this.entityData.SubTotal);
				this.entityData.SubTotal = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.SubTotal, this.entityData.SubTotal);
				OnPropertyChanged("SubTotal");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TaxAmt property. 
		///		Tax amount.
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Tax amount."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal TaxAmt
		{
			get
			{
				return this.entityData.TaxAmt; 
			}
			
			set
			{
				if (this.entityData.TaxAmt == value)
					return;
				
                OnPropertyChanging("TaxAmt");                    
				OnColumnChanging(SalesOrderHeaderColumn.TaxAmt, this.entityData.TaxAmt);
				this.entityData.TaxAmt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.TaxAmt, this.entityData.TaxAmt);
				OnPropertyChanged("TaxAmt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Freight property. 
		///		Shipping cost.
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Shipping cost."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal Freight
		{
			get
			{
				return this.entityData.Freight; 
			}
			
			set
			{
				if (this.entityData.Freight == value)
					return;
				
                OnPropertyChanging("Freight");                    
				OnColumnChanging(SalesOrderHeaderColumn.Freight, this.entityData.Freight);
				this.entityData.Freight = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.Freight, this.entityData.Freight);
				OnPropertyChanged("Freight");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalDue property. 
		///		Total due from customer. Computed as Subtotal + TaxAmt + Freight.
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Total due from customer. Computed as Subtotal + TaxAmt + Freight."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal TotalDue
		{
			get
			{
				return this.entityData.TotalDue; 
			}
			
			set
			{
				if (this.entityData.TotalDue == value)
					return;
				
                OnPropertyChanging("TotalDue");                    
				OnColumnChanging(SalesOrderHeaderColumn.TotalDue, this.entityData.TotalDue);
				this.entityData.TotalDue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.TotalDue, this.entityData.TotalDue);
				OnPropertyChanged("TotalDue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Comment property. 
		///		Sales representative comments.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Sales representative comments."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 128)]
		public virtual System.String Comment
		{
			get
			{
				return this.entityData.Comment; 
			}
			
			set
			{
				if (this.entityData.Comment == value)
					return;
				
                OnPropertyChanging("Comment");                    
				OnColumnChanging(SalesOrderHeaderColumn.Comment, this.entityData.Comment);
				this.entityData.Comment = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.Comment, this.entityData.Comment);
				OnPropertyChanged("Comment");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Rowguid property. 
		///		ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, true, false)]
		public virtual System.Guid Rowguid
		{
			get
			{
				return this.entityData.Rowguid; 
			}
			
			set
			{
				if (this.entityData.Rowguid == value)
					return;
				
                OnPropertyChanging("Rowguid");                    
				OnColumnChanging(SalesOrderHeaderColumn.Rowguid, this.entityData.Rowguid);
				this.entityData.Rowguid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.Rowguid, this.entityData.Rowguid);
				OnPropertyChanged("Rowguid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModifiedDate property. 
		///		Date and time the record was last updated.
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Date and time the record was last updated."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ModifiedDate
		{
			get
			{
				return this.entityData.ModifiedDate; 
			}
			
			set
			{
				if (this.entityData.ModifiedDate == value)
					return;
				
                OnPropertyChanging("ModifiedDate");                    
				OnColumnChanging(SalesOrderHeaderColumn.ModifiedDate, this.entityData.ModifiedDate);
				this.entityData.ModifiedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SalesOrderHeaderColumn.ModifiedDate, this.entityData.ModifiedDate);
				OnPropertyChanged("ModifiedDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Address"/>.
		/// </summary>
		/// <value>The source Address for BillToAddressId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Address BillToAddressIdSource
      	{
            get { return entityData.BillToAddressIdSource; }
            set { entityData.BillToAddressIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Address"/>.
		/// </summary>
		/// <value>The source Address for ShipToAddressId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Address ShipToAddressIdSource
      	{
            get { return entityData.ShipToAddressIdSource; }
            set { entityData.ShipToAddressIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Contact"/>.
		/// </summary>
		/// <value>The source Contact for ContactId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Contact ContactIdSource
      	{
            get { return entityData.ContactIdSource; }
            set { entityData.ContactIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="CreditCard"/>.
		/// </summary>
		/// <value>The source CreditCard for CreditCardId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual CreditCard CreditCardIdSource
      	{
            get { return entityData.CreditCardIdSource; }
            set { entityData.CreditCardIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="CurrencyRate"/>.
		/// </summary>
		/// <value>The source CurrencyRate for CurrencyRateId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual CurrencyRate CurrencyRateIdSource
      	{
            get { return entityData.CurrencyRateIdSource; }
            set { entityData.CurrencyRateIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Customer"/>.
		/// </summary>
		/// <value>The source Customer for CustomerId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Customer CustomerIdSource
      	{
            get { return entityData.CustomerIdSource; }
            set { entityData.CustomerIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SalesPerson"/>.
		/// </summary>
		/// <value>The source SalesPerson for SalesPersonId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SalesPerson SalesPersonIdSource
      	{
            get { return entityData.SalesPersonIdSource; }
            set { entityData.SalesPersonIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SalesTerritory"/>.
		/// </summary>
		/// <value>The source SalesTerritory for TerritoryId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SalesTerritory TerritoryIdSource
      	{
            get { return entityData.TerritoryIdSource; }
            set { entityData.TerritoryIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ShipMethod"/>.
		/// </summary>
		/// <value>The source ShipMethod for ShipMethodId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ShipMethod ShipMethodIdSource
      	{
            get { return entityData.ShipMethodIdSource; }
            set { entityData.ShipMethodIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of SalesOrderHeaderSalesReason objects
		///	which are related to this object through the relation FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SalesOrderHeaderSalesReason> SalesOrderHeaderSalesReasonCollection
		{
			get { return entityData.SalesOrderHeaderSalesReasonCollection; }
			set { entityData.SalesOrderHeaderSalesReasonCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SalesOrderDetail objects
		///	which are related to this object through the relation FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SalesOrderDetail> SalesOrderDetailCollection
		{
			get { return entityData.SalesOrderDetailCollection; }
			set { entityData.SalesOrderDetailCollection = value; }	
		}

		/// <summary>
		///	Holds a collection of SalesReasonFromSalesOrderHeaderSalesReason objects
		///	which are related to this object through the junction table SalesOrderHeaderSalesReason
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SalesReason> SalesReasonIdSalesReasonCollection_From_SalesOrderHeaderSalesReason
		{
			get { return entityData.SalesReasonIdSalesReasonCollection_From_SalesOrderHeaderSalesReason; }
			set { entityData.SalesReasonIdSalesReasonCollection_From_SalesOrderHeaderSalesReason = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("SalesOrderNumber", "Sales Order Number"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SalesOrderNumber", "Sales Order Number", 25));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PurchaseOrderNumber", "Purchase Order Number", 25));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AccountNumber", "Account Number", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CreditCardApprovalCode", "Credit Card Approval Code", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Comment", "Comment", 128));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SalesOrderHeader"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SalesOrderID", "RevisionNumber", "OrderDate", "DueDate", "ShipDate", "Status", "OnlineOrderFlag", "SalesOrderNumber", "PurchaseOrderNumber", "AccountNumber", "CustomerID", "ContactID", "SalesPersonID", "TerritoryID", "BillToAddressID", "ShipToAddressID", "ShipMethodID", "CreditCardID", "CreditCardApprovalCode", "CurrencyRateID", "SubTotal", "TaxAmt", "Freight", "TotalDue", "Comment", "rowguid", "ModifiedDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SalesOrderHeaderEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SalesOrderHeader) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SalesOrderHeader>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SalesOrderHeader);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SalesOrderHeader Entity 
		///</summary>
		protected virtual SalesOrderHeader Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SalesOrderHeader copy = new SalesOrderHeader();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SalesOrderId = this.SalesOrderId;
				copy.RevisionNumber = this.RevisionNumber;
				copy.OrderDate = this.OrderDate;
				copy.DueDate = this.DueDate;
				copy.ShipDate = this.ShipDate;
				copy.Status = this.Status;
				copy.OnlineOrderFlag = this.OnlineOrderFlag;
				copy.SalesOrderNumber = this.SalesOrderNumber;
				copy.PurchaseOrderNumber = this.PurchaseOrderNumber;
				copy.AccountNumber = this.AccountNumber;
				copy.CustomerId = this.CustomerId;
				copy.ContactId = this.ContactId;
				copy.SalesPersonId = this.SalesPersonId;
				copy.TerritoryId = this.TerritoryId;
				copy.BillToAddressId = this.BillToAddressId;
				copy.ShipToAddressId = this.ShipToAddressId;
				copy.ShipMethodId = this.ShipMethodId;
				copy.CreditCardId = this.CreditCardId;
				copy.CreditCardApprovalCode = this.CreditCardApprovalCode;
				copy.CurrencyRateId = this.CurrencyRateId;
				copy.SubTotal = this.SubTotal;
				copy.TaxAmt = this.TaxAmt;
				copy.Freight = this.Freight;
				copy.TotalDue = this.TotalDue;
				copy.Comment = this.Comment;
				copy.Rowguid = this.Rowguid;
				copy.ModifiedDate = this.ModifiedDate;
			
			if (this.BillToAddressIdSource != null && existingCopies.Contains(this.BillToAddressIdSource))
				copy.BillToAddressIdSource = existingCopies[this.BillToAddressIdSource] as Address;
			else
				copy.BillToAddressIdSource = MakeCopyOf(this.BillToAddressIdSource, existingCopies) as Address;
			if (this.ShipToAddressIdSource != null && existingCopies.Contains(this.ShipToAddressIdSource))
				copy.ShipToAddressIdSource = existingCopies[this.ShipToAddressIdSource] as Address;
			else
				copy.ShipToAddressIdSource = MakeCopyOf(this.ShipToAddressIdSource, existingCopies) as Address;
			if (this.ContactIdSource != null && existingCopies.Contains(this.ContactIdSource))
				copy.ContactIdSource = existingCopies[this.ContactIdSource] as Contact;
			else
				copy.ContactIdSource = MakeCopyOf(this.ContactIdSource, existingCopies) as Contact;
			if (this.CreditCardIdSource != null && existingCopies.Contains(this.CreditCardIdSource))
				copy.CreditCardIdSource = existingCopies[this.CreditCardIdSource] as CreditCard;
			else
				copy.CreditCardIdSource = MakeCopyOf(this.CreditCardIdSource, existingCopies) as CreditCard;
			if (this.CurrencyRateIdSource != null && existingCopies.Contains(this.CurrencyRateIdSource))
				copy.CurrencyRateIdSource = existingCopies[this.CurrencyRateIdSource] as CurrencyRate;
			else
				copy.CurrencyRateIdSource = MakeCopyOf(this.CurrencyRateIdSource, existingCopies) as CurrencyRate;
			if (this.CustomerIdSource != null && existingCopies.Contains(this.CustomerIdSource))
				copy.CustomerIdSource = existingCopies[this.CustomerIdSource] as Customer;
			else
				copy.CustomerIdSource = MakeCopyOf(this.CustomerIdSource, existingCopies) as Customer;
			if (this.SalesPersonIdSource != null && existingCopies.Contains(this.SalesPersonIdSource))
				copy.SalesPersonIdSource = existingCopies[this.SalesPersonIdSource] as SalesPerson;
			else
				copy.SalesPersonIdSource = MakeCopyOf(this.SalesPersonIdSource, existingCopies) as SalesPerson;
			if (this.TerritoryIdSource != null && existingCopies.Contains(this.TerritoryIdSource))
				copy.TerritoryIdSource = existingCopies[this.TerritoryIdSource] as SalesTerritory;
			else
				copy.TerritoryIdSource = MakeCopyOf(this.TerritoryIdSource, existingCopies) as SalesTerritory;
			if (this.ShipMethodIdSource != null && existingCopies.Contains(this.ShipMethodIdSource))
				copy.ShipMethodIdSource = existingCopies[this.ShipMethodIdSource] as ShipMethod;
			else
				copy.ShipMethodIdSource = MakeCopyOf(this.ShipMethodIdSource, existingCopies) as ShipMethod;
		
			//deep copy nested objects
			copy.SalesOrderHeaderSalesReasonCollection = (TList<SalesOrderHeaderSalesReason>) MakeCopyOf(this.SalesOrderHeaderSalesReasonCollection, existingCopies); 
			copy.SalesOrderDetailCollection = (TList<SalesOrderDetail>) MakeCopyOf(this.SalesOrderDetailCollection, existingCopies); 
			copy.SalesReasonIdSalesReasonCollection_From_SalesOrderHeaderSalesReason = (TList<SalesReason>) MakeCopyOf(this.SalesReasonIdSalesReasonCollection_From_SalesOrderHeaderSalesReason, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SalesOrderHeader Entity 
		///</summary>
		public virtual SalesOrderHeader Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SalesOrderHeader Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SalesOrderHeader DeepCopy()
		{
			return EntityHelper.Clone<SalesOrderHeader>(this as SalesOrderHeader);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SalesOrderHeaderEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SalesOrderHeaderEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SalesOrderHeaderEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SalesOrderHeaderColumn column)
		{
			switch(column)
			{
					case SalesOrderHeaderColumn.SalesOrderId:
					return entityData.SalesOrderId != _originalData.SalesOrderId;
					case SalesOrderHeaderColumn.RevisionNumber:
					return entityData.RevisionNumber != _originalData.RevisionNumber;
					case SalesOrderHeaderColumn.OrderDate:
					return entityData.OrderDate != _originalData.OrderDate;
					case SalesOrderHeaderColumn.DueDate:
					return entityData.DueDate != _originalData.DueDate;
					case SalesOrderHeaderColumn.ShipDate:
					return entityData.ShipDate != _originalData.ShipDate;
					case SalesOrderHeaderColumn.Status:
					return entityData.Status != _originalData.Status;
					case SalesOrderHeaderColumn.OnlineOrderFlag:
					return entityData.OnlineOrderFlag != _originalData.OnlineOrderFlag;
					case SalesOrderHeaderColumn.SalesOrderNumber:
					return entityData.SalesOrderNumber != _originalData.SalesOrderNumber;
					case SalesOrderHeaderColumn.PurchaseOrderNumber:
					return entityData.PurchaseOrderNumber != _originalData.PurchaseOrderNumber;
					case SalesOrderHeaderColumn.AccountNumber:
					return entityData.AccountNumber != _originalData.AccountNumber;
					case SalesOrderHeaderColumn.CustomerId:
					return entityData.CustomerId != _originalData.CustomerId;
					case SalesOrderHeaderColumn.ContactId:
					return entityData.ContactId != _originalData.ContactId;
					case SalesOrderHeaderColumn.SalesPersonId:
					return entityData.SalesPersonId != _originalData.SalesPersonId;
					case SalesOrderHeaderColumn.TerritoryId:
					return entityData.TerritoryId != _originalData.TerritoryId;
					case SalesOrderHeaderColumn.BillToAddressId:
					return entityData.BillToAddressId != _originalData.BillToAddressId;
					case SalesOrderHeaderColumn.ShipToAddressId:
					return entityData.ShipToAddressId != _originalData.ShipToAddressId;
					case SalesOrderHeaderColumn.ShipMethodId:
					return entityData.ShipMethodId != _originalData.ShipMethodId;
					case SalesOrderHeaderColumn.CreditCardId:
					return entityData.CreditCardId != _originalData.CreditCardId;
					case SalesOrderHeaderColumn.CreditCardApprovalCode:
					return entityData.CreditCardApprovalCode != _originalData.CreditCardApprovalCode;
					case SalesOrderHeaderColumn.CurrencyRateId:
					return entityData.CurrencyRateId != _originalData.CurrencyRateId;
					case SalesOrderHeaderColumn.SubTotal:
					return entityData.SubTotal != _originalData.SubTotal;
					case SalesOrderHeaderColumn.TaxAmt:
					return entityData.TaxAmt != _originalData.TaxAmt;
					case SalesOrderHeaderColumn.Freight:
					return entityData.Freight != _originalData.Freight;
					case SalesOrderHeaderColumn.TotalDue:
					return entityData.TotalDue != _originalData.TotalDue;
					case SalesOrderHeaderColumn.Comment:
					return entityData.Comment != _originalData.Comment;
					case SalesOrderHeaderColumn.Rowguid:
					return entityData.Rowguid != _originalData.Rowguid;
					case SalesOrderHeaderColumn.ModifiedDate:
					return entityData.ModifiedDate != _originalData.ModifiedDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SalesOrderHeaderColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SalesOrderId != _originalData.SalesOrderId;
			result = result || entityData.RevisionNumber != _originalData.RevisionNumber;
			result = result || entityData.OrderDate != _originalData.OrderDate;
			result = result || entityData.DueDate != _originalData.DueDate;
			result = result || entityData.ShipDate != _originalData.ShipDate;
			result = result || entityData.Status != _originalData.Status;
			result = result || entityData.OnlineOrderFlag != _originalData.OnlineOrderFlag;
			result = result || entityData.SalesOrderNumber != _originalData.SalesOrderNumber;
			result = result || entityData.PurchaseOrderNumber != _originalData.PurchaseOrderNumber;
			result = result || entityData.AccountNumber != _originalData.AccountNumber;
			result = result || entityData.CustomerId != _originalData.CustomerId;
			result = result || entityData.ContactId != _originalData.ContactId;
			result = result || entityData.SalesPersonId != _originalData.SalesPersonId;
			result = result || entityData.TerritoryId != _originalData.TerritoryId;
			result = result || entityData.BillToAddressId != _originalData.BillToAddressId;
			result = result || entityData.ShipToAddressId != _originalData.ShipToAddressId;
			result = result || entityData.ShipMethodId != _originalData.ShipMethodId;
			result = result || entityData.CreditCardId != _originalData.CreditCardId;
			result = result || entityData.CreditCardApprovalCode != _originalData.CreditCardApprovalCode;
			result = result || entityData.CurrencyRateId != _originalData.CurrencyRateId;
			result = result || entityData.SubTotal != _originalData.SubTotal;
			result = result || entityData.TaxAmt != _originalData.TaxAmt;
			result = result || entityData.Freight != _originalData.Freight;
			result = result || entityData.TotalDue != _originalData.TotalDue;
			result = result || entityData.Comment != _originalData.Comment;
			result = result || entityData.Rowguid != _originalData.Rowguid;
			result = result || entityData.ModifiedDate != _originalData.ModifiedDate;
			return result;
		}	
		
		///<summary>
		///  Returns a SalesOrderHeader Entity with the original data.
		///</summary>
		public SalesOrderHeader GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSalesOrderHeader(
				_originalData.RevisionNumber,
				_originalData.OrderDate,
				_originalData.DueDate,
				_originalData.ShipDate,
				_originalData.Status,
				_originalData.OnlineOrderFlag,
				_originalData.PurchaseOrderNumber,
				_originalData.AccountNumber,
				_originalData.CustomerId,
				_originalData.ContactId,
				_originalData.SalesPersonId,
				_originalData.TerritoryId,
				_originalData.BillToAddressId,
				_originalData.ShipToAddressId,
				_originalData.ShipMethodId,
				_originalData.CreditCardId,
				_originalData.CreditCardApprovalCode,
				_originalData.CurrencyRateId,
				_originalData.SubTotal,
				_originalData.TaxAmt,
				_originalData.Freight,
				_originalData.Comment,
				_originalData.ModifiedDate
				);
				
			return (SalesOrderHeader)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SalesOrderHeaderBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SalesOrderHeaderBase)
				return ValueEquals(this, (SalesOrderHeaderBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SalesOrderHeaderBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SalesOrderId.GetHashCode() ^ 
					this.RevisionNumber.GetHashCode() ^ 
					this.OrderDate.GetHashCode() ^ 
					this.DueDate.GetHashCode() ^ 
					((this.ShipDate == null) ? string.Empty : this.ShipDate.ToString()).GetHashCode() ^ 
					this.Status.GetHashCode() ^ 
					this.OnlineOrderFlag.GetHashCode() ^ 
					this.SalesOrderNumber.GetHashCode() ^ 
					((this.PurchaseOrderNumber == null) ? string.Empty : this.PurchaseOrderNumber.ToString()).GetHashCode() ^ 
					((this.AccountNumber == null) ? string.Empty : this.AccountNumber.ToString()).GetHashCode() ^ 
					this.CustomerId.GetHashCode() ^ 
					this.ContactId.GetHashCode() ^ 
					((this.SalesPersonId == null) ? string.Empty : this.SalesPersonId.ToString()).GetHashCode() ^ 
					((this.TerritoryId == null) ? string.Empty : this.TerritoryId.ToString()).GetHashCode() ^ 
					this.BillToAddressId.GetHashCode() ^ 
					this.ShipToAddressId.GetHashCode() ^ 
					this.ShipMethodId.GetHashCode() ^ 
					((this.CreditCardId == null) ? string.Empty : this.CreditCardId.ToString()).GetHashCode() ^ 
					((this.CreditCardApprovalCode == null) ? string.Empty : this.CreditCardApprovalCode.ToString()).GetHashCode() ^ 
					((this.CurrencyRateId == null) ? string.Empty : this.CurrencyRateId.ToString()).GetHashCode() ^ 
					this.SubTotal.GetHashCode() ^ 
					this.TaxAmt.GetHashCode() ^ 
					this.Freight.GetHashCode() ^ 
					this.TotalDue.GetHashCode() ^ 
					((this.Comment == null) ? string.Empty : this.Comment.ToString()).GetHashCode() ^ 
					this.Rowguid.GetHashCode() ^ 
					this.ModifiedDate.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SalesOrderHeaderBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SalesOrderHeaderBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SalesOrderHeaderBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SalesOrderHeaderBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SalesOrderHeaderBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SalesOrderHeaderBase Object1, SalesOrderHeaderBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SalesOrderId != Object2.SalesOrderId)
				equal = false;
			if (Object1.RevisionNumber != Object2.RevisionNumber)
				equal = false;
			if (Object1.OrderDate != Object2.OrderDate)
				equal = false;
			if (Object1.DueDate != Object2.DueDate)
				equal = false;
			if ( Object1.ShipDate != null && Object2.ShipDate != null )
			{
				if (Object1.ShipDate != Object2.ShipDate)
					equal = false;
			}
			else if (Object1.ShipDate == null ^ Object2.ShipDate == null )
			{
				equal = false;
			}
			if (Object1.Status != Object2.Status)
				equal = false;
			if (Object1.OnlineOrderFlag != Object2.OnlineOrderFlag)
				equal = false;
			if (Object1.SalesOrderNumber != Object2.SalesOrderNumber)
				equal = false;
			if ( Object1.PurchaseOrderNumber != null && Object2.PurchaseOrderNumber != null )
			{
				if (Object1.PurchaseOrderNumber != Object2.PurchaseOrderNumber)
					equal = false;
			}
			else if (Object1.PurchaseOrderNumber == null ^ Object2.PurchaseOrderNumber == null )
			{
				equal = false;
			}
			if ( Object1.AccountNumber != null && Object2.AccountNumber != null )
			{
				if (Object1.AccountNumber != Object2.AccountNumber)
					equal = false;
			}
			else if (Object1.AccountNumber == null ^ Object2.AccountNumber == null )
			{
				equal = false;
			}
			if (Object1.CustomerId != Object2.CustomerId)
				equal = false;
			if (Object1.ContactId != Object2.ContactId)
				equal = false;
			if ( Object1.SalesPersonId != null && Object2.SalesPersonId != null )
			{
				if (Object1.SalesPersonId != Object2.SalesPersonId)
					equal = false;
			}
			else if (Object1.SalesPersonId == null ^ Object2.SalesPersonId == null )
			{
				equal = false;
			}
			if ( Object1.TerritoryId != null && Object2.TerritoryId != null )
			{
				if (Object1.TerritoryId != Object2.TerritoryId)
					equal = false;
			}
			else if (Object1.TerritoryId == null ^ Object2.TerritoryId == null )
			{
				equal = false;
			}
			if (Object1.BillToAddressId != Object2.BillToAddressId)
				equal = false;
			if (Object1.ShipToAddressId != Object2.ShipToAddressId)
				equal = false;
			if (Object1.ShipMethodId != Object2.ShipMethodId)
				equal = false;
			if ( Object1.CreditCardId != null && Object2.CreditCardId != null )
			{
				if (Object1.CreditCardId != Object2.CreditCardId)
					equal = false;
			}
			else if (Object1.CreditCardId == null ^ Object2.CreditCardId == null )
			{
				equal = false;
			}
			if ( Object1.CreditCardApprovalCode != null && Object2.CreditCardApprovalCode != null )
			{
				if (Object1.CreditCardApprovalCode != Object2.CreditCardApprovalCode)
					equal = false;
			}
			else if (Object1.CreditCardApprovalCode == null ^ Object2.CreditCardApprovalCode == null )
			{
				equal = false;
			}
			if ( Object1.CurrencyRateId != null && Object2.CurrencyRateId != null )
			{
				if (Object1.CurrencyRateId != Object2.CurrencyRateId)
					equal = false;
			}
			else if (Object1.CurrencyRateId == null ^ Object2.CurrencyRateId == null )
			{
				equal = false;
			}
			if (Object1.SubTotal != Object2.SubTotal)
				equal = false;
			if (Object1.TaxAmt != Object2.TaxAmt)
				equal = false;
			if (Object1.Freight != Object2.Freight)
				equal = false;
			if (Object1.TotalDue != Object2.TotalDue)
				equal = false;
			if ( Object1.Comment != null && Object2.Comment != null )
			{
				if (Object1.Comment != Object2.Comment)
					equal = false;
			}
			else if (Object1.Comment == null ^ Object2.Comment == null )
			{
				equal = false;
			}
			if (Object1.Rowguid != Object2.Rowguid)
				equal = false;
			if (Object1.ModifiedDate != Object2.ModifiedDate)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SalesOrderHeaderBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SalesOrderHeaderComparer GetComparer()
        {
            return new SalesOrderHeaderComparer();
        }
        */

        // Comparer delegates back to SalesOrderHeader
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SalesOrderHeader rhs, SalesOrderHeaderColumn which)
        {
            switch (which)
            {
            	
            	
            	case SalesOrderHeaderColumn.SalesOrderId:
            		return this.SalesOrderId.CompareTo(rhs.SalesOrderId);
            		
            		                 
            	
            	
            	case SalesOrderHeaderColumn.RevisionNumber:
            		return this.RevisionNumber.CompareTo(rhs.RevisionNumber);
            		
            		                 
            	
            	
            	case SalesOrderHeaderColumn.OrderDate:
            		return this.OrderDate.CompareTo(rhs.OrderDate);
            		
            		                 
            	
            	
            	case SalesOrderHeaderColumn.DueDate:
            		return this.DueDate.CompareTo(rhs.DueDate);
            		
            		                 
            	
            	
            	case SalesOrderHeaderColumn.ShipDate:
            		return this.ShipDate.Value.CompareTo(rhs.ShipDate.Value);
            		
            		                 
            	
            	
            	case SalesOrderHeaderColumn.Status:
            		return this.Status.CompareTo(rhs.Status);
            		
            		                 
            	
            	
            	case SalesOrderHeaderColumn.OnlineOrderFlag:
            		return this.OnlineOrderFlag.CompareTo(rhs.OnlineOrderFlag);
            		
            		                 
            	
            	
            	case SalesOrderHeaderColumn.SalesOrderNumber:
            		return this.SalesOrderNumber.CompareTo(rhs.SalesOrderNumber);
            		
            		                 
            	
            	
            	case SalesOrderHeaderColumn.PurchaseOrderNumber:
            		return this.PurchaseOrderNumber.CompareTo(rhs.PurchaseOrderNumber);
            		
            		                 
            	
            	
            	case SalesOrderHeaderColumn.AccountNumber:
            		return this.AccountNumber.CompareTo(rhs.AccountNumber);
            		
            		                 
            	
            	
            	case SalesOrderHeaderColumn.CustomerId:
            		return this.CustomerId.CompareTo(rhs.CustomerId);
            		
            		                 
            	
            	
            	case SalesOrderHeaderColumn.ContactId:
            		return this.ContactId.CompareTo(rhs.ContactId);
            		
            		                 
            	
            	
            	case SalesOrderHeaderColumn.SalesPersonId:
            		return this.SalesPersonId.Value.CompareTo(rhs.SalesPersonId.Value);
            		
            		                 
            	
            	
            	case SalesOrderHeaderColumn.TerritoryId:
            		return this.TerritoryId.Value.CompareTo(rhs.TerritoryId.Value);
            		
            		                 
            	
            	
            	case SalesOrderHeaderColumn.BillToAddressId:
            		return this.BillToAddressId.CompareTo(rhs.BillToAddressId);
            		
            		                 
            	
            	
            	case SalesOrderHeaderColumn.ShipToAddressId:
            		return this.ShipToAddressId.CompareTo(rhs.ShipToAddressId);
            		
            		                 
            	
            	
            	case SalesOrderHeaderColumn.ShipMethodId:
            		return this.ShipMethodId.CompareTo(rhs.ShipMethodId);
            		
            		                 
            	
            	
            	case SalesOrderHeaderColumn.CreditCardId:
            		return this.CreditCardId.Value.CompareTo(rhs.CreditCardId.Value);
            		
            		                 
            	
            	
            	case SalesOrderHeaderColumn.CreditCardApprovalCode:
            		return this.CreditCardApprovalCode.CompareTo(rhs.CreditCardApprovalCode);
            		
            		                 
            	
            	
            	case SalesOrderHeaderColumn.CurrencyRateId:
            		return this.CurrencyRateId.Value.CompareTo(rhs.CurrencyRateId.Value);
            		
            		                 
            	
            	
            	case SalesOrderHeaderColumn.SubTotal:
            		return this.SubTotal.CompareTo(rhs.SubTotal);
            		
            		                 
            	
            	
            	case SalesOrderHeaderColumn.TaxAmt:
            		return this.TaxAmt.CompareTo(rhs.TaxAmt);
            		
            		                 
            	
            	
            	case SalesOrderHeaderColumn.Freight:
            		return this.Freight.CompareTo(rhs.Freight);
            		
            		                 
            	
            	
            	case SalesOrderHeaderColumn.TotalDue:
            		return this.TotalDue.CompareTo(rhs.TotalDue);
            		
            		                 
            	
            	
            	case SalesOrderHeaderColumn.Comment:
            		return this.Comment.CompareTo(rhs.Comment);
            		
            		                 
            	
            	
            	case SalesOrderHeaderColumn.Rowguid:
            		return this.Rowguid.CompareTo(rhs.Rowguid);
            		
            		                 
            	
            	
            	case SalesOrderHeaderColumn.ModifiedDate:
            		return this.ModifiedDate.CompareTo(rhs.ModifiedDate);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SalesOrderHeaderKey> Members
		
		// member variable for the EntityId property
		private SalesOrderHeaderKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SalesOrderHeaderKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SalesOrderHeaderKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SalesOrderHeader")
					.Append("|").Append( this.SalesOrderId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{28}{27}- SalesOrderId: {0}{27}- RevisionNumber: {1}{27}- OrderDate: {2}{27}- DueDate: {3}{27}- ShipDate: {4}{27}- Status: {5}{27}- OnlineOrderFlag: {6}{27}- SalesOrderNumber: {7}{27}- PurchaseOrderNumber: {8}{27}- AccountNumber: {9}{27}- CustomerId: {10}{27}- ContactId: {11}{27}- SalesPersonId: {12}{27}- TerritoryId: {13}{27}- BillToAddressId: {14}{27}- ShipToAddressId: {15}{27}- ShipMethodId: {16}{27}- CreditCardId: {17}{27}- CreditCardApprovalCode: {18}{27}- CurrencyRateId: {19}{27}- SubTotal: {20}{27}- TaxAmt: {21}{27}- Freight: {22}{27}- TotalDue: {23}{27}- Comment: {24}{27}- Rowguid: {25}{27}- ModifiedDate: {26}{27}{29}", 
				this.SalesOrderId,
				this.RevisionNumber,
				this.OrderDate,
				this.DueDate,
				(this.ShipDate == null) ? string.Empty : this.ShipDate.ToString(),
				this.Status,
				this.OnlineOrderFlag,
				this.SalesOrderNumber,
				(this.PurchaseOrderNumber == null) ? string.Empty : this.PurchaseOrderNumber.ToString(),
				(this.AccountNumber == null) ? string.Empty : this.AccountNumber.ToString(),
				this.CustomerId,
				this.ContactId,
				(this.SalesPersonId == null) ? string.Empty : this.SalesPersonId.ToString(),
				(this.TerritoryId == null) ? string.Empty : this.TerritoryId.ToString(),
				this.BillToAddressId,
				this.ShipToAddressId,
				this.ShipMethodId,
				(this.CreditCardId == null) ? string.Empty : this.CreditCardId.ToString(),
				(this.CreditCardApprovalCode == null) ? string.Empty : this.CreditCardApprovalCode.ToString(),
				(this.CurrencyRateId == null) ? string.Empty : this.CurrencyRateId.ToString(),
				this.SubTotal,
				this.TaxAmt,
				this.Freight,
				this.TotalDue,
				(this.Comment == null) ? string.Empty : this.Comment.ToString(),
				this.Rowguid,
				this.ModifiedDate,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SalesOrderHeader' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SalesOrderHeaderEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SalesOrderID : Primary key.
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SalesOrderHeader"</remarks>
		public System.Int32 SalesOrderId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// RevisionNumber : Incremental number to track changes to the sales order over time.
		/// </summary>
		public System.Byte RevisionNumber = (byte)0;
		
		/// <summary>
		/// OrderDate : Dates the sales order was created.
		/// </summary>
		public System.DateTime OrderDate = DateTime.MinValue;
		
		/// <summary>
		/// DueDate : Date the order is due to the customer.
		/// </summary>
		public System.DateTime DueDate = DateTime.MinValue;
		
		/// <summary>
		/// ShipDate : Date the order was shipped to the customer.
		/// </summary>
		public System.DateTime? ShipDate = null;
		
		/// <summary>
		/// Status : Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled
		/// </summary>
		public System.Byte Status = (byte)0;
		
		/// <summary>
		/// OnlineOrderFlag : 0 = Order placed by sales person. 1 = Order placed online by customer.
		/// </summary>
		public System.Boolean OnlineOrderFlag = false;
		
		/// <summary>
		/// SalesOrderNumber : Unique sales order identification number.
		/// </summary>
		public System.String SalesOrderNumber = string.Empty;
		
		/// <summary>
		/// PurchaseOrderNumber : Customer purchase order number reference. 
		/// </summary>
		public System.String PurchaseOrderNumber = null;
		
		/// <summary>
		/// AccountNumber : Financial accounting number reference.
		/// </summary>
		public System.String AccountNumber = null;
		
		/// <summary>
		/// CustomerID : Customer identification number. Foreign key to Customer.CustomerID.
		/// </summary>
		public System.Int32 CustomerId = (int)0;
		
		/// <summary>
		/// ContactID : Customer contact identification number. Foreign key to Contact.ContactID.
		/// </summary>
		public System.Int32 ContactId = (int)0;
		
		/// <summary>
		/// SalesPersonID : Sales person who created the sales order. Foreign key to SalesPerson.SalePersonID.
		/// </summary>
		public System.Int32? SalesPersonId = null;
		
		/// <summary>
		/// TerritoryID : Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.
		/// </summary>
		public System.Int32? TerritoryId = null;
		
		/// <summary>
		/// BillToAddressID : Customer billing address. Foreign key to Address.AddressID.
		/// </summary>
		public System.Int32 BillToAddressId = (int)0;
		
		/// <summary>
		/// ShipToAddressID : Customer shipping address. Foreign key to Address.AddressID.
		/// </summary>
		public System.Int32 ShipToAddressId = (int)0;
		
		/// <summary>
		/// ShipMethodID : Shipping method. Foreign key to ShipMethod.ShipMethodID.
		/// </summary>
		public System.Int32 ShipMethodId = (int)0;
		
		/// <summary>
		/// CreditCardID : Credit card identification number. Foreign key to CreditCard.CreditCardID.
		/// </summary>
		public System.Int32? CreditCardId = null;
		
		/// <summary>
		/// CreditCardApprovalCode : Approval code provided by the credit card company.
		/// </summary>
		public System.String CreditCardApprovalCode = null;
		
		/// <summary>
		/// CurrencyRateID : Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.
		/// </summary>
		public System.Int32? CurrencyRateId = null;
		
		/// <summary>
		/// SubTotal : Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.
		/// </summary>
		public System.Decimal SubTotal = 0;
		
		/// <summary>
		/// TaxAmt : Tax amount.
		/// </summary>
		public System.Decimal TaxAmt = 0;
		
		/// <summary>
		/// Freight : Shipping cost.
		/// </summary>
		public System.Decimal Freight = 0;
		
		/// <summary>
		/// TotalDue : Total due from customer. Computed as Subtotal + TaxAmt + Freight.
		/// </summary>
		public System.Decimal TotalDue = 0;
		
		/// <summary>
		/// Comment : Sales representative comments.
		/// </summary>
		public System.String Comment = null;
		
		/// <summary>
		/// rowguid : ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		public System.Guid Rowguid = Guid.Empty;
		
		/// <summary>
		/// ModifiedDate : Date and time the record was last updated.
		/// </summary>
		public System.DateTime ModifiedDate = DateTime.MinValue;
		#endregion
			
		#region Source Foreign Key Property
				
		private Address _billToAddressIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Address"/>.
		/// </summary>
		/// <value>The source Address for BillToAddressId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Address BillToAddressIdSource
      	{
            get { return this._billToAddressIdSource; }
            set { this._billToAddressIdSource = value; }
      	}
		private Address _shipToAddressIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Address"/>.
		/// </summary>
		/// <value>The source Address for ShipToAddressId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Address ShipToAddressIdSource
      	{
            get { return this._shipToAddressIdSource; }
            set { this._shipToAddressIdSource = value; }
      	}
		private Contact _contactIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Contact"/>.
		/// </summary>
		/// <value>The source Contact for ContactId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Contact ContactIdSource
      	{
            get { return this._contactIdSource; }
            set { this._contactIdSource = value; }
      	}
		private CreditCard _creditCardIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="CreditCard"/>.
		/// </summary>
		/// <value>The source CreditCard for CreditCardId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual CreditCard CreditCardIdSource
      	{
            get { return this._creditCardIdSource; }
            set { this._creditCardIdSource = value; }
      	}
		private CurrencyRate _currencyRateIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="CurrencyRate"/>.
		/// </summary>
		/// <value>The source CurrencyRate for CurrencyRateId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual CurrencyRate CurrencyRateIdSource
      	{
            get { return this._currencyRateIdSource; }
            set { this._currencyRateIdSource = value; }
      	}
		private Customer _customerIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Customer"/>.
		/// </summary>
		/// <value>The source Customer for CustomerId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Customer CustomerIdSource
      	{
            get { return this._customerIdSource; }
            set { this._customerIdSource = value; }
      	}
		private SalesPerson _salesPersonIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SalesPerson"/>.
		/// </summary>
		/// <value>The source SalesPerson for SalesPersonId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SalesPerson SalesPersonIdSource
      	{
            get { return this._salesPersonIdSource; }
            set { this._salesPersonIdSource = value; }
      	}
		private SalesTerritory _territoryIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SalesTerritory"/>.
		/// </summary>
		/// <value>The source SalesTerritory for TerritoryId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SalesTerritory TerritoryIdSource
      	{
            get { return this._territoryIdSource; }
            set { this._territoryIdSource = value; }
      	}
		private ShipMethod _shipMethodIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ShipMethod"/>.
		/// </summary>
		/// <value>The source ShipMethod for ShipMethodId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ShipMethod ShipMethodIdSource
      	{
            get { return this._shipMethodIdSource; }
            set { this._shipMethodIdSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region SalesOrderHeaderSalesReasonCollection
		
		private TList<SalesOrderHeaderSalesReason> _salesOrderHeaderSalesReasonSalesOrderId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _salesOrderHeaderSalesReasonSalesOrderId
		/// </summary>
		
		public TList<SalesOrderHeaderSalesReason> SalesOrderHeaderSalesReasonCollection
		{
			get
			{
				if (_salesOrderHeaderSalesReasonSalesOrderId == null)
				{
				_salesOrderHeaderSalesReasonSalesOrderId = new TList<SalesOrderHeaderSalesReason>();
				}
	
				return _salesOrderHeaderSalesReasonSalesOrderId;
			}
			set { _salesOrderHeaderSalesReasonSalesOrderId = value; }
		}
		
		#endregion

		#region SalesOrderDetailCollection
		
		private TList<SalesOrderDetail> _salesOrderDetailSalesOrderId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _salesOrderDetailSalesOrderId
		/// </summary>
		
		public TList<SalesOrderDetail> SalesOrderDetailCollection
		{
			get
			{
				if (_salesOrderDetailSalesOrderId == null)
				{
				_salesOrderDetailSalesOrderId = new TList<SalesOrderDetail>();
				}
	
				return _salesOrderDetailSalesOrderId;
			}
			set { _salesOrderDetailSalesOrderId = value; }
		}
		
		#endregion

		#region SalesReasonIdSalesReasonCollection_From_SalesOrderHeaderSalesReason
		
		private TList<SalesReason> salesReasonIdSalesReasonCollectionFromSalesOrderHeaderSalesReason;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table salesReasonIdSalesReasonCollectionFromSalesOrderHeaderSalesReason
		/// </summary>
		
		public TList<SalesReason> SalesReasonIdSalesReasonCollection_From_SalesOrderHeaderSalesReason
		{
			get
			{
				if (salesReasonIdSalesReasonCollectionFromSalesOrderHeaderSalesReason == null)
				{
				salesReasonIdSalesReasonCollectionFromSalesOrderHeaderSalesReason = new TList<SalesReason>();
				}
	
				return salesReasonIdSalesReasonCollectionFromSalesOrderHeaderSalesReason;
			}
			set { salesReasonIdSalesReasonCollectionFromSalesOrderHeaderSalesReason = value; }
		}
		
		#endregion 

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SalesOrderHeaderEntityData _tmp = new SalesOrderHeaderEntityData();
						
			_tmp.SalesOrderId = this.SalesOrderId;
			
			_tmp.RevisionNumber = this.RevisionNumber;
			_tmp.OrderDate = this.OrderDate;
			_tmp.DueDate = this.DueDate;
			_tmp.ShipDate = this.ShipDate;
			_tmp.Status = this.Status;
			_tmp.OnlineOrderFlag = this.OnlineOrderFlag;
			_tmp.SalesOrderNumber = this.SalesOrderNumber;
			_tmp.PurchaseOrderNumber = this.PurchaseOrderNumber;
			_tmp.AccountNumber = this.AccountNumber;
			_tmp.CustomerId = this.CustomerId;
			_tmp.ContactId = this.ContactId;
			_tmp.SalesPersonId = this.SalesPersonId;
			_tmp.TerritoryId = this.TerritoryId;
			_tmp.BillToAddressId = this.BillToAddressId;
			_tmp.ShipToAddressId = this.ShipToAddressId;
			_tmp.ShipMethodId = this.ShipMethodId;
			_tmp.CreditCardId = this.CreditCardId;
			_tmp.CreditCardApprovalCode = this.CreditCardApprovalCode;
			_tmp.CurrencyRateId = this.CurrencyRateId;
			_tmp.SubTotal = this.SubTotal;
			_tmp.TaxAmt = this.TaxAmt;
			_tmp.Freight = this.Freight;
			_tmp.TotalDue = this.TotalDue;
			_tmp.Comment = this.Comment;
			_tmp.Rowguid = this.Rowguid;
			_tmp.ModifiedDate = this.ModifiedDate;
			
			#region Source Parent Composite Entities
			if (this.BillToAddressIdSource != null)
				_tmp.BillToAddressIdSource = MakeCopyOf(this.BillToAddressIdSource) as Address;
			if (this.ShipToAddressIdSource != null)
				_tmp.ShipToAddressIdSource = MakeCopyOf(this.ShipToAddressIdSource) as Address;
			if (this.ContactIdSource != null)
				_tmp.ContactIdSource = MakeCopyOf(this.ContactIdSource) as Contact;
			if (this.CreditCardIdSource != null)
				_tmp.CreditCardIdSource = MakeCopyOf(this.CreditCardIdSource) as CreditCard;
			if (this.CurrencyRateIdSource != null)
				_tmp.CurrencyRateIdSource = MakeCopyOf(this.CurrencyRateIdSource) as CurrencyRate;
			if (this.CustomerIdSource != null)
				_tmp.CustomerIdSource = MakeCopyOf(this.CustomerIdSource) as Customer;
			if (this.SalesPersonIdSource != null)
				_tmp.SalesPersonIdSource = MakeCopyOf(this.SalesPersonIdSource) as SalesPerson;
			if (this.TerritoryIdSource != null)
				_tmp.TerritoryIdSource = MakeCopyOf(this.TerritoryIdSource) as SalesTerritory;
			if (this.ShipMethodIdSource != null)
				_tmp.ShipMethodIdSource = MakeCopyOf(this.ShipMethodIdSource) as ShipMethod;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._salesOrderHeaderSalesReasonSalesOrderId != null)
				_tmp.SalesOrderHeaderSalesReasonCollection = (TList<SalesOrderHeaderSalesReason>) MakeCopyOf(this.SalesOrderHeaderSalesReasonCollection); 
			if (this._salesOrderDetailSalesOrderId != null)
				_tmp.SalesOrderDetailCollection = (TList<SalesOrderDetail>) MakeCopyOf(this.SalesOrderDetailCollection); 
			if (this.salesReasonIdSalesReasonCollectionFromSalesOrderHeaderSalesReason != null)
				_tmp.SalesReasonIdSalesReasonCollection_From_SalesOrderHeaderSalesReason = (TList<SalesReason>) MakeCopyOf(this.SalesReasonIdSalesReasonCollection_From_SalesOrderHeaderSalesReason); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SalesOrderHeaderEntityData _tmp = new SalesOrderHeaderEntityData();
						
			_tmp.SalesOrderId = this.SalesOrderId;
			
			_tmp.RevisionNumber = this.RevisionNumber;
			_tmp.OrderDate = this.OrderDate;
			_tmp.DueDate = this.DueDate;
			_tmp.ShipDate = this.ShipDate;
			_tmp.Status = this.Status;
			_tmp.OnlineOrderFlag = this.OnlineOrderFlag;
			_tmp.SalesOrderNumber = this.SalesOrderNumber;
			_tmp.PurchaseOrderNumber = this.PurchaseOrderNumber;
			_tmp.AccountNumber = this.AccountNumber;
			_tmp.CustomerId = this.CustomerId;
			_tmp.ContactId = this.ContactId;
			_tmp.SalesPersonId = this.SalesPersonId;
			_tmp.TerritoryId = this.TerritoryId;
			_tmp.BillToAddressId = this.BillToAddressId;
			_tmp.ShipToAddressId = this.ShipToAddressId;
			_tmp.ShipMethodId = this.ShipMethodId;
			_tmp.CreditCardId = this.CreditCardId;
			_tmp.CreditCardApprovalCode = this.CreditCardApprovalCode;
			_tmp.CurrencyRateId = this.CurrencyRateId;
			_tmp.SubTotal = this.SubTotal;
			_tmp.TaxAmt = this.TaxAmt;
			_tmp.Freight = this.Freight;
			_tmp.TotalDue = this.TotalDue;
			_tmp.Comment = this.Comment;
			_tmp.Rowguid = this.Rowguid;
			_tmp.ModifiedDate = this.ModifiedDate;
			
			#region Source Parent Composite Entities
			if (this.BillToAddressIdSource != null && existingCopies.Contains(this.BillToAddressIdSource))
				_tmp.BillToAddressIdSource = existingCopies[this.BillToAddressIdSource] as Address;
			else
				_tmp.BillToAddressIdSource = MakeCopyOf(this.BillToAddressIdSource, existingCopies) as Address;
			if (this.ShipToAddressIdSource != null && existingCopies.Contains(this.ShipToAddressIdSource))
				_tmp.ShipToAddressIdSource = existingCopies[this.ShipToAddressIdSource] as Address;
			else
				_tmp.ShipToAddressIdSource = MakeCopyOf(this.ShipToAddressIdSource, existingCopies) as Address;
			if (this.ContactIdSource != null && existingCopies.Contains(this.ContactIdSource))
				_tmp.ContactIdSource = existingCopies[this.ContactIdSource] as Contact;
			else
				_tmp.ContactIdSource = MakeCopyOf(this.ContactIdSource, existingCopies) as Contact;
			if (this.CreditCardIdSource != null && existingCopies.Contains(this.CreditCardIdSource))
				_tmp.CreditCardIdSource = existingCopies[this.CreditCardIdSource] as CreditCard;
			else
				_tmp.CreditCardIdSource = MakeCopyOf(this.CreditCardIdSource, existingCopies) as CreditCard;
			if (this.CurrencyRateIdSource != null && existingCopies.Contains(this.CurrencyRateIdSource))
				_tmp.CurrencyRateIdSource = existingCopies[this.CurrencyRateIdSource] as CurrencyRate;
			else
				_tmp.CurrencyRateIdSource = MakeCopyOf(this.CurrencyRateIdSource, existingCopies) as CurrencyRate;
			if (this.CustomerIdSource != null && existingCopies.Contains(this.CustomerIdSource))
				_tmp.CustomerIdSource = existingCopies[this.CustomerIdSource] as Customer;
			else
				_tmp.CustomerIdSource = MakeCopyOf(this.CustomerIdSource, existingCopies) as Customer;
			if (this.SalesPersonIdSource != null && existingCopies.Contains(this.SalesPersonIdSource))
				_tmp.SalesPersonIdSource = existingCopies[this.SalesPersonIdSource] as SalesPerson;
			else
				_tmp.SalesPersonIdSource = MakeCopyOf(this.SalesPersonIdSource, existingCopies) as SalesPerson;
			if (this.TerritoryIdSource != null && existingCopies.Contains(this.TerritoryIdSource))
				_tmp.TerritoryIdSource = existingCopies[this.TerritoryIdSource] as SalesTerritory;
			else
				_tmp.TerritoryIdSource = MakeCopyOf(this.TerritoryIdSource, existingCopies) as SalesTerritory;
			if (this.ShipMethodIdSource != null && existingCopies.Contains(this.ShipMethodIdSource))
				_tmp.ShipMethodIdSource = existingCopies[this.ShipMethodIdSource] as ShipMethod;
			else
				_tmp.ShipMethodIdSource = MakeCopyOf(this.ShipMethodIdSource, existingCopies) as ShipMethod;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.SalesOrderHeaderSalesReasonCollection = (TList<SalesOrderHeaderSalesReason>) MakeCopyOf(this.SalesOrderHeaderSalesReasonCollection, existingCopies); 
			_tmp.SalesOrderDetailCollection = (TList<SalesOrderDetail>) MakeCopyOf(this.SalesOrderDetailCollection, existingCopies); 
			_tmp.SalesReasonIdSalesReasonCollection_From_SalesOrderHeaderSalesReason = (TList<SalesReason>) MakeCopyOf(this.SalesReasonIdSalesReasonCollection_From_SalesOrderHeaderSalesReason, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SalesOrderHeaderColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SalesOrderHeaderColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SalesOrderHeaderColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SalesOrderHeaderColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SalesOrderHeaderColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SalesOrderHeaderColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SalesOrderHeaderEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SalesOrderHeaderEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SalesOrderHeaderColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SalesOrderHeaderColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SalesOrderHeaderEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SalesOrderHeaderEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SalesOrderHeaderEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SalesOrderHeader"/> object.
	/// </remarks>
	public class SalesOrderHeaderEventArgs : System.EventArgs
	{
		private SalesOrderHeaderColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SalesOrderHeaderEventArgs class.
		///</summary>
		public SalesOrderHeaderEventArgs(SalesOrderHeaderColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SalesOrderHeaderEventArgs class.
		///</summary>
		public SalesOrderHeaderEventArgs(SalesOrderHeaderColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SalesOrderHeaderColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SalesOrderHeaderColumn" />
		public SalesOrderHeaderColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SalesOrderHeader related events.
	///</summary>
	public delegate void SalesOrderHeaderEventHandler(object sender, SalesOrderHeaderEventArgs e);
	
	#region SalesOrderHeaderComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SalesOrderHeaderComparer : System.Collections.Generic.IComparer<SalesOrderHeader>
	{
		SalesOrderHeaderColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SalesOrderHeaderComparer"/> class.
        /// </summary>
		public SalesOrderHeaderComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SalesOrderHeaderComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SalesOrderHeaderComparer(SalesOrderHeaderColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="SalesOrderHeader"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="SalesOrderHeader"/> to compare.</param>
        /// <param name="b">The second <c>SalesOrderHeader</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SalesOrderHeader a, SalesOrderHeader b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SalesOrderHeader entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SalesOrderHeader a, SalesOrderHeader b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SalesOrderHeaderColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SalesOrderHeaderKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SalesOrderHeader"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SalesOrderHeaderKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SalesOrderHeaderKey class.
		/// </summary>
		public SalesOrderHeaderKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SalesOrderHeaderKey class.
		/// </summary>
		public SalesOrderHeaderKey(SalesOrderHeaderBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SalesOrderId = entity.SalesOrderId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SalesOrderHeaderKey class.
		/// </summary>
		public SalesOrderHeaderKey(System.Int32 _salesOrderId)
		{
			#region Init Properties

			this.SalesOrderId = _salesOrderId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SalesOrderHeaderBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SalesOrderHeaderBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SalesOrderId property
		private System.Int32 _salesOrderId;
		
		/// <summary>
		/// Gets or sets the SalesOrderId property.
		/// </summary>
		public System.Int32 SalesOrderId
		{
			get { return _salesOrderId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SalesOrderId = value;
				
				_salesOrderId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SalesOrderId = ( values["SalesOrderId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["SalesOrderId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SalesOrderId", SalesOrderId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SalesOrderId: {0}{1}",
								SalesOrderId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SalesOrderHeaderColumn Enum
	
	/// <summary>
	/// Enumerate the SalesOrderHeader columns.
	/// </summary>
	[Serializable]
	public enum SalesOrderHeaderColumn : int
	{
		/// <summary>
		/// SalesOrderId : Primary key.
		/// </summary>
		[EnumTextValue("SalesOrderID")]
		[ColumnEnum("SalesOrderID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		SalesOrderId = 1,
		/// <summary>
		/// RevisionNumber : Incremental number to track changes to the sales order over time.
		/// </summary>
		[EnumTextValue("RevisionNumber")]
		[ColumnEnum("RevisionNumber", typeof(System.Byte), System.Data.DbType.Byte, false, false, false)]
		RevisionNumber = 2,
		/// <summary>
		/// OrderDate : Dates the sales order was created.
		/// </summary>
		[EnumTextValue("OrderDate")]
		[ColumnEnum("OrderDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		OrderDate = 3,
		/// <summary>
		/// DueDate : Date the order is due to the customer.
		/// </summary>
		[EnumTextValue("DueDate")]
		[ColumnEnum("DueDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		DueDate = 4,
		/// <summary>
		/// ShipDate : Date the order was shipped to the customer.
		/// </summary>
		[EnumTextValue("ShipDate")]
		[ColumnEnum("ShipDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ShipDate = 5,
		/// <summary>
		/// Status : Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(System.Byte), System.Data.DbType.Byte, false, false, false)]
		Status = 6,
		/// <summary>
		/// OnlineOrderFlag : 0 = Order placed by sales person. 1 = Order placed online by customer.
		/// </summary>
		[EnumTextValue("OnlineOrderFlag")]
		[ColumnEnum("OnlineOrderFlag", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		OnlineOrderFlag = 7,
		/// <summary>
		/// SalesOrderNumber : Unique sales order identification number.
		/// </summary>
		[EnumTextValue("SalesOrderNumber")]
		[ColumnEnum("SalesOrderNumber", typeof(System.String), System.Data.DbType.String, false, false, false, 25)]
		SalesOrderNumber = 8,
		/// <summary>
		/// PurchaseOrderNumber : Customer purchase order number reference. 
		/// </summary>
		[EnumTextValue("PurchaseOrderNumber")]
		[ColumnEnum("PurchaseOrderNumber", typeof(System.String), System.Data.DbType.String, false, false, true, 25)]
		PurchaseOrderNumber = 9,
		/// <summary>
		/// AccountNumber : Financial accounting number reference.
		/// </summary>
		[EnumTextValue("AccountNumber")]
		[ColumnEnum("AccountNumber", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		AccountNumber = 10,
		/// <summary>
		/// CustomerId : Customer identification number. Foreign key to Customer.CustomerID.
		/// </summary>
		[EnumTextValue("CustomerID")]
		[ColumnEnum("CustomerID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CustomerId = 11,
		/// <summary>
		/// ContactId : Customer contact identification number. Foreign key to Contact.ContactID.
		/// </summary>
		[EnumTextValue("ContactID")]
		[ColumnEnum("ContactID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ContactId = 12,
		/// <summary>
		/// SalesPersonId : Sales person who created the sales order. Foreign key to SalesPerson.SalePersonID.
		/// </summary>
		[EnumTextValue("SalesPersonID")]
		[ColumnEnum("SalesPersonID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SalesPersonId = 13,
		/// <summary>
		/// TerritoryId : Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.
		/// </summary>
		[EnumTextValue("TerritoryID")]
		[ColumnEnum("TerritoryID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TerritoryId = 14,
		/// <summary>
		/// BillToAddressId : Customer billing address. Foreign key to Address.AddressID.
		/// </summary>
		[EnumTextValue("BillToAddressID")]
		[ColumnEnum("BillToAddressID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		BillToAddressId = 15,
		/// <summary>
		/// ShipToAddressId : Customer shipping address. Foreign key to Address.AddressID.
		/// </summary>
		[EnumTextValue("ShipToAddressID")]
		[ColumnEnum("ShipToAddressID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ShipToAddressId = 16,
		/// <summary>
		/// ShipMethodId : Shipping method. Foreign key to ShipMethod.ShipMethodID.
		/// </summary>
		[EnumTextValue("ShipMethodID")]
		[ColumnEnum("ShipMethodID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ShipMethodId = 17,
		/// <summary>
		/// CreditCardId : Credit card identification number. Foreign key to CreditCard.CreditCardID.
		/// </summary>
		[EnumTextValue("CreditCardID")]
		[ColumnEnum("CreditCardID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CreditCardId = 18,
		/// <summary>
		/// CreditCardApprovalCode : Approval code provided by the credit card company.
		/// </summary>
		[EnumTextValue("CreditCardApprovalCode")]
		[ColumnEnum("CreditCardApprovalCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 15)]
		CreditCardApprovalCode = 19,
		/// <summary>
		/// CurrencyRateId : Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.
		/// </summary>
		[EnumTextValue("CurrencyRateID")]
		[ColumnEnum("CurrencyRateID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CurrencyRateId = 20,
		/// <summary>
		/// SubTotal : Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.
		/// </summary>
		[EnumTextValue("SubTotal")]
		[ColumnEnum("SubTotal", typeof(System.Decimal), System.Data.DbType.Currency, false, false, false)]
		SubTotal = 21,
		/// <summary>
		/// TaxAmt : Tax amount.
		/// </summary>
		[EnumTextValue("TaxAmt")]
		[ColumnEnum("TaxAmt", typeof(System.Decimal), System.Data.DbType.Currency, false, false, false)]
		TaxAmt = 22,
		/// <summary>
		/// Freight : Shipping cost.
		/// </summary>
		[EnumTextValue("Freight")]
		[ColumnEnum("Freight", typeof(System.Decimal), System.Data.DbType.Currency, false, false, false)]
		Freight = 23,
		/// <summary>
		/// TotalDue : Total due from customer. Computed as Subtotal + TaxAmt + Freight.
		/// </summary>
		[EnumTextValue("TotalDue")]
		[ColumnEnum("TotalDue", typeof(System.Decimal), System.Data.DbType.Currency, false, false, false)]
		TotalDue = 24,
		/// <summary>
		/// Comment : Sales representative comments.
		/// </summary>
		[EnumTextValue("Comment")]
		[ColumnEnum("Comment", typeof(System.String), System.Data.DbType.String, false, false, true, 128)]
		Comment = 25,
		/// <summary>
		/// Rowguid : ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[EnumTextValue("rowguid")]
		[ColumnEnum("rowguid", typeof(System.Guid), System.Data.DbType.Guid, false, true, false)]
		Rowguid = 26,
		/// <summary>
		/// ModifiedDate : Date and time the record was last updated.
		/// </summary>
		[EnumTextValue("ModifiedDate")]
		[ColumnEnum("ModifiedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ModifiedDate = 27
	}//End enum

	#endregion SalesOrderHeaderColumn Enum

} // end namespace
