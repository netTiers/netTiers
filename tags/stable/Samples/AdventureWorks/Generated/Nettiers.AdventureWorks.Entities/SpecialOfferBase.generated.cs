
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SpecialOffer.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Nettiers.AdventureWorks.Entities.Validation;
#endregion

namespace Nettiers.AdventureWorks.Entities
{
	///<summary>
	/// Sale discounts lookup table.	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SpecialOfferBase : EntityBase, ISpecialOffer, IEntityId<SpecialOfferKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SpecialOfferEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SpecialOfferEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SpecialOfferEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SpecialOffer> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SpecialOfferEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SpecialOfferEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SpecialOfferBase"/> instance.
		///</summary>
		public SpecialOfferBase()
		{
			this.entityData = new SpecialOfferEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SpecialOfferBase"/> instance.
		///</summary>
		///<param name="_description">Discount description.</param>
		///<param name="_discountPct">Discount precentage.</param>
		///<param name="_type">Discount type category.</param>
		///<param name="_category">Group the discount applies to such as Reseller or Customer.</param>
		///<param name="_startDate">Discount start date.</param>
		///<param name="_endDate">Discount end date.</param>
		///<param name="_minQty">Minimum discount percent allowed.</param>
		///<param name="_maxQty">Maximum discount percent allowed.</param>
		///<param name="_modifiedDate">Date and time the record was last updated.</param>
		public SpecialOfferBase(System.String _description, System.Decimal _discountPct, System.String _type, 
			System.String _category, System.DateTime _startDate, System.DateTime _endDate, System.Int32 _minQty, 
			System.Int32? _maxQty, System.DateTime _modifiedDate)
		{
			this.entityData = new SpecialOfferEntityData();
			this.backupData = null;

			this.Description = _description;
			this.DiscountPct = _discountPct;
			this.Type = _type;
			this.Category = _category;
			this.StartDate = _startDate;
			this.EndDate = _endDate;
			this.MinQty = _minQty;
			this.MaxQty = _maxQty;
			this.ModifiedDate = _modifiedDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SpecialOffer"/> instance.
		///</summary>
		///<param name="_description">Discount description.</param>
		///<param name="_discountPct">Discount precentage.</param>
		///<param name="_type">Discount type category.</param>
		///<param name="_category">Group the discount applies to such as Reseller or Customer.</param>
		///<param name="_startDate">Discount start date.</param>
		///<param name="_endDate">Discount end date.</param>
		///<param name="_minQty">Minimum discount percent allowed.</param>
		///<param name="_maxQty">Maximum discount percent allowed.</param>
		///<param name="_modifiedDate">Date and time the record was last updated.</param>
		public static SpecialOffer CreateSpecialOffer(System.String _description, System.Decimal _discountPct, System.String _type, 
			System.String _category, System.DateTime _startDate, System.DateTime _endDate, System.Int32 _minQty, 
			System.Int32? _maxQty, System.DateTime _modifiedDate)
		{
			SpecialOffer newSpecialOffer = new SpecialOffer();
			newSpecialOffer.Description = _description;
			newSpecialOffer.DiscountPct = _discountPct;
			newSpecialOffer.Type = _type;
			newSpecialOffer.Category = _category;
			newSpecialOffer.StartDate = _startDate;
			newSpecialOffer.EndDate = _endDate;
			newSpecialOffer.MinQty = _minQty;
			newSpecialOffer.MaxQty = _maxQty;
			newSpecialOffer.ModifiedDate = _modifiedDate;
			return newSpecialOffer;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SpecialOfferId property. 
		///		Primary key for SpecialOffer records.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@"Primary key for SpecialOffer records."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 SpecialOfferId
		{
			get
			{
				return this.entityData.SpecialOfferId; 
			}
			
			set
			{
				if (this.entityData.SpecialOfferId == value)
					return;
				
                OnPropertyChanging("SpecialOfferId");                    
				OnColumnChanging(SpecialOfferColumn.SpecialOfferId, this.entityData.SpecialOfferId);
				this.entityData.SpecialOfferId = value;
				this.EntityId.SpecialOfferId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpecialOfferColumn.SpecialOfferId, this.entityData.SpecialOfferId);
				OnPropertyChanged("SpecialOfferId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Description property. 
		///		Discount description.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Discount description."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String Description
		{
			get
			{
				return this.entityData.Description; 
			}
			
			set
			{
				if (this.entityData.Description == value)
					return;
				
                OnPropertyChanging("Description");                    
				OnColumnChanging(SpecialOfferColumn.Description, this.entityData.Description);
				this.entityData.Description = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpecialOfferColumn.Description, this.entityData.Description);
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DiscountPct property. 
		///		Discount precentage.
		/// </summary>
		/// <value>This type is smallmoney.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Discount precentage."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal DiscountPct
		{
			get
			{
				return this.entityData.DiscountPct; 
			}
			
			set
			{
				if (this.entityData.DiscountPct == value)
					return;
				
                OnPropertyChanging("DiscountPct");                    
				OnColumnChanging(SpecialOfferColumn.DiscountPct, this.entityData.DiscountPct);
				this.entityData.DiscountPct = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpecialOfferColumn.DiscountPct, this.entityData.DiscountPct);
				OnPropertyChanged("DiscountPct");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Type property. 
		///		Discount type category.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Discount type category."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String Type
		{
			get
			{
				return this.entityData.Type; 
			}
			
			set
			{
				if (this.entityData.Type == value)
					return;
				
                OnPropertyChanging("Type");                    
				OnColumnChanging(SpecialOfferColumn.Type, this.entityData.Type);
				this.entityData.Type = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpecialOfferColumn.Type, this.entityData.Type);
				OnPropertyChanged("Type");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Category property. 
		///		Group the discount applies to such as Reseller or Customer.
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Group the discount applies to such as Reseller or Customer."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String Category
		{
			get
			{
				return this.entityData.Category; 
			}
			
			set
			{
				if (this.entityData.Category == value)
					return;
				
                OnPropertyChanging("Category");                    
				OnColumnChanging(SpecialOfferColumn.Category, this.entityData.Category);
				this.entityData.Category = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpecialOfferColumn.Category, this.entityData.Category);
				OnPropertyChanged("Category");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StartDate property. 
		///		Discount start date.
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Discount start date."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime StartDate
		{
			get
			{
				return this.entityData.StartDate; 
			}
			
			set
			{
				if (this.entityData.StartDate == value)
					return;
				
                OnPropertyChanging("StartDate");                    
				OnColumnChanging(SpecialOfferColumn.StartDate, this.entityData.StartDate);
				this.entityData.StartDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpecialOfferColumn.StartDate, this.entityData.StartDate);
				OnPropertyChanged("StartDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EndDate property. 
		///		Discount end date.
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Discount end date."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime EndDate
		{
			get
			{
				return this.entityData.EndDate; 
			}
			
			set
			{
				if (this.entityData.EndDate == value)
					return;
				
                OnPropertyChanging("EndDate");                    
				OnColumnChanging(SpecialOfferColumn.EndDate, this.entityData.EndDate);
				this.entityData.EndDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpecialOfferColumn.EndDate, this.entityData.EndDate);
				OnPropertyChanged("EndDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MinQty property. 
		///		Minimum discount percent allowed.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Minimum discount percent allowed."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 MinQty
		{
			get
			{
				return this.entityData.MinQty; 
			}
			
			set
			{
				if (this.entityData.MinQty == value)
					return;
				
                OnPropertyChanging("MinQty");                    
				OnColumnChanging(SpecialOfferColumn.MinQty, this.entityData.MinQty);
				this.entityData.MinQty = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpecialOfferColumn.MinQty, this.entityData.MinQty);
				OnPropertyChanged("MinQty");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaxQty property. 
		///		Maximum discount percent allowed.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaxQtyNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Maximum discount percent allowed."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaxQty
		{
			get
			{
				return this.entityData.MaxQty; 
			}
			
			set
			{
				if (this.entityData.MaxQty == value)
					return;
				
                OnPropertyChanging("MaxQty");                    
				OnColumnChanging(SpecialOfferColumn.MaxQty, this.entityData.MaxQty);
				this.entityData.MaxQty = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpecialOfferColumn.MaxQty, this.entityData.MaxQty);
				OnPropertyChanged("MaxQty");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Rowguid property. 
		///		ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, true, false)]
		public virtual System.Guid Rowguid
		{
			get
			{
				return this.entityData.Rowguid; 
			}
			
			set
			{
				if (this.entityData.Rowguid == value)
					return;
				
                OnPropertyChanging("Rowguid");                    
				OnColumnChanging(SpecialOfferColumn.Rowguid, this.entityData.Rowguid);
				this.entityData.Rowguid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpecialOfferColumn.Rowguid, this.entityData.Rowguid);
				OnPropertyChanged("Rowguid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModifiedDate property. 
		///		Date and time the record was last updated.
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Date and time the record was last updated."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ModifiedDate
		{
			get
			{
				return this.entityData.ModifiedDate; 
			}
			
			set
			{
				if (this.entityData.ModifiedDate == value)
					return;
				
                OnPropertyChanging("ModifiedDate");                    
				OnColumnChanging(SpecialOfferColumn.ModifiedDate, this.entityData.ModifiedDate);
				this.entityData.ModifiedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpecialOfferColumn.ModifiedDate, this.entityData.ModifiedDate);
				OnPropertyChanged("ModifiedDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of SpecialOfferProduct objects
		///	which are related to this object through the relation FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SpecialOfferProduct> SpecialOfferProductCollection
		{
			get { return entityData.SpecialOfferProductCollection; }
			set { entityData.SpecialOfferProductCollection = value; }	
		}

		/// <summary>
		///	Holds a collection of ProductFromSpecialOfferProduct objects
		///	which are related to this object through the junction table SpecialOfferProduct
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Product> ProductIdProductCollection_From_SpecialOfferProduct
		{
			get { return entityData.ProductIdProductCollection_From_SpecialOfferProduct; }
			set { entityData.ProductIdProductCollection_From_SpecialOfferProduct = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Description", "Description"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Description", "Description", 255));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Type", "Type"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Type", "Type", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Category", "Category"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Category", "Category", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SpecialOffer"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SpecialOfferID", "Description", "DiscountPct", "Type", "Category", "StartDate", "EndDate", "MinQty", "MaxQty", "rowguid", "ModifiedDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SpecialOfferEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SpecialOffer) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SpecialOffer>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SpecialOffer);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SpecialOffer Entity 
		///</summary>
		protected virtual SpecialOffer Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SpecialOffer copy = new SpecialOffer();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SpecialOfferId = this.SpecialOfferId;
				copy.Description = this.Description;
				copy.DiscountPct = this.DiscountPct;
				copy.Type = this.Type;
				copy.Category = this.Category;
				copy.StartDate = this.StartDate;
				copy.EndDate = this.EndDate;
				copy.MinQty = this.MinQty;
				copy.MaxQty = this.MaxQty;
				copy.Rowguid = this.Rowguid;
				copy.ModifiedDate = this.ModifiedDate;
			
		
			//deep copy nested objects
			copy.SpecialOfferProductCollection = (TList<SpecialOfferProduct>) MakeCopyOf(this.SpecialOfferProductCollection, existingCopies); 
			copy.ProductIdProductCollection_From_SpecialOfferProduct = (TList<Product>) MakeCopyOf(this.ProductIdProductCollection_From_SpecialOfferProduct, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SpecialOffer Entity 
		///</summary>
		public virtual SpecialOffer Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SpecialOffer Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SpecialOffer DeepCopy()
		{
			return EntityHelper.Clone<SpecialOffer>(this as SpecialOffer);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SpecialOfferEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SpecialOfferEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SpecialOfferEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SpecialOfferColumn column)
		{
			switch(column)
			{
					case SpecialOfferColumn.SpecialOfferId:
					return entityData.SpecialOfferId != _originalData.SpecialOfferId;
					case SpecialOfferColumn.Description:
					return entityData.Description != _originalData.Description;
					case SpecialOfferColumn.DiscountPct:
					return entityData.DiscountPct != _originalData.DiscountPct;
					case SpecialOfferColumn.Type:
					return entityData.Type != _originalData.Type;
					case SpecialOfferColumn.Category:
					return entityData.Category != _originalData.Category;
					case SpecialOfferColumn.StartDate:
					return entityData.StartDate != _originalData.StartDate;
					case SpecialOfferColumn.EndDate:
					return entityData.EndDate != _originalData.EndDate;
					case SpecialOfferColumn.MinQty:
					return entityData.MinQty != _originalData.MinQty;
					case SpecialOfferColumn.MaxQty:
					return entityData.MaxQty != _originalData.MaxQty;
					case SpecialOfferColumn.Rowguid:
					return entityData.Rowguid != _originalData.Rowguid;
					case SpecialOfferColumn.ModifiedDate:
					return entityData.ModifiedDate != _originalData.ModifiedDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SpecialOfferColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SpecialOfferId != _originalData.SpecialOfferId;
			result = result || entityData.Description != _originalData.Description;
			result = result || entityData.DiscountPct != _originalData.DiscountPct;
			result = result || entityData.Type != _originalData.Type;
			result = result || entityData.Category != _originalData.Category;
			result = result || entityData.StartDate != _originalData.StartDate;
			result = result || entityData.EndDate != _originalData.EndDate;
			result = result || entityData.MinQty != _originalData.MinQty;
			result = result || entityData.MaxQty != _originalData.MaxQty;
			result = result || entityData.Rowguid != _originalData.Rowguid;
			result = result || entityData.ModifiedDate != _originalData.ModifiedDate;
			return result;
		}	
		
		///<summary>
		///  Returns a SpecialOffer Entity with the original data.
		///</summary>
		public SpecialOffer GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSpecialOffer(
				_originalData.Description,
				_originalData.DiscountPct,
				_originalData.Type,
				_originalData.Category,
				_originalData.StartDate,
				_originalData.EndDate,
				_originalData.MinQty,
				_originalData.MaxQty,
				_originalData.ModifiedDate
				);
				
			return (SpecialOffer)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SpecialOfferBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SpecialOfferBase)
				return ValueEquals(this, (SpecialOfferBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SpecialOfferBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SpecialOfferId.GetHashCode() ^ 
					this.Description.GetHashCode() ^ 
					this.DiscountPct.GetHashCode() ^ 
					this.Type.GetHashCode() ^ 
					this.Category.GetHashCode() ^ 
					this.StartDate.GetHashCode() ^ 
					this.EndDate.GetHashCode() ^ 
					this.MinQty.GetHashCode() ^ 
					((this.MaxQty == null) ? string.Empty : this.MaxQty.ToString()).GetHashCode() ^ 
					this.Rowguid.GetHashCode() ^ 
					this.ModifiedDate.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SpecialOfferBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SpecialOfferBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SpecialOfferBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SpecialOfferBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SpecialOfferBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SpecialOfferBase Object1, SpecialOfferBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SpecialOfferId != Object2.SpecialOfferId)
				equal = false;
			if (Object1.Description != Object2.Description)
				equal = false;
			if (Object1.DiscountPct != Object2.DiscountPct)
				equal = false;
			if (Object1.Type != Object2.Type)
				equal = false;
			if (Object1.Category != Object2.Category)
				equal = false;
			if (Object1.StartDate != Object2.StartDate)
				equal = false;
			if (Object1.EndDate != Object2.EndDate)
				equal = false;
			if (Object1.MinQty != Object2.MinQty)
				equal = false;
			if ( Object1.MaxQty != null && Object2.MaxQty != null )
			{
				if (Object1.MaxQty != Object2.MaxQty)
					equal = false;
			}
			else if (Object1.MaxQty == null ^ Object2.MaxQty == null )
			{
				equal = false;
			}
			if (Object1.Rowguid != Object2.Rowguid)
				equal = false;
			if (Object1.ModifiedDate != Object2.ModifiedDate)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SpecialOfferBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SpecialOfferComparer GetComparer()
        {
            return new SpecialOfferComparer();
        }
        */

        // Comparer delegates back to SpecialOffer
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SpecialOffer rhs, SpecialOfferColumn which)
        {
            switch (which)
            {
            	
            	
            	case SpecialOfferColumn.SpecialOfferId:
            		return this.SpecialOfferId.CompareTo(rhs.SpecialOfferId);
            		
            		                 
            	
            	
            	case SpecialOfferColumn.Description:
            		return this.Description.CompareTo(rhs.Description);
            		
            		                 
            	
            	
            	case SpecialOfferColumn.DiscountPct:
            		return this.DiscountPct.CompareTo(rhs.DiscountPct);
            		
            		                 
            	
            	
            	case SpecialOfferColumn.Type:
            		return this.Type.CompareTo(rhs.Type);
            		
            		                 
            	
            	
            	case SpecialOfferColumn.Category:
            		return this.Category.CompareTo(rhs.Category);
            		
            		                 
            	
            	
            	case SpecialOfferColumn.StartDate:
            		return this.StartDate.CompareTo(rhs.StartDate);
            		
            		                 
            	
            	
            	case SpecialOfferColumn.EndDate:
            		return this.EndDate.CompareTo(rhs.EndDate);
            		
            		                 
            	
            	
            	case SpecialOfferColumn.MinQty:
            		return this.MinQty.CompareTo(rhs.MinQty);
            		
            		                 
            	
            	
            	case SpecialOfferColumn.MaxQty:
            		return this.MaxQty.Value.CompareTo(rhs.MaxQty.Value);
            		
            		                 
            	
            	
            	case SpecialOfferColumn.Rowguid:
            		return this.Rowguid.CompareTo(rhs.Rowguid);
            		
            		                 
            	
            	
            	case SpecialOfferColumn.ModifiedDate:
            		return this.ModifiedDate.CompareTo(rhs.ModifiedDate);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SpecialOfferKey> Members
		
		// member variable for the EntityId property
		private SpecialOfferKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SpecialOfferKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SpecialOfferKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SpecialOffer")
					.Append("|").Append( this.SpecialOfferId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- SpecialOfferId: {0}{11}- Description: {1}{11}- DiscountPct: {2}{11}- Type: {3}{11}- Category: {4}{11}- StartDate: {5}{11}- EndDate: {6}{11}- MinQty: {7}{11}- MaxQty: {8}{11}- Rowguid: {9}{11}- ModifiedDate: {10}{11}{13}", 
				this.SpecialOfferId,
				this.Description,
				this.DiscountPct,
				this.Type,
				this.Category,
				this.StartDate,
				this.EndDate,
				this.MinQty,
				(this.MaxQty == null) ? string.Empty : this.MaxQty.ToString(),
				this.Rowguid,
				this.ModifiedDate,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SpecialOffer' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SpecialOfferEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SpecialOfferID : Primary key for SpecialOffer records.
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SpecialOffer"</remarks>
		public System.Int32 SpecialOfferId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// Description : Discount description.
		/// </summary>
		public System.String Description = string.Empty;
		
		/// <summary>
		/// DiscountPct : Discount precentage.
		/// </summary>
		public System.Decimal DiscountPct = 0;
		
		/// <summary>
		/// Type : Discount type category.
		/// </summary>
		public System.String Type = string.Empty;
		
		/// <summary>
		/// Category : Group the discount applies to such as Reseller or Customer.
		/// </summary>
		public System.String Category = string.Empty;
		
		/// <summary>
		/// StartDate : Discount start date.
		/// </summary>
		public System.DateTime StartDate = DateTime.MinValue;
		
		/// <summary>
		/// EndDate : Discount end date.
		/// </summary>
		public System.DateTime EndDate = DateTime.MinValue;
		
		/// <summary>
		/// MinQty : Minimum discount percent allowed.
		/// </summary>
		public System.Int32 MinQty = (int)0;
		
		/// <summary>
		/// MaxQty : Maximum discount percent allowed.
		/// </summary>
		public System.Int32? MaxQty = null;
		
		/// <summary>
		/// rowguid : ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		public System.Guid Rowguid = Guid.Empty;
		
		/// <summary>
		/// ModifiedDate : Date and time the record was last updated.
		/// </summary>
		public System.DateTime ModifiedDate = DateTime.MinValue;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region SpecialOfferProductCollection
		
		private TList<SpecialOfferProduct> _specialOfferProductSpecialOfferId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _specialOfferProductSpecialOfferId
		/// </summary>
		
		public TList<SpecialOfferProduct> SpecialOfferProductCollection
		{
			get
			{
				if (_specialOfferProductSpecialOfferId == null)
				{
				_specialOfferProductSpecialOfferId = new TList<SpecialOfferProduct>();
				}
	
				return _specialOfferProductSpecialOfferId;
			}
			set { _specialOfferProductSpecialOfferId = value; }
		}
		
		#endregion

		#region ProductIdProductCollection_From_SpecialOfferProduct
		
		private TList<Product> productIdProductCollectionFromSpecialOfferProduct;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table productIdProductCollectionFromSpecialOfferProduct
		/// </summary>
		
		public TList<Product> ProductIdProductCollection_From_SpecialOfferProduct
		{
			get
			{
				if (productIdProductCollectionFromSpecialOfferProduct == null)
				{
				productIdProductCollectionFromSpecialOfferProduct = new TList<Product>();
				}
	
				return productIdProductCollectionFromSpecialOfferProduct;
			}
			set { productIdProductCollectionFromSpecialOfferProduct = value; }
		}
		
		#endregion 

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SpecialOfferEntityData _tmp = new SpecialOfferEntityData();
						
			_tmp.SpecialOfferId = this.SpecialOfferId;
			
			_tmp.Description = this.Description;
			_tmp.DiscountPct = this.DiscountPct;
			_tmp.Type = this.Type;
			_tmp.Category = this.Category;
			_tmp.StartDate = this.StartDate;
			_tmp.EndDate = this.EndDate;
			_tmp.MinQty = this.MinQty;
			_tmp.MaxQty = this.MaxQty;
			_tmp.Rowguid = this.Rowguid;
			_tmp.ModifiedDate = this.ModifiedDate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._specialOfferProductSpecialOfferId != null)
				_tmp.SpecialOfferProductCollection = (TList<SpecialOfferProduct>) MakeCopyOf(this.SpecialOfferProductCollection); 
			if (this.productIdProductCollectionFromSpecialOfferProduct != null)
				_tmp.ProductIdProductCollection_From_SpecialOfferProduct = (TList<Product>) MakeCopyOf(this.ProductIdProductCollection_From_SpecialOfferProduct); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SpecialOfferEntityData _tmp = new SpecialOfferEntityData();
						
			_tmp.SpecialOfferId = this.SpecialOfferId;
			
			_tmp.Description = this.Description;
			_tmp.DiscountPct = this.DiscountPct;
			_tmp.Type = this.Type;
			_tmp.Category = this.Category;
			_tmp.StartDate = this.StartDate;
			_tmp.EndDate = this.EndDate;
			_tmp.MinQty = this.MinQty;
			_tmp.MaxQty = this.MaxQty;
			_tmp.Rowguid = this.Rowguid;
			_tmp.ModifiedDate = this.ModifiedDate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.SpecialOfferProductCollection = (TList<SpecialOfferProduct>) MakeCopyOf(this.SpecialOfferProductCollection, existingCopies); 
			_tmp.ProductIdProductCollection_From_SpecialOfferProduct = (TList<Product>) MakeCopyOf(this.ProductIdProductCollection_From_SpecialOfferProduct, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SpecialOfferColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SpecialOfferColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SpecialOfferColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SpecialOfferColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SpecialOfferColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SpecialOfferColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SpecialOfferEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SpecialOfferEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SpecialOfferColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SpecialOfferColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SpecialOfferEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SpecialOfferEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SpecialOfferEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SpecialOffer"/> object.
	/// </remarks>
	public class SpecialOfferEventArgs : System.EventArgs
	{
		private SpecialOfferColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SpecialOfferEventArgs class.
		///</summary>
		public SpecialOfferEventArgs(SpecialOfferColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SpecialOfferEventArgs class.
		///</summary>
		public SpecialOfferEventArgs(SpecialOfferColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SpecialOfferColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SpecialOfferColumn" />
		public SpecialOfferColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SpecialOffer related events.
	///</summary>
	public delegate void SpecialOfferEventHandler(object sender, SpecialOfferEventArgs e);
	
	#region SpecialOfferComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SpecialOfferComparer : System.Collections.Generic.IComparer<SpecialOffer>
	{
		SpecialOfferColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SpecialOfferComparer"/> class.
        /// </summary>
		public SpecialOfferComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SpecialOfferComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SpecialOfferComparer(SpecialOfferColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="SpecialOffer"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="SpecialOffer"/> to compare.</param>
        /// <param name="b">The second <c>SpecialOffer</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SpecialOffer a, SpecialOffer b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SpecialOffer entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SpecialOffer a, SpecialOffer b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SpecialOfferColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SpecialOfferKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SpecialOffer"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SpecialOfferKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SpecialOfferKey class.
		/// </summary>
		public SpecialOfferKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SpecialOfferKey class.
		/// </summary>
		public SpecialOfferKey(SpecialOfferBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SpecialOfferId = entity.SpecialOfferId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SpecialOfferKey class.
		/// </summary>
		public SpecialOfferKey(System.Int32 _specialOfferId)
		{
			#region Init Properties

			this.SpecialOfferId = _specialOfferId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SpecialOfferBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SpecialOfferBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SpecialOfferId property
		private System.Int32 _specialOfferId;
		
		/// <summary>
		/// Gets or sets the SpecialOfferId property.
		/// </summary>
		public System.Int32 SpecialOfferId
		{
			get { return _specialOfferId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SpecialOfferId = value;
				
				_specialOfferId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SpecialOfferId = ( values["SpecialOfferId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["SpecialOfferId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SpecialOfferId", SpecialOfferId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SpecialOfferId: {0}{1}",
								SpecialOfferId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SpecialOfferColumn Enum
	
	/// <summary>
	/// Enumerate the SpecialOffer columns.
	/// </summary>
	[Serializable]
	public enum SpecialOfferColumn : int
	{
		/// <summary>
		/// SpecialOfferId : Primary key for SpecialOffer records.
		/// </summary>
		[EnumTextValue("SpecialOfferID")]
		[ColumnEnum("SpecialOfferID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		SpecialOfferId = 1,
		/// <summary>
		/// Description : Discount description.
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.String, false, false, false, 255)]
		Description = 2,
		/// <summary>
		/// DiscountPct : Discount precentage.
		/// </summary>
		[EnumTextValue("DiscountPct")]
		[ColumnEnum("DiscountPct", typeof(System.Decimal), System.Data.DbType.Currency, false, false, false)]
		DiscountPct = 3,
		/// <summary>
		/// Type : Discount type category.
		/// </summary>
		[EnumTextValue("Type")]
		[ColumnEnum("Type", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Type = 4,
		/// <summary>
		/// Category : Group the discount applies to such as Reseller or Customer.
		/// </summary>
		[EnumTextValue("Category")]
		[ColumnEnum("Category", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Category = 5,
		/// <summary>
		/// StartDate : Discount start date.
		/// </summary>
		[EnumTextValue("StartDate")]
		[ColumnEnum("StartDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		StartDate = 6,
		/// <summary>
		/// EndDate : Discount end date.
		/// </summary>
		[EnumTextValue("EndDate")]
		[ColumnEnum("EndDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		EndDate = 7,
		/// <summary>
		/// MinQty : Minimum discount percent allowed.
		/// </summary>
		[EnumTextValue("MinQty")]
		[ColumnEnum("MinQty", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MinQty = 8,
		/// <summary>
		/// MaxQty : Maximum discount percent allowed.
		/// </summary>
		[EnumTextValue("MaxQty")]
		[ColumnEnum("MaxQty", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaxQty = 9,
		/// <summary>
		/// Rowguid : ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		[EnumTextValue("rowguid")]
		[ColumnEnum("rowguid", typeof(System.Guid), System.Data.DbType.Guid, false, true, false)]
		Rowguid = 10,
		/// <summary>
		/// ModifiedDate : Date and time the record was last updated.
		/// </summary>
		[EnumTextValue("ModifiedDate")]
		[ColumnEnum("ModifiedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ModifiedDate = 11
	}//End enum

	#endregion SpecialOfferColumn Enum

} // end namespace
