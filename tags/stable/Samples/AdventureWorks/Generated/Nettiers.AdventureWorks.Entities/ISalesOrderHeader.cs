using System;
using System.ComponentModel;

namespace Nettiers.AdventureWorks.Entities
{
	/// <summary>
	///		The data structure representation of the 'SalesOrderHeader' table via interface.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	public interface ISalesOrderHeader 
	{
		/// <summary>			
		/// SalesOrderID : Primary key.
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SalesOrderHeader"</remarks>
		System.Int32 SalesOrderId { get; set; }
				
		
		
		/// <summary>
		/// RevisionNumber : Incremental number to track changes to the sales order over time.
		/// </summary>
		System.Byte  RevisionNumber  { get; set; }
		
		/// <summary>
		/// OrderDate : Dates the sales order was created.
		/// </summary>
		System.DateTime  OrderDate  { get; set; }
		
		/// <summary>
		/// DueDate : Date the order is due to the customer.
		/// </summary>
		System.DateTime  DueDate  { get; set; }
		
		/// <summary>
		/// ShipDate : Date the order was shipped to the customer.
		/// </summary>
		System.DateTime?  ShipDate  { get; set; }
		
		/// <summary>
		/// Status : Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled
		/// </summary>
		System.Byte  Status  { get; set; }
		
		/// <summary>
		/// OnlineOrderFlag : 0 = Order placed by sales person. 1 = Order placed online by customer.
		/// </summary>
		System.Boolean  OnlineOrderFlag  { get; set; }
		
		/// <summary>
		/// SalesOrderNumber : Unique sales order identification number.
		/// </summary>
		System.String  SalesOrderNumber  { get; set; }
		
		/// <summary>
		/// PurchaseOrderNumber : Customer purchase order number reference. 
		/// </summary>
		System.String  PurchaseOrderNumber  { get; set; }
		
		/// <summary>
		/// AccountNumber : Financial accounting number reference.
		/// </summary>
		System.String  AccountNumber  { get; set; }
		
		/// <summary>
		/// CustomerID : Customer identification number. Foreign key to Customer.CustomerID.
		/// </summary>
		System.Int32  CustomerId  { get; set; }
		
		/// <summary>
		/// ContactID : Customer contact identification number. Foreign key to Contact.ContactID.
		/// </summary>
		System.Int32  ContactId  { get; set; }
		
		/// <summary>
		/// SalesPersonID : Sales person who created the sales order. Foreign key to SalesPerson.SalePersonID.
		/// </summary>
		System.Int32?  SalesPersonId  { get; set; }
		
		/// <summary>
		/// TerritoryID : Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.
		/// </summary>
		System.Int32?  TerritoryId  { get; set; }
		
		/// <summary>
		/// BillToAddressID : Customer billing address. Foreign key to Address.AddressID.
		/// </summary>
		System.Int32  BillToAddressId  { get; set; }
		
		/// <summary>
		/// ShipToAddressID : Customer shipping address. Foreign key to Address.AddressID.
		/// </summary>
		System.Int32  ShipToAddressId  { get; set; }
		
		/// <summary>
		/// ShipMethodID : Shipping method. Foreign key to ShipMethod.ShipMethodID.
		/// </summary>
		System.Int32  ShipMethodId  { get; set; }
		
		/// <summary>
		/// CreditCardID : Credit card identification number. Foreign key to CreditCard.CreditCardID.
		/// </summary>
		System.Int32?  CreditCardId  { get; set; }
		
		/// <summary>
		/// CreditCardApprovalCode : Approval code provided by the credit card company.
		/// </summary>
		System.String  CreditCardApprovalCode  { get; set; }
		
		/// <summary>
		/// CurrencyRateID : Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.
		/// </summary>
		System.Int32?  CurrencyRateId  { get; set; }
		
		/// <summary>
		/// SubTotal : Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.
		/// </summary>
		System.Decimal  SubTotal  { get; set; }
		
		/// <summary>
		/// TaxAmt : Tax amount.
		/// </summary>
		System.Decimal  TaxAmt  { get; set; }
		
		/// <summary>
		/// Freight : Shipping cost.
		/// </summary>
		System.Decimal  Freight  { get; set; }
		
		/// <summary>
		/// TotalDue : Total due from customer. Computed as Subtotal + TaxAmt + Freight.
		/// </summary>
		System.Decimal  TotalDue  { get; set; }
		
		/// <summary>
		/// Comment : Sales representative comments.
		/// </summary>
		System.String  Comment  { get; set; }
		
		/// <summary>
		/// rowguid : ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		System.Guid  Rowguid  { get; set; }
		
		/// <summary>
		/// ModifiedDate : Date and time the record was last updated.
		/// </summary>
		System.DateTime  ModifiedDate  { get; set; }
			
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		System.Object Clone();
		
		#region Data Properties


		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _salesOrderHeaderSalesReasonSalesOrderId
		/// </summary>	
		TList<SalesOrderHeaderSalesReason> SalesOrderHeaderSalesReasonCollection {  get;  set;}	


		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _salesOrderDetailSalesOrderId
		/// </summary>	
		TList<SalesOrderDetail> SalesOrderDetailCollection {  get;  set;}	

		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table salesReasonIdSalesReasonCollectionFromSalesOrderHeaderSalesReason
		/// </summary>	
		TList<SalesReason> SalesReasonIdSalesReasonCollection_From_SalesOrderHeaderSalesReason { get; set; }	

		#endregion Data Properties

	}
}


