using System;
using System.ComponentModel;

namespace Nettiers.AdventureWorks.Entities
{
	/// <summary>
	///		The data structure representation of the 'SalesTerritory' table via interface.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	public interface ISalesTerritory 
	{
		/// <summary>			
		/// TerritoryID : Primary key for SalesTerritory records.
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SalesTerritory"</remarks>
		System.Int32 TerritoryId { get; set; }
				
		
		
		/// <summary>
		/// Name : Sales territory description
		/// </summary>
		System.String  Name  { get; set; }
		
		/// <summary>
		/// CountryRegionCode : ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode. 
		/// </summary>
		System.String  CountryRegionCode  { get; set; }
		
		/// <summary>
		/// Group : Geographic area to which the sales territory belong.
		/// </summary>
		System.String  Group  { get; set; }
		
		/// <summary>
		/// SalesYTD : Sales in the territory year to date.
		/// </summary>
		System.Decimal  SalesYtd  { get; set; }
		
		/// <summary>
		/// SalesLastYear : Sales in the territory the previous year.
		/// </summary>
		System.Decimal  SalesLastYear  { get; set; }
		
		/// <summary>
		/// CostYTD : Business costs in the territory year to date.
		/// </summary>
		System.Decimal  CostYtd  { get; set; }
		
		/// <summary>
		/// CostLastYear : Business costs in the territory the previous year.
		/// </summary>
		System.Decimal  CostLastYear  { get; set; }
		
		/// <summary>
		/// rowguid : ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
		/// </summary>
		System.Guid  Rowguid  { get; set; }
		
		/// <summary>
		/// ModifiedDate : Date and time the record was last updated.
		/// </summary>
		System.DateTime  ModifiedDate  { get; set; }
			
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		System.Object Clone();
		
		#region Data Properties


		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _stateProvinceTerritoryId
		/// </summary>	
		TList<StateProvince> StateProvinceCollection {  get;  set;}	


		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _salesOrderHeaderTerritoryId
		/// </summary>	
		TList<SalesOrderHeader> SalesOrderHeaderCollection {  get;  set;}	


		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _salesPersonTerritoryId
		/// </summary>	
		TList<SalesPerson> SalesPersonCollection {  get;  set;}	


		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _salesTerritoryHistoryTerritoryId
		/// </summary>	
		TList<SalesTerritoryHistory> SalesTerritoryHistoryCollection {  get;  set;}	


		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _customerTerritoryId
		/// </summary>	
		TList<Customer> CustomerCollection {  get;  set;}	

		#endregion Data Properties

	}
}


