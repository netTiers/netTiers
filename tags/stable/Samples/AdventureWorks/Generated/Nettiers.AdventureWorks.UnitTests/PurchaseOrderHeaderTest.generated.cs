

/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file PurchaseOrderHeaderTest.cs instead.
*/

#region Using directives

using System;
using System.Xml;
using System.Xml.Serialization;
using NUnit.Framework;
using Nettiers.AdventureWorks.Entities;
using Nettiers.AdventureWorks.Data;
using Nettiers.AdventureWorks.Data.Bases;

#endregion

namespace Nettiers.AdventureWorks.UnitTests
{
    /// <summary>
    /// Provides tests for the and <see cref="PurchaseOrderHeader"/> objects (entity, collection and repository).
    /// </summary>
   public partial class PurchaseOrderHeaderTest
    {
    	// the PurchaseOrderHeader instance used to test the repository.
		protected PurchaseOrderHeader mock;
		
		// the TList<PurchaseOrderHeader> instance used to test the repository.
		protected TList<PurchaseOrderHeader> mockCollection;
		
		protected static TransactionManager CreateTransaction()
		{
			TransactionManager transactionManager = null;
			if (DataRepository.Provider.IsTransactionSupported)
			{
				transactionManager = DataRepository.Provider.CreateTransaction();
				transactionManager.BeginTransaction(System.Data.IsolationLevel.ReadCommitted);
			}			
			return transactionManager;
		}
		       
        /// <summary>
		/// This method is used to construct the test environment prior to running the tests.
		/// </summary>        
        static public void Init_Generated()
        {		
        	System.Console.WriteLine(new String('-', 75));
			System.Console.WriteLine("-- Testing the PurchaseOrderHeader Entity with the {0} --", Nettiers.AdventureWorks.Data.DataRepository.Provider.Name);
			System.Console.WriteLine(new String('-', 75));
        }
    
    	/// <summary>
		/// This method is used to restore the environment after the tests are completed.
		/// </summary>
		static public void CleanUp_Generated()
        {   		
			System.Console.WriteLine("All Tests Completed");
			System.Console.WriteLine();
        }
    
    
		/// <summary>
		/// Inserts a mock PurchaseOrderHeader entity into the database.
		/// </summary>
		private void Step_01_Insert_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock = CreateMockInstance(tm);
				Assert.IsTrue(DataRepository.PurchaseOrderHeaderProvider.Insert(tm, mock), "Insert failed");
										
				System.Console.WriteLine("DataRepository.PurchaseOrderHeaderProvider.Insert(mock):");			
				System.Console.WriteLine(mock);			
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		
		/// <summary>
		/// Selects all PurchaseOrderHeader objects of the database.
		/// </summary>
		private void Step_02_SelectAll_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				//Find
				int count = -1;
				
				mockCollection = DataRepository.PurchaseOrderHeaderProvider.Find(tm, null, "", 0, 10, out count );
				Assert.IsTrue(count >= 0 && mockCollection != null, "Query Failed to issue Find Command.");
				
				System.Console.WriteLine("DataRepository.PurchaseOrderHeaderProvider.Find():");			
				System.Console.WriteLine(mockCollection);
				
				// GetPaged
				count = -1;
				
				mockCollection = DataRepository.PurchaseOrderHeaderProvider.GetPaged(tm, 0, 10, out count);
				Assert.IsTrue(count >= 0 && mockCollection != null, "Query Failed to issue GetPaged Command.");
				System.Console.WriteLine("#get paged count: " + count.ToString());
			}
		}
		
		
		
		
		/// <summary>
		/// Deep load all PurchaseOrderHeader children.
		/// </summary>
		private void Step_03_DeepLoad_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				int count = -1;
				mock =  CreateMockInstance(tm);
				mockCollection = DataRepository.PurchaseOrderHeaderProvider.GetPaged(tm, 0, 10, out count);
			
				DataRepository.PurchaseOrderHeaderProvider.DeepLoading += new EntityProviderBaseCore<PurchaseOrderHeader, PurchaseOrderHeaderKey>.DeepLoadingEventHandler(
						delegate(object sender, DeepSessionEventArgs e)
						{
							if (e.DeepSession.Count > 3)
								e.Cancel = true;
						}
					);

				if (mockCollection.Count > 0)
				{
					
					DataRepository.PurchaseOrderHeaderProvider.DeepLoad(tm, mockCollection[0]);
					System.Console.WriteLine("PurchaseOrderHeader instance correctly deep loaded at 1 level.");
									
					mockCollection.Add(mock);
					// DataRepository.PurchaseOrderHeaderProvider.DeepSave(tm, mockCollection);
				}
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		/// <summary>
		/// Updates a mock PurchaseOrderHeader entity into the database.
		/// </summary>
		private void Step_04_Update_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				PurchaseOrderHeader mock = CreateMockInstance(tm);
				Assert.IsTrue(DataRepository.PurchaseOrderHeaderProvider.Insert(tm, mock), "Insert failed");
				
				UpdateMockInstance(tm, mock);
				Assert.IsTrue(DataRepository.PurchaseOrderHeaderProvider.Update(tm, mock), "Update failed.");			
				
				System.Console.WriteLine("DataRepository.PurchaseOrderHeaderProvider.Update(mock):");			
				System.Console.WriteLine(mock);
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		
		/// <summary>
		/// Delete the mock PurchaseOrderHeader entity into the database.
		/// </summary>
		private void Step_05_Delete_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock =  (PurchaseOrderHeader)CreateMockInstance(tm);
				DataRepository.PurchaseOrderHeaderProvider.Insert(tm, mock);
			
				Assert.IsTrue(DataRepository.PurchaseOrderHeaderProvider.Delete(tm, mock), "Delete failed.");
				System.Console.WriteLine("DataRepository.PurchaseOrderHeaderProvider.Delete(mock):");			
				System.Console.WriteLine(mock);
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		#region Serialization tests
		
		/// <summary>
		/// Serialize the mock PurchaseOrderHeader entity into a temporary file.
		/// </summary>
		private void Step_06_SerializeEntity_Generated()
		{	
			using (TransactionManager tm = CreateTransaction())
			{
				mock =  CreateMockInstance(tm);
				string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_PurchaseOrderHeader.xml");
			
				EntityHelper.SerializeXml(mock, fileName);
				Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock not found");
					
				System.Console.WriteLine("mock correctly serialized to a temporary file.");			
			}
		}
		
		/// <summary>
		/// Deserialize the mock PurchaseOrderHeader entity from a temporary file.
		/// </summary>
		private void Step_07_DeserializeEntity_Generated()
		{
			string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_PurchaseOrderHeader.xml");
			Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock file not found to deserialize");
			
			using (System.IO.StreamReader sr = System.IO.File.OpenText(fileName))
			{
				object item = EntityHelper.DeserializeEntityXml<PurchaseOrderHeader>(sr.ReadToEnd());
				sr.Close();
			}
			System.IO.File.Delete(fileName);
			
			System.Console.WriteLine("mock correctly deserialized from a temporary file.");
		}
		
		/// <summary>
		/// Serialize a PurchaseOrderHeader collection into a temporary file.
		/// </summary>
		private void Step_08_SerializeCollection_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_PurchaseOrderHeaderCollection.xml");
				
				mock = CreateMockInstance(tm);
				TList<PurchaseOrderHeader> mockCollection = new TList<PurchaseOrderHeader>();
				mockCollection.Add(mock);
			
				EntityHelper.SerializeXml(mockCollection, fileName);
				
				Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock collection not found");
				System.Console.WriteLine("TList<PurchaseOrderHeader> correctly serialized to a temporary file.");					
			}
		}
		
		
		/// <summary>
		/// Deserialize a PurchaseOrderHeader collection from a temporary file.
		/// </summary>
		private void Step_09_DeserializeCollection_Generated()
		{
			string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_PurchaseOrderHeaderCollection.xml");
			Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock file not found to deserialize");
			
			XmlSerializer mySerializer = new XmlSerializer(typeof(TList<PurchaseOrderHeader>)); 
			using (System.IO.FileStream myFileStream = new System.IO.FileStream(fileName,  System.IO.FileMode.Open))
			{
				TList<PurchaseOrderHeader> mockCollection = (TList<PurchaseOrderHeader>) mySerializer.Deserialize(myFileStream);
				myFileStream.Close();
			}
			
			System.IO.File.Delete(fileName);
			System.Console.WriteLine("TList<PurchaseOrderHeader> correctly deserialized from a temporary file.");	
		}
		#endregion
		
		
		
		/// <summary>
		/// Check the foreign key dal methods.
		/// </summary>
		private void Step_10_FK_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				PurchaseOrderHeader entity = CreateMockInstance(tm);
				bool result = DataRepository.PurchaseOrderHeaderProvider.Insert(tm, entity);
				
				Assert.IsTrue(result, "Could Not Test FK, Insert Failed");
				
				TList<PurchaseOrderHeader> t1 = DataRepository.PurchaseOrderHeaderProvider.GetByShipMethodId(tm, entity.ShipMethodId, 0, 10);
			}
		}
		
		
		/// <summary>
		/// Check the indexes dal methods.
		/// </summary>
		private void Step_11_IX_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				PurchaseOrderHeader entity = CreateMockInstance(tm);
				bool result = DataRepository.PurchaseOrderHeaderProvider.Insert(tm, entity);
				
				Assert.IsTrue(result, "Could Not Test IX, Insert Failed");

			
				TList<PurchaseOrderHeader> t0 = DataRepository.PurchaseOrderHeaderProvider.GetByEmployeeId(tm, entity.EmployeeId);
				TList<PurchaseOrderHeader> t1 = DataRepository.PurchaseOrderHeaderProvider.GetByVendorId(tm, entity.VendorId);
				PurchaseOrderHeader t2 = DataRepository.PurchaseOrderHeaderProvider.GetByPurchaseOrderId(tm, entity.PurchaseOrderId);
			}
		}
		
		/// <summary>
		/// Test methods exposed by the EntityHelper class.
		/// </summary>
		private void Step_20_TestEntityHelper_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock = CreateMockInstance(tm);
				
				PurchaseOrderHeader entity = mock.Copy() as PurchaseOrderHeader;
				entity = (PurchaseOrderHeader)mock.Clone();
				Assert.IsTrue(PurchaseOrderHeader.ValueEquals(entity, mock), "Clone is not working");
			}
		}
		
		/// <summary>
		/// Test Find using the Query class
		/// </summary>
		private void Step_30_TestFindByQuery_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				//Insert Mock Instance
				PurchaseOrderHeader mock = CreateMockInstance(tm);
				bool result = DataRepository.PurchaseOrderHeaderProvider.Insert(tm, mock);
				
				Assert.IsTrue(result, "Could Not Test FindByQuery, Insert Failed");

				PurchaseOrderHeaderQuery query = new PurchaseOrderHeaderQuery();
			
				query.AppendEquals(PurchaseOrderHeaderColumn.PurchaseOrderId, mock.PurchaseOrderId.ToString());
				query.AppendEquals(PurchaseOrderHeaderColumn.RevisionNumber, mock.RevisionNumber.ToString());
				query.AppendEquals(PurchaseOrderHeaderColumn.Status, mock.Status.ToString());
				query.AppendEquals(PurchaseOrderHeaderColumn.EmployeeId, mock.EmployeeId.ToString());
				query.AppendEquals(PurchaseOrderHeaderColumn.VendorId, mock.VendorId.ToString());
				query.AppendEquals(PurchaseOrderHeaderColumn.ShipMethodId, mock.ShipMethodId.ToString());
				query.AppendEquals(PurchaseOrderHeaderColumn.OrderDate, mock.OrderDate.ToString());
				if(mock.ShipDate != null)
					query.AppendEquals(PurchaseOrderHeaderColumn.ShipDate, mock.ShipDate.ToString());
				query.AppendEquals(PurchaseOrderHeaderColumn.SubTotal, mock.SubTotal.ToString());
				query.AppendEquals(PurchaseOrderHeaderColumn.TaxAmt, mock.TaxAmt.ToString());
				query.AppendEquals(PurchaseOrderHeaderColumn.Freight, mock.Freight.ToString());
				query.AppendEquals(PurchaseOrderHeaderColumn.ModifiedDate, mock.ModifiedDate.ToString());
				
				TList<PurchaseOrderHeader> results = DataRepository.PurchaseOrderHeaderProvider.Find(tm, query);
				
				Assert.IsTrue(results.Count == 1, "Find is not working correctly.  Failed to find the mock instance");
			}
		}
						
		#region Mock Instance
		///<summary>
		///  Returns a Typed PurchaseOrderHeader Entity with mock values.
		///</summary>
		static public PurchaseOrderHeader CreateMockInstance_Generated(TransactionManager tm)
		{		
			PurchaseOrderHeader mock = new PurchaseOrderHeader();
						
			mock.RevisionNumber = TestUtility.Instance.RandomByte();
			mock.Status = TestUtility.Instance.RandomByte();
			mock.OrderDate = TestUtility.Instance.RandomDateTime();
			mock.ShipDate = TestUtility.Instance.RandomDateTime();
			mock.SubTotal = TestUtility.Instance.RandomShort();
			mock.TaxAmt = TestUtility.Instance.RandomShort();
			mock.Freight = TestUtility.Instance.RandomShort();
			mock.ModifiedDate = TestUtility.Instance.RandomDateTime();
			
			int count0 = 0;
			TList<Employee> _collection0 = DataRepository.EmployeeProvider.GetPaged(tm, 0, 10, out count0);
			//_collection0.Shuffle();
			if (_collection0.Count > 0)
			{
				mock.EmployeeId = _collection0[0].EmployeeId;
						
			}
			int count1 = 0;
			TList<ShipMethod> _collection1 = DataRepository.ShipMethodProvider.GetPaged(tm, 0, 10, out count1);
			//_collection1.Shuffle();
			if (_collection1.Count > 0)
			{
				mock.ShipMethodId = _collection1[0].ShipMethodId;
						
			}
			int count2 = 0;
			TList<Vendor> _collection2 = DataRepository.VendorProvider.GetPaged(tm, 0, 10, out count2);
			//_collection2.Shuffle();
			if (_collection2.Count > 0)
			{
				mock.VendorId = _collection2[0].VendorId;
						
			}
		
			// create a temporary collection and add the item to it
			TList<PurchaseOrderHeader> tempMockCollection = new TList<PurchaseOrderHeader>();
			tempMockCollection.Add(mock);
			tempMockCollection.Remove(mock);
			
		
		   return (PurchaseOrderHeader)mock;
		}
		
		
		///<summary>
		///  Update the Typed PurchaseOrderHeader Entity with modified mock values.
		///</summary>
		static public void UpdateMockInstance_Generated(TransactionManager tm, PurchaseOrderHeader mock)
		{
			mock.RevisionNumber = TestUtility.Instance.RandomByte();
			mock.Status = TestUtility.Instance.RandomByte();
			mock.OrderDate = TestUtility.Instance.RandomDateTime();
			mock.ShipDate = TestUtility.Instance.RandomDateTime();
			mock.SubTotal = TestUtility.Instance.RandomShort();
			mock.TaxAmt = TestUtility.Instance.RandomShort();
			mock.Freight = TestUtility.Instance.RandomShort();
			mock.ModifiedDate = TestUtility.Instance.RandomDateTime();
			
			int count0 = 0;
			TList<Employee> _collection0 = DataRepository.EmployeeProvider.GetPaged(tm, 0, 10, out count0);
			//_collection0.Shuffle();
			if (_collection0.Count > 0)
			{
				mock.EmployeeId = _collection0[0].EmployeeId;
			}
			int count1 = 0;
			TList<ShipMethod> _collection1 = DataRepository.ShipMethodProvider.GetPaged(tm, 0, 10, out count1);
			//_collection1.Shuffle();
			if (_collection1.Count > 0)
			{
				mock.ShipMethodId = _collection1[0].ShipMethodId;
			}
			int count2 = 0;
			TList<Vendor> _collection2 = DataRepository.VendorProvider.GetPaged(tm, 0, 10, out count2);
			//_collection2.Shuffle();
			if (_collection2.Count > 0)
			{
				mock.VendorId = _collection2[0].VendorId;
			}
		}
		#endregion
    }
}
