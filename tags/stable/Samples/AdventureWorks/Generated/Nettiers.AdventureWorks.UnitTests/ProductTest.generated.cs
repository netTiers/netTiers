

/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ProductTest.cs instead.
*/

#region Using directives

using System;
using System.Xml;
using System.Xml.Serialization;
using NUnit.Framework;
using Nettiers.AdventureWorks.Entities;
using Nettiers.AdventureWorks.Data;
using Nettiers.AdventureWorks.Data.Bases;

#endregion

namespace Nettiers.AdventureWorks.UnitTests
{
    /// <summary>
    /// Provides tests for the and <see cref="Product"/> objects (entity, collection and repository).
    /// </summary>
   public partial class ProductTest
    {
    	// the Product instance used to test the repository.
		protected Product mock;
		
		// the TList<Product> instance used to test the repository.
		protected TList<Product> mockCollection;
		
		protected static TransactionManager CreateTransaction()
		{
			TransactionManager transactionManager = null;
			if (DataRepository.Provider.IsTransactionSupported)
			{
				transactionManager = DataRepository.Provider.CreateTransaction();
				transactionManager.BeginTransaction(System.Data.IsolationLevel.ReadCommitted);
			}			
			return transactionManager;
		}
		       
        /// <summary>
		/// This method is used to construct the test environment prior to running the tests.
		/// </summary>        
        static public void Init_Generated()
        {		
        	System.Console.WriteLine(new String('-', 75));
			System.Console.WriteLine("-- Testing the Product Entity with the {0} --", Nettiers.AdventureWorks.Data.DataRepository.Provider.Name);
			System.Console.WriteLine(new String('-', 75));
        }
    
    	/// <summary>
		/// This method is used to restore the environment after the tests are completed.
		/// </summary>
		static public void CleanUp_Generated()
        {   		
			System.Console.WriteLine("All Tests Completed");
			System.Console.WriteLine();
        }
    
    
		/// <summary>
		/// Inserts a mock Product entity into the database.
		/// </summary>
		private void Step_01_Insert_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock = CreateMockInstance(tm);
				Assert.IsTrue(DataRepository.ProductProvider.Insert(tm, mock), "Insert failed");
										
				System.Console.WriteLine("DataRepository.ProductProvider.Insert(mock):");			
				System.Console.WriteLine(mock);			
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		
		/// <summary>
		/// Selects all Product objects of the database.
		/// </summary>
		private void Step_02_SelectAll_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				//Find
				int count = -1;
				
				mockCollection = DataRepository.ProductProvider.Find(tm, null, "", 0, 10, out count );
				Assert.IsTrue(count >= 0 && mockCollection != null, "Query Failed to issue Find Command.");
				
				System.Console.WriteLine("DataRepository.ProductProvider.Find():");			
				System.Console.WriteLine(mockCollection);
				
				// GetPaged
				count = -1;
				
				mockCollection = DataRepository.ProductProvider.GetPaged(tm, 0, 10, out count);
				Assert.IsTrue(count >= 0 && mockCollection != null, "Query Failed to issue GetPaged Command.");
				System.Console.WriteLine("#get paged count: " + count.ToString());
			}
		}
		
		
		
		
		/// <summary>
		/// Deep load all Product children.
		/// </summary>
		private void Step_03_DeepLoad_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				int count = -1;
				mock =  CreateMockInstance(tm);
				mockCollection = DataRepository.ProductProvider.GetPaged(tm, 0, 10, out count);
			
				DataRepository.ProductProvider.DeepLoading += new EntityProviderBaseCore<Product, ProductKey>.DeepLoadingEventHandler(
						delegate(object sender, DeepSessionEventArgs e)
						{
							if (e.DeepSession.Count > 3)
								e.Cancel = true;
						}
					);

				if (mockCollection.Count > 0)
				{
					
					DataRepository.ProductProvider.DeepLoad(tm, mockCollection[0]);
					System.Console.WriteLine("Product instance correctly deep loaded at 1 level.");
									
					mockCollection.Add(mock);
					// DataRepository.ProductProvider.DeepSave(tm, mockCollection);
				}
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		/// <summary>
		/// Updates a mock Product entity into the database.
		/// </summary>
		private void Step_04_Update_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				Product mock = CreateMockInstance(tm);
				Assert.IsTrue(DataRepository.ProductProvider.Insert(tm, mock), "Insert failed");
				
				UpdateMockInstance(tm, mock);
				Assert.IsTrue(DataRepository.ProductProvider.Update(tm, mock), "Update failed.");			
				
				System.Console.WriteLine("DataRepository.ProductProvider.Update(mock):");			
				System.Console.WriteLine(mock);
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		
		/// <summary>
		/// Delete the mock Product entity into the database.
		/// </summary>
		private void Step_05_Delete_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock =  (Product)CreateMockInstance(tm);
				DataRepository.ProductProvider.Insert(tm, mock);
			
				Assert.IsTrue(DataRepository.ProductProvider.Delete(tm, mock), "Delete failed.");
				System.Console.WriteLine("DataRepository.ProductProvider.Delete(mock):");			
				System.Console.WriteLine(mock);
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		#region Serialization tests
		
		/// <summary>
		/// Serialize the mock Product entity into a temporary file.
		/// </summary>
		private void Step_06_SerializeEntity_Generated()
		{	
			using (TransactionManager tm = CreateTransaction())
			{
				mock =  CreateMockInstance(tm);
				string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_Product.xml");
			
				EntityHelper.SerializeXml(mock, fileName);
				Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock not found");
					
				System.Console.WriteLine("mock correctly serialized to a temporary file.");			
			}
		}
		
		/// <summary>
		/// Deserialize the mock Product entity from a temporary file.
		/// </summary>
		private void Step_07_DeserializeEntity_Generated()
		{
			string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_Product.xml");
			Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock file not found to deserialize");
			
			using (System.IO.StreamReader sr = System.IO.File.OpenText(fileName))
			{
				object item = EntityHelper.DeserializeEntityXml<Product>(sr.ReadToEnd());
				sr.Close();
			}
			System.IO.File.Delete(fileName);
			
			System.Console.WriteLine("mock correctly deserialized from a temporary file.");
		}
		
		/// <summary>
		/// Serialize a Product collection into a temporary file.
		/// </summary>
		private void Step_08_SerializeCollection_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_ProductCollection.xml");
				
				mock = CreateMockInstance(tm);
				TList<Product> mockCollection = new TList<Product>();
				mockCollection.Add(mock);
			
				EntityHelper.SerializeXml(mockCollection, fileName);
				
				Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock collection not found");
				System.Console.WriteLine("TList<Product> correctly serialized to a temporary file.");					
			}
		}
		
		
		/// <summary>
		/// Deserialize a Product collection from a temporary file.
		/// </summary>
		private void Step_09_DeserializeCollection_Generated()
		{
			string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_ProductCollection.xml");
			Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock file not found to deserialize");
			
			XmlSerializer mySerializer = new XmlSerializer(typeof(TList<Product>)); 
			using (System.IO.FileStream myFileStream = new System.IO.FileStream(fileName,  System.IO.FileMode.Open))
			{
				TList<Product> mockCollection = (TList<Product>) mySerializer.Deserialize(myFileStream);
				myFileStream.Close();
			}
			
			System.IO.File.Delete(fileName);
			System.Console.WriteLine("TList<Product> correctly deserialized from a temporary file.");	
		}
		#endregion
		
		
		
		/// <summary>
		/// Check the foreign key dal methods.
		/// </summary>
		private void Step_10_FK_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				Product entity = CreateMockInstance(tm);
				bool result = DataRepository.ProductProvider.Insert(tm, entity);
				
				Assert.IsTrue(result, "Could Not Test FK, Insert Failed");
				
				TList<Product> t0 = DataRepository.ProductProvider.GetByProductModelId(tm, entity.ProductModelId, 0, 10);
				TList<Product> t1 = DataRepository.ProductProvider.GetByProductSubcategoryId(tm, entity.ProductSubcategoryId, 0, 10);
				TList<Product> t2 = DataRepository.ProductProvider.GetBySizeUnitMeasureCode(tm, entity.SizeUnitMeasureCode, 0, 10);
				TList<Product> t3 = DataRepository.ProductProvider.GetByWeightUnitMeasureCode(tm, entity.WeightUnitMeasureCode, 0, 10);
			}
		}
		
		
		/// <summary>
		/// Check the indexes dal methods.
		/// </summary>
		private void Step_11_IX_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				Product entity = CreateMockInstance(tm);
				bool result = DataRepository.ProductProvider.Insert(tm, entity);
				
				Assert.IsTrue(result, "Could Not Test IX, Insert Failed");

			
				Product t0 = DataRepository.ProductProvider.GetByName(tm, entity.Name);
				Product t1 = DataRepository.ProductProvider.GetByProductNumber(tm, entity.ProductNumber);
				Product t2 = DataRepository.ProductProvider.GetByRowguid(tm, entity.Rowguid);
				Product t3 = DataRepository.ProductProvider.GetByProductId(tm, entity.ProductId);
			}
		}
		
		/// <summary>
		/// Test methods exposed by the EntityHelper class.
		/// </summary>
		private void Step_20_TestEntityHelper_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock = CreateMockInstance(tm);
				
				Product entity = mock.Copy() as Product;
				entity = (Product)mock.Clone();
				Assert.IsTrue(Product.ValueEquals(entity, mock), "Clone is not working");
			}
		}
		
		/// <summary>
		/// Test Find using the Query class
		/// </summary>
		private void Step_30_TestFindByQuery_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				//Insert Mock Instance
				Product mock = CreateMockInstance(tm);
				bool result = DataRepository.ProductProvider.Insert(tm, mock);
				
				Assert.IsTrue(result, "Could Not Test FindByQuery, Insert Failed");

				ProductQuery query = new ProductQuery();
			
				query.AppendEquals(ProductColumn.ProductId, mock.ProductId.ToString());
				query.AppendEquals(ProductColumn.Name, mock.Name.ToString());
				query.AppendEquals(ProductColumn.ProductNumber, mock.ProductNumber.ToString());
				query.AppendEquals(ProductColumn.MakeFlag, mock.MakeFlag.ToString());
				query.AppendEquals(ProductColumn.FinishedGoodsFlag, mock.FinishedGoodsFlag.ToString());
				if(mock.Color != null)
					query.AppendEquals(ProductColumn.Color, mock.Color.ToString());
				query.AppendEquals(ProductColumn.SafetyStockLevel, mock.SafetyStockLevel.ToString());
				query.AppendEquals(ProductColumn.ReorderPoint, mock.ReorderPoint.ToString());
				query.AppendEquals(ProductColumn.StandardCost, mock.StandardCost.ToString());
				query.AppendEquals(ProductColumn.ListPrice, mock.ListPrice.ToString());
				if(mock.Size != null)
					query.AppendEquals(ProductColumn.Size, mock.Size.ToString());
				if(mock.SizeUnitMeasureCode != null)
					query.AppendEquals(ProductColumn.SizeUnitMeasureCode, mock.SizeUnitMeasureCode.ToString());
				if(mock.WeightUnitMeasureCode != null)
					query.AppendEquals(ProductColumn.WeightUnitMeasureCode, mock.WeightUnitMeasureCode.ToString());
				if(mock.Weight != null)
					query.AppendEquals(ProductColumn.Weight, mock.Weight.ToString());
				query.AppendEquals(ProductColumn.DaysToManufacture, mock.DaysToManufacture.ToString());
				if(mock.ProductLine != null)
					query.AppendEquals(ProductColumn.ProductLine, mock.ProductLine.ToString());
				if(mock.SafeNameClass != null)
					query.AppendEquals(ProductColumn.SafeNameClass, mock.SafeNameClass.ToString());
				if(mock.Style != null)
					query.AppendEquals(ProductColumn.Style, mock.Style.ToString());
				if(mock.ProductSubcategoryId != null)
					query.AppendEquals(ProductColumn.ProductSubcategoryId, mock.ProductSubcategoryId.ToString());
				if(mock.ProductModelId != null)
					query.AppendEquals(ProductColumn.ProductModelId, mock.ProductModelId.ToString());
				query.AppendEquals(ProductColumn.SellStartDate, mock.SellStartDate.ToString());
				if(mock.SellEndDate != null)
					query.AppendEquals(ProductColumn.SellEndDate, mock.SellEndDate.ToString());
				if(mock.DiscontinuedDate != null)
					query.AppendEquals(ProductColumn.DiscontinuedDate, mock.DiscontinuedDate.ToString());
				query.AppendEquals(ProductColumn.Rowguid, mock.Rowguid.ToString());
				query.AppendEquals(ProductColumn.ModifiedDate, mock.ModifiedDate.ToString());
				
				TList<Product> results = DataRepository.ProductProvider.Find(tm, query);
				
				Assert.IsTrue(results.Count == 1, "Find is not working correctly.  Failed to find the mock instance");
			}
		}
						
		#region Mock Instance
		///<summary>
		///  Returns a Typed Product Entity with mock values.
		///</summary>
		static public Product CreateMockInstance_Generated(TransactionManager tm)
		{		
			Product mock = new Product();
						
			mock.Name = TestUtility.Instance.RandomString(24, false);;
			mock.ProductNumber = TestUtility.Instance.RandomString(11, false);;
			mock.MakeFlag = TestUtility.Instance.RandomBoolean();
			mock.FinishedGoodsFlag = TestUtility.Instance.RandomBoolean();
			mock.Color = TestUtility.Instance.RandomString(6, false);;
			mock.SafetyStockLevel = TestUtility.Instance.RandomShort();
			mock.ReorderPoint = TestUtility.Instance.RandomShort();
			mock.StandardCost = TestUtility.Instance.RandomShort();
			mock.ListPrice = TestUtility.Instance.RandomShort();
			mock.Size = TestUtility.Instance.RandomString(5, false);;
			mock.Weight = (decimal)TestUtility.Instance.RandomShort();
			mock.DaysToManufacture = TestUtility.Instance.RandomNumber();
			mock.ProductLine = TestUtility.Instance.RandomString(2, false);;
			mock.SafeNameClass = TestUtility.Instance.RandomString(2, false);;
			mock.Style = TestUtility.Instance.RandomString(2, false);;
			mock.SellStartDate = TestUtility.Instance.RandomDateTime();
			mock.SellEndDate = TestUtility.Instance.RandomDateTime();
			mock.DiscontinuedDate = TestUtility.Instance.RandomDateTime();
			mock.ModifiedDate = TestUtility.Instance.RandomDateTime();
			
			int count0 = 0;
			TList<ProductModel> _collection0 = DataRepository.ProductModelProvider.GetPaged(tm, 0, 10, out count0);
			//_collection0.Shuffle();
			if (_collection0.Count > 0)
			{
				mock.ProductModelId = _collection0[0].ProductModelId;
						
			}
			int count1 = 0;
			TList<ProductSubcategory> _collection1 = DataRepository.ProductSubcategoryProvider.GetPaged(tm, 0, 10, out count1);
			//_collection1.Shuffle();
			if (_collection1.Count > 0)
			{
				mock.ProductSubcategoryId = _collection1[0].ProductSubcategoryId;
						
			}
			int count2 = 0;
			TList<UnitMeasure> _collection2 = DataRepository.UnitMeasureProvider.GetPaged(tm, 0, 10, out count2);
			//_collection2.Shuffle();
			if (_collection2.Count > 0)
			{
				mock.SizeUnitMeasureCode = _collection2[0].UnitMeasureCode;
						
			}
			int count3 = 0;
			TList<UnitMeasure> _collection3 = DataRepository.UnitMeasureProvider.GetPaged(tm, 0, 10, out count3);
			//_collection3.Shuffle();
			if (_collection3.Count > 0)
			{
				mock.WeightUnitMeasureCode = _collection3[0].UnitMeasureCode;
						
			}
		
			// create a temporary collection and add the item to it
			TList<Product> tempMockCollection = new TList<Product>();
			tempMockCollection.Add(mock);
			tempMockCollection.Remove(mock);
			
		
		   return (Product)mock;
		}
		
		
		///<summary>
		///  Update the Typed Product Entity with modified mock values.
		///</summary>
		static public void UpdateMockInstance_Generated(TransactionManager tm, Product mock)
		{
			mock.Name = TestUtility.Instance.RandomString(24, false);;
			mock.ProductNumber = TestUtility.Instance.RandomString(11, false);;
			mock.MakeFlag = TestUtility.Instance.RandomBoolean();
			mock.FinishedGoodsFlag = TestUtility.Instance.RandomBoolean();
			mock.Color = TestUtility.Instance.RandomString(6, false);;
			mock.SafetyStockLevel = TestUtility.Instance.RandomShort();
			mock.ReorderPoint = TestUtility.Instance.RandomShort();
			mock.StandardCost = TestUtility.Instance.RandomShort();
			mock.ListPrice = TestUtility.Instance.RandomShort();
			mock.Size = TestUtility.Instance.RandomString(5, false);;
			mock.Weight = (decimal)TestUtility.Instance.RandomShort();
			mock.DaysToManufacture = TestUtility.Instance.RandomNumber();
			mock.ProductLine = TestUtility.Instance.RandomString(2, false);;
			mock.SafeNameClass = TestUtility.Instance.RandomString(2, false);;
			mock.Style = TestUtility.Instance.RandomString(2, false);;
			mock.SellStartDate = TestUtility.Instance.RandomDateTime();
			mock.SellEndDate = TestUtility.Instance.RandomDateTime();
			mock.DiscontinuedDate = TestUtility.Instance.RandomDateTime();
			mock.ModifiedDate = TestUtility.Instance.RandomDateTime();
			
			int count0 = 0;
			TList<ProductModel> _collection0 = DataRepository.ProductModelProvider.GetPaged(tm, 0, 10, out count0);
			//_collection0.Shuffle();
			if (_collection0.Count > 0)
			{
				mock.ProductModelId = _collection0[0].ProductModelId;
			}
			int count1 = 0;
			TList<ProductSubcategory> _collection1 = DataRepository.ProductSubcategoryProvider.GetPaged(tm, 0, 10, out count1);
			//_collection1.Shuffle();
			if (_collection1.Count > 0)
			{
				mock.ProductSubcategoryId = _collection1[0].ProductSubcategoryId;
			}
			int count2 = 0;
			TList<UnitMeasure> _collection2 = DataRepository.UnitMeasureProvider.GetPaged(tm, 0, 10, out count2);
			//_collection2.Shuffle();
			if (_collection2.Count > 0)
			{
				mock.SizeUnitMeasureCode = _collection2[0].UnitMeasureCode;
			}
			int count3 = 0;
			TList<UnitMeasure> _collection3 = DataRepository.UnitMeasureProvider.GetPaged(tm, 0, 10, out count3);
			//_collection3.Shuffle();
			if (_collection3.Count > 0)
			{
				mock.WeightUnitMeasureCode = _collection3[0].UnitMeasureCode;
			}
		}
		#endregion
    }
}
